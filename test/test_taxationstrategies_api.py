# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import os
import sys
import unittest

import swagger_client
from swagger_client.rest import ApiException
from swagger_client.apis.taxationstrategies_api import TaxationstrategiesApi


class TestTaxationstrategiesApi(unittest.TestCase):
    """ TaxationstrategiesApi unit test stubs """

    def setUp(self):
        self.api = swagger_client.apis.taxationstrategies_api.TaxationstrategiesApi()

    def tearDown(self):
        pass

    def test_create_taxation_strategy(self):
        """
        Test case for create_taxation_strategy

        <p>Add a new tax or schedule changes in an existing tax.</p><p>Add a new tax by providing the location and tax percentage. To schedule a tax change specify the ID of the current Tax. A new version of the will be created <i>validFrom</i> the specified date, the existing tax <i>validTill</i> the start of this new tax.</p>
        """
        pass

    def test_get_all_taxation_strategies(self):
        """
        Test case for get_all_taxation_strategies

        Returns a collection of all taxation-strategies. By default 10 values are returned. Records are returned in natural order.
        """
        pass

    def test_get_taxation_strategy_by_consistent_id(self):
        """
        Test case for get_taxation_strategy_by_consistent_id

        Returns the tax currently being applied for the taxation-strategy-ID. To return schedule or historic tax changes the include_retired query parameter should be set to true.
        """
        pass

    def test_get_taxation_strategy_by_country(self):
        """
        Test case for get_taxation_strategy_by_country

        Returns a collection of taxation-strategies, specified by the country parameter. By default 10 values are returned. Records are returned in natural order. To return schedule or historic tax changes the include_retired query parameter should be set to true.
        """
        pass

    def test_get_taxation_strategy_by_currency(self):
        """
        Test case for get_taxation_strategy_by_currency

        Returns a collection of taxation-strategies, specified by the currency parameter. By default 10 values are returned. Records are returned in natural order.
        """
        pass

    def test_get_taxation_strategy_by_province(self):
        """
        Test case for get_taxation_strategy_by_province

        Returns a collection of taxation-strategies, specified by the province parameter. By default 10 values are returned. Records are returned in natural order.
        """
        pass

    def test_get_taxation_strategy_by_version_id(self):
        """
        Test case for get_taxation_strategy_by_version_id

        Returns a single taxation-strategy, specified by the taxation-strategy-ID parameter.
        """
        pass

    def test_retire_taxation_strategy(self):
        """
        Test case for retire_taxation_strategy

        Retires the taxation-strategy specified by taxation-strategy-ID parameter. Only the version of the tax which has an unbounded (null) validTill can be removed. Removing a tax change will make the previous tax come into effect. For example if you have a Tax in January and 5% and a new tax at 7% from February onwards, you can remove the February tax. Remove the February tax will re-instate the January tax.
        """
        pass

    def test_update_taxation_strategy(self):
        """
        Test case for update_taxation_strategy

        Update a tax.
        """
        pass


if __name__ == '__main__':
    unittest.main()
