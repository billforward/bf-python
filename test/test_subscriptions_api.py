# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import os
import sys
import unittest

import billforward
from billforward.rest import ApiException
from billforward.apis.subscriptions_api import SubscriptionsApi


class TestSubscriptionsApi(unittest.TestCase):
    """ SubscriptionsApi unit test stubs """

    def setUp(self):
        self.api = billforward.apis.subscriptions_api.SubscriptionsApi()

    def tearDown(self):
        pass

    def test_add_charge_to_subscription(self):
        """
        Test case for add_charge_to_subscription

        Creates a charge on the specified subscription.
        """
        pass

    def test_add_coupon_to_subscription(self):
        """
        Test case for add_coupon_to_subscription

        Applies a coupon to a subscription.
        """
        pass

    def test_add_credit_note_to_subscription(self):
        """
        Test case for add_credit_note_to_subscription

        Creates a credit-note which may be used by only the specified subscription.
        """
        pass

    def test_add_payment_method_to_subscription(self):
        """
        Test case for add_payment_method_to_subscription

        Enables the payment method to pay invoices of this subscription.
        """
        pass

    def test_advance_subscription(self):
        """
        Test case for advance_subscription

        Advance the subscription through time.
        """
        pass

    def test_available_payment_methods_for_subscription(self):
        """
        Test case for available_payment_methods_for_subscription

        Returns all available payment methods for the specified subscription. By default 10 values are returned. Records are returned in natural order.
        """
        pass

    def test_batch_create_subscriptions(self):
        """
        Test case for batch_create_subscriptions

        Create multiple subscriptions.
        """
        pass

    def test_cancel_subscription(self):
        """
        Test case for cancel_subscription

        Retires the subscription specified by the subscription-ID parameter. Retiring a subscription causes it to cancel based on the specified retirement settings for the product.
        """
        pass

    def test_create_aggregating_subscription(self):
        """
        Test case for create_aggregating_subscription

        Create an aggregating subscription.
        """
        pass

    def test_create_subscription(self):
        """
        Test case for create_subscription

        Create a new subscription.
        """
        pass

    def test_create_subscription_v2(self):
        """
        Test case for create_subscription_v2

        Create a subscription (V2).
        """
        pass

    def test_create_timer(self):
        """
        Test case for create_timer

        Create a timer for a subscription event.
        """
        pass

    def test_delete_metadata_for_subscription(self):
        """
        Test case for delete_metadata_for_subscription

        Remove any associated metadata.
        """
        pass

    def test_freeze_subscription(self):
        """
        Test case for freeze_subscription

        Freeze the subscription.
        """
        pass

    def test_get_all_subscriptions(self):
        """
        Test case for get_all_subscriptions

        Retrieves a collection of all subscriptions. By default 10 values are returned. Records are returned in natural order.
        """
        pass

    def test_get_applicable_coupons_for_subscription(self):
        """
        Test case for get_applicable_coupons_for_subscription

        Retrieves a collection of the coupons which can be applied to this subscription.
        """
        pass

    def test_get_available_credit_subscription(self):
        """
        Test case for get_available_credit_subscription

        Returns all available credit-notes for the specified subscription. By default 10 values are returned. Records are returned in natural order.
        """
        pass

    def test_get_charges_on_subscription(self):
        """
        Test case for get_charges_on_subscription

        Returns all charges for the specified subscription. By default 10 values are returned. Records are returned in natural order.
        """
        pass

    def test_get_children_of_subscription(self):
        """
        Test case for get_children_of_subscription

        Return all entities whose invoices will be aggregated by the specified subscription By default 10 values are returned. Records are returned in natural order.
        """
        pass

    def test_get_coupons_on_subscription(self):
        """
        Test case for get_coupons_on_subscription

        Retrieves a collection of the coupons and the unique codes currently applied to the subscription.
        """
        pass

    def test_get_invoices_for_subscription_by_state(self):
        """
        Test case for get_invoices_for_subscription_by_state

        Retrieves a collection of invoice objects of the specified state for the given subscription. By default 10 values are returned. Records are returned in natural order.
        """
        pass

    def test_get_metadata_for_subscription(self):
        """
        Test case for get_metadata_for_subscription

        Retrieve any associated metadata.
        """
        pass

    def test_get_parent_subscription(self):
        """
        Test case for get_parent_subscription

        Return the parent of the given subscription.
        """
        pass

    def test_get_pricing_component_values_of_subscription(self):
        """
        Test case for get_pricing_component_values_of_subscription

        Gets the subscription's current pricing-component values.
        """
        pass

    def test_get_subscription_by_account_id(self):
        """
        Test case for get_subscription_by_account_id

        Retrieves a collection of subscriptions, specified by the account-ID parameter. By default 10 values are returned. Records are returned in natural order.
        """
        pass

    def test_get_subscription_by_id(self):
        """
        Test case for get_subscription_by_id

        Retrieves a single subscription, specified by the ID parameter.
        """
        pass

    def test_get_subscription_by_product_id(self):
        """
        Test case for get_subscription_by_product_id

        Retrieves a collection of subscriptions, specified by the product-ID parameter. By default 10 values are returned. Records are returned in natural order.
        """
        pass

    def test_get_subscription_by_product_rate_plan_id(self):
        """
        Test case for get_subscription_by_product_rate_plan_id

        Retrieves a collection of subscriptions, specified by the product-rate-plan-ID parameter. By default 10 values are returned. Records are returned in natural order.
        """
        pass

    def test_get_subscription_by_state(self):
        """
        Test case for get_subscription_by_state

        Retrieves a collection of subscriptions, specified by the state parameter. By default 10 values are returned. Records are returned in natural order.
        """
        pass

    def test_get_subscription_by_version_id(self):
        """
        Test case for get_subscription_by_version_id

        Retrieves a single subscription, specified by the version-ID parameter.
        """
        pass

    def test_get_subscriptions_by_initial_period_start(self):
        """
        Test case for get_subscriptions_by_initial_period_start

        Retrieves a collection of subscription objects with period-end times within the period specified by the lower-threshold and upper-threshold parameters. By default 10 values are returned. Records are returned in natural order.
        """
        pass

    def test_get_subscriptions_by_period_end(self):
        """
        Test case for get_subscriptions_by_period_end

        Retrieves a collection of subscription objects with period-end times within the period specified by the lower-threshold and upper-threshold parameters. By default 10 values are returned. Records are returned in natural order.
        """
        pass

    def test_get_subscriptions_by_period_start(self):
        """
        Test case for get_subscriptions_by_period_start

        Retrieves a collection of subscription objects with period-start times within the period specified by the lower-threshold and upper-threshold parameters. By default 10 values are returned. Records are returned in natural order.
        """
        pass

    def test_get_subscriptions_by_successful_periods(self):
        """
        Test case for get_subscriptions_by_successful_periods

        Retrieves a collection of subscription objects whose successful periods count falls within the range specified by the lower-threshold and upper-threshold parameters. By default 10 values are returned. Records are returned in natural order.
        """
        pass

    def test_get_swagger_subscription(self):
        """
        Test case for get_swagger_subscription

        
        """
        pass

    def test_get_timers_for_subscription(self):
        """
        Test case for get_timers_for_subscription

        Retrieves a collection timer amendments for the specified subscription.. By default 10 values are returned. Records are returned in natural order.
        """
        pass

    def test_import_subscription(self):
        """
        Test case for import_subscription

        Import a subscription.
        """
        pass

    def test_invoice_charges_on_subscription(self):
        """
        Test case for invoice_charges_on_subscription

        Invoice any outstanding charges for the subscription.
        """
        pass

    def test_migrate_subscription(self):
        """
        Test case for migrate_subscription

        Migrate the subscription to a new plan.
        """
        pass

    def test_remove_coupon_from_subscription(self):
        """
        Test case for remove_coupon_from_subscription

        Removes the coupon from the subscription.
        """
        pass

    def test_remove_credit_from_subscription(self):
        """
        Test case for remove_credit_from_subscription

        Decrease the amount of credit available to the specified subscription.
        """
        pass

    def test_remove_payment_method_from_subscription(self):
        """
        Test case for remove_payment_method_from_subscription

        Removes the specified payment method for the given subscription.
        """
        pass

    def test_remove_pricing_component_value_change_from_subscription(self):
        """
        Test case for remove_pricing_component_value_change_from_subscription

        Discards from the subscription any scheduled changes in the value of the specified pricing-component.
        """
        pass

    def test_resume_subscription(self):
        """
        Test case for resume_subscription

        Resume the frozen subscription.
        """
        pass

    def test_revive_subscription(self):
        """
        Test case for revive_subscription

        Revives a cancelled subscription and returns it to its previous state
        """
        pass

    def test_set_metadata_for_subscription(self):
        """
        Test case for set_metadata_for_subscription

        Remove any existing metadata keys and create the provided data.
        """
        pass

    def test_set_pricing_component_value_on_subscription(self):
        """
        Test case for set_pricing_component_value_on_subscription

        Sets upon this subscription a new value for the specified pricing-component without performing an upgrade.
        """
        pass

    def test_set_pricing_component_value_on_subscription_v2(self):
        """
        Test case for set_pricing_component_value_on_subscription_v2

        Upgrades/downgrades this subscription to some new value for the specified pricing-component.
        """
        pass

    def test_update_subscription(self):
        """
        Test case for update_subscription

        Update a subscription.
        """
        pass

    def test_update_subscription_v2(self):
        """
        Test case for update_subscription_v2

        Update a subscription (V2).
        """
        pass

    def test_upsert_metadata_for_subscription(self):
        """
        Test case for upsert_metadata_for_subscription

        Update any existing metadata key-values and insert any new key-values, no keys will be removed.
        """
        pass


if __name__ == '__main__':
    unittest.main()
