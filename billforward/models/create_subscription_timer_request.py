# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateSubscriptionTimerRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'organization_id': 'str',
        'period': 'str',
        'duration': 'int',
        'direction': 'str',
        'event': 'str'
    }

    attribute_map = {
        'created': 'created',
        'organization_id': 'organizationID',
        'period': 'period',
        'duration': 'duration',
        'direction': 'direction',
        'event': 'event'
    }

    def __init__(self, created=None, organization_id=None, period=None, duration=None, direction=None, event=None):  # noqa: E501
        """CreateSubscriptionTimerRequest - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._organization_id = None
        self._period = None
        self._duration = None
        self._direction = None
        self._event = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if organization_id is not None:
            self.organization_id = organization_id
        if period is not None:
            self.period = period
        if duration is not None:
            self.duration = duration
        if direction is not None:
            self.direction = direction
        if event is not None:
            self.event = event

    @property
    def created(self):
        """Gets the created of this CreateSubscriptionTimerRequest.  # noqa: E501


        :return: The created of this CreateSubscriptionTimerRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this CreateSubscriptionTimerRequest.


        :param created: The created of this CreateSubscriptionTimerRequest.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def organization_id(self):
        """Gets the organization_id of this CreateSubscriptionTimerRequest.  # noqa: E501


        :return: The organization_id of this CreateSubscriptionTimerRequest.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this CreateSubscriptionTimerRequest.


        :param organization_id: The organization_id of this CreateSubscriptionTimerRequest.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def period(self):
        """Gets the period of this CreateSubscriptionTimerRequest.  # noqa: E501


        :return: The period of this CreateSubscriptionTimerRequest.  # noqa: E501
        :rtype: str
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this CreateSubscriptionTimerRequest.


        :param period: The period of this CreateSubscriptionTimerRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Minutes", "Hours", "Days"]  # noqa: E501
        if period not in allowed_values:
            raise ValueError(
                "Invalid value for `period` ({0}), must be one of {1}"  # noqa: E501
                .format(period, allowed_values)
            )

        self._period = period

    @property
    def duration(self):
        """Gets the duration of this CreateSubscriptionTimerRequest.  # noqa: E501


        :return: The duration of this CreateSubscriptionTimerRequest.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this CreateSubscriptionTimerRequest.


        :param duration: The duration of this CreateSubscriptionTimerRequest.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def direction(self):
        """Gets the direction of this CreateSubscriptionTimerRequest.  # noqa: E501


        :return: The direction of this CreateSubscriptionTimerRequest.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this CreateSubscriptionTimerRequest.


        :param direction: The direction of this CreateSubscriptionTimerRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Before", "After"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"  # noqa: E501
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def event(self):
        """Gets the event of this CreateSubscriptionTimerRequest.  # noqa: E501


        :return: The event of this CreateSubscriptionTimerRequest.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this CreateSubscriptionTimerRequest.


        :param event: The event of this CreateSubscriptionTimerRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["TrialExpiry", "SubscriptionExpiry", "PeriodEnd"]  # noqa: E501
        if event not in allowed_values:
            raise ValueError(
                "Invalid value for `event` ({0}), must be one of {1}"  # noqa: E501
                .format(event, allowed_values)
            )

        self._event = event

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateSubscriptionTimerRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateSubscriptionTimerRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
