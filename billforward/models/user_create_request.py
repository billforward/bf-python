# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'changed_by': 'str',
        'organization_id': 'str',
        'email': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'company_name': 'str',
        'password': 'str',
        'roles': 'list[str]',
        'send_email': 'bool',
        'id': 'str'
    }

    attribute_map = {
        'created': 'created',
        'changed_by': 'changedBy',
        'organization_id': 'organizationID',
        'email': 'email',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'company_name': 'companyName',
        'password': 'password',
        'roles': 'roles',
        'send_email': 'sendEmail',
        'id': 'id'
    }

    def __init__(self, created=None, changed_by=None, organization_id=None, email=None, first_name=None, last_name=None, company_name=None, password=None, roles=None, send_email=None, id=None):  # noqa: E501
        """UserCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._changed_by = None
        self._organization_id = None
        self._email = None
        self._first_name = None
        self._last_name = None
        self._company_name = None
        self._password = None
        self._roles = None
        self._send_email = None
        self._id = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if changed_by is not None:
            self.changed_by = changed_by
        if organization_id is not None:
            self.organization_id = organization_id
        if email is not None:
            self.email = email
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if company_name is not None:
            self.company_name = company_name
        if password is not None:
            self.password = password
        if roles is not None:
            self.roles = roles
        if send_email is not None:
            self.send_email = send_email
        if id is not None:
            self.id = id

    @property
    def created(self):
        """Gets the created of this UserCreateRequest.  # noqa: E501


        :return: The created of this UserCreateRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this UserCreateRequest.


        :param created: The created of this UserCreateRequest.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """Gets the changed_by of this UserCreateRequest.  # noqa: E501


        :return: The changed_by of this UserCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """Sets the changed_by of this UserCreateRequest.


        :param changed_by: The changed_by of this UserCreateRequest.  # noqa: E501
        :type: str
        """

        self._changed_by = changed_by

    @property
    def organization_id(self):
        """Gets the organization_id of this UserCreateRequest.  # noqa: E501


        :return: The organization_id of this UserCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this UserCreateRequest.


        :param organization_id: The organization_id of this UserCreateRequest.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def email(self):
        """Gets the email of this UserCreateRequest.  # noqa: E501


        :return: The email of this UserCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserCreateRequest.


        :param email: The email of this UserCreateRequest.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this UserCreateRequest.  # noqa: E501


        :return: The first_name of this UserCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserCreateRequest.


        :param first_name: The first_name of this UserCreateRequest.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UserCreateRequest.  # noqa: E501


        :return: The last_name of this UserCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserCreateRequest.


        :param last_name: The last_name of this UserCreateRequest.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def company_name(self):
        """Gets the company_name of this UserCreateRequest.  # noqa: E501


        :return: The company_name of this UserCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this UserCreateRequest.


        :param company_name: The company_name of this UserCreateRequest.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def password(self):
        """Gets the password of this UserCreateRequest.  # noqa: E501


        :return: The password of this UserCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UserCreateRequest.


        :param password: The password of this UserCreateRequest.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def roles(self):
        """Gets the roles of this UserCreateRequest.  # noqa: E501


        :return: The roles of this UserCreateRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this UserCreateRequest.


        :param roles: The roles of this UserCreateRequest.  # noqa: E501
        :type: list[str]
        """

        self._roles = roles

    @property
    def send_email(self):
        """Gets the send_email of this UserCreateRequest.  # noqa: E501


        :return: The send_email of this UserCreateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._send_email

    @send_email.setter
    def send_email(self, send_email):
        """Sets the send_email of this UserCreateRequest.


        :param send_email: The send_email of this UserCreateRequest.  # noqa: E501
        :type: bool
        """

        self._send_email = send_email

    @property
    def id(self):
        """Gets the id of this UserCreateRequest.  # noqa: E501


        :return: The id of this UserCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserCreateRequest.


        :param id: The id of this UserCreateRequest.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
