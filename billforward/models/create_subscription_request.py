# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateSubscriptionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'account_id': 'str',
        'product': 'str',
        'product_rate_plan': 'str',
        'organization_id': 'str',
        'name': 'str',
        'description': 'str',
        'contract_start': 'datetime',
        'start': 'datetime',
        'end': 'datetime',
        'state': 'str',
        'trial_end': 'datetime',
        'type': 'str',
        'failed_payment_behaviour': 'str',
        'parent_id': 'str',
        'exclude_from_auto_aggregation': 'bool',
        'aggregate_all_subscriptions_on_account': 'bool',
        'allow_subscription_wihtout_rate_plan': 'bool',
        'dont_create_default_fixed_term': 'bool',
        'align_period_with_aggregating_subscription': 'bool',
        'parent_should_copy_child_period_end': 'bool',
        'pricing_component_quantities': 'list[CreatePricingComponentQuantityRequest]',
        'payment_terms': 'int',
        'purchase_order': 'str',
        'coupon_codes': 'list[str]',
        'prepayment_amount': 'float',
        'extras': 'Extras',
        'termed_subscription': 'bool',
        'term_periods': 'int',
        'term_expiry_behaviour': 'str',
        'subsequent_product_rate_plan': 'str',
        'metadata': 'dict(str, object)',
        'ignore_first_period_usage': 'bool'
    }

    attribute_map = {
        'created': 'created',
        'account_id': 'accountID',
        'product': 'product',
        'product_rate_plan': 'productRatePlan',
        'organization_id': 'organizationID',
        'name': 'name',
        'description': 'description',
        'contract_start': 'contractStart',
        'start': 'start',
        'end': 'end',
        'state': 'state',
        'trial_end': 'trialEnd',
        'type': 'type',
        'failed_payment_behaviour': 'failedPaymentBehaviour',
        'parent_id': 'parentID',
        'exclude_from_auto_aggregation': 'excludeFromAutoAggregation',
        'aggregate_all_subscriptions_on_account': 'aggregateAllSubscriptionsOnAccount',
        'allow_subscription_wihtout_rate_plan': 'allowSubscriptionWihtoutRatePlan',
        'dont_create_default_fixed_term': 'dontCreateDefaultFixedTerm',
        'align_period_with_aggregating_subscription': 'alignPeriodWithAggregatingSubscription',
        'parent_should_copy_child_period_end': 'parentShouldCopyChildPeriodEnd',
        'pricing_component_quantities': 'pricingComponentQuantities',
        'payment_terms': 'paymentTerms',
        'purchase_order': 'purchaseOrder',
        'coupon_codes': 'couponCodes',
        'prepayment_amount': 'prepaymentAmount',
        'extras': 'extras',
        'termed_subscription': 'termedSubscription',
        'term_periods': 'termPeriods',
        'term_expiry_behaviour': 'termExpiryBehaviour',
        'subsequent_product_rate_plan': 'subsequentProductRatePlan',
        'metadata': 'metadata',
        'ignore_first_period_usage': 'ignoreFirstPeriodUsage'
    }

    def __init__(self, created=None, account_id=None, product=None, product_rate_plan=None, organization_id=None, name=None, description=None, contract_start=None, start=None, end=None, state=None, trial_end=None, type=None, failed_payment_behaviour=None, parent_id=None, exclude_from_auto_aggregation=None, aggregate_all_subscriptions_on_account=None, allow_subscription_wihtout_rate_plan=None, dont_create_default_fixed_term=None, align_period_with_aggregating_subscription=None, parent_should_copy_child_period_end=None, pricing_component_quantities=None, payment_terms=None, purchase_order=None, coupon_codes=None, prepayment_amount=None, extras=None, termed_subscription=None, term_periods=None, term_expiry_behaviour=None, subsequent_product_rate_plan=None, metadata=None, ignore_first_period_usage=None):  # noqa: E501
        """CreateSubscriptionRequest - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._account_id = None
        self._product = None
        self._product_rate_plan = None
        self._organization_id = None
        self._name = None
        self._description = None
        self._contract_start = None
        self._start = None
        self._end = None
        self._state = None
        self._trial_end = None
        self._type = None
        self._failed_payment_behaviour = None
        self._parent_id = None
        self._exclude_from_auto_aggregation = None
        self._aggregate_all_subscriptions_on_account = None
        self._allow_subscription_wihtout_rate_plan = None
        self._dont_create_default_fixed_term = None
        self._align_period_with_aggregating_subscription = None
        self._parent_should_copy_child_period_end = None
        self._pricing_component_quantities = None
        self._payment_terms = None
        self._purchase_order = None
        self._coupon_codes = None
        self._prepayment_amount = None
        self._extras = None
        self._termed_subscription = None
        self._term_periods = None
        self._term_expiry_behaviour = None
        self._subsequent_product_rate_plan = None
        self._metadata = None
        self._ignore_first_period_usage = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if account_id is not None:
            self.account_id = account_id
        if product is not None:
            self.product = product
        if product_rate_plan is not None:
            self.product_rate_plan = product_rate_plan
        if organization_id is not None:
            self.organization_id = organization_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if contract_start is not None:
            self.contract_start = contract_start
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if state is not None:
            self.state = state
        if trial_end is not None:
            self.trial_end = trial_end
        if type is not None:
            self.type = type
        if failed_payment_behaviour is not None:
            self.failed_payment_behaviour = failed_payment_behaviour
        if parent_id is not None:
            self.parent_id = parent_id
        if exclude_from_auto_aggregation is not None:
            self.exclude_from_auto_aggregation = exclude_from_auto_aggregation
        if aggregate_all_subscriptions_on_account is not None:
            self.aggregate_all_subscriptions_on_account = aggregate_all_subscriptions_on_account
        if allow_subscription_wihtout_rate_plan is not None:
            self.allow_subscription_wihtout_rate_plan = allow_subscription_wihtout_rate_plan
        if dont_create_default_fixed_term is not None:
            self.dont_create_default_fixed_term = dont_create_default_fixed_term
        if align_period_with_aggregating_subscription is not None:
            self.align_period_with_aggregating_subscription = align_period_with_aggregating_subscription
        if parent_should_copy_child_period_end is not None:
            self.parent_should_copy_child_period_end = parent_should_copy_child_period_end
        if pricing_component_quantities is not None:
            self.pricing_component_quantities = pricing_component_quantities
        if payment_terms is not None:
            self.payment_terms = payment_terms
        if purchase_order is not None:
            self.purchase_order = purchase_order
        if coupon_codes is not None:
            self.coupon_codes = coupon_codes
        if prepayment_amount is not None:
            self.prepayment_amount = prepayment_amount
        if extras is not None:
            self.extras = extras
        if termed_subscription is not None:
            self.termed_subscription = termed_subscription
        if term_periods is not None:
            self.term_periods = term_periods
        if term_expiry_behaviour is not None:
            self.term_expiry_behaviour = term_expiry_behaviour
        if subsequent_product_rate_plan is not None:
            self.subsequent_product_rate_plan = subsequent_product_rate_plan
        if metadata is not None:
            self.metadata = metadata
        if ignore_first_period_usage is not None:
            self.ignore_first_period_usage = ignore_first_period_usage

    @property
    def created(self):
        """Gets the created of this CreateSubscriptionRequest.  # noqa: E501


        :return: The created of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this CreateSubscriptionRequest.


        :param created: The created of this CreateSubscriptionRequest.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def account_id(self):
        """Gets the account_id of this CreateSubscriptionRequest.  # noqa: E501


        :return: The account_id of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CreateSubscriptionRequest.


        :param account_id: The account_id of this CreateSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def product(self):
        """Gets the product of this CreateSubscriptionRequest.  # noqa: E501


        :return: The product of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this CreateSubscriptionRequest.


        :param product: The product of this CreateSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._product = product

    @property
    def product_rate_plan(self):
        """Gets the product_rate_plan of this CreateSubscriptionRequest.  # noqa: E501


        :return: The product_rate_plan of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan

    @product_rate_plan.setter
    def product_rate_plan(self, product_rate_plan):
        """Sets the product_rate_plan of this CreateSubscriptionRequest.


        :param product_rate_plan: The product_rate_plan of this CreateSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._product_rate_plan = product_rate_plan

    @property
    def organization_id(self):
        """Gets the organization_id of this CreateSubscriptionRequest.  # noqa: E501


        :return: The organization_id of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this CreateSubscriptionRequest.


        :param organization_id: The organization_id of this CreateSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def name(self):
        """Gets the name of this CreateSubscriptionRequest.  # noqa: E501


        :return: The name of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateSubscriptionRequest.


        :param name: The name of this CreateSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateSubscriptionRequest.  # noqa: E501


        :return: The description of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateSubscriptionRequest.


        :param description: The description of this CreateSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def contract_start(self):
        """Gets the contract_start of this CreateSubscriptionRequest.  # noqa: E501


        :return: The contract_start of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._contract_start

    @contract_start.setter
    def contract_start(self, contract_start):
        """Sets the contract_start of this CreateSubscriptionRequest.


        :param contract_start: The contract_start of this CreateSubscriptionRequest.  # noqa: E501
        :type: datetime
        """

        self._contract_start = contract_start

    @property
    def start(self):
        """Gets the start of this CreateSubscriptionRequest.  # noqa: E501


        :return: The start of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this CreateSubscriptionRequest.


        :param start: The start of this CreateSubscriptionRequest.  # noqa: E501
        :type: datetime
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this CreateSubscriptionRequest.  # noqa: E501


        :return: The end of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this CreateSubscriptionRequest.


        :param end: The end of this CreateSubscriptionRequest.  # noqa: E501
        :type: datetime
        """

        self._end = end

    @property
    def state(self):
        """Gets the state of this CreateSubscriptionRequest.  # noqa: E501


        :return: The state of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CreateSubscriptionRequest.


        :param state: The state of this CreateSubscriptionRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Trial", "Provisioned", "Paid", "AwaitingPayment", "Cancelled", "Failed", "Expired"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def trial_end(self):
        """Gets the trial_end of this CreateSubscriptionRequest.  # noqa: E501


        :return: The trial_end of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._trial_end

    @trial_end.setter
    def trial_end(self, trial_end):
        """Sets the trial_end of this CreateSubscriptionRequest.


        :param trial_end: The trial_end of this CreateSubscriptionRequest.  # noqa: E501
        :type: datetime
        """

        self._trial_end = trial_end

    @property
    def type(self):
        """Gets the type of this CreateSubscriptionRequest.  # noqa: E501


        :return: The type of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateSubscriptionRequest.


        :param type: The type of this CreateSubscriptionRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Subscription", "Trial", "FixedTerm"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def failed_payment_behaviour(self):
        """Gets the failed_payment_behaviour of this CreateSubscriptionRequest.  # noqa: E501


        :return: The failed_payment_behaviour of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._failed_payment_behaviour

    @failed_payment_behaviour.setter
    def failed_payment_behaviour(self, failed_payment_behaviour):
        """Sets the failed_payment_behaviour of this CreateSubscriptionRequest.


        :param failed_payment_behaviour: The failed_payment_behaviour of this CreateSubscriptionRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["CancelSubscription", "None"]  # noqa: E501
        if failed_payment_behaviour not in allowed_values:
            raise ValueError(
                "Invalid value for `failed_payment_behaviour` ({0}), must be one of {1}"  # noqa: E501
                .format(failed_payment_behaviour, allowed_values)
            )

        self._failed_payment_behaviour = failed_payment_behaviour

    @property
    def parent_id(self):
        """Gets the parent_id of this CreateSubscriptionRequest.  # noqa: E501


        :return: The parent_id of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this CreateSubscriptionRequest.


        :param parent_id: The parent_id of this CreateSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def exclude_from_auto_aggregation(self):
        """Gets the exclude_from_auto_aggregation of this CreateSubscriptionRequest.  # noqa: E501


        :return: The exclude_from_auto_aggregation of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_from_auto_aggregation

    @exclude_from_auto_aggregation.setter
    def exclude_from_auto_aggregation(self, exclude_from_auto_aggregation):
        """Sets the exclude_from_auto_aggregation of this CreateSubscriptionRequest.


        :param exclude_from_auto_aggregation: The exclude_from_auto_aggregation of this CreateSubscriptionRequest.  # noqa: E501
        :type: bool
        """

        self._exclude_from_auto_aggregation = exclude_from_auto_aggregation

    @property
    def aggregate_all_subscriptions_on_account(self):
        """Gets the aggregate_all_subscriptions_on_account of this CreateSubscriptionRequest.  # noqa: E501


        :return: The aggregate_all_subscriptions_on_account of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._aggregate_all_subscriptions_on_account

    @aggregate_all_subscriptions_on_account.setter
    def aggregate_all_subscriptions_on_account(self, aggregate_all_subscriptions_on_account):
        """Sets the aggregate_all_subscriptions_on_account of this CreateSubscriptionRequest.


        :param aggregate_all_subscriptions_on_account: The aggregate_all_subscriptions_on_account of this CreateSubscriptionRequest.  # noqa: E501
        :type: bool
        """

        self._aggregate_all_subscriptions_on_account = aggregate_all_subscriptions_on_account

    @property
    def allow_subscription_wihtout_rate_plan(self):
        """Gets the allow_subscription_wihtout_rate_plan of this CreateSubscriptionRequest.  # noqa: E501


        :return: The allow_subscription_wihtout_rate_plan of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._allow_subscription_wihtout_rate_plan

    @allow_subscription_wihtout_rate_plan.setter
    def allow_subscription_wihtout_rate_plan(self, allow_subscription_wihtout_rate_plan):
        """Sets the allow_subscription_wihtout_rate_plan of this CreateSubscriptionRequest.


        :param allow_subscription_wihtout_rate_plan: The allow_subscription_wihtout_rate_plan of this CreateSubscriptionRequest.  # noqa: E501
        :type: bool
        """

        self._allow_subscription_wihtout_rate_plan = allow_subscription_wihtout_rate_plan

    @property
    def dont_create_default_fixed_term(self):
        """Gets the dont_create_default_fixed_term of this CreateSubscriptionRequest.  # noqa: E501


        :return: The dont_create_default_fixed_term of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._dont_create_default_fixed_term

    @dont_create_default_fixed_term.setter
    def dont_create_default_fixed_term(self, dont_create_default_fixed_term):
        """Sets the dont_create_default_fixed_term of this CreateSubscriptionRequest.


        :param dont_create_default_fixed_term: The dont_create_default_fixed_term of this CreateSubscriptionRequest.  # noqa: E501
        :type: bool
        """

        self._dont_create_default_fixed_term = dont_create_default_fixed_term

    @property
    def align_period_with_aggregating_subscription(self):
        """Gets the align_period_with_aggregating_subscription of this CreateSubscriptionRequest.  # noqa: E501


        :return: The align_period_with_aggregating_subscription of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._align_period_with_aggregating_subscription

    @align_period_with_aggregating_subscription.setter
    def align_period_with_aggregating_subscription(self, align_period_with_aggregating_subscription):
        """Sets the align_period_with_aggregating_subscription of this CreateSubscriptionRequest.


        :param align_period_with_aggregating_subscription: The align_period_with_aggregating_subscription of this CreateSubscriptionRequest.  # noqa: E501
        :type: bool
        """

        self._align_period_with_aggregating_subscription = align_period_with_aggregating_subscription

    @property
    def parent_should_copy_child_period_end(self):
        """Gets the parent_should_copy_child_period_end of this CreateSubscriptionRequest.  # noqa: E501


        :return: The parent_should_copy_child_period_end of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._parent_should_copy_child_period_end

    @parent_should_copy_child_period_end.setter
    def parent_should_copy_child_period_end(self, parent_should_copy_child_period_end):
        """Sets the parent_should_copy_child_period_end of this CreateSubscriptionRequest.


        :param parent_should_copy_child_period_end: The parent_should_copy_child_period_end of this CreateSubscriptionRequest.  # noqa: E501
        :type: bool
        """

        self._parent_should_copy_child_period_end = parent_should_copy_child_period_end

    @property
    def pricing_component_quantities(self):
        """Gets the pricing_component_quantities of this CreateSubscriptionRequest.  # noqa: E501


        :return: The pricing_component_quantities of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: list[CreatePricingComponentQuantityRequest]
        """
        return self._pricing_component_quantities

    @pricing_component_quantities.setter
    def pricing_component_quantities(self, pricing_component_quantities):
        """Sets the pricing_component_quantities of this CreateSubscriptionRequest.


        :param pricing_component_quantities: The pricing_component_quantities of this CreateSubscriptionRequest.  # noqa: E501
        :type: list[CreatePricingComponentQuantityRequest]
        """

        self._pricing_component_quantities = pricing_component_quantities

    @property
    def payment_terms(self):
        """Gets the payment_terms of this CreateSubscriptionRequest.  # noqa: E501


        :return: The payment_terms of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: int
        """
        return self._payment_terms

    @payment_terms.setter
    def payment_terms(self, payment_terms):
        """Sets the payment_terms of this CreateSubscriptionRequest.


        :param payment_terms: The payment_terms of this CreateSubscriptionRequest.  # noqa: E501
        :type: int
        """

        self._payment_terms = payment_terms

    @property
    def purchase_order(self):
        """Gets the purchase_order of this CreateSubscriptionRequest.  # noqa: E501


        :return: The purchase_order of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._purchase_order

    @purchase_order.setter
    def purchase_order(self, purchase_order):
        """Sets the purchase_order of this CreateSubscriptionRequest.


        :param purchase_order: The purchase_order of this CreateSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._purchase_order = purchase_order

    @property
    def coupon_codes(self):
        """Gets the coupon_codes of this CreateSubscriptionRequest.  # noqa: E501


        :return: The coupon_codes of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._coupon_codes

    @coupon_codes.setter
    def coupon_codes(self, coupon_codes):
        """Sets the coupon_codes of this CreateSubscriptionRequest.


        :param coupon_codes: The coupon_codes of this CreateSubscriptionRequest.  # noqa: E501
        :type: list[str]
        """

        self._coupon_codes = coupon_codes

    @property
    def prepayment_amount(self):
        """Gets the prepayment_amount of this CreateSubscriptionRequest.  # noqa: E501


        :return: The prepayment_amount of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: float
        """
        return self._prepayment_amount

    @prepayment_amount.setter
    def prepayment_amount(self, prepayment_amount):
        """Sets the prepayment_amount of this CreateSubscriptionRequest.


        :param prepayment_amount: The prepayment_amount of this CreateSubscriptionRequest.  # noqa: E501
        :type: float
        """

        self._prepayment_amount = prepayment_amount

    @property
    def extras(self):
        """Gets the extras of this CreateSubscriptionRequest.  # noqa: E501


        :return: The extras of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: Extras
        """
        return self._extras

    @extras.setter
    def extras(self, extras):
        """Sets the extras of this CreateSubscriptionRequest.


        :param extras: The extras of this CreateSubscriptionRequest.  # noqa: E501
        :type: Extras
        """

        self._extras = extras

    @property
    def termed_subscription(self):
        """Gets the termed_subscription of this CreateSubscriptionRequest.  # noqa: E501


        :return: The termed_subscription of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._termed_subscription

    @termed_subscription.setter
    def termed_subscription(self, termed_subscription):
        """Sets the termed_subscription of this CreateSubscriptionRequest.


        :param termed_subscription: The termed_subscription of this CreateSubscriptionRequest.  # noqa: E501
        :type: bool
        """

        self._termed_subscription = termed_subscription

    @property
    def term_periods(self):
        """Gets the term_periods of this CreateSubscriptionRequest.  # noqa: E501


        :return: The term_periods of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: int
        """
        return self._term_periods

    @term_periods.setter
    def term_periods(self, term_periods):
        """Sets the term_periods of this CreateSubscriptionRequest.


        :param term_periods: The term_periods of this CreateSubscriptionRequest.  # noqa: E501
        :type: int
        """

        self._term_periods = term_periods

    @property
    def term_expiry_behaviour(self):
        """Gets the term_expiry_behaviour of this CreateSubscriptionRequest.  # noqa: E501


        :return: The term_expiry_behaviour of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._term_expiry_behaviour

    @term_expiry_behaviour.setter
    def term_expiry_behaviour(self, term_expiry_behaviour):
        """Sets the term_expiry_behaviour of this CreateSubscriptionRequest.


        :param term_expiry_behaviour: The term_expiry_behaviour of this CreateSubscriptionRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["ExpireSubscription", "EvergreenSubscription", "RecurLatestPricing", "ChangePlan"]  # noqa: E501
        if term_expiry_behaviour not in allowed_values:
            raise ValueError(
                "Invalid value for `term_expiry_behaviour` ({0}), must be one of {1}"  # noqa: E501
                .format(term_expiry_behaviour, allowed_values)
            )

        self._term_expiry_behaviour = term_expiry_behaviour

    @property
    def subsequent_product_rate_plan(self):
        """Gets the subsequent_product_rate_plan of this CreateSubscriptionRequest.  # noqa: E501


        :return: The subsequent_product_rate_plan of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._subsequent_product_rate_plan

    @subsequent_product_rate_plan.setter
    def subsequent_product_rate_plan(self, subsequent_product_rate_plan):
        """Sets the subsequent_product_rate_plan of this CreateSubscriptionRequest.


        :param subsequent_product_rate_plan: The subsequent_product_rate_plan of this CreateSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._subsequent_product_rate_plan = subsequent_product_rate_plan

    @property
    def metadata(self):
        """Gets the metadata of this CreateSubscriptionRequest.  # noqa: E501


        :return: The metadata of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CreateSubscriptionRequest.


        :param metadata: The metadata of this CreateSubscriptionRequest.  # noqa: E501
        :type: dict(str, object)
        """

        self._metadata = metadata

    @property
    def ignore_first_period_usage(self):
        """Gets the ignore_first_period_usage of this CreateSubscriptionRequest.  # noqa: E501


        :return: The ignore_first_period_usage of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_first_period_usage

    @ignore_first_period_usage.setter
    def ignore_first_period_usage(self, ignore_first_period_usage):
        """Sets the ignore_first_period_usage of this CreateSubscriptionRequest.


        :param ignore_first_period_usage: The ignore_first_period_usage of this CreateSubscriptionRequest.  # noqa: E501
        :type: bool
        """

        self._ignore_first_period_usage = ignore_first_period_usage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateSubscriptionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateSubscriptionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
