# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from billforward.models.payment import Payment  # noqa: F401,E501

class OfflinePayment(Payment):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reference': 'str',
        'description': 'str',
        'name': 'str',
        'offline_payment_type': 'str'
    }
    if hasattr(Payment, "swagger_types"):
        swagger_types.update(Payment.swagger_types)

    attribute_map = {
        'reference': 'reference',
        'description': 'description',
        'name': 'name',
        'offline_payment_type': 'offlinePaymentType'
    }
    if hasattr(Payment, "attribute_map"):
        attribute_map.update(Payment.attribute_map)

    def __init__(self, reference=None, description=None, name=None, offline_payment_type=None, *args, **kwargs):  # noqa: E501
        """OfflinePayment - a model defined in Swagger"""  # noqa: E501
        self._reference = None
        self._description = None
        self._name = None
        self._offline_payment_type = None
        self.discriminator = None
        if reference is not None:
            self.reference = reference
        if description is not None:
            self.description = description
        if name is not None:
            self.name = name
        if offline_payment_type is not None:
            self.offline_payment_type = offline_payment_type
        Payment.__init__(self, *args, **kwargs)

    @property
    def reference(self):
        """Gets the reference of this OfflinePayment.  # noqa: E501


        :return: The reference of this OfflinePayment.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this OfflinePayment.


        :param reference: The reference of this OfflinePayment.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def description(self):
        """Gets the description of this OfflinePayment.  # noqa: E501


        :return: The description of this OfflinePayment.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OfflinePayment.


        :param description: The description of this OfflinePayment.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this OfflinePayment.  # noqa: E501


        :return: The name of this OfflinePayment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OfflinePayment.


        :param name: The name of this OfflinePayment.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def offline_payment_type(self):
        """Gets the offline_payment_type of this OfflinePayment.  # noqa: E501


        :return: The offline_payment_type of this OfflinePayment.  # noqa: E501
        :rtype: str
        """
        return self._offline_payment_type

    @offline_payment_type.setter
    def offline_payment_type(self, offline_payment_type):
        """Sets the offline_payment_type of this OfflinePayment.


        :param offline_payment_type: The offline_payment_type of this OfflinePayment.  # noqa: E501
        :type: str
        """
        allowed_values = ["WireTransfer", "Check", "Cash", "Other", "Prepayment"]  # noqa: E501
        if offline_payment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `offline_payment_type` ({0}), must be one of {1}"  # noqa: E501
                .format(offline_payment_type, allowed_values)
            )

        self._offline_payment_type = offline_payment_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OfflinePayment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OfflinePayment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
