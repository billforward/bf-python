# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SetRatePlanAffiliateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'organization_id': 'str',
        'account_id': 'str',
        'amount': 'float',
        'type': 'str',
        'description': 'str',
        'pricing_component_name': 'str',
        'start_date': 'datetime',
        'end_date': 'datetime'
    }

    attribute_map = {
        'organization_id': 'organizationID',
        'account_id': 'accountID',
        'amount': 'amount',
        'type': 'type',
        'description': 'description',
        'pricing_component_name': 'pricingComponentName',
        'start_date': 'startDate',
        'end_date': 'endDate'
    }

    def __init__(self, organization_id=None, account_id=None, amount=None, type=None, description=None, pricing_component_name=None, start_date=None, end_date=None):  # noqa: E501
        """SetRatePlanAffiliateRequest - a model defined in Swagger"""  # noqa: E501
        self._organization_id = None
        self._account_id = None
        self._amount = None
        self._type = None
        self._description = None
        self._pricing_component_name = None
        self._start_date = None
        self._end_date = None
        self.discriminator = None
        if organization_id is not None:
            self.organization_id = organization_id
        if account_id is not None:
            self.account_id = account_id
        if amount is not None:
            self.amount = amount
        if type is not None:
            self.type = type
        if description is not None:
            self.description = description
        if pricing_component_name is not None:
            self.pricing_component_name = pricing_component_name
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date

    @property
    def organization_id(self):
        """Gets the organization_id of this SetRatePlanAffiliateRequest.  # noqa: E501


        :return: The organization_id of this SetRatePlanAffiliateRequest.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this SetRatePlanAffiliateRequest.


        :param organization_id: The organization_id of this SetRatePlanAffiliateRequest.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def account_id(self):
        """Gets the account_id of this SetRatePlanAffiliateRequest.  # noqa: E501


        :return: The account_id of this SetRatePlanAffiliateRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this SetRatePlanAffiliateRequest.


        :param account_id: The account_id of this SetRatePlanAffiliateRequest.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def amount(self):
        """Gets the amount of this SetRatePlanAffiliateRequest.  # noqa: E501


        :return: The amount of this SetRatePlanAffiliateRequest.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this SetRatePlanAffiliateRequest.


        :param amount: The amount of this SetRatePlanAffiliateRequest.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def type(self):
        """Gets the type of this SetRatePlanAffiliateRequest.  # noqa: E501


        :return: The type of this SetRatePlanAffiliateRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SetRatePlanAffiliateRequest.


        :param type: The type of this SetRatePlanAffiliateRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Percentage", "FixedAmount"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def description(self):
        """Gets the description of this SetRatePlanAffiliateRequest.  # noqa: E501


        :return: The description of this SetRatePlanAffiliateRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SetRatePlanAffiliateRequest.


        :param description: The description of this SetRatePlanAffiliateRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def pricing_component_name(self):
        """Gets the pricing_component_name of this SetRatePlanAffiliateRequest.  # noqa: E501


        :return: The pricing_component_name of this SetRatePlanAffiliateRequest.  # noqa: E501
        :rtype: str
        """
        return self._pricing_component_name

    @pricing_component_name.setter
    def pricing_component_name(self, pricing_component_name):
        """Sets the pricing_component_name of this SetRatePlanAffiliateRequest.


        :param pricing_component_name: The pricing_component_name of this SetRatePlanAffiliateRequest.  # noqa: E501
        :type: str
        """

        self._pricing_component_name = pricing_component_name

    @property
    def start_date(self):
        """Gets the start_date of this SetRatePlanAffiliateRequest.  # noqa: E501


        :return: The start_date of this SetRatePlanAffiliateRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this SetRatePlanAffiliateRequest.


        :param start_date: The start_date of this SetRatePlanAffiliateRequest.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this SetRatePlanAffiliateRequest.  # noqa: E501


        :return: The end_date of this SetRatePlanAffiliateRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this SetRatePlanAffiliateRequest.


        :param end_date: The end_date of this SetRatePlanAffiliateRequest.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SetRatePlanAffiliateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SetRatePlanAffiliateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
