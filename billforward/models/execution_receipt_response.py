# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExecutionReceiptResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'receipt_id': 'str',
        'gateway_reference_id': 'str',
        'payment_id': 'str',
        'payment_gateway': 'str',
        'decision': 'str',
        'gateway_execution_details': 'str',
        'amount': 'float'
    }

    attribute_map = {
        'receipt_id': 'receiptID',
        'gateway_reference_id': 'gatewayReferenceID',
        'payment_id': 'paymentID',
        'payment_gateway': 'paymentGateway',
        'decision': 'decision',
        'gateway_execution_details': 'gatewayExecutionDetails',
        'amount': 'amount'
    }

    def __init__(self, receipt_id=None, gateway_reference_id=None, payment_id=None, payment_gateway=None, decision=None, gateway_execution_details=None, amount=None):  # noqa: E501
        """ExecutionReceiptResponse - a model defined in Swagger"""  # noqa: E501
        self._receipt_id = None
        self._gateway_reference_id = None
        self._payment_id = None
        self._payment_gateway = None
        self._decision = None
        self._gateway_execution_details = None
        self._amount = None
        self.discriminator = None
        if receipt_id is not None:
            self.receipt_id = receipt_id
        if gateway_reference_id is not None:
            self.gateway_reference_id = gateway_reference_id
        if payment_id is not None:
            self.payment_id = payment_id
        if payment_gateway is not None:
            self.payment_gateway = payment_gateway
        if decision is not None:
            self.decision = decision
        if gateway_execution_details is not None:
            self.gateway_execution_details = gateway_execution_details
        if amount is not None:
            self.amount = amount

    @property
    def receipt_id(self):
        """Gets the receipt_id of this ExecutionReceiptResponse.  # noqa: E501


        :return: The receipt_id of this ExecutionReceiptResponse.  # noqa: E501
        :rtype: str
        """
        return self._receipt_id

    @receipt_id.setter
    def receipt_id(self, receipt_id):
        """Sets the receipt_id of this ExecutionReceiptResponse.


        :param receipt_id: The receipt_id of this ExecutionReceiptResponse.  # noqa: E501
        :type: str
        """

        self._receipt_id = receipt_id

    @property
    def gateway_reference_id(self):
        """Gets the gateway_reference_id of this ExecutionReceiptResponse.  # noqa: E501


        :return: The gateway_reference_id of this ExecutionReceiptResponse.  # noqa: E501
        :rtype: str
        """
        return self._gateway_reference_id

    @gateway_reference_id.setter
    def gateway_reference_id(self, gateway_reference_id):
        """Sets the gateway_reference_id of this ExecutionReceiptResponse.


        :param gateway_reference_id: The gateway_reference_id of this ExecutionReceiptResponse.  # noqa: E501
        :type: str
        """

        self._gateway_reference_id = gateway_reference_id

    @property
    def payment_id(self):
        """Gets the payment_id of this ExecutionReceiptResponse.  # noqa: E501


        :return: The payment_id of this ExecutionReceiptResponse.  # noqa: E501
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this ExecutionReceiptResponse.


        :param payment_id: The payment_id of this ExecutionReceiptResponse.  # noqa: E501
        :type: str
        """

        self._payment_id = payment_id

    @property
    def payment_gateway(self):
        """Gets the payment_gateway of this ExecutionReceiptResponse.  # noqa: E501


        :return: The payment_gateway of this ExecutionReceiptResponse.  # noqa: E501
        :rtype: str
        """
        return self._payment_gateway

    @payment_gateway.setter
    def payment_gateway(self, payment_gateway):
        """Sets the payment_gateway of this ExecutionReceiptResponse.


        :param payment_gateway: The payment_gateway of this ExecutionReceiptResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["VOID", "cybersource_token", "card_vault", "paypal_simple", "locustworld", "free", "coupon", "credit_note", "stripe", "braintree", "zooz", "balanced", "paypal", "billforward_test", "offline", "trial", "stripeACH", "goCardless", "authorizeNet", "spreedly", "sagePay", "trustCommerce", "payvision", "kash", "epx", "shuttle", "square", "billforwardRandomizer", "cardConnect", "ebanx"]  # noqa: E501
        if payment_gateway not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_gateway` ({0}), must be one of {1}"  # noqa: E501
                .format(payment_gateway, allowed_values)
            )

        self._payment_gateway = payment_gateway

    @property
    def decision(self):
        """Gets the decision of this ExecutionReceiptResponse.  # noqa: E501


        :return: The decision of this ExecutionReceiptResponse.  # noqa: E501
        :rtype: str
        """
        return self._decision

    @decision.setter
    def decision(self, decision):
        """Sets the decision of this ExecutionReceiptResponse.


        :param decision: The decision of this ExecutionReceiptResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["Accept", "Reject", "Pending", "Error"]  # noqa: E501
        if decision not in allowed_values:
            raise ValueError(
                "Invalid value for `decision` ({0}), must be one of {1}"  # noqa: E501
                .format(decision, allowed_values)
            )

        self._decision = decision

    @property
    def gateway_execution_details(self):
        """Gets the gateway_execution_details of this ExecutionReceiptResponse.  # noqa: E501


        :return: The gateway_execution_details of this ExecutionReceiptResponse.  # noqa: E501
        :rtype: str
        """
        return self._gateway_execution_details

    @gateway_execution_details.setter
    def gateway_execution_details(self, gateway_execution_details):
        """Sets the gateway_execution_details of this ExecutionReceiptResponse.


        :param gateway_execution_details: The gateway_execution_details of this ExecutionReceiptResponse.  # noqa: E501
        :type: str
        """

        self._gateway_execution_details = gateway_execution_details

    @property
    def amount(self):
        """Gets the amount of this ExecutionReceiptResponse.  # noqa: E501


        :return: The amount of this ExecutionReceiptResponse.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ExecutionReceiptResponse.


        :param amount: The amount of this ExecutionReceiptResponse.  # noqa: E501
        :type: float
        """

        self._amount = amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExecutionReceiptResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExecutionReceiptResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
