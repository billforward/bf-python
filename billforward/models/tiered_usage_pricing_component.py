# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TieredUsagePricingComponent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'display_name': 'str',
        'upgrade_mode': 'str',
        'downgrade_mode': 'str',
        'unit': 'str',
        'tiers': 'list[PricingTier]',
        'tax_code': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'display_name': 'displayName',
        'upgrade_mode': 'upgradeMode',
        'downgrade_mode': 'downgradeMode',
        'unit': 'unit',
        'tiers': 'tiers',
        'tax_code': 'taxCode'
    }

    def __init__(self, name=None, description=None, display_name=None, upgrade_mode=None, downgrade_mode=None, unit=None, tiers=None, tax_code=None):  # noqa: E501
        """TieredUsagePricingComponent - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._display_name = None
        self._upgrade_mode = None
        self._downgrade_mode = None
        self._unit = None
        self._tiers = None
        self._tax_code = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if display_name is not None:
            self.display_name = display_name
        if upgrade_mode is not None:
            self.upgrade_mode = upgrade_mode
        if downgrade_mode is not None:
            self.downgrade_mode = downgrade_mode
        if unit is not None:
            self.unit = unit
        if tiers is not None:
            self.tiers = tiers
        if tax_code is not None:
            self.tax_code = tax_code

    @property
    def name(self):
        """Gets the name of this TieredUsagePricingComponent.  # noqa: E501


        :return: The name of this TieredUsagePricingComponent.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TieredUsagePricingComponent.


        :param name: The name of this TieredUsagePricingComponent.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this TieredUsagePricingComponent.  # noqa: E501


        :return: The description of this TieredUsagePricingComponent.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TieredUsagePricingComponent.


        :param description: The description of this TieredUsagePricingComponent.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this TieredUsagePricingComponent.  # noqa: E501


        :return: The display_name of this TieredUsagePricingComponent.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this TieredUsagePricingComponent.


        :param display_name: The display_name of this TieredUsagePricingComponent.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def upgrade_mode(self):
        """Gets the upgrade_mode of this TieredUsagePricingComponent.  # noqa: E501


        :return: The upgrade_mode of this TieredUsagePricingComponent.  # noqa: E501
        :rtype: str
        """
        return self._upgrade_mode

    @upgrade_mode.setter
    def upgrade_mode(self, upgrade_mode):
        """Sets the upgrade_mode of this TieredUsagePricingComponent.


        :param upgrade_mode: The upgrade_mode of this TieredUsagePricingComponent.  # noqa: E501
        :type: str
        """
        allowed_values = ["immediate", "delayed"]  # noqa: E501
        if upgrade_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `upgrade_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(upgrade_mode, allowed_values)
            )

        self._upgrade_mode = upgrade_mode

    @property
    def downgrade_mode(self):
        """Gets the downgrade_mode of this TieredUsagePricingComponent.  # noqa: E501


        :return: The downgrade_mode of this TieredUsagePricingComponent.  # noqa: E501
        :rtype: str
        """
        return self._downgrade_mode

    @downgrade_mode.setter
    def downgrade_mode(self, downgrade_mode):
        """Sets the downgrade_mode of this TieredUsagePricingComponent.


        :param downgrade_mode: The downgrade_mode of this TieredUsagePricingComponent.  # noqa: E501
        :type: str
        """
        allowed_values = ["immediate", "delayed"]  # noqa: E501
        if downgrade_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `downgrade_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(downgrade_mode, allowed_values)
            )

        self._downgrade_mode = downgrade_mode

    @property
    def unit(self):
        """Gets the unit of this TieredUsagePricingComponent.  # noqa: E501


        :return: The unit of this TieredUsagePricingComponent.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this TieredUsagePricingComponent.


        :param unit: The unit of this TieredUsagePricingComponent.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def tiers(self):
        """Gets the tiers of this TieredUsagePricingComponent.  # noqa: E501


        :return: The tiers of this TieredUsagePricingComponent.  # noqa: E501
        :rtype: list[PricingTier]
        """
        return self._tiers

    @tiers.setter
    def tiers(self, tiers):
        """Sets the tiers of this TieredUsagePricingComponent.


        :param tiers: The tiers of this TieredUsagePricingComponent.  # noqa: E501
        :type: list[PricingTier]
        """

        self._tiers = tiers

    @property
    def tax_code(self):
        """Gets the tax_code of this TieredUsagePricingComponent.  # noqa: E501


        :return: The tax_code of this TieredUsagePricingComponent.  # noqa: E501
        :rtype: str
        """
        return self._tax_code

    @tax_code.setter
    def tax_code(self, tax_code):
        """Sets the tax_code of this TieredUsagePricingComponent.


        :param tax_code: The tax_code of this TieredUsagePricingComponent.  # noqa: E501
        :type: str
        """

        self._tax_code = tax_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TieredUsagePricingComponent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TieredUsagePricingComponent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
