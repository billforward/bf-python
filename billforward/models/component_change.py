# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ComponentChange(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'changed_by': 'str',
        'updated': 'datetime',
        'id': 'str',
        'organization_id': 'str',
        'amendment_id': 'str',
        'update_pricing_component_value_id': 'str',
        'pricing_component_id': 'str',
        'pricing_component_name': 'str',
        'state': 'str',
        'change_mode': 'str',
        'value_effective': 'datetime',
        'new_value': 'int'
    }

    attribute_map = {
        'created': 'created',
        'changed_by': 'changedBy',
        'updated': 'updated',
        'id': 'id',
        'organization_id': 'organizationID',
        'amendment_id': 'amendmentID',
        'update_pricing_component_value_id': 'updatePricingComponentValueID',
        'pricing_component_id': 'pricingComponentID',
        'pricing_component_name': 'pricingComponentName',
        'state': 'state',
        'change_mode': 'changeMode',
        'value_effective': 'valueEffective',
        'new_value': 'newValue'
    }

    def __init__(self, created=None, changed_by=None, updated=None, id=None, organization_id=None, amendment_id=None, update_pricing_component_value_id=None, pricing_component_id=None, pricing_component_name=None, state=None, change_mode=None, value_effective=None, new_value=None):  # noqa: E501
        """ComponentChange - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._changed_by = None
        self._updated = None
        self._id = None
        self._organization_id = None
        self._amendment_id = None
        self._update_pricing_component_value_id = None
        self._pricing_component_id = None
        self._pricing_component_name = None
        self._state = None
        self._change_mode = None
        self._value_effective = None
        self._new_value = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if changed_by is not None:
            self.changed_by = changed_by
        if updated is not None:
            self.updated = updated
        self.id = id
        self.organization_id = organization_id
        self.amendment_id = amendment_id
        if update_pricing_component_value_id is not None:
            self.update_pricing_component_value_id = update_pricing_component_value_id
        self.pricing_component_id = pricing_component_id
        self.pricing_component_name = pricing_component_name
        self.state = state
        self.change_mode = change_mode
        if value_effective is not None:
            self.value_effective = value_effective
        self.new_value = new_value

    @property
    def created(self):
        """Gets the created of this ComponentChange.  # noqa: E501


        :return: The created of this ComponentChange.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ComponentChange.


        :param created: The created of this ComponentChange.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """Gets the changed_by of this ComponentChange.  # noqa: E501


        :return: The changed_by of this ComponentChange.  # noqa: E501
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """Sets the changed_by of this ComponentChange.


        :param changed_by: The changed_by of this ComponentChange.  # noqa: E501
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """Gets the updated of this ComponentChange.  # noqa: E501


        :return: The updated of this ComponentChange.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this ComponentChange.


        :param updated: The updated of this ComponentChange.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """Gets the id of this ComponentChange.  # noqa: E501


        :return: The id of this ComponentChange.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ComponentChange.


        :param id: The id of this ComponentChange.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def organization_id(self):
        """Gets the organization_id of this ComponentChange.  # noqa: E501


        :return: The organization_id of this ComponentChange.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this ComponentChange.


        :param organization_id: The organization_id of this ComponentChange.  # noqa: E501
        :type: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")  # noqa: E501

        self._organization_id = organization_id

    @property
    def amendment_id(self):
        """Gets the amendment_id of this ComponentChange.  # noqa: E501


        :return: The amendment_id of this ComponentChange.  # noqa: E501
        :rtype: str
        """
        return self._amendment_id

    @amendment_id.setter
    def amendment_id(self, amendment_id):
        """Sets the amendment_id of this ComponentChange.


        :param amendment_id: The amendment_id of this ComponentChange.  # noqa: E501
        :type: str
        """
        if amendment_id is None:
            raise ValueError("Invalid value for `amendment_id`, must not be `None`")  # noqa: E501

        self._amendment_id = amendment_id

    @property
    def update_pricing_component_value_id(self):
        """Gets the update_pricing_component_value_id of this ComponentChange.  # noqa: E501


        :return: The update_pricing_component_value_id of this ComponentChange.  # noqa: E501
        :rtype: str
        """
        return self._update_pricing_component_value_id

    @update_pricing_component_value_id.setter
    def update_pricing_component_value_id(self, update_pricing_component_value_id):
        """Sets the update_pricing_component_value_id of this ComponentChange.


        :param update_pricing_component_value_id: The update_pricing_component_value_id of this ComponentChange.  # noqa: E501
        :type: str
        """

        self._update_pricing_component_value_id = update_pricing_component_value_id

    @property
    def pricing_component_id(self):
        """Gets the pricing_component_id of this ComponentChange.  # noqa: E501


        :return: The pricing_component_id of this ComponentChange.  # noqa: E501
        :rtype: str
        """
        return self._pricing_component_id

    @pricing_component_id.setter
    def pricing_component_id(self, pricing_component_id):
        """Sets the pricing_component_id of this ComponentChange.


        :param pricing_component_id: The pricing_component_id of this ComponentChange.  # noqa: E501
        :type: str
        """
        if pricing_component_id is None:
            raise ValueError("Invalid value for `pricing_component_id`, must not be `None`")  # noqa: E501

        self._pricing_component_id = pricing_component_id

    @property
    def pricing_component_name(self):
        """Gets the pricing_component_name of this ComponentChange.  # noqa: E501


        :return: The pricing_component_name of this ComponentChange.  # noqa: E501
        :rtype: str
        """
        return self._pricing_component_name

    @pricing_component_name.setter
    def pricing_component_name(self, pricing_component_name):
        """Sets the pricing_component_name of this ComponentChange.


        :param pricing_component_name: The pricing_component_name of this ComponentChange.  # noqa: E501
        :type: str
        """
        if pricing_component_name is None:
            raise ValueError("Invalid value for `pricing_component_name`, must not be `None`")  # noqa: E501

        self._pricing_component_name = pricing_component_name

    @property
    def state(self):
        """Gets the state of this ComponentChange.  # noqa: E501


        :return: The state of this ComponentChange.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ComponentChange.


        :param state: The state of this ComponentChange.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["Failed", "Pending", "Succeeded"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def change_mode(self):
        """Gets the change_mode of this ComponentChange.  # noqa: E501


        :return: The change_mode of this ComponentChange.  # noqa: E501
        :rtype: str
        """
        return self._change_mode

    @change_mode.setter
    def change_mode(self, change_mode):
        """Sets the change_mode of this ComponentChange.


        :param change_mode: The change_mode of this ComponentChange.  # noqa: E501
        :type: str
        """
        if change_mode is None:
            raise ValueError("Invalid value for `change_mode`, must not be `None`")  # noqa: E501
        allowed_values = ["immediate", "delayed"]  # noqa: E501
        if change_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `change_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(change_mode, allowed_values)
            )

        self._change_mode = change_mode

    @property
    def value_effective(self):
        """Gets the value_effective of this ComponentChange.  # noqa: E501


        :return: The value_effective of this ComponentChange.  # noqa: E501
        :rtype: datetime
        """
        return self._value_effective

    @value_effective.setter
    def value_effective(self, value_effective):
        """Sets the value_effective of this ComponentChange.


        :param value_effective: The value_effective of this ComponentChange.  # noqa: E501
        :type: datetime
        """

        self._value_effective = value_effective

    @property
    def new_value(self):
        """Gets the new_value of this ComponentChange.  # noqa: E501


        :return: The new_value of this ComponentChange.  # noqa: E501
        :rtype: int
        """
        return self._new_value

    @new_value.setter
    def new_value(self, new_value):
        """Sets the new_value of this ComponentChange.


        :param new_value: The new_value of this ComponentChange.  # noqa: E501
        :type: int
        """
        if new_value is None:
            raise ValueError("Invalid value for `new_value`, must not be `None`")  # noqa: E501

        self._new_value = new_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ComponentChange, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComponentChange):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
