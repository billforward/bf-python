# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InvoicePayments(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'changed_by': 'str',
        'updated': 'datetime',
        'id': 'str',
        'crm_id': 'str',
        'payment_id': 'str',
        'invoice_id': 'str',
        'organization_id': 'str',
        'currency': 'CreditNoteCurrency',
        'gateway': 'str',
        'nominal_amount': 'float',
        'actual_amount': 'float',
        'refunded_amount': 'float',
        'payment_received': 'datetime',
        'refund_received': 'datetime'
    }

    attribute_map = {
        'created': 'created',
        'changed_by': 'changedBy',
        'updated': 'updated',
        'id': 'id',
        'crm_id': 'crmID',
        'payment_id': 'paymentID',
        'invoice_id': 'invoiceID',
        'organization_id': 'organizationID',
        'currency': 'currency',
        'gateway': 'gateway',
        'nominal_amount': 'nominalAmount',
        'actual_amount': 'actualAmount',
        'refunded_amount': 'refundedAmount',
        'payment_received': 'paymentReceived',
        'refund_received': 'refundReceived'
    }

    def __init__(self, created=None, changed_by=None, updated=None, id=None, crm_id=None, payment_id=None, invoice_id=None, organization_id=None, currency=None, gateway=None, nominal_amount=None, actual_amount=None, refunded_amount=None, payment_received=None, refund_received=None):  # noqa: E501
        """InvoicePayments - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._changed_by = None
        self._updated = None
        self._id = None
        self._crm_id = None
        self._payment_id = None
        self._invoice_id = None
        self._organization_id = None
        self._currency = None
        self._gateway = None
        self._nominal_amount = None
        self._actual_amount = None
        self._refunded_amount = None
        self._payment_received = None
        self._refund_received = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if changed_by is not None:
            self.changed_by = changed_by
        if updated is not None:
            self.updated = updated
        if id is not None:
            self.id = id
        if crm_id is not None:
            self.crm_id = crm_id
        self.payment_id = payment_id
        self.invoice_id = invoice_id
        self.organization_id = organization_id
        self.currency = currency
        if gateway is not None:
            self.gateway = gateway
        self.nominal_amount = nominal_amount
        self.actual_amount = actual_amount
        self.refunded_amount = refunded_amount
        self.payment_received = payment_received
        self.refund_received = refund_received

    @property
    def created(self):
        """Gets the created of this InvoicePayments.  # noqa: E501


        :return: The created of this InvoicePayments.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this InvoicePayments.


        :param created: The created of this InvoicePayments.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """Gets the changed_by of this InvoicePayments.  # noqa: E501


        :return: The changed_by of this InvoicePayments.  # noqa: E501
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """Sets the changed_by of this InvoicePayments.


        :param changed_by: The changed_by of this InvoicePayments.  # noqa: E501
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """Gets the updated of this InvoicePayments.  # noqa: E501


        :return: The updated of this InvoicePayments.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this InvoicePayments.


        :param updated: The updated of this InvoicePayments.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """Gets the id of this InvoicePayments.  # noqa: E501


        :return: The id of this InvoicePayments.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InvoicePayments.


        :param id: The id of this InvoicePayments.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def crm_id(self):
        """Gets the crm_id of this InvoicePayments.  # noqa: E501


        :return: The crm_id of this InvoicePayments.  # noqa: E501
        :rtype: str
        """
        return self._crm_id

    @crm_id.setter
    def crm_id(self, crm_id):
        """Sets the crm_id of this InvoicePayments.


        :param crm_id: The crm_id of this InvoicePayments.  # noqa: E501
        :type: str
        """

        self._crm_id = crm_id

    @property
    def payment_id(self):
        """Gets the payment_id of this InvoicePayments.  # noqa: E501


        :return: The payment_id of this InvoicePayments.  # noqa: E501
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this InvoicePayments.


        :param payment_id: The payment_id of this InvoicePayments.  # noqa: E501
        :type: str
        """
        if payment_id is None:
            raise ValueError("Invalid value for `payment_id`, must not be `None`")  # noqa: E501

        self._payment_id = payment_id

    @property
    def invoice_id(self):
        """Gets the invoice_id of this InvoicePayments.  # noqa: E501


        :return: The invoice_id of this InvoicePayments.  # noqa: E501
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this InvoicePayments.


        :param invoice_id: The invoice_id of this InvoicePayments.  # noqa: E501
        :type: str
        """
        if invoice_id is None:
            raise ValueError("Invalid value for `invoice_id`, must not be `None`")  # noqa: E501

        self._invoice_id = invoice_id

    @property
    def organization_id(self):
        """Gets the organization_id of this InvoicePayments.  # noqa: E501


        :return: The organization_id of this InvoicePayments.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this InvoicePayments.


        :param organization_id: The organization_id of this InvoicePayments.  # noqa: E501
        :type: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")  # noqa: E501

        self._organization_id = organization_id

    @property
    def currency(self):
        """Gets the currency of this InvoicePayments.  # noqa: E501


        :return: The currency of this InvoicePayments.  # noqa: E501
        :rtype: CreditNoteCurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this InvoicePayments.


        :param currency: The currency of this InvoicePayments.  # noqa: E501
        :type: CreditNoteCurrency
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def gateway(self):
        """Gets the gateway of this InvoicePayments.  # noqa: E501


        :return: The gateway of this InvoicePayments.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this InvoicePayments.


        :param gateway: The gateway of this InvoicePayments.  # noqa: E501
        :type: str
        """
        allowed_values = ["VOID", "cybersource_token", "card_vault", "paypal_simple", "locustworld", "free", "coupon", "credit_note", "stripe", "braintree", "zooz", "balanced", "paypal", "billforward_test", "offline", "trial", "stripeACH", "goCardless", "authorizeNet", "spreedly", "sagePay", "trustCommerce", "payvision", "kash", "epx", "shuttle", "square", "billforwardRandomizer", "cardConnect", "ebanx"]  # noqa: E501
        if gateway not in allowed_values:
            raise ValueError(
                "Invalid value for `gateway` ({0}), must be one of {1}"  # noqa: E501
                .format(gateway, allowed_values)
            )

        self._gateway = gateway

    @property
    def nominal_amount(self):
        """Gets the nominal_amount of this InvoicePayments.  # noqa: E501


        :return: The nominal_amount of this InvoicePayments.  # noqa: E501
        :rtype: float
        """
        return self._nominal_amount

    @nominal_amount.setter
    def nominal_amount(self, nominal_amount):
        """Sets the nominal_amount of this InvoicePayments.


        :param nominal_amount: The nominal_amount of this InvoicePayments.  # noqa: E501
        :type: float
        """
        if nominal_amount is None:
            raise ValueError("Invalid value for `nominal_amount`, must not be `None`")  # noqa: E501

        self._nominal_amount = nominal_amount

    @property
    def actual_amount(self):
        """Gets the actual_amount of this InvoicePayments.  # noqa: E501


        :return: The actual_amount of this InvoicePayments.  # noqa: E501
        :rtype: float
        """
        return self._actual_amount

    @actual_amount.setter
    def actual_amount(self, actual_amount):
        """Sets the actual_amount of this InvoicePayments.


        :param actual_amount: The actual_amount of this InvoicePayments.  # noqa: E501
        :type: float
        """
        if actual_amount is None:
            raise ValueError("Invalid value for `actual_amount`, must not be `None`")  # noqa: E501

        self._actual_amount = actual_amount

    @property
    def refunded_amount(self):
        """Gets the refunded_amount of this InvoicePayments.  # noqa: E501


        :return: The refunded_amount of this InvoicePayments.  # noqa: E501
        :rtype: float
        """
        return self._refunded_amount

    @refunded_amount.setter
    def refunded_amount(self, refunded_amount):
        """Sets the refunded_amount of this InvoicePayments.


        :param refunded_amount: The refunded_amount of this InvoicePayments.  # noqa: E501
        :type: float
        """
        if refunded_amount is None:
            raise ValueError("Invalid value for `refunded_amount`, must not be `None`")  # noqa: E501

        self._refunded_amount = refunded_amount

    @property
    def payment_received(self):
        """Gets the payment_received of this InvoicePayments.  # noqa: E501


        :return: The payment_received of this InvoicePayments.  # noqa: E501
        :rtype: datetime
        """
        return self._payment_received

    @payment_received.setter
    def payment_received(self, payment_received):
        """Sets the payment_received of this InvoicePayments.


        :param payment_received: The payment_received of this InvoicePayments.  # noqa: E501
        :type: datetime
        """
        if payment_received is None:
            raise ValueError("Invalid value for `payment_received`, must not be `None`")  # noqa: E501

        self._payment_received = payment_received

    @property
    def refund_received(self):
        """Gets the refund_received of this InvoicePayments.  # noqa: E501


        :return: The refund_received of this InvoicePayments.  # noqa: E501
        :rtype: datetime
        """
        return self._refund_received

    @refund_received.setter
    def refund_received(self, refund_received):
        """Sets the refund_received of this InvoicePayments.


        :param refund_received: The refund_received of this InvoicePayments.  # noqa: E501
        :type: datetime
        """
        if refund_received is None:
            raise ValueError("Invalid value for `refund_received`, must not be `None`")  # noqa: E501

        self._refund_received = refund_received

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvoicePayments, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoicePayments):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
