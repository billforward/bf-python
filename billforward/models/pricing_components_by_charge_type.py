# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PricingComponentsByChargeType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'setup': 'SetupPricingComponentsByChargeModel',
        'advance': 'AdvancePricingComponentsByChargeModel',
        'arrears': 'ArrearsPricingComponentsByChargeModel',
        'usage': 'UsagePricingComponentsByChargeModel',
        'aggregation': 'PlanAggregation'
    }

    attribute_map = {
        'setup': 'setup',
        'advance': 'advance',
        'arrears': 'arrears',
        'usage': 'usage',
        'aggregation': 'aggregation'
    }

    def __init__(self, setup=None, advance=None, arrears=None, usage=None, aggregation=None):  # noqa: E501
        """PricingComponentsByChargeType - a model defined in Swagger"""  # noqa: E501
        self._setup = None
        self._advance = None
        self._arrears = None
        self._usage = None
        self._aggregation = None
        self.discriminator = None
        if setup is not None:
            self.setup = setup
        if advance is not None:
            self.advance = advance
        if arrears is not None:
            self.arrears = arrears
        if usage is not None:
            self.usage = usage
        if aggregation is not None:
            self.aggregation = aggregation

    @property
    def setup(self):
        """Gets the setup of this PricingComponentsByChargeType.  # noqa: E501


        :return: The setup of this PricingComponentsByChargeType.  # noqa: E501
        :rtype: SetupPricingComponentsByChargeModel
        """
        return self._setup

    @setup.setter
    def setup(self, setup):
        """Sets the setup of this PricingComponentsByChargeType.


        :param setup: The setup of this PricingComponentsByChargeType.  # noqa: E501
        :type: SetupPricingComponentsByChargeModel
        """

        self._setup = setup

    @property
    def advance(self):
        """Gets the advance of this PricingComponentsByChargeType.  # noqa: E501


        :return: The advance of this PricingComponentsByChargeType.  # noqa: E501
        :rtype: AdvancePricingComponentsByChargeModel
        """
        return self._advance

    @advance.setter
    def advance(self, advance):
        """Sets the advance of this PricingComponentsByChargeType.


        :param advance: The advance of this PricingComponentsByChargeType.  # noqa: E501
        :type: AdvancePricingComponentsByChargeModel
        """

        self._advance = advance

    @property
    def arrears(self):
        """Gets the arrears of this PricingComponentsByChargeType.  # noqa: E501


        :return: The arrears of this PricingComponentsByChargeType.  # noqa: E501
        :rtype: ArrearsPricingComponentsByChargeModel
        """
        return self._arrears

    @arrears.setter
    def arrears(self, arrears):
        """Sets the arrears of this PricingComponentsByChargeType.


        :param arrears: The arrears of this PricingComponentsByChargeType.  # noqa: E501
        :type: ArrearsPricingComponentsByChargeModel
        """

        self._arrears = arrears

    @property
    def usage(self):
        """Gets the usage of this PricingComponentsByChargeType.  # noqa: E501


        :return: The usage of this PricingComponentsByChargeType.  # noqa: E501
        :rtype: UsagePricingComponentsByChargeModel
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this PricingComponentsByChargeType.


        :param usage: The usage of this PricingComponentsByChargeType.  # noqa: E501
        :type: UsagePricingComponentsByChargeModel
        """

        self._usage = usage

    @property
    def aggregation(self):
        """Gets the aggregation of this PricingComponentsByChargeType.  # noqa: E501


        :return: The aggregation of this PricingComponentsByChargeType.  # noqa: E501
        :rtype: PlanAggregation
        """
        return self._aggregation

    @aggregation.setter
    def aggregation(self, aggregation):
        """Sets the aggregation of this PricingComponentsByChargeType.


        :param aggregation: The aggregation of this PricingComponentsByChargeType.  # noqa: E501
        :type: PlanAggregation
        """

        self._aggregation = aggregation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PricingComponentsByChargeType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PricingComponentsByChargeType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
