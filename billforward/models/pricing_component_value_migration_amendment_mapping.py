# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class PricingComponentValueMigrationAmendmentMapping(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, changed_by=None, updated=None, id=None, amendment_id=None, value=None, pricing_component_id=None, pricing_component_name=None, organization_id=None):
        """
        PricingComponentValueMigrationAmendmentMapping - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'changed_by': 'str',
            'updated': 'datetime',
            'id': 'str',
            'amendment_id': 'str',
            'value': 'int',
            'pricing_component_id': 'str',
            'pricing_component_name': 'str',
            'organization_id': 'str'
        }

        self.attribute_map = {
            'created': 'created',
            'changed_by': 'changedBy',
            'updated': 'updated',
            'id': 'id',
            'amendment_id': 'amendmentID',
            'value': 'value',
            'pricing_component_id': 'pricingComponentID',
            'pricing_component_name': 'pricingComponentName',
            'organization_id': 'organizationID'
        }

        self._created = created
        self._changed_by = changed_by
        self._updated = updated
        self._id = id
        self._amendment_id = amendment_id
        self._value = value
        self._pricing_component_id = pricing_component_id
        self._pricing_component_name = pricing_component_name
        self._organization_id = organization_id

    @property
    def created(self):
        """
        Gets the created of this PricingComponentValueMigrationAmendmentMapping.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this PricingComponentValueMigrationAmendmentMapping.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this PricingComponentValueMigrationAmendmentMapping.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this PricingComponentValueMigrationAmendmentMapping.
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """
        Gets the changed_by of this PricingComponentValueMigrationAmendmentMapping.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :return: The changed_by of this PricingComponentValueMigrationAmendmentMapping.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """
        Sets the changed_by of this PricingComponentValueMigrationAmendmentMapping.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :param changed_by: The changed_by of this PricingComponentValueMigrationAmendmentMapping.
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """
        Gets the updated of this PricingComponentValueMigrationAmendmentMapping.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :return: The updated of this PricingComponentValueMigrationAmendmentMapping.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this PricingComponentValueMigrationAmendmentMapping.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :param updated: The updated of this PricingComponentValueMigrationAmendmentMapping.
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """
        Gets the id of this PricingComponentValueMigrationAmendmentMapping.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :return: The id of this PricingComponentValueMigrationAmendmentMapping.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PricingComponentValueMigrationAmendmentMapping.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :param id: The id of this PricingComponentValueMigrationAmendmentMapping.
        :type: str
        """

        self._id = id

    @property
    def amendment_id(self):
        """
        Gets the amendment_id of this PricingComponentValueMigrationAmendmentMapping.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :return: The amendment_id of this PricingComponentValueMigrationAmendmentMapping.
        :rtype: str
        """
        return self._amendment_id

    @amendment_id.setter
    def amendment_id(self, amendment_id):
        """
        Sets the amendment_id of this PricingComponentValueMigrationAmendmentMapping.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :param amendment_id: The amendment_id of this PricingComponentValueMigrationAmendmentMapping.
        :type: str
        """

        self._amendment_id = amendment_id

    @property
    def value(self):
        """
        Gets the value of this PricingComponentValueMigrationAmendmentMapping.
        { \"description\" : \"Units purchased for pricing-component\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The value of this PricingComponentValueMigrationAmendmentMapping.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this PricingComponentValueMigrationAmendmentMapping.
        { \"description\" : \"Units purchased for pricing-component\", \"verbs\":[\"POST\",\"GET\"] }

        :param value: The value of this PricingComponentValueMigrationAmendmentMapping.
        :type: int
        """

        self._value = value

    @property
    def pricing_component_id(self):
        """
        Gets the pricing_component_id of this PricingComponentValueMigrationAmendmentMapping.
        { \"description\" : \"Identifier for pricing-component in new the new rate-plan\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The pricing_component_id of this PricingComponentValueMigrationAmendmentMapping.
        :rtype: str
        """
        return self._pricing_component_id

    @pricing_component_id.setter
    def pricing_component_id(self, pricing_component_id):
        """
        Sets the pricing_component_id of this PricingComponentValueMigrationAmendmentMapping.
        { \"description\" : \"Identifier for pricing-component in new the new rate-plan\", \"verbs\":[\"POST\",\"GET\"] }

        :param pricing_component_id: The pricing_component_id of this PricingComponentValueMigrationAmendmentMapping.
        :type: str
        """

        self._pricing_component_id = pricing_component_id

    @property
    def pricing_component_name(self):
        """
        Gets the pricing_component_name of this PricingComponentValueMigrationAmendmentMapping.
        { \"description\" : \"Name of the pricing component. (Must be provided if pricingComponentID is empty)\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The pricing_component_name of this PricingComponentValueMigrationAmendmentMapping.
        :rtype: str
        """
        return self._pricing_component_name

    @pricing_component_name.setter
    def pricing_component_name(self, pricing_component_name):
        """
        Sets the pricing_component_name of this PricingComponentValueMigrationAmendmentMapping.
        { \"description\" : \"Name of the pricing component. (Must be provided if pricingComponentID is empty)\", \"verbs\":[\"POST\",\"GET\"] }

        :param pricing_component_name: The pricing_component_name of this PricingComponentValueMigrationAmendmentMapping.
        :type: str
        """

        self._pricing_component_name = pricing_component_name

    @property
    def organization_id(self):
        """
        Gets the organization_id of this PricingComponentValueMigrationAmendmentMapping.
        { \"description\" : \"\", \"verbs\":[] }

        :return: The organization_id of this PricingComponentValueMigrationAmendmentMapping.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this PricingComponentValueMigrationAmendmentMapping.
        { \"description\" : \"\", \"verbs\":[] }

        :param organization_id: The organization_id of this PricingComponentValueMigrationAmendmentMapping.
        :type: str
        """

        self._organization_id = organization_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
