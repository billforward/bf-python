# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BraintreeCaptureRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'organization_id': 'str',
        'account_id': 'str',
        'default_payment_method': 'bool',
        'cardholder_name': 'str',
        'card_number': 'str',
        'expiry_month': 'str',
        'expiry_year': 'str',
        'cvv': 'str',
        'device_data': 'str',
        'merchant_account_id': 'str',
        'ip_address': 'str',
        'ip_address_country': 'str'
    }

    attribute_map = {
        'created': 'created',
        'organization_id': 'organizationID',
        'account_id': 'accountID',
        'default_payment_method': 'defaultPaymentMethod',
        'cardholder_name': 'cardholderName',
        'card_number': 'cardNumber',
        'expiry_month': 'expiryMonth',
        'expiry_year': 'expiryYear',
        'cvv': 'cvv',
        'device_data': 'deviceData',
        'merchant_account_id': 'merchantAccountId',
        'ip_address': 'ipAddress',
        'ip_address_country': 'ipAddressCountry'
    }

    def __init__(self, created=None, organization_id=None, account_id=None, default_payment_method=None, cardholder_name=None, card_number=None, expiry_month=None, expiry_year=None, cvv=None, device_data=None, merchant_account_id=None, ip_address=None, ip_address_country=None):  # noqa: E501
        """BraintreeCaptureRequest - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._organization_id = None
        self._account_id = None
        self._default_payment_method = None
        self._cardholder_name = None
        self._card_number = None
        self._expiry_month = None
        self._expiry_year = None
        self._cvv = None
        self._device_data = None
        self._merchant_account_id = None
        self._ip_address = None
        self._ip_address_country = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if organization_id is not None:
            self.organization_id = organization_id
        if account_id is not None:
            self.account_id = account_id
        if default_payment_method is not None:
            self.default_payment_method = default_payment_method
        if cardholder_name is not None:
            self.cardholder_name = cardholder_name
        if card_number is not None:
            self.card_number = card_number
        if expiry_month is not None:
            self.expiry_month = expiry_month
        if expiry_year is not None:
            self.expiry_year = expiry_year
        if cvv is not None:
            self.cvv = cvv
        if device_data is not None:
            self.device_data = device_data
        if merchant_account_id is not None:
            self.merchant_account_id = merchant_account_id
        if ip_address is not None:
            self.ip_address = ip_address
        if ip_address_country is not None:
            self.ip_address_country = ip_address_country

    @property
    def created(self):
        """Gets the created of this BraintreeCaptureRequest.  # noqa: E501


        :return: The created of this BraintreeCaptureRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this BraintreeCaptureRequest.


        :param created: The created of this BraintreeCaptureRequest.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def organization_id(self):
        """Gets the organization_id of this BraintreeCaptureRequest.  # noqa: E501


        :return: The organization_id of this BraintreeCaptureRequest.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this BraintreeCaptureRequest.


        :param organization_id: The organization_id of this BraintreeCaptureRequest.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def account_id(self):
        """Gets the account_id of this BraintreeCaptureRequest.  # noqa: E501


        :return: The account_id of this BraintreeCaptureRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this BraintreeCaptureRequest.


        :param account_id: The account_id of this BraintreeCaptureRequest.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def default_payment_method(self):
        """Gets the default_payment_method of this BraintreeCaptureRequest.  # noqa: E501


        :return: The default_payment_method of this BraintreeCaptureRequest.  # noqa: E501
        :rtype: bool
        """
        return self._default_payment_method

    @default_payment_method.setter
    def default_payment_method(self, default_payment_method):
        """Sets the default_payment_method of this BraintreeCaptureRequest.


        :param default_payment_method: The default_payment_method of this BraintreeCaptureRequest.  # noqa: E501
        :type: bool
        """

        self._default_payment_method = default_payment_method

    @property
    def cardholder_name(self):
        """Gets the cardholder_name of this BraintreeCaptureRequest.  # noqa: E501


        :return: The cardholder_name of this BraintreeCaptureRequest.  # noqa: E501
        :rtype: str
        """
        return self._cardholder_name

    @cardholder_name.setter
    def cardholder_name(self, cardholder_name):
        """Sets the cardholder_name of this BraintreeCaptureRequest.


        :param cardholder_name: The cardholder_name of this BraintreeCaptureRequest.  # noqa: E501
        :type: str
        """

        self._cardholder_name = cardholder_name

    @property
    def card_number(self):
        """Gets the card_number of this BraintreeCaptureRequest.  # noqa: E501


        :return: The card_number of this BraintreeCaptureRequest.  # noqa: E501
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """Sets the card_number of this BraintreeCaptureRequest.


        :param card_number: The card_number of this BraintreeCaptureRequest.  # noqa: E501
        :type: str
        """

        self._card_number = card_number

    @property
    def expiry_month(self):
        """Gets the expiry_month of this BraintreeCaptureRequest.  # noqa: E501


        :return: The expiry_month of this BraintreeCaptureRequest.  # noqa: E501
        :rtype: str
        """
        return self._expiry_month

    @expiry_month.setter
    def expiry_month(self, expiry_month):
        """Sets the expiry_month of this BraintreeCaptureRequest.


        :param expiry_month: The expiry_month of this BraintreeCaptureRequest.  # noqa: E501
        :type: str
        """

        self._expiry_month = expiry_month

    @property
    def expiry_year(self):
        """Gets the expiry_year of this BraintreeCaptureRequest.  # noqa: E501


        :return: The expiry_year of this BraintreeCaptureRequest.  # noqa: E501
        :rtype: str
        """
        return self._expiry_year

    @expiry_year.setter
    def expiry_year(self, expiry_year):
        """Sets the expiry_year of this BraintreeCaptureRequest.


        :param expiry_year: The expiry_year of this BraintreeCaptureRequest.  # noqa: E501
        :type: str
        """

        self._expiry_year = expiry_year

    @property
    def cvv(self):
        """Gets the cvv of this BraintreeCaptureRequest.  # noqa: E501


        :return: The cvv of this BraintreeCaptureRequest.  # noqa: E501
        :rtype: str
        """
        return self._cvv

    @cvv.setter
    def cvv(self, cvv):
        """Sets the cvv of this BraintreeCaptureRequest.


        :param cvv: The cvv of this BraintreeCaptureRequest.  # noqa: E501
        :type: str
        """

        self._cvv = cvv

    @property
    def device_data(self):
        """Gets the device_data of this BraintreeCaptureRequest.  # noqa: E501


        :return: The device_data of this BraintreeCaptureRequest.  # noqa: E501
        :rtype: str
        """
        return self._device_data

    @device_data.setter
    def device_data(self, device_data):
        """Sets the device_data of this BraintreeCaptureRequest.


        :param device_data: The device_data of this BraintreeCaptureRequest.  # noqa: E501
        :type: str
        """

        self._device_data = device_data

    @property
    def merchant_account_id(self):
        """Gets the merchant_account_id of this BraintreeCaptureRequest.  # noqa: E501


        :return: The merchant_account_id of this BraintreeCaptureRequest.  # noqa: E501
        :rtype: str
        """
        return self._merchant_account_id

    @merchant_account_id.setter
    def merchant_account_id(self, merchant_account_id):
        """Sets the merchant_account_id of this BraintreeCaptureRequest.


        :param merchant_account_id: The merchant_account_id of this BraintreeCaptureRequest.  # noqa: E501
        :type: str
        """

        self._merchant_account_id = merchant_account_id

    @property
    def ip_address(self):
        """Gets the ip_address of this BraintreeCaptureRequest.  # noqa: E501


        :return: The ip_address of this BraintreeCaptureRequest.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this BraintreeCaptureRequest.


        :param ip_address: The ip_address of this BraintreeCaptureRequest.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def ip_address_country(self):
        """Gets the ip_address_country of this BraintreeCaptureRequest.  # noqa: E501


        :return: The ip_address_country of this BraintreeCaptureRequest.  # noqa: E501
        :rtype: str
        """
        return self._ip_address_country

    @ip_address_country.setter
    def ip_address_country(self, ip_address_country):
        """Sets the ip_address_country of this BraintreeCaptureRequest.


        :param ip_address_country: The ip_address_country of this BraintreeCaptureRequest.  # noqa: E501
        :type: str
        """

        self._ip_address_country = ip_address_country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BraintreeCaptureRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BraintreeCaptureRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
