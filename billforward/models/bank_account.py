# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BankAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'changed_by': 'str',
        'updated': 'datetime',
        'id': 'str',
        'account_id': 'str',
        'organization_id': 'str',
        'routing_number': 'str',
        'account_number': 'str',
        'payment_method_id': 'str',
        'country': 'str',
        'holder_name': 'str',
        'account_holder_type': 'str',
        'verification_status': 'str'
    }

    attribute_map = {
        'created': 'created',
        'changed_by': 'changedBy',
        'updated': 'updated',
        'id': 'id',
        'account_id': 'accountID',
        'organization_id': 'organizationID',
        'routing_number': 'routingNumber',
        'account_number': 'accountNumber',
        'payment_method_id': 'paymentMethodID',
        'country': 'country',
        'holder_name': 'holderName',
        'account_holder_type': 'accountHolderType',
        'verification_status': 'verificationStatus'
    }

    def __init__(self, created=None, changed_by=None, updated=None, id=None, account_id=None, organization_id=None, routing_number=None, account_number=None, payment_method_id=None, country=None, holder_name=None, account_holder_type=None, verification_status=None):  # noqa: E501
        """BankAccount - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._changed_by = None
        self._updated = None
        self._id = None
        self._account_id = None
        self._organization_id = None
        self._routing_number = None
        self._account_number = None
        self._payment_method_id = None
        self._country = None
        self._holder_name = None
        self._account_holder_type = None
        self._verification_status = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if changed_by is not None:
            self.changed_by = changed_by
        if updated is not None:
            self.updated = updated
        if id is not None:
            self.id = id
        if account_id is not None:
            self.account_id = account_id
        if organization_id is not None:
            self.organization_id = organization_id
        self.routing_number = routing_number
        self.account_number = account_number
        if payment_method_id is not None:
            self.payment_method_id = payment_method_id
        if country is not None:
            self.country = country
        if holder_name is not None:
            self.holder_name = holder_name
        if account_holder_type is not None:
            self.account_holder_type = account_holder_type
        if verification_status is not None:
            self.verification_status = verification_status

    @property
    def created(self):
        """Gets the created of this BankAccount.  # noqa: E501


        :return: The created of this BankAccount.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this BankAccount.


        :param created: The created of this BankAccount.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """Gets the changed_by of this BankAccount.  # noqa: E501


        :return: The changed_by of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """Sets the changed_by of this BankAccount.


        :param changed_by: The changed_by of this BankAccount.  # noqa: E501
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """Gets the updated of this BankAccount.  # noqa: E501


        :return: The updated of this BankAccount.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this BankAccount.


        :param updated: The updated of this BankAccount.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """Gets the id of this BankAccount.  # noqa: E501


        :return: The id of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BankAccount.


        :param id: The id of this BankAccount.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def account_id(self):
        """Gets the account_id of this BankAccount.  # noqa: E501


        :return: The account_id of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this BankAccount.


        :param account_id: The account_id of this BankAccount.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def organization_id(self):
        """Gets the organization_id of this BankAccount.  # noqa: E501


        :return: The organization_id of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this BankAccount.


        :param organization_id: The organization_id of this BankAccount.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def routing_number(self):
        """Gets the routing_number of this BankAccount.  # noqa: E501


        :return: The routing_number of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._routing_number

    @routing_number.setter
    def routing_number(self, routing_number):
        """Sets the routing_number of this BankAccount.


        :param routing_number: The routing_number of this BankAccount.  # noqa: E501
        :type: str
        """
        if routing_number is None:
            raise ValueError("Invalid value for `routing_number`, must not be `None`")  # noqa: E501

        self._routing_number = routing_number

    @property
    def account_number(self):
        """Gets the account_number of this BankAccount.  # noqa: E501


        :return: The account_number of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this BankAccount.


        :param account_number: The account_number of this BankAccount.  # noqa: E501
        :type: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")  # noqa: E501

        self._account_number = account_number

    @property
    def payment_method_id(self):
        """Gets the payment_method_id of this BankAccount.  # noqa: E501


        :return: The payment_method_id of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._payment_method_id

    @payment_method_id.setter
    def payment_method_id(self, payment_method_id):
        """Sets the payment_method_id of this BankAccount.


        :param payment_method_id: The payment_method_id of this BankAccount.  # noqa: E501
        :type: str
        """

        self._payment_method_id = payment_method_id

    @property
    def country(self):
        """Gets the country of this BankAccount.  # noqa: E501


        :return: The country of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this BankAccount.


        :param country: The country of this BankAccount.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def holder_name(self):
        """Gets the holder_name of this BankAccount.  # noqa: E501


        :return: The holder_name of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._holder_name

    @holder_name.setter
    def holder_name(self, holder_name):
        """Sets the holder_name of this BankAccount.


        :param holder_name: The holder_name of this BankAccount.  # noqa: E501
        :type: str
        """

        self._holder_name = holder_name

    @property
    def account_holder_type(self):
        """Gets the account_holder_type of this BankAccount.  # noqa: E501


        :return: The account_holder_type of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_holder_type

    @account_holder_type.setter
    def account_holder_type(self, account_holder_type):
        """Sets the account_holder_type of this BankAccount.


        :param account_holder_type: The account_holder_type of this BankAccount.  # noqa: E501
        :type: str
        """

        self._account_holder_type = account_holder_type

    @property
    def verification_status(self):
        """Gets the verification_status of this BankAccount.  # noqa: E501


        :return: The verification_status of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._verification_status

    @verification_status.setter
    def verification_status(self, verification_status):
        """Sets the verification_status of this BankAccount.


        :param verification_status: The verification_status of this BankAccount.  # noqa: E501
        :type: str
        """
        allowed_values = ["Pending", "Failed", "Verified"]  # noqa: E501
        if verification_status not in allowed_values:
            raise ValueError(
                "Invalid value for `verification_status` ({0}), must be one of {1}"  # noqa: E501
                .format(verification_status, allowed_values)
            )

        self._verification_status = verification_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BankAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
