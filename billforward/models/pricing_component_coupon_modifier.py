# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class PricingComponentCouponModifier(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, changed_by=None, updated=None, id=None, organization_id=None, coupon_definition_id=None, effect_amount=None, operand=None, effect=None, effect_additional=False, specifier_amount=None, domain=None, specifier=None, precedence=None, deleted=False):
        """
        PricingComponentCouponModifier - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'changed_by': 'str',
            'updated': 'datetime',
            'id': 'str',
            'organization_id': 'str',
            'coupon_definition_id': 'str',
            'effect_amount': 'float',
            'operand': 'str',
            'effect': 'str',
            'effect_additional': 'bool',
            'specifier_amount': 'int',
            'domain': 'str',
            'specifier': 'str',
            'precedence': 'int',
            'deleted': 'bool'
        }

        self.attribute_map = {
            'created': 'created',
            'changed_by': 'changedBy',
            'updated': 'updated',
            'id': 'id',
            'organization_id': 'organizationID',
            'coupon_definition_id': 'couponDefinitionID',
            'effect_amount': 'effectAmount',
            'operand': 'operand',
            'effect': 'effect',
            'effect_additional': 'effectAdditional',
            'specifier_amount': 'specifierAmount',
            'domain': 'domain',
            'specifier': 'specifier',
            'precedence': 'precedence',
            'deleted': 'deleted'
        }

        self._created = created
        self._changed_by = changed_by
        self._updated = updated
        self._id = id
        self._organization_id = organization_id
        self._coupon_definition_id = coupon_definition_id
        self._effect_amount = effect_amount
        self._operand = operand
        self._effect = effect
        self._effect_additional = effect_additional
        self._specifier_amount = specifier_amount
        self._domain = domain
        self._specifier = specifier
        self._precedence = precedence
        self._deleted = deleted

    @property
    def created(self):
        """
        Gets the created of this PricingComponentCouponModifier.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this PricingComponentCouponModifier.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this PricingComponentCouponModifier.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this PricingComponentCouponModifier.
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """
        Gets the changed_by of this PricingComponentCouponModifier.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :return: The changed_by of this PricingComponentCouponModifier.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """
        Sets the changed_by of this PricingComponentCouponModifier.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :param changed_by: The changed_by of this PricingComponentCouponModifier.
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """
        Gets the updated of this PricingComponentCouponModifier.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :return: The updated of this PricingComponentCouponModifier.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this PricingComponentCouponModifier.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :param updated: The updated of this PricingComponentCouponModifier.
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """
        Gets the id of this PricingComponentCouponModifier.
        { \"description\" : \"ID of the coupon-modifier.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The id of this PricingComponentCouponModifier.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PricingComponentCouponModifier.
        { \"description\" : \"ID of the coupon-modifier.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param id: The id of this PricingComponentCouponModifier.
        :type: str
        """

        self._id = id

    @property
    def organization_id(self):
        """
        Gets the organization_id of this PricingComponentCouponModifier.
        { \"description\" : \"ID of the organization associated with the coupon-modifier.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The organization_id of this PricingComponentCouponModifier.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this PricingComponentCouponModifier.
        { \"description\" : \"ID of the organization associated with the coupon-modifier.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param organization_id: The organization_id of this PricingComponentCouponModifier.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def coupon_definition_id(self):
        """
        Gets the coupon_definition_id of this PricingComponentCouponModifier.
        { \"description\" : \"The unique ID of the coupon-definition associated with the coupon-modifier.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The coupon_definition_id of this PricingComponentCouponModifier.
        :rtype: str
        """
        return self._coupon_definition_id

    @coupon_definition_id.setter
    def coupon_definition_id(self, coupon_definition_id):
        """
        Sets the coupon_definition_id of this PricingComponentCouponModifier.
        { \"description\" : \"The unique ID of the coupon-definition associated with the coupon-modifier.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param coupon_definition_id: The coupon_definition_id of this PricingComponentCouponModifier.
        :type: str
        """

        self._coupon_definition_id = coupon_definition_id

    @property
    def effect_amount(self):
        """
        Gets the effect_amount of this PricingComponentCouponModifier.
        { \"description\" : \"The effect amount for the coupon-modifier. This is affected by the operand field.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The effect_amount of this PricingComponentCouponModifier.
        :rtype: float
        """
        return self._effect_amount

    @effect_amount.setter
    def effect_amount(self, effect_amount):
        """
        Sets the effect_amount of this PricingComponentCouponModifier.
        { \"description\" : \"The effect amount for the coupon-modifier. This is affected by the operand field.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param effect_amount: The effect_amount of this PricingComponentCouponModifier.
        :type: float
        """

        self._effect_amount = effect_amount

    @property
    def operand(self):
        """
        Gets the operand of this PricingComponentCouponModifier.
        { \"description\" : \"The operand field affects the effect amount of the coupon-modifier. If the operand is fixed, it is an exact amount of the currency defined by the coupon-definition. If the operand is percent, this means the coupon will be affecting a percentage of the unaltered cost. E.g. a 25% modifier will apply a 25% discount on a subscription or a pricing-component.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The operand of this PricingComponentCouponModifier.
        :rtype: str
        """
        return self._operand

    @operand.setter
    def operand(self, operand):
        """
        Sets the operand of this PricingComponentCouponModifier.
        { \"description\" : \"The operand field affects the effect amount of the coupon-modifier. If the operand is fixed, it is an exact amount of the currency defined by the coupon-definition. If the operand is percent, this means the coupon will be affecting a percentage of the unaltered cost. E.g. a 25% modifier will apply a 25% discount on a subscription or a pricing-component.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param operand: The operand of this PricingComponentCouponModifier.
        :type: str
        """
        allowed_values = ["fixed", "percent", "instance_fixed", "instance_percent"]
        if operand not in allowed_values:
            raise ValueError(
                "Invalid value for `operand` ({0}), must be one of {1}"
                .format(operand, allowed_values)
            )

        self._operand = operand

    @property
    def effect(self):
        """
        Gets the effect of this PricingComponentCouponModifier.
        { \"description\" : \"The effect of the coupon-modifier. The coupon-modifier can affect first, last, and cheapest value of a specific unit-of-measure-id for a subscription. The coupon-modifier can also affect all of the values for a unit-of-measure-id, or can affect all of the subscription cost.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The effect of this PricingComponentCouponModifier.
        :rtype: str
        """
        return self._effect

    @effect.setter
    def effect(self, effect):
        """
        Sets the effect of this PricingComponentCouponModifier.
        { \"description\" : \"The effect of the coupon-modifier. The coupon-modifier can affect first, last, and cheapest value of a specific unit-of-measure-id for a subscription. The coupon-modifier can also affect all of the values for a unit-of-measure-id, or can affect all of the subscription cost.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param effect: The effect of this PricingComponentCouponModifier.
        :type: str
        """
        allowed_values = ["discount_first_units", "discount_last_units", "discount_cheapest_units", "discount_all"]
        if effect not in allowed_values:
            raise ValueError(
                "Invalid value for `effect` ({0}), must be one of {1}"
                .format(effect, allowed_values)
            )

        self._effect = effect

    @property
    def effect_additional(self):
        """
        Gets the effect_additional of this PricingComponentCouponModifier.
        { \"description\" : \"Specifies whether the coupon-modifier will be affecting only additional units. If this field is set, the coupon-instance-existing-values for the coupon-instance are observed, and any units of the unit-of-measure-id defined by the modifier below the coupon-instance-existing-values for that unit-of-measure-id will be ignored.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The effect_additional of this PricingComponentCouponModifier.
        :rtype: bool
        """
        return self._effect_additional

    @effect_additional.setter
    def effect_additional(self, effect_additional):
        """
        Sets the effect_additional of this PricingComponentCouponModifier.
        { \"description\" : \"Specifies whether the coupon-modifier will be affecting only additional units. If this field is set, the coupon-instance-existing-values for the coupon-instance are observed, and any units of the unit-of-measure-id defined by the modifier below the coupon-instance-existing-values for that unit-of-measure-id will be ignored.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param effect_additional: The effect_additional of this PricingComponentCouponModifier.
        :type: bool
        """

        self._effect_additional = effect_additional

    @property
    def specifier_amount(self):
        """
        Gets the specifier_amount of this PricingComponentCouponModifier.
        { \"description\" : \"The number of units that will be affected by the coupon-modifier, if the domain is set to uom\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The specifier_amount of this PricingComponentCouponModifier.
        :rtype: int
        """
        return self._specifier_amount

    @specifier_amount.setter
    def specifier_amount(self, specifier_amount):
        """
        Sets the specifier_amount of this PricingComponentCouponModifier.
        { \"description\" : \"The number of units that will be affected by the coupon-modifier, if the domain is set to uom\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param specifier_amount: The specifier_amount of this PricingComponentCouponModifier.
        :type: int
        """

        self._specifier_amount = specifier_amount

    @property
    def domain(self):
        """
        Gets the domain of this PricingComponentCouponModifier.
        { \"description\" : \"The domain of the coupon-modifier\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The domain of this PricingComponentCouponModifier.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """
        Sets the domain of this PricingComponentCouponModifier.
        { \"description\" : \"The domain of the coupon-modifier\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param domain: The domain of this PricingComponentCouponModifier.
        :type: str
        """
        allowed_values = ["product", "uom", "PricingComponent"]
        if domain not in allowed_values:
            raise ValueError(
                "Invalid value for `domain` ({0}), must be one of {1}"
                .format(domain, allowed_values)
            )

        self._domain = domain

    @property
    def specifier(self):
        """
        Gets the specifier of this PricingComponentCouponModifier.
        { \"description\" : \"The specifier is domain-specific. If the domain is uom, this field is used to limit the coupon-modifier to a specific unit-of-measure-id.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The specifier of this PricingComponentCouponModifier.
        :rtype: str
        """
        return self._specifier

    @specifier.setter
    def specifier(self, specifier):
        """
        Sets the specifier of this PricingComponentCouponModifier.
        { \"description\" : \"The specifier is domain-specific. If the domain is uom, this field is used to limit the coupon-modifier to a specific unit-of-measure-id.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param specifier: The specifier of this PricingComponentCouponModifier.
        :type: str
        """

        self._specifier = specifier

    @property
    def precedence(self):
        """
        Gets the precedence of this PricingComponentCouponModifier.
        { \"description\" : \"The precedence of the coupon-modifier. This is used to order application of coupon-modifiers. Higher precedence means the coupon-modifier will be applied before others.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The precedence of this PricingComponentCouponModifier.
        :rtype: int
        """
        return self._precedence

    @precedence.setter
    def precedence(self, precedence):
        """
        Sets the precedence of this PricingComponentCouponModifier.
        { \"description\" : \"The precedence of the coupon-modifier. This is used to order application of coupon-modifiers. Higher precedence means the coupon-modifier will be applied before others.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param precedence: The precedence of this PricingComponentCouponModifier.
        :type: int
        """

        self._precedence = precedence

    @property
    def deleted(self):
        """
        Gets the deleted of this PricingComponentCouponModifier.
        { \"description\" : \"Has the coupon-modifier been deleted.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The deleted of this PricingComponentCouponModifier.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """
        Sets the deleted of this PricingComponentCouponModifier.
        { \"description\" : \"Has the coupon-modifier been deleted.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param deleted: The deleted of this PricingComponentCouponModifier.
        :type: bool
        """

        self._deleted = deleted

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
