# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PriceLine(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tier_id': 'str',
        'pricing_component_version_id': 'str',
        'pricing_component_id': 'str',
        'product_rate_plan_id': 'str',
        'lower_threshold': 'int',
        'upper_threshold': 'int',
        'pricing_type': 'str',
        'calculation_details': 'str',
        'unit_price': 'float',
        'unit_price_excluding_tax': 'float',
        'prorated_unit_price': 'float',
        'prorated_unit_price_excluding_tax': 'float',
        'quantity': 'int',
        'cost': 'float',
        'cost_excluding_tax': 'float',
        'prorated_cost': 'float',
        'prorated_cost_excluding_tax': 'float'
    }

    attribute_map = {
        'tier_id': 'tierID',
        'pricing_component_version_id': 'pricingComponentVersionID',
        'pricing_component_id': 'pricingComponentID',
        'product_rate_plan_id': 'productRatePlanID',
        'lower_threshold': 'lowerThreshold',
        'upper_threshold': 'upperThreshold',
        'pricing_type': 'pricingType',
        'calculation_details': 'calculationDetails',
        'unit_price': 'unitPrice',
        'unit_price_excluding_tax': 'unitPriceExcludingTax',
        'prorated_unit_price': 'proratedUnitPrice',
        'prorated_unit_price_excluding_tax': 'proratedUnitPriceExcludingTax',
        'quantity': 'quantity',
        'cost': 'cost',
        'cost_excluding_tax': 'costExcludingTax',
        'prorated_cost': 'proratedCost',
        'prorated_cost_excluding_tax': 'proratedCostExcludingTax'
    }

    def __init__(self, tier_id=None, pricing_component_version_id=None, pricing_component_id=None, product_rate_plan_id=None, lower_threshold=None, upper_threshold=None, pricing_type=None, calculation_details=None, unit_price=None, unit_price_excluding_tax=None, prorated_unit_price=None, prorated_unit_price_excluding_tax=None, quantity=None, cost=None, cost_excluding_tax=None, prorated_cost=None, prorated_cost_excluding_tax=None):  # noqa: E501
        """PriceLine - a model defined in Swagger"""  # noqa: E501
        self._tier_id = None
        self._pricing_component_version_id = None
        self._pricing_component_id = None
        self._product_rate_plan_id = None
        self._lower_threshold = None
        self._upper_threshold = None
        self._pricing_type = None
        self._calculation_details = None
        self._unit_price = None
        self._unit_price_excluding_tax = None
        self._prorated_unit_price = None
        self._prorated_unit_price_excluding_tax = None
        self._quantity = None
        self._cost = None
        self._cost_excluding_tax = None
        self._prorated_cost = None
        self._prorated_cost_excluding_tax = None
        self.discriminator = None
        if tier_id is not None:
            self.tier_id = tier_id
        if pricing_component_version_id is not None:
            self.pricing_component_version_id = pricing_component_version_id
        if pricing_component_id is not None:
            self.pricing_component_id = pricing_component_id
        if product_rate_plan_id is not None:
            self.product_rate_plan_id = product_rate_plan_id
        if lower_threshold is not None:
            self.lower_threshold = lower_threshold
        if upper_threshold is not None:
            self.upper_threshold = upper_threshold
        if pricing_type is not None:
            self.pricing_type = pricing_type
        if calculation_details is not None:
            self.calculation_details = calculation_details
        if unit_price is not None:
            self.unit_price = unit_price
        if unit_price_excluding_tax is not None:
            self.unit_price_excluding_tax = unit_price_excluding_tax
        if prorated_unit_price is not None:
            self.prorated_unit_price = prorated_unit_price
        if prorated_unit_price_excluding_tax is not None:
            self.prorated_unit_price_excluding_tax = prorated_unit_price_excluding_tax
        if quantity is not None:
            self.quantity = quantity
        if cost is not None:
            self.cost = cost
        if cost_excluding_tax is not None:
            self.cost_excluding_tax = cost_excluding_tax
        if prorated_cost is not None:
            self.prorated_cost = prorated_cost
        if prorated_cost_excluding_tax is not None:
            self.prorated_cost_excluding_tax = prorated_cost_excluding_tax

    @property
    def tier_id(self):
        """Gets the tier_id of this PriceLine.  # noqa: E501


        :return: The tier_id of this PriceLine.  # noqa: E501
        :rtype: str
        """
        return self._tier_id

    @tier_id.setter
    def tier_id(self, tier_id):
        """Sets the tier_id of this PriceLine.


        :param tier_id: The tier_id of this PriceLine.  # noqa: E501
        :type: str
        """

        self._tier_id = tier_id

    @property
    def pricing_component_version_id(self):
        """Gets the pricing_component_version_id of this PriceLine.  # noqa: E501


        :return: The pricing_component_version_id of this PriceLine.  # noqa: E501
        :rtype: str
        """
        return self._pricing_component_version_id

    @pricing_component_version_id.setter
    def pricing_component_version_id(self, pricing_component_version_id):
        """Sets the pricing_component_version_id of this PriceLine.


        :param pricing_component_version_id: The pricing_component_version_id of this PriceLine.  # noqa: E501
        :type: str
        """

        self._pricing_component_version_id = pricing_component_version_id

    @property
    def pricing_component_id(self):
        """Gets the pricing_component_id of this PriceLine.  # noqa: E501


        :return: The pricing_component_id of this PriceLine.  # noqa: E501
        :rtype: str
        """
        return self._pricing_component_id

    @pricing_component_id.setter
    def pricing_component_id(self, pricing_component_id):
        """Sets the pricing_component_id of this PriceLine.


        :param pricing_component_id: The pricing_component_id of this PriceLine.  # noqa: E501
        :type: str
        """

        self._pricing_component_id = pricing_component_id

    @property
    def product_rate_plan_id(self):
        """Gets the product_rate_plan_id of this PriceLine.  # noqa: E501


        :return: The product_rate_plan_id of this PriceLine.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_id

    @product_rate_plan_id.setter
    def product_rate_plan_id(self, product_rate_plan_id):
        """Sets the product_rate_plan_id of this PriceLine.


        :param product_rate_plan_id: The product_rate_plan_id of this PriceLine.  # noqa: E501
        :type: str
        """

        self._product_rate_plan_id = product_rate_plan_id

    @property
    def lower_threshold(self):
        """Gets the lower_threshold of this PriceLine.  # noqa: E501


        :return: The lower_threshold of this PriceLine.  # noqa: E501
        :rtype: int
        """
        return self._lower_threshold

    @lower_threshold.setter
    def lower_threshold(self, lower_threshold):
        """Sets the lower_threshold of this PriceLine.


        :param lower_threshold: The lower_threshold of this PriceLine.  # noqa: E501
        :type: int
        """

        self._lower_threshold = lower_threshold

    @property
    def upper_threshold(self):
        """Gets the upper_threshold of this PriceLine.  # noqa: E501


        :return: The upper_threshold of this PriceLine.  # noqa: E501
        :rtype: int
        """
        return self._upper_threshold

    @upper_threshold.setter
    def upper_threshold(self, upper_threshold):
        """Sets the upper_threshold of this PriceLine.


        :param upper_threshold: The upper_threshold of this PriceLine.  # noqa: E501
        :type: int
        """

        self._upper_threshold = upper_threshold

    @property
    def pricing_type(self):
        """Gets the pricing_type of this PriceLine.  # noqa: E501


        :return: The pricing_type of this PriceLine.  # noqa: E501
        :rtype: str
        """
        return self._pricing_type

    @pricing_type.setter
    def pricing_type(self, pricing_type):
        """Sets the pricing_type of this PriceLine.


        :param pricing_type: The pricing_type of this PriceLine.  # noqa: E501
        :type: str
        """
        allowed_values = ["unit", "fixed", "bucket"]  # noqa: E501
        if pricing_type not in allowed_values:
            raise ValueError(
                "Invalid value for `pricing_type` ({0}), must be one of {1}"  # noqa: E501
                .format(pricing_type, allowed_values)
            )

        self._pricing_type = pricing_type

    @property
    def calculation_details(self):
        """Gets the calculation_details of this PriceLine.  # noqa: E501


        :return: The calculation_details of this PriceLine.  # noqa: E501
        :rtype: str
        """
        return self._calculation_details

    @calculation_details.setter
    def calculation_details(self, calculation_details):
        """Sets the calculation_details of this PriceLine.


        :param calculation_details: The calculation_details of this PriceLine.  # noqa: E501
        :type: str
        """

        self._calculation_details = calculation_details

    @property
    def unit_price(self):
        """Gets the unit_price of this PriceLine.  # noqa: E501


        :return: The unit_price of this PriceLine.  # noqa: E501
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this PriceLine.


        :param unit_price: The unit_price of this PriceLine.  # noqa: E501
        :type: float
        """

        self._unit_price = unit_price

    @property
    def unit_price_excluding_tax(self):
        """Gets the unit_price_excluding_tax of this PriceLine.  # noqa: E501


        :return: The unit_price_excluding_tax of this PriceLine.  # noqa: E501
        :rtype: float
        """
        return self._unit_price_excluding_tax

    @unit_price_excluding_tax.setter
    def unit_price_excluding_tax(self, unit_price_excluding_tax):
        """Sets the unit_price_excluding_tax of this PriceLine.


        :param unit_price_excluding_tax: The unit_price_excluding_tax of this PriceLine.  # noqa: E501
        :type: float
        """

        self._unit_price_excluding_tax = unit_price_excluding_tax

    @property
    def prorated_unit_price(self):
        """Gets the prorated_unit_price of this PriceLine.  # noqa: E501


        :return: The prorated_unit_price of this PriceLine.  # noqa: E501
        :rtype: float
        """
        return self._prorated_unit_price

    @prorated_unit_price.setter
    def prorated_unit_price(self, prorated_unit_price):
        """Sets the prorated_unit_price of this PriceLine.


        :param prorated_unit_price: The prorated_unit_price of this PriceLine.  # noqa: E501
        :type: float
        """

        self._prorated_unit_price = prorated_unit_price

    @property
    def prorated_unit_price_excluding_tax(self):
        """Gets the prorated_unit_price_excluding_tax of this PriceLine.  # noqa: E501


        :return: The prorated_unit_price_excluding_tax of this PriceLine.  # noqa: E501
        :rtype: float
        """
        return self._prorated_unit_price_excluding_tax

    @prorated_unit_price_excluding_tax.setter
    def prorated_unit_price_excluding_tax(self, prorated_unit_price_excluding_tax):
        """Sets the prorated_unit_price_excluding_tax of this PriceLine.


        :param prorated_unit_price_excluding_tax: The prorated_unit_price_excluding_tax of this PriceLine.  # noqa: E501
        :type: float
        """

        self._prorated_unit_price_excluding_tax = prorated_unit_price_excluding_tax

    @property
    def quantity(self):
        """Gets the quantity of this PriceLine.  # noqa: E501


        :return: The quantity of this PriceLine.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this PriceLine.


        :param quantity: The quantity of this PriceLine.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def cost(self):
        """Gets the cost of this PriceLine.  # noqa: E501


        :return: The cost of this PriceLine.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this PriceLine.


        :param cost: The cost of this PriceLine.  # noqa: E501
        :type: float
        """

        self._cost = cost

    @property
    def cost_excluding_tax(self):
        """Gets the cost_excluding_tax of this PriceLine.  # noqa: E501


        :return: The cost_excluding_tax of this PriceLine.  # noqa: E501
        :rtype: float
        """
        return self._cost_excluding_tax

    @cost_excluding_tax.setter
    def cost_excluding_tax(self, cost_excluding_tax):
        """Sets the cost_excluding_tax of this PriceLine.


        :param cost_excluding_tax: The cost_excluding_tax of this PriceLine.  # noqa: E501
        :type: float
        """

        self._cost_excluding_tax = cost_excluding_tax

    @property
    def prorated_cost(self):
        """Gets the prorated_cost of this PriceLine.  # noqa: E501


        :return: The prorated_cost of this PriceLine.  # noqa: E501
        :rtype: float
        """
        return self._prorated_cost

    @prorated_cost.setter
    def prorated_cost(self, prorated_cost):
        """Sets the prorated_cost of this PriceLine.


        :param prorated_cost: The prorated_cost of this PriceLine.  # noqa: E501
        :type: float
        """

        self._prorated_cost = prorated_cost

    @property
    def prorated_cost_excluding_tax(self):
        """Gets the prorated_cost_excluding_tax of this PriceLine.  # noqa: E501


        :return: The prorated_cost_excluding_tax of this PriceLine.  # noqa: E501
        :rtype: float
        """
        return self._prorated_cost_excluding_tax

    @prorated_cost_excluding_tax.setter
    def prorated_cost_excluding_tax(self, prorated_cost_excluding_tax):
        """Sets the prorated_cost_excluding_tax of this PriceLine.


        :param prorated_cost_excluding_tax: The prorated_cost_excluding_tax of this PriceLine.  # noqa: E501
        :type: float
        """

        self._prorated_cost_excluding_tax = prorated_cost_excluding_tax

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PriceLine, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PriceLine):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
