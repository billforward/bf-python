# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SubscriptionCharge(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'changed_by': 'str',
        'updated': 'datetime',
        'id': 'str',
        'account_id': 'str',
        'subscription_id': 'str',
        'subscription_version_id': 'str',
        'invoice_id': 'str',
        'organization_id': 'str',
        'name': 'str',
        'description': 'str',
        'tax_code': 'str',
        'amount': 'float',
        'amount_excluding_tax': 'float',
        'currency': 'CreditNoteCurrency',
        'period_start': 'datetime',
        'period_end': 'datetime',
        'type': 'str',
        'invoicing_type': 'str',
        'state': 'str',
        'charge_type': 'str',
        'calculation': 'str',
        'remaining_credit_behaviour': 'str',
        'trial': 'bool',
        'version_id': 'str',
        'version_number': 'int',
        'linked_charge_id': 'str',
        'percentage_of_original': 'float',
        'original_charge_id': 'str',
        'group_name': 'str',
        'outer_period_start': 'datetime',
        'crm_id': 'str',
        'type': 'str'
    }

    attribute_map = {
        'created': 'created',
        'changed_by': 'changedBy',
        'updated': 'updated',
        'id': 'id',
        'account_id': 'accountID',
        'subscription_id': 'subscriptionID',
        'subscription_version_id': 'subscriptionVersionID',
        'invoice_id': 'invoiceID',
        'organization_id': 'organizationID',
        'name': 'name',
        'description': 'description',
        'tax_code': 'taxCode',
        'amount': 'amount',
        'amount_excluding_tax': 'amountExcludingTax',
        'currency': 'currency',
        'period_start': 'periodStart',
        'period_end': 'periodEnd',
        'type': 'type',
        'invoicing_type': 'invoicingType',
        'state': 'state',
        'charge_type': 'chargeType',
        'calculation': 'calculation',
        'remaining_credit_behaviour': 'remainingCreditBehaviour',
        'trial': 'trial',
        'version_id': 'versionID',
        'version_number': 'versionNumber',
        'linked_charge_id': 'linkedChargeID',
        'percentage_of_original': 'percentageOfOriginal',
        'original_charge_id': 'originalChargeID',
        'group_name': 'groupName',
        'outer_period_start': 'outerPeriodStart',
        'crm_id': 'crmID',
        'type': '@type'
    }

    discriminator_value_class_map = {
          'ProductRatePlanMigrationCharge': 'ProductRatePlanMigrationCharge',
'CouponCharge': 'CouponCharge',
'ManualCharge': 'ManualCharge',
'PrepaymentCharge': 'PrepaymentCharge',
'SetupCharge': 'SetupCharge',
'AffiliateCommissionCharge': 'AffiliateCommissionCharge',
'ArrearsCharge': 'ArrearsCharge',
'UpgradeCharge': 'UpgradeCharge',
'PricingComponentCharge': 'PricingComponentCharge'    }

    def __init__(self, created=None, changed_by=None, updated=None, id=None, account_id=None, subscription_id=None, subscription_version_id=None, invoice_id=None, organization_id=None, name=None, description=None, tax_code=None, amount=None, amount_excluding_tax=None, currency=None, period_start=None, period_end=None, type=None, invoicing_type=None, state=None, charge_type=None, calculation=None, remaining_credit_behaviour=None, trial=None, version_id=None, version_number=None, linked_charge_id=None, percentage_of_original=None, original_charge_id=None, group_name=None, outer_period_start=None, crm_id=None, type=None):  # noqa: E501
        """SubscriptionCharge - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._changed_by = None
        self._updated = None
        self._id = None
        self._account_id = None
        self._subscription_id = None
        self._subscription_version_id = None
        self._invoice_id = None
        self._organization_id = None
        self._name = None
        self._description = None
        self._tax_code = None
        self._amount = None
        self._amount_excluding_tax = None
        self._currency = None
        self._period_start = None
        self._period_end = None
        self._type = None
        self._invoicing_type = None
        self._state = None
        self._charge_type = None
        self._calculation = None
        self._remaining_credit_behaviour = None
        self._trial = None
        self._version_id = None
        self._version_number = None
        self._linked_charge_id = None
        self._percentage_of_original = None
        self._original_charge_id = None
        self._group_name = None
        self._outer_period_start = None
        self._crm_id = None
        self._type = None
        self.discriminator = '@type'
        if created is not None:
            self.created = created
        if changed_by is not None:
            self.changed_by = changed_by
        if updated is not None:
            self.updated = updated
        if id is not None:
            self.id = id
        if account_id is not None:
            self.account_id = account_id
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if subscription_version_id is not None:
            self.subscription_version_id = subscription_version_id
        if invoice_id is not None:
            self.invoice_id = invoice_id
        if organization_id is not None:
            self.organization_id = organization_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if tax_code is not None:
            self.tax_code = tax_code
        if amount is not None:
            self.amount = amount
        if amount_excluding_tax is not None:
            self.amount_excluding_tax = amount_excluding_tax
        if currency is not None:
            self.currency = currency
        if period_start is not None:
            self.period_start = period_start
        if period_end is not None:
            self.period_end = period_end
        self.type = type
        self.invoicing_type = invoicing_type
        self.state = state
        self.charge_type = charge_type
        if calculation is not None:
            self.calculation = calculation
        self.remaining_credit_behaviour = remaining_credit_behaviour
        if trial is not None:
            self.trial = trial
        if version_id is not None:
            self.version_id = version_id
        self.version_number = version_number
        if linked_charge_id is not None:
            self.linked_charge_id = linked_charge_id
        if percentage_of_original is not None:
            self.percentage_of_original = percentage_of_original
        if original_charge_id is not None:
            self.original_charge_id = original_charge_id
        if group_name is not None:
            self.group_name = group_name
        if outer_period_start is not None:
            self.outer_period_start = outer_period_start
        if crm_id is not None:
            self.crm_id = crm_id
        self.type = type

    @property
    def created(self):
        """Gets the created of this SubscriptionCharge.  # noqa: E501


        :return: The created of this SubscriptionCharge.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this SubscriptionCharge.


        :param created: The created of this SubscriptionCharge.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """Gets the changed_by of this SubscriptionCharge.  # noqa: E501


        :return: The changed_by of this SubscriptionCharge.  # noqa: E501
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """Sets the changed_by of this SubscriptionCharge.


        :param changed_by: The changed_by of this SubscriptionCharge.  # noqa: E501
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """Gets the updated of this SubscriptionCharge.  # noqa: E501


        :return: The updated of this SubscriptionCharge.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this SubscriptionCharge.


        :param updated: The updated of this SubscriptionCharge.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """Gets the id of this SubscriptionCharge.  # noqa: E501


        :return: The id of this SubscriptionCharge.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubscriptionCharge.


        :param id: The id of this SubscriptionCharge.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def account_id(self):
        """Gets the account_id of this SubscriptionCharge.  # noqa: E501


        :return: The account_id of this SubscriptionCharge.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this SubscriptionCharge.


        :param account_id: The account_id of this SubscriptionCharge.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this SubscriptionCharge.  # noqa: E501


        :return: The subscription_id of this SubscriptionCharge.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this SubscriptionCharge.


        :param subscription_id: The subscription_id of this SubscriptionCharge.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def subscription_version_id(self):
        """Gets the subscription_version_id of this SubscriptionCharge.  # noqa: E501


        :return: The subscription_version_id of this SubscriptionCharge.  # noqa: E501
        :rtype: str
        """
        return self._subscription_version_id

    @subscription_version_id.setter
    def subscription_version_id(self, subscription_version_id):
        """Sets the subscription_version_id of this SubscriptionCharge.


        :param subscription_version_id: The subscription_version_id of this SubscriptionCharge.  # noqa: E501
        :type: str
        """

        self._subscription_version_id = subscription_version_id

    @property
    def invoice_id(self):
        """Gets the invoice_id of this SubscriptionCharge.  # noqa: E501


        :return: The invoice_id of this SubscriptionCharge.  # noqa: E501
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this SubscriptionCharge.


        :param invoice_id: The invoice_id of this SubscriptionCharge.  # noqa: E501
        :type: str
        """

        self._invoice_id = invoice_id

    @property
    def organization_id(self):
        """Gets the organization_id of this SubscriptionCharge.  # noqa: E501


        :return: The organization_id of this SubscriptionCharge.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this SubscriptionCharge.


        :param organization_id: The organization_id of this SubscriptionCharge.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def name(self):
        """Gets the name of this SubscriptionCharge.  # noqa: E501


        :return: The name of this SubscriptionCharge.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SubscriptionCharge.


        :param name: The name of this SubscriptionCharge.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this SubscriptionCharge.  # noqa: E501


        :return: The description of this SubscriptionCharge.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SubscriptionCharge.


        :param description: The description of this SubscriptionCharge.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def tax_code(self):
        """Gets the tax_code of this SubscriptionCharge.  # noqa: E501


        :return: The tax_code of this SubscriptionCharge.  # noqa: E501
        :rtype: str
        """
        return self._tax_code

    @tax_code.setter
    def tax_code(self, tax_code):
        """Sets the tax_code of this SubscriptionCharge.


        :param tax_code: The tax_code of this SubscriptionCharge.  # noqa: E501
        :type: str
        """

        self._tax_code = tax_code

    @property
    def amount(self):
        """Gets the amount of this SubscriptionCharge.  # noqa: E501


        :return: The amount of this SubscriptionCharge.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this SubscriptionCharge.


        :param amount: The amount of this SubscriptionCharge.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def amount_excluding_tax(self):
        """Gets the amount_excluding_tax of this SubscriptionCharge.  # noqa: E501


        :return: The amount_excluding_tax of this SubscriptionCharge.  # noqa: E501
        :rtype: float
        """
        return self._amount_excluding_tax

    @amount_excluding_tax.setter
    def amount_excluding_tax(self, amount_excluding_tax):
        """Sets the amount_excluding_tax of this SubscriptionCharge.


        :param amount_excluding_tax: The amount_excluding_tax of this SubscriptionCharge.  # noqa: E501
        :type: float
        """

        self._amount_excluding_tax = amount_excluding_tax

    @property
    def currency(self):
        """Gets the currency of this SubscriptionCharge.  # noqa: E501


        :return: The currency of this SubscriptionCharge.  # noqa: E501
        :rtype: CreditNoteCurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this SubscriptionCharge.


        :param currency: The currency of this SubscriptionCharge.  # noqa: E501
        :type: CreditNoteCurrency
        """

        self._currency = currency

    @property
    def period_start(self):
        """Gets the period_start of this SubscriptionCharge.  # noqa: E501


        :return: The period_start of this SubscriptionCharge.  # noqa: E501
        :rtype: datetime
        """
        return self._period_start

    @period_start.setter
    def period_start(self, period_start):
        """Sets the period_start of this SubscriptionCharge.


        :param period_start: The period_start of this SubscriptionCharge.  # noqa: E501
        :type: datetime
        """

        self._period_start = period_start

    @property
    def period_end(self):
        """Gets the period_end of this SubscriptionCharge.  # noqa: E501


        :return: The period_end of this SubscriptionCharge.  # noqa: E501
        :rtype: datetime
        """
        return self._period_end

    @period_end.setter
    def period_end(self, period_end):
        """Sets the period_end of this SubscriptionCharge.


        :param period_end: The period_end of this SubscriptionCharge.  # noqa: E501
        :type: datetime
        """

        self._period_end = period_end

    @property
    def type(self):
        """Gets the type of this SubscriptionCharge.  # noqa: E501


        :return: The type of this SubscriptionCharge.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SubscriptionCharge.


        :param type: The type of this SubscriptionCharge.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["Setup", "Upgrade", "Manual", "ProductRatePlanMigration", "Arrears", "Advance", "Coupon", "Usage", "PricingComponent", "Prepayment", "AffiliateCommission"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def invoicing_type(self):
        """Gets the invoicing_type of this SubscriptionCharge.  # noqa: E501


        :return: The invoicing_type of this SubscriptionCharge.  # noqa: E501
        :rtype: str
        """
        return self._invoicing_type

    @invoicing_type.setter
    def invoicing_type(self, invoicing_type):
        """Sets the invoicing_type of this SubscriptionCharge.


        :param invoicing_type: The invoicing_type of this SubscriptionCharge.  # noqa: E501
        :type: str
        """
        if invoicing_type is None:
            raise ValueError("Invalid value for `invoicing_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Immediate", "Aggregated"]  # noqa: E501
        if invoicing_type not in allowed_values:
            raise ValueError(
                "Invalid value for `invoicing_type` ({0}), must be one of {1}"  # noqa: E501
                .format(invoicing_type, allowed_values)
            )

        self._invoicing_type = invoicing_type

    @property
    def state(self):
        """Gets the state of this SubscriptionCharge.  # noqa: E501


        :return: The state of this SubscriptionCharge.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SubscriptionCharge.


        :param state: The state of this SubscriptionCharge.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["Voided", "Pending", "AwaitingPayment", "Paid", "Failed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def charge_type(self):
        """Gets the charge_type of this SubscriptionCharge.  # noqa: E501


        :return: The charge_type of this SubscriptionCharge.  # noqa: E501
        :rtype: str
        """
        return self._charge_type

    @charge_type.setter
    def charge_type(self, charge_type):
        """Sets the charge_type of this SubscriptionCharge.


        :param charge_type: The charge_type of this SubscriptionCharge.  # noqa: E501
        :type: str
        """
        if charge_type is None:
            raise ValueError("Invalid value for `charge_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Credit", "Debit"]  # noqa: E501
        if charge_type not in allowed_values:
            raise ValueError(
                "Invalid value for `charge_type` ({0}), must be one of {1}"  # noqa: E501
                .format(charge_type, allowed_values)
            )

        self._charge_type = charge_type

    @property
    def calculation(self):
        """Gets the calculation of this SubscriptionCharge.  # noqa: E501


        :return: The calculation of this SubscriptionCharge.  # noqa: E501
        :rtype: str
        """
        return self._calculation

    @calculation.setter
    def calculation(self, calculation):
        """Sets the calculation of this SubscriptionCharge.


        :param calculation: The calculation of this SubscriptionCharge.  # noqa: E501
        :type: str
        """

        self._calculation = calculation

    @property
    def remaining_credit_behaviour(self):
        """Gets the remaining_credit_behaviour of this SubscriptionCharge.  # noqa: E501


        :return: The remaining_credit_behaviour of this SubscriptionCharge.  # noqa: E501
        :rtype: str
        """
        return self._remaining_credit_behaviour

    @remaining_credit_behaviour.setter
    def remaining_credit_behaviour(self, remaining_credit_behaviour):
        """Sets the remaining_credit_behaviour of this SubscriptionCharge.


        :param remaining_credit_behaviour: The remaining_credit_behaviour of this SubscriptionCharge.  # noqa: E501
        :type: str
        """
        if remaining_credit_behaviour is None:
            raise ValueError("Invalid value for `remaining_credit_behaviour`, must not be `None`")  # noqa: E501
        allowed_values = ["Rollover", "Discard"]  # noqa: E501
        if remaining_credit_behaviour not in allowed_values:
            raise ValueError(
                "Invalid value for `remaining_credit_behaviour` ({0}), must be one of {1}"  # noqa: E501
                .format(remaining_credit_behaviour, allowed_values)
            )

        self._remaining_credit_behaviour = remaining_credit_behaviour

    @property
    def trial(self):
        """Gets the trial of this SubscriptionCharge.  # noqa: E501


        :return: The trial of this SubscriptionCharge.  # noqa: E501
        :rtype: bool
        """
        return self._trial

    @trial.setter
    def trial(self, trial):
        """Sets the trial of this SubscriptionCharge.


        :param trial: The trial of this SubscriptionCharge.  # noqa: E501
        :type: bool
        """

        self._trial = trial

    @property
    def version_id(self):
        """Gets the version_id of this SubscriptionCharge.  # noqa: E501


        :return: The version_id of this SubscriptionCharge.  # noqa: E501
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this SubscriptionCharge.


        :param version_id: The version_id of this SubscriptionCharge.  # noqa: E501
        :type: str
        """

        self._version_id = version_id

    @property
    def version_number(self):
        """Gets the version_number of this SubscriptionCharge.  # noqa: E501


        :return: The version_number of this SubscriptionCharge.  # noqa: E501
        :rtype: int
        """
        return self._version_number

    @version_number.setter
    def version_number(self, version_number):
        """Sets the version_number of this SubscriptionCharge.


        :param version_number: The version_number of this SubscriptionCharge.  # noqa: E501
        :type: int
        """
        if version_number is None:
            raise ValueError("Invalid value for `version_number`, must not be `None`")  # noqa: E501

        self._version_number = version_number

    @property
    def linked_charge_id(self):
        """Gets the linked_charge_id of this SubscriptionCharge.  # noqa: E501


        :return: The linked_charge_id of this SubscriptionCharge.  # noqa: E501
        :rtype: str
        """
        return self._linked_charge_id

    @linked_charge_id.setter
    def linked_charge_id(self, linked_charge_id):
        """Sets the linked_charge_id of this SubscriptionCharge.


        :param linked_charge_id: The linked_charge_id of this SubscriptionCharge.  # noqa: E501
        :type: str
        """

        self._linked_charge_id = linked_charge_id

    @property
    def percentage_of_original(self):
        """Gets the percentage_of_original of this SubscriptionCharge.  # noqa: E501


        :return: The percentage_of_original of this SubscriptionCharge.  # noqa: E501
        :rtype: float
        """
        return self._percentage_of_original

    @percentage_of_original.setter
    def percentage_of_original(self, percentage_of_original):
        """Sets the percentage_of_original of this SubscriptionCharge.


        :param percentage_of_original: The percentage_of_original of this SubscriptionCharge.  # noqa: E501
        :type: float
        """

        self._percentage_of_original = percentage_of_original

    @property
    def original_charge_id(self):
        """Gets the original_charge_id of this SubscriptionCharge.  # noqa: E501


        :return: The original_charge_id of this SubscriptionCharge.  # noqa: E501
        :rtype: str
        """
        return self._original_charge_id

    @original_charge_id.setter
    def original_charge_id(self, original_charge_id):
        """Sets the original_charge_id of this SubscriptionCharge.


        :param original_charge_id: The original_charge_id of this SubscriptionCharge.  # noqa: E501
        :type: str
        """

        self._original_charge_id = original_charge_id

    @property
    def group_name(self):
        """Gets the group_name of this SubscriptionCharge.  # noqa: E501


        :return: The group_name of this SubscriptionCharge.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this SubscriptionCharge.


        :param group_name: The group_name of this SubscriptionCharge.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def outer_period_start(self):
        """Gets the outer_period_start of this SubscriptionCharge.  # noqa: E501


        :return: The outer_period_start of this SubscriptionCharge.  # noqa: E501
        :rtype: datetime
        """
        return self._outer_period_start

    @outer_period_start.setter
    def outer_period_start(self, outer_period_start):
        """Sets the outer_period_start of this SubscriptionCharge.


        :param outer_period_start: The outer_period_start of this SubscriptionCharge.  # noqa: E501
        :type: datetime
        """

        self._outer_period_start = outer_period_start

    @property
    def crm_id(self):
        """Gets the crm_id of this SubscriptionCharge.  # noqa: E501


        :return: The crm_id of this SubscriptionCharge.  # noqa: E501
        :rtype: str
        """
        return self._crm_id

    @crm_id.setter
    def crm_id(self, crm_id):
        """Sets the crm_id of this SubscriptionCharge.


        :param crm_id: The crm_id of this SubscriptionCharge.  # noqa: E501
        :type: str
        """

        self._crm_id = crm_id

    @property
    def type(self):
        """Gets the type of this SubscriptionCharge.  # noqa: E501


        :return: The type of this SubscriptionCharge.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SubscriptionCharge.


        :param type: The type of this SubscriptionCharge.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubscriptionCharge, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionCharge):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
