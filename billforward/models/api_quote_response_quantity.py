# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class APIQuoteResponseQuantity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'changed_by': 'str',
        'updated': 'datetime',
        'id': 'str',
        'organization_id': 'str',
        'pricing_component_name': 'str',
        'pricing_component_type': 'str',
        'pricing_component_id': 'str',
        'quantity': 'int',
        'existing_quantity': 'int',
        'final_cost': 'float',
        'final_cost_excluding_tax': 'float',
        'cost': 'float',
        'cost_excluding_tax': 'float',
        'tax': 'float',
        'discount': 'float',
        'discount_excluding_tax': 'float',
        'percentage_discount': 'float',
        'unit_of_measure_id': 'str',
        'unit_of_measure_name': 'str',
        'unit_of_measure_display': 'str',
        'unit_of_measure': 'str',
        'applies_from': 'datetime',
        'charge_model': 'str',
        'discounts': 'list[CouponWrapperResponse]',
        'price_breakdown': 'PriceBreakdown'
    }

    attribute_map = {
        'created': 'created',
        'changed_by': 'changedBy',
        'updated': 'updated',
        'id': 'id',
        'organization_id': 'organizationID',
        'pricing_component_name': 'pricingComponentName',
        'pricing_component_type': 'pricingComponentType',
        'pricing_component_id': 'pricingComponentID',
        'quantity': 'quantity',
        'existing_quantity': 'existingQuantity',
        'final_cost': 'finalCost',
        'final_cost_excluding_tax': 'finalCostExcludingTax',
        'cost': 'cost',
        'cost_excluding_tax': 'costExcludingTax',
        'tax': 'tax',
        'discount': 'discount',
        'discount_excluding_tax': 'discountExcludingTax',
        'percentage_discount': 'percentageDiscount',
        'unit_of_measure_id': 'unitOfMeasureID',
        'unit_of_measure_name': 'unitOfMeasureName',
        'unit_of_measure_display': 'unitOfMeasureDisplay',
        'unit_of_measure': 'unitOfMeasure',
        'applies_from': 'appliesFrom',
        'charge_model': 'chargeModel',
        'discounts': 'discounts',
        'price_breakdown': 'priceBreakdown'
    }

    def __init__(self, created=None, changed_by=None, updated=None, id=None, organization_id=None, pricing_component_name=None, pricing_component_type=None, pricing_component_id=None, quantity=None, existing_quantity=None, final_cost=None, final_cost_excluding_tax=None, cost=None, cost_excluding_tax=None, tax=None, discount=None, discount_excluding_tax=None, percentage_discount=None, unit_of_measure_id=None, unit_of_measure_name=None, unit_of_measure_display=None, unit_of_measure=None, applies_from=None, charge_model=None, discounts=None, price_breakdown=None):  # noqa: E501
        """APIQuoteResponseQuantity - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._changed_by = None
        self._updated = None
        self._id = None
        self._organization_id = None
        self._pricing_component_name = None
        self._pricing_component_type = None
        self._pricing_component_id = None
        self._quantity = None
        self._existing_quantity = None
        self._final_cost = None
        self._final_cost_excluding_tax = None
        self._cost = None
        self._cost_excluding_tax = None
        self._tax = None
        self._discount = None
        self._discount_excluding_tax = None
        self._percentage_discount = None
        self._unit_of_measure_id = None
        self._unit_of_measure_name = None
        self._unit_of_measure_display = None
        self._unit_of_measure = None
        self._applies_from = None
        self._charge_model = None
        self._discounts = None
        self._price_breakdown = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if changed_by is not None:
            self.changed_by = changed_by
        if updated is not None:
            self.updated = updated
        if id is not None:
            self.id = id
        if organization_id is not None:
            self.organization_id = organization_id
        if pricing_component_name is not None:
            self.pricing_component_name = pricing_component_name
        if pricing_component_type is not None:
            self.pricing_component_type = pricing_component_type
        if pricing_component_id is not None:
            self.pricing_component_id = pricing_component_id
        if quantity is not None:
            self.quantity = quantity
        if existing_quantity is not None:
            self.existing_quantity = existing_quantity
        if final_cost is not None:
            self.final_cost = final_cost
        if final_cost_excluding_tax is not None:
            self.final_cost_excluding_tax = final_cost_excluding_tax
        if cost is not None:
            self.cost = cost
        if cost_excluding_tax is not None:
            self.cost_excluding_tax = cost_excluding_tax
        if tax is not None:
            self.tax = tax
        if discount is not None:
            self.discount = discount
        if discount_excluding_tax is not None:
            self.discount_excluding_tax = discount_excluding_tax
        if percentage_discount is not None:
            self.percentage_discount = percentage_discount
        if unit_of_measure_id is not None:
            self.unit_of_measure_id = unit_of_measure_id
        if unit_of_measure_name is not None:
            self.unit_of_measure_name = unit_of_measure_name
        if unit_of_measure_display is not None:
            self.unit_of_measure_display = unit_of_measure_display
        if unit_of_measure is not None:
            self.unit_of_measure = unit_of_measure
        if applies_from is not None:
            self.applies_from = applies_from
        if charge_model is not None:
            self.charge_model = charge_model
        if discounts is not None:
            self.discounts = discounts
        if price_breakdown is not None:
            self.price_breakdown = price_breakdown

    @property
    def created(self):
        """Gets the created of this APIQuoteResponseQuantity.  # noqa: E501


        :return: The created of this APIQuoteResponseQuantity.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this APIQuoteResponseQuantity.


        :param created: The created of this APIQuoteResponseQuantity.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """Gets the changed_by of this APIQuoteResponseQuantity.  # noqa: E501


        :return: The changed_by of this APIQuoteResponseQuantity.  # noqa: E501
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """Sets the changed_by of this APIQuoteResponseQuantity.


        :param changed_by: The changed_by of this APIQuoteResponseQuantity.  # noqa: E501
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """Gets the updated of this APIQuoteResponseQuantity.  # noqa: E501


        :return: The updated of this APIQuoteResponseQuantity.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this APIQuoteResponseQuantity.


        :param updated: The updated of this APIQuoteResponseQuantity.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """Gets the id of this APIQuoteResponseQuantity.  # noqa: E501


        :return: The id of this APIQuoteResponseQuantity.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this APIQuoteResponseQuantity.


        :param id: The id of this APIQuoteResponseQuantity.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def organization_id(self):
        """Gets the organization_id of this APIQuoteResponseQuantity.  # noqa: E501


        :return: The organization_id of this APIQuoteResponseQuantity.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this APIQuoteResponseQuantity.


        :param organization_id: The organization_id of this APIQuoteResponseQuantity.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def pricing_component_name(self):
        """Gets the pricing_component_name of this APIQuoteResponseQuantity.  # noqa: E501


        :return: The pricing_component_name of this APIQuoteResponseQuantity.  # noqa: E501
        :rtype: str
        """
        return self._pricing_component_name

    @pricing_component_name.setter
    def pricing_component_name(self, pricing_component_name):
        """Sets the pricing_component_name of this APIQuoteResponseQuantity.


        :param pricing_component_name: The pricing_component_name of this APIQuoteResponseQuantity.  # noqa: E501
        :type: str
        """

        self._pricing_component_name = pricing_component_name

    @property
    def pricing_component_type(self):
        """Gets the pricing_component_type of this APIQuoteResponseQuantity.  # noqa: E501


        :return: The pricing_component_type of this APIQuoteResponseQuantity.  # noqa: E501
        :rtype: str
        """
        return self._pricing_component_type

    @pricing_component_type.setter
    def pricing_component_type(self, pricing_component_type):
        """Sets the pricing_component_type of this APIQuoteResponseQuantity.


        :param pricing_component_type: The pricing_component_type of this APIQuoteResponseQuantity.  # noqa: E501
        :type: str
        """
        allowed_values = ["setup", "subscription", "arrears", "usage"]  # noqa: E501
        if pricing_component_type not in allowed_values:
            raise ValueError(
                "Invalid value for `pricing_component_type` ({0}), must be one of {1}"  # noqa: E501
                .format(pricing_component_type, allowed_values)
            )

        self._pricing_component_type = pricing_component_type

    @property
    def pricing_component_id(self):
        """Gets the pricing_component_id of this APIQuoteResponseQuantity.  # noqa: E501


        :return: The pricing_component_id of this APIQuoteResponseQuantity.  # noqa: E501
        :rtype: str
        """
        return self._pricing_component_id

    @pricing_component_id.setter
    def pricing_component_id(self, pricing_component_id):
        """Sets the pricing_component_id of this APIQuoteResponseQuantity.


        :param pricing_component_id: The pricing_component_id of this APIQuoteResponseQuantity.  # noqa: E501
        :type: str
        """

        self._pricing_component_id = pricing_component_id

    @property
    def quantity(self):
        """Gets the quantity of this APIQuoteResponseQuantity.  # noqa: E501


        :return: The quantity of this APIQuoteResponseQuantity.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this APIQuoteResponseQuantity.


        :param quantity: The quantity of this APIQuoteResponseQuantity.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def existing_quantity(self):
        """Gets the existing_quantity of this APIQuoteResponseQuantity.  # noqa: E501


        :return: The existing_quantity of this APIQuoteResponseQuantity.  # noqa: E501
        :rtype: int
        """
        return self._existing_quantity

    @existing_quantity.setter
    def existing_quantity(self, existing_quantity):
        """Sets the existing_quantity of this APIQuoteResponseQuantity.


        :param existing_quantity: The existing_quantity of this APIQuoteResponseQuantity.  # noqa: E501
        :type: int
        """

        self._existing_quantity = existing_quantity

    @property
    def final_cost(self):
        """Gets the final_cost of this APIQuoteResponseQuantity.  # noqa: E501


        :return: The final_cost of this APIQuoteResponseQuantity.  # noqa: E501
        :rtype: float
        """
        return self._final_cost

    @final_cost.setter
    def final_cost(self, final_cost):
        """Sets the final_cost of this APIQuoteResponseQuantity.


        :param final_cost: The final_cost of this APIQuoteResponseQuantity.  # noqa: E501
        :type: float
        """

        self._final_cost = final_cost

    @property
    def final_cost_excluding_tax(self):
        """Gets the final_cost_excluding_tax of this APIQuoteResponseQuantity.  # noqa: E501


        :return: The final_cost_excluding_tax of this APIQuoteResponseQuantity.  # noqa: E501
        :rtype: float
        """
        return self._final_cost_excluding_tax

    @final_cost_excluding_tax.setter
    def final_cost_excluding_tax(self, final_cost_excluding_tax):
        """Sets the final_cost_excluding_tax of this APIQuoteResponseQuantity.


        :param final_cost_excluding_tax: The final_cost_excluding_tax of this APIQuoteResponseQuantity.  # noqa: E501
        :type: float
        """

        self._final_cost_excluding_tax = final_cost_excluding_tax

    @property
    def cost(self):
        """Gets the cost of this APIQuoteResponseQuantity.  # noqa: E501


        :return: The cost of this APIQuoteResponseQuantity.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this APIQuoteResponseQuantity.


        :param cost: The cost of this APIQuoteResponseQuantity.  # noqa: E501
        :type: float
        """

        self._cost = cost

    @property
    def cost_excluding_tax(self):
        """Gets the cost_excluding_tax of this APIQuoteResponseQuantity.  # noqa: E501


        :return: The cost_excluding_tax of this APIQuoteResponseQuantity.  # noqa: E501
        :rtype: float
        """
        return self._cost_excluding_tax

    @cost_excluding_tax.setter
    def cost_excluding_tax(self, cost_excluding_tax):
        """Sets the cost_excluding_tax of this APIQuoteResponseQuantity.


        :param cost_excluding_tax: The cost_excluding_tax of this APIQuoteResponseQuantity.  # noqa: E501
        :type: float
        """

        self._cost_excluding_tax = cost_excluding_tax

    @property
    def tax(self):
        """Gets the tax of this APIQuoteResponseQuantity.  # noqa: E501


        :return: The tax of this APIQuoteResponseQuantity.  # noqa: E501
        :rtype: float
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this APIQuoteResponseQuantity.


        :param tax: The tax of this APIQuoteResponseQuantity.  # noqa: E501
        :type: float
        """

        self._tax = tax

    @property
    def discount(self):
        """Gets the discount of this APIQuoteResponseQuantity.  # noqa: E501


        :return: The discount of this APIQuoteResponseQuantity.  # noqa: E501
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this APIQuoteResponseQuantity.


        :param discount: The discount of this APIQuoteResponseQuantity.  # noqa: E501
        :type: float
        """

        self._discount = discount

    @property
    def discount_excluding_tax(self):
        """Gets the discount_excluding_tax of this APIQuoteResponseQuantity.  # noqa: E501


        :return: The discount_excluding_tax of this APIQuoteResponseQuantity.  # noqa: E501
        :rtype: float
        """
        return self._discount_excluding_tax

    @discount_excluding_tax.setter
    def discount_excluding_tax(self, discount_excluding_tax):
        """Sets the discount_excluding_tax of this APIQuoteResponseQuantity.


        :param discount_excluding_tax: The discount_excluding_tax of this APIQuoteResponseQuantity.  # noqa: E501
        :type: float
        """

        self._discount_excluding_tax = discount_excluding_tax

    @property
    def percentage_discount(self):
        """Gets the percentage_discount of this APIQuoteResponseQuantity.  # noqa: E501


        :return: The percentage_discount of this APIQuoteResponseQuantity.  # noqa: E501
        :rtype: float
        """
        return self._percentage_discount

    @percentage_discount.setter
    def percentage_discount(self, percentage_discount):
        """Sets the percentage_discount of this APIQuoteResponseQuantity.


        :param percentage_discount: The percentage_discount of this APIQuoteResponseQuantity.  # noqa: E501
        :type: float
        """

        self._percentage_discount = percentage_discount

    @property
    def unit_of_measure_id(self):
        """Gets the unit_of_measure_id of this APIQuoteResponseQuantity.  # noqa: E501


        :return: The unit_of_measure_id of this APIQuoteResponseQuantity.  # noqa: E501
        :rtype: str
        """
        return self._unit_of_measure_id

    @unit_of_measure_id.setter
    def unit_of_measure_id(self, unit_of_measure_id):
        """Sets the unit_of_measure_id of this APIQuoteResponseQuantity.


        :param unit_of_measure_id: The unit_of_measure_id of this APIQuoteResponseQuantity.  # noqa: E501
        :type: str
        """

        self._unit_of_measure_id = unit_of_measure_id

    @property
    def unit_of_measure_name(self):
        """Gets the unit_of_measure_name of this APIQuoteResponseQuantity.  # noqa: E501


        :return: The unit_of_measure_name of this APIQuoteResponseQuantity.  # noqa: E501
        :rtype: str
        """
        return self._unit_of_measure_name

    @unit_of_measure_name.setter
    def unit_of_measure_name(self, unit_of_measure_name):
        """Sets the unit_of_measure_name of this APIQuoteResponseQuantity.


        :param unit_of_measure_name: The unit_of_measure_name of this APIQuoteResponseQuantity.  # noqa: E501
        :type: str
        """

        self._unit_of_measure_name = unit_of_measure_name

    @property
    def unit_of_measure_display(self):
        """Gets the unit_of_measure_display of this APIQuoteResponseQuantity.  # noqa: E501


        :return: The unit_of_measure_display of this APIQuoteResponseQuantity.  # noqa: E501
        :rtype: str
        """
        return self._unit_of_measure_display

    @unit_of_measure_display.setter
    def unit_of_measure_display(self, unit_of_measure_display):
        """Sets the unit_of_measure_display of this APIQuoteResponseQuantity.


        :param unit_of_measure_display: The unit_of_measure_display of this APIQuoteResponseQuantity.  # noqa: E501
        :type: str
        """

        self._unit_of_measure_display = unit_of_measure_display

    @property
    def unit_of_measure(self):
        """Gets the unit_of_measure of this APIQuoteResponseQuantity.  # noqa: E501


        :return: The unit_of_measure of this APIQuoteResponseQuantity.  # noqa: E501
        :rtype: str
        """
        return self._unit_of_measure

    @unit_of_measure.setter
    def unit_of_measure(self, unit_of_measure):
        """Sets the unit_of_measure of this APIQuoteResponseQuantity.


        :param unit_of_measure: The unit_of_measure of this APIQuoteResponseQuantity.  # noqa: E501
        :type: str
        """

        self._unit_of_measure = unit_of_measure

    @property
    def applies_from(self):
        """Gets the applies_from of this APIQuoteResponseQuantity.  # noqa: E501


        :return: The applies_from of this APIQuoteResponseQuantity.  # noqa: E501
        :rtype: datetime
        """
        return self._applies_from

    @applies_from.setter
    def applies_from(self, applies_from):
        """Sets the applies_from of this APIQuoteResponseQuantity.


        :param applies_from: The applies_from of this APIQuoteResponseQuantity.  # noqa: E501
        :type: datetime
        """

        self._applies_from = applies_from

    @property
    def charge_model(self):
        """Gets the charge_model of this APIQuoteResponseQuantity.  # noqa: E501


        :return: The charge_model of this APIQuoteResponseQuantity.  # noqa: E501
        :rtype: str
        """
        return self._charge_model

    @charge_model.setter
    def charge_model(self, charge_model):
        """Sets the charge_model of this APIQuoteResponseQuantity.


        :param charge_model: The charge_model of this APIQuoteResponseQuantity.  # noqa: E501
        :type: str
        """
        allowed_values = ["flat", "tiered", "tiered_volume"]  # noqa: E501
        if charge_model not in allowed_values:
            raise ValueError(
                "Invalid value for `charge_model` ({0}), must be one of {1}"  # noqa: E501
                .format(charge_model, allowed_values)
            )

        self._charge_model = charge_model

    @property
    def discounts(self):
        """Gets the discounts of this APIQuoteResponseQuantity.  # noqa: E501


        :return: The discounts of this APIQuoteResponseQuantity.  # noqa: E501
        :rtype: list[CouponWrapperResponse]
        """
        return self._discounts

    @discounts.setter
    def discounts(self, discounts):
        """Sets the discounts of this APIQuoteResponseQuantity.


        :param discounts: The discounts of this APIQuoteResponseQuantity.  # noqa: E501
        :type: list[CouponWrapperResponse]
        """

        self._discounts = discounts

    @property
    def price_breakdown(self):
        """Gets the price_breakdown of this APIQuoteResponseQuantity.  # noqa: E501


        :return: The price_breakdown of this APIQuoteResponseQuantity.  # noqa: E501
        :rtype: PriceBreakdown
        """
        return self._price_breakdown

    @price_breakdown.setter
    def price_breakdown(self, price_breakdown):
        """Sets the price_breakdown of this APIQuoteResponseQuantity.


        :param price_breakdown: The price_breakdown of this APIQuoteResponseQuantity.  # noqa: E501
        :type: PriceBreakdown
        """

        self._price_breakdown = price_breakdown

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(APIQuoteResponseQuantity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, APIQuoteResponseQuantity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
