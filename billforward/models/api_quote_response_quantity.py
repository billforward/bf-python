# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class APIQuoteResponseQuantity(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, pricing_component_name=None, pricing_component_type=None, pricing_component_id=None, quantity=None, existing_quantity=None, final_cost=None, final_cost_excluding_tax=None, cost=None, cost_excluding_tax=None, tax=None, discount=None, discount_excluding_tax=None, unit_of_measure_id=None, unit_of_measure_name=None, unit_of_measure_display=None, unit_of_measure=None, applies_from=None, discounts=None):
        """
        APIQuoteResponseQuantity - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'pricing_component_name': 'str',
            'pricing_component_type': 'str',
            'pricing_component_id': 'str',
            'quantity': 'int',
            'existing_quantity': 'int',
            'final_cost': 'float',
            'final_cost_excluding_tax': 'float',
            'cost': 'float',
            'cost_excluding_tax': 'float',
            'tax': 'float',
            'discount': 'float',
            'discount_excluding_tax': 'float',
            'unit_of_measure_id': 'str',
            'unit_of_measure_name': 'str',
            'unit_of_measure_display': 'str',
            'unit_of_measure': 'str',
            'applies_from': 'datetime',
            'discounts': 'list[CouponWrapperResponse]'
        }

        self.attribute_map = {
            'pricing_component_name': 'pricingComponentName',
            'pricing_component_type': 'pricingComponentType',
            'pricing_component_id': 'pricingComponentID',
            'quantity': 'quantity',
            'existing_quantity': 'existingQuantity',
            'final_cost': 'finalCost',
            'final_cost_excluding_tax': 'finalCostExcludingTax',
            'cost': 'cost',
            'cost_excluding_tax': 'costExcludingTax',
            'tax': 'tax',
            'discount': 'discount',
            'discount_excluding_tax': 'discountExcludingTax',
            'unit_of_measure_id': 'unitOfMeasureID',
            'unit_of_measure_name': 'unitOfMeasureName',
            'unit_of_measure_display': 'unitOfMeasureDisplay',
            'unit_of_measure': 'unitOfMeasure',
            'applies_from': 'appliesFrom',
            'discounts': 'discounts'
        }

        self._pricing_component_name = pricing_component_name
        self._pricing_component_type = pricing_component_type
        self._pricing_component_id = pricing_component_id
        self._quantity = quantity
        self._existing_quantity = existing_quantity
        self._final_cost = final_cost
        self._final_cost_excluding_tax = final_cost_excluding_tax
        self._cost = cost
        self._cost_excluding_tax = cost_excluding_tax
        self._tax = tax
        self._discount = discount
        self._discount_excluding_tax = discount_excluding_tax
        self._unit_of_measure_id = unit_of_measure_id
        self._unit_of_measure_name = unit_of_measure_name
        self._unit_of_measure_display = unit_of_measure_display
        self._unit_of_measure = unit_of_measure
        self._applies_from = applies_from
        self._discounts = discounts

    @property
    def pricing_component_name(self):
        """
        Gets the pricing_component_name of this APIQuoteResponseQuantity.
        {\"description\":\"Name of the pricing component whose price was calculated.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The pricing_component_name of this APIQuoteResponseQuantity.
        :rtype: str
        """
        return self._pricing_component_name

    @pricing_component_name.setter
    def pricing_component_name(self, pricing_component_name):
        """
        Sets the pricing_component_name of this APIQuoteResponseQuantity.
        {\"description\":\"Name of the pricing component whose price was calculated.\",\"verbs\":[\"POST\",\"GET\"]}

        :param pricing_component_name: The pricing_component_name of this APIQuoteResponseQuantity.
        :type: str
        """

        self._pricing_component_name = pricing_component_name

    @property
    def pricing_component_type(self):
        """
        Gets the pricing_component_type of this APIQuoteResponseQuantity.
        {\"description\":\"Charge type of the pricing component whose price was calculated.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The pricing_component_type of this APIQuoteResponseQuantity.
        :rtype: str
        """
        return self._pricing_component_type

    @pricing_component_type.setter
    def pricing_component_type(self, pricing_component_type):
        """
        Sets the pricing_component_type of this APIQuoteResponseQuantity.
        {\"description\":\"Charge type of the pricing component whose price was calculated.\",\"verbs\":[\"POST\",\"GET\"]}

        :param pricing_component_type: The pricing_component_type of this APIQuoteResponseQuantity.
        :type: str
        """
        allowed_values = ["setup", "subscription", "arrears", "usage"]
        if pricing_component_type not in allowed_values:
            raise ValueError(
                "Invalid value for `pricing_component_type` ({0}), must be one of {1}"
                .format(pricing_component_type, allowed_values)
            )

        self._pricing_component_type = pricing_component_type

    @property
    def pricing_component_id(self):
        """
        Gets the pricing_component_id of this APIQuoteResponseQuantity.
        {\"description\":\"ID of the pricing component whose price was calculated.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The pricing_component_id of this APIQuoteResponseQuantity.
        :rtype: str
        """
        return self._pricing_component_id

    @pricing_component_id.setter
    def pricing_component_id(self, pricing_component_id):
        """
        Sets the pricing_component_id of this APIQuoteResponseQuantity.
        {\"description\":\"ID of the pricing component whose price was calculated.\",\"verbs\":[\"POST\",\"GET\"]}

        :param pricing_component_id: The pricing_component_id of this APIQuoteResponseQuantity.
        :type: str
        """

        self._pricing_component_id = pricing_component_id

    @property
    def quantity(self):
        """
        Gets the quantity of this APIQuoteResponseQuantity.
        {\"description\":\"Quantity of the pricing component whose price was calculated.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The quantity of this APIQuoteResponseQuantity.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """
        Sets the quantity of this APIQuoteResponseQuantity.
        {\"description\":\"Quantity of the pricing component whose price was calculated.\",\"verbs\":[\"POST\",\"GET\"]}

        :param quantity: The quantity of this APIQuoteResponseQuantity.
        :type: int
        """

        self._quantity = quantity

    @property
    def existing_quantity(self):
        """
        Gets the existing_quantity of this APIQuoteResponseQuantity.
        {\"description\":\"Previous quantity of the pricing component. Price is calculated with respect to a delta from this quantity.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The existing_quantity of this APIQuoteResponseQuantity.
        :rtype: int
        """
        return self._existing_quantity

    @existing_quantity.setter
    def existing_quantity(self, existing_quantity):
        """
        Sets the existing_quantity of this APIQuoteResponseQuantity.
        {\"description\":\"Previous quantity of the pricing component. Price is calculated with respect to a delta from this quantity.\",\"verbs\":[\"POST\",\"GET\"]}

        :param existing_quantity: The existing_quantity of this APIQuoteResponseQuantity.
        :type: int
        """

        self._existing_quantity = existing_quantity

    @property
    def final_cost(self):
        """
        Gets the final_cost of this APIQuoteResponseQuantity.
        {\"description\":\"The cost &mdash; including tax, and with discounts (themselves including tax) applied &mdash; contributed by consumption of this pricing component.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The final_cost of this APIQuoteResponseQuantity.
        :rtype: float
        """
        return self._final_cost

    @final_cost.setter
    def final_cost(self, final_cost):
        """
        Sets the final_cost of this APIQuoteResponseQuantity.
        {\"description\":\"The cost &mdash; including tax, and with discounts (themselves including tax) applied &mdash; contributed by consumption of this pricing component.\",\"verbs\":[\"POST\",\"GET\"]}

        :param final_cost: The final_cost of this APIQuoteResponseQuantity.
        :type: float
        """

        self._final_cost = final_cost

    @property
    def final_cost_excluding_tax(self):
        """
        Gets the final_cost_excluding_tax of this APIQuoteResponseQuantity.
        {\"description\":\"The cost &mdash; excluding tax, and with discounts (themselves excluding tax) applied &mdash; contributed by consumption of this pricing component.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The final_cost_excluding_tax of this APIQuoteResponseQuantity.
        :rtype: float
        """
        return self._final_cost_excluding_tax

    @final_cost_excluding_tax.setter
    def final_cost_excluding_tax(self, final_cost_excluding_tax):
        """
        Sets the final_cost_excluding_tax of this APIQuoteResponseQuantity.
        {\"description\":\"The cost &mdash; excluding tax, and with discounts (themselves excluding tax) applied &mdash; contributed by consumption of this pricing component.\",\"verbs\":[\"POST\",\"GET\"]}

        :param final_cost_excluding_tax: The final_cost_excluding_tax of this APIQuoteResponseQuantity.
        :type: float
        """

        self._final_cost_excluding_tax = final_cost_excluding_tax

    @property
    def cost(self):
        """
        Gets the cost of this APIQuoteResponseQuantity.
        {\"description\":\"The cost &mdash; including tax, but excluding discounts &mdash; contributed by consumption of this pricing component.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The cost of this APIQuoteResponseQuantity.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """
        Sets the cost of this APIQuoteResponseQuantity.
        {\"description\":\"The cost &mdash; including tax, but excluding discounts &mdash; contributed by consumption of this pricing component.\",\"verbs\":[\"POST\",\"GET\"]}

        :param cost: The cost of this APIQuoteResponseQuantity.
        :type: float
        """

        self._cost = cost

    @property
    def cost_excluding_tax(self):
        """
        Gets the cost_excluding_tax of this APIQuoteResponseQuantity.
        {\"description\":\"The cost &mdash; excluding tax, and excluding discounts &mdash; contributed by consumption of this pricing component.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The cost_excluding_tax of this APIQuoteResponseQuantity.
        :rtype: float
        """
        return self._cost_excluding_tax

    @cost_excluding_tax.setter
    def cost_excluding_tax(self, cost_excluding_tax):
        """
        Sets the cost_excluding_tax of this APIQuoteResponseQuantity.
        {\"description\":\"The cost &mdash; excluding tax, and excluding discounts &mdash; contributed by consumption of this pricing component.\",\"verbs\":[\"POST\",\"GET\"]}

        :param cost_excluding_tax: The cost_excluding_tax of this APIQuoteResponseQuantity.
        :type: float
        """

        self._cost_excluding_tax = cost_excluding_tax

    @property
    def tax(self):
        """
        Gets the tax of this APIQuoteResponseQuantity.
        {\"description\":\"The portion of this pricing component's cost which is comprised of tax.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The tax of this APIQuoteResponseQuantity.
        :rtype: float
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """
        Sets the tax of this APIQuoteResponseQuantity.
        {\"description\":\"The portion of this pricing component's cost which is comprised of tax.\",\"verbs\":[\"POST\",\"GET\"]}

        :param tax: The tax of this APIQuoteResponseQuantity.
        :type: float
        """

        self._tax = tax

    @property
    def discount(self):
        """
        Gets the discount of this APIQuoteResponseQuantity.
        {\"description\":\"The discount &mdash; including tax &mdash; applied to this pricing component.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The discount of this APIQuoteResponseQuantity.
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """
        Sets the discount of this APIQuoteResponseQuantity.
        {\"description\":\"The discount &mdash; including tax &mdash; applied to this pricing component.\",\"verbs\":[\"POST\",\"GET\"]}

        :param discount: The discount of this APIQuoteResponseQuantity.
        :type: float
        """

        self._discount = discount

    @property
    def discount_excluding_tax(self):
        """
        Gets the discount_excluding_tax of this APIQuoteResponseQuantity.
        {\"description\":\"The discount &mdash; excluding tax &mdash; applied to this pricing component.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The discount_excluding_tax of this APIQuoteResponseQuantity.
        :rtype: float
        """
        return self._discount_excluding_tax

    @discount_excluding_tax.setter
    def discount_excluding_tax(self, discount_excluding_tax):
        """
        Sets the discount_excluding_tax of this APIQuoteResponseQuantity.
        {\"description\":\"The discount &mdash; excluding tax &mdash; applied to this pricing component.\",\"verbs\":[\"POST\",\"GET\"]}

        :param discount_excluding_tax: The discount_excluding_tax of this APIQuoteResponseQuantity.
        :type: float
        """

        self._discount_excluding_tax = discount_excluding_tax

    @property
    def unit_of_measure_id(self):
        """
        Gets the unit_of_measure_id of this APIQuoteResponseQuantity.
        {\"description\":\"ID of the 'Unit of Measure' entity  &mdash; in which this pricing component is measured.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The unit_of_measure_id of this APIQuoteResponseQuantity.
        :rtype: str
        """
        return self._unit_of_measure_id

    @unit_of_measure_id.setter
    def unit_of_measure_id(self, unit_of_measure_id):
        """
        Sets the unit_of_measure_id of this APIQuoteResponseQuantity.
        {\"description\":\"ID of the 'Unit of Measure' entity  &mdash; in which this pricing component is measured.\",\"verbs\":[\"POST\",\"GET\"]}

        :param unit_of_measure_id: The unit_of_measure_id of this APIQuoteResponseQuantity.
        :type: str
        """

        self._unit_of_measure_id = unit_of_measure_id

    @property
    def unit_of_measure_name(self):
        """
        Gets the unit_of_measure_name of this APIQuoteResponseQuantity.
        {\"description\":\"Name of the 'Unit of Measure' entity  &mdash; in which this pricing component is measured.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The unit_of_measure_name of this APIQuoteResponseQuantity.
        :rtype: str
        """
        return self._unit_of_measure_name

    @unit_of_measure_name.setter
    def unit_of_measure_name(self, unit_of_measure_name):
        """
        Sets the unit_of_measure_name of this APIQuoteResponseQuantity.
        {\"description\":\"Name of the 'Unit of Measure' entity  &mdash; in which this pricing component is measured.\",\"verbs\":[\"POST\",\"GET\"]}

        :param unit_of_measure_name: The unit_of_measure_name of this APIQuoteResponseQuantity.
        :type: str
        """

        self._unit_of_measure_name = unit_of_measure_name

    @property
    def unit_of_measure_display(self):
        """
        Gets the unit_of_measure_display of this APIQuoteResponseQuantity.
        {\"description\":\"Displayable units of the 'Unit of Measure' entity &mdash; in which this pricing component is measured.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The unit_of_measure_display of this APIQuoteResponseQuantity.
        :rtype: str
        """
        return self._unit_of_measure_display

    @unit_of_measure_display.setter
    def unit_of_measure_display(self, unit_of_measure_display):
        """
        Sets the unit_of_measure_display of this APIQuoteResponseQuantity.
        {\"description\":\"Displayable units of the 'Unit of Measure' entity &mdash; in which this pricing component is measured.\",\"verbs\":[\"POST\",\"GET\"]}

        :param unit_of_measure_display: The unit_of_measure_display of this APIQuoteResponseQuantity.
        :type: str
        """

        self._unit_of_measure_display = unit_of_measure_display

    @property
    def unit_of_measure(self):
        """
        Gets the unit_of_measure of this APIQuoteResponseQuantity.
        {\"description\":\"The 'Unit of Measure' entity used to measure this pricing component.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The unit_of_measure of this APIQuoteResponseQuantity.
        :rtype: str
        """
        return self._unit_of_measure

    @unit_of_measure.setter
    def unit_of_measure(self, unit_of_measure):
        """
        Sets the unit_of_measure of this APIQuoteResponseQuantity.
        {\"description\":\"The 'Unit of Measure' entity used to measure this pricing component.\",\"verbs\":[\"POST\",\"GET\"]}

        :param unit_of_measure: The unit_of_measure of this APIQuoteResponseQuantity.
        :type: str
        """

        self._unit_of_measure = unit_of_measure

    @property
    def applies_from(self):
        """
        Gets the applies_from of this APIQuoteResponseQuantity.
        {\"description\":\"The date-time from which the pricing component's new value would apply.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The applies_from of this APIQuoteResponseQuantity.
        :rtype: datetime
        """
        return self._applies_from

    @applies_from.setter
    def applies_from(self, applies_from):
        """
        Sets the applies_from of this APIQuoteResponseQuantity.
        {\"description\":\"The date-time from which the pricing component's new value would apply.\",\"verbs\":[\"POST\",\"GET\"]}

        :param applies_from: The applies_from of this APIQuoteResponseQuantity.
        :type: datetime
        """

        self._applies_from = applies_from

    @property
    def discounts(self):
        """
        Gets the discounts of this APIQuoteResponseQuantity.
        {\"description\":\"A list of discounts applied in calculating the price of this pricing component.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The discounts of this APIQuoteResponseQuantity.
        :rtype: list[CouponWrapperResponse]
        """
        return self._discounts

    @discounts.setter
    def discounts(self, discounts):
        """
        Sets the discounts of this APIQuoteResponseQuantity.
        {\"description\":\"A list of discounts applied in calculating the price of this pricing component.\",\"verbs\":[\"POST\",\"GET\"]}

        :param discounts: The discounts of this APIQuoteResponseQuantity.
        :type: list[CouponWrapperResponse]
        """

        self._discounts = discounts

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
