# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EmailTokenization(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'changed_by': 'str',
        'updated': 'datetime',
        'id': 'str',
        'organization_id': 'str',
        'request_token': 'str',
        'type': 'str',
        'verification_state': 'str',
        'email_id': 'str',
        'public_token': 'str',
        'account': 'Account',
        'account_full_name': 'str',
        'subscription_id': 'str',
        'subscription_name': 'str',
        'product_rate_plan_name': 'str',
        'invoice_id': 'str',
        'invoice_version_id': 'str',
        'logo_url': 'str',
        'currency': 'CreditNoteCurrency',
        'amount': 'float',
        'last_sent': 'datetime',
        'valid_till': 'datetime',
        'payment_method_id': 'str',
        'make_default': 'bool',
        'charge_immediately': 'bool',
        'capture_profile': 'bool',
        'capture_billing_address': 'bool',
        'capture_shipping_address': 'bool'
    }

    attribute_map = {
        'created': 'created',
        'changed_by': 'changedBy',
        'updated': 'updated',
        'id': 'id',
        'organization_id': 'organizationID',
        'request_token': 'requestToken',
        'type': 'type',
        'verification_state': 'verificationState',
        'email_id': 'emailID',
        'public_token': 'publicToken',
        'account': 'account',
        'account_full_name': 'accountFullName',
        'subscription_id': 'subscriptionID',
        'subscription_name': 'subscriptionName',
        'product_rate_plan_name': 'productRatePlanName',
        'invoice_id': 'invoiceID',
        'invoice_version_id': 'invoiceVersionID',
        'logo_url': 'logoUrl',
        'currency': 'currency',
        'amount': 'amount',
        'last_sent': 'lastSent',
        'valid_till': 'validTill',
        'payment_method_id': 'paymentMethodID',
        'make_default': 'makeDefault',
        'charge_immediately': 'chargeImmediately',
        'capture_profile': 'captureProfile',
        'capture_billing_address': 'captureBillingAddress',
        'capture_shipping_address': 'captureShippingAddress'
    }

    def __init__(self, created=None, changed_by=None, updated=None, id=None, organization_id=None, request_token=None, type=None, verification_state=None, email_id=None, public_token=None, account=None, account_full_name=None, subscription_id=None, subscription_name=None, product_rate_plan_name=None, invoice_id=None, invoice_version_id=None, logo_url=None, currency=None, amount=None, last_sent=None, valid_till=None, payment_method_id=None, make_default=None, charge_immediately=None, capture_profile=None, capture_billing_address=None, capture_shipping_address=None):  # noqa: E501
        """EmailTokenization - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._changed_by = None
        self._updated = None
        self._id = None
        self._organization_id = None
        self._request_token = None
        self._type = None
        self._verification_state = None
        self._email_id = None
        self._public_token = None
        self._account = None
        self._account_full_name = None
        self._subscription_id = None
        self._subscription_name = None
        self._product_rate_plan_name = None
        self._invoice_id = None
        self._invoice_version_id = None
        self._logo_url = None
        self._currency = None
        self._amount = None
        self._last_sent = None
        self._valid_till = None
        self._payment_method_id = None
        self._make_default = None
        self._charge_immediately = None
        self._capture_profile = None
        self._capture_billing_address = None
        self._capture_shipping_address = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if changed_by is not None:
            self.changed_by = changed_by
        if updated is not None:
            self.updated = updated
        if id is not None:
            self.id = id
        self.organization_id = organization_id
        self.request_token = request_token
        self.type = type
        if verification_state is not None:
            self.verification_state = verification_state
        self.email_id = email_id
        self.public_token = public_token
        self.account = account
        self.account_full_name = account_full_name
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if subscription_name is not None:
            self.subscription_name = subscription_name
        if product_rate_plan_name is not None:
            self.product_rate_plan_name = product_rate_plan_name
        if invoice_id is not None:
            self.invoice_id = invoice_id
        if invoice_version_id is not None:
            self.invoice_version_id = invoice_version_id
        if logo_url is not None:
            self.logo_url = logo_url
        if currency is not None:
            self.currency = currency
        if amount is not None:
            self.amount = amount
        if last_sent is not None:
            self.last_sent = last_sent
        self.valid_till = valid_till
        if payment_method_id is not None:
            self.payment_method_id = payment_method_id
        if make_default is not None:
            self.make_default = make_default
        if charge_immediately is not None:
            self.charge_immediately = charge_immediately
        if capture_profile is not None:
            self.capture_profile = capture_profile
        if capture_billing_address is not None:
            self.capture_billing_address = capture_billing_address
        if capture_shipping_address is not None:
            self.capture_shipping_address = capture_shipping_address

    @property
    def created(self):
        """Gets the created of this EmailTokenization.  # noqa: E501


        :return: The created of this EmailTokenization.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this EmailTokenization.


        :param created: The created of this EmailTokenization.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """Gets the changed_by of this EmailTokenization.  # noqa: E501


        :return: The changed_by of this EmailTokenization.  # noqa: E501
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """Sets the changed_by of this EmailTokenization.


        :param changed_by: The changed_by of this EmailTokenization.  # noqa: E501
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """Gets the updated of this EmailTokenization.  # noqa: E501


        :return: The updated of this EmailTokenization.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this EmailTokenization.


        :param updated: The updated of this EmailTokenization.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """Gets the id of this EmailTokenization.  # noqa: E501


        :return: The id of this EmailTokenization.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmailTokenization.


        :param id: The id of this EmailTokenization.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def organization_id(self):
        """Gets the organization_id of this EmailTokenization.  # noqa: E501


        :return: The organization_id of this EmailTokenization.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this EmailTokenization.


        :param organization_id: The organization_id of this EmailTokenization.  # noqa: E501
        :type: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")  # noqa: E501

        self._organization_id = organization_id

    @property
    def request_token(self):
        """Gets the request_token of this EmailTokenization.  # noqa: E501


        :return: The request_token of this EmailTokenization.  # noqa: E501
        :rtype: str
        """
        return self._request_token

    @request_token.setter
    def request_token(self, request_token):
        """Sets the request_token of this EmailTokenization.


        :param request_token: The request_token of this EmailTokenization.  # noqa: E501
        :type: str
        """
        if request_token is None:
            raise ValueError("Invalid value for `request_token`, must not be `None`")  # noqa: E501

        self._request_token = request_token

    @property
    def type(self):
        """Gets the type of this EmailTokenization.  # noqa: E501


        :return: The type of this EmailTokenization.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EmailTokenization.


        :param type: The type of this EmailTokenization.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["Stripe", "StripeACH", "GoCardless", "Shuttle", "CardConnect", "EBANX"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def verification_state(self):
        """Gets the verification_state of this EmailTokenization.  # noqa: E501


        :return: The verification_state of this EmailTokenization.  # noqa: E501
        :rtype: str
        """
        return self._verification_state

    @verification_state.setter
    def verification_state(self, verification_state):
        """Sets the verification_state of this EmailTokenization.


        :param verification_state: The verification_state of this EmailTokenization.  # noqa: E501
        :type: str
        """
        allowed_values = ["Verified", "NotVerified"]  # noqa: E501
        if verification_state not in allowed_values:
            raise ValueError(
                "Invalid value for `verification_state` ({0}), must be one of {1}"  # noqa: E501
                .format(verification_state, allowed_values)
            )

        self._verification_state = verification_state

    @property
    def email_id(self):
        """Gets the email_id of this EmailTokenization.  # noqa: E501


        :return: The email_id of this EmailTokenization.  # noqa: E501
        :rtype: str
        """
        return self._email_id

    @email_id.setter
    def email_id(self, email_id):
        """Sets the email_id of this EmailTokenization.


        :param email_id: The email_id of this EmailTokenization.  # noqa: E501
        :type: str
        """
        if email_id is None:
            raise ValueError("Invalid value for `email_id`, must not be `None`")  # noqa: E501

        self._email_id = email_id

    @property
    def public_token(self):
        """Gets the public_token of this EmailTokenization.  # noqa: E501


        :return: The public_token of this EmailTokenization.  # noqa: E501
        :rtype: str
        """
        return self._public_token

    @public_token.setter
    def public_token(self, public_token):
        """Sets the public_token of this EmailTokenization.


        :param public_token: The public_token of this EmailTokenization.  # noqa: E501
        :type: str
        """
        if public_token is None:
            raise ValueError("Invalid value for `public_token`, must not be `None`")  # noqa: E501

        self._public_token = public_token

    @property
    def account(self):
        """Gets the account of this EmailTokenization.  # noqa: E501


        :return: The account of this EmailTokenization.  # noqa: E501
        :rtype: Account
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this EmailTokenization.


        :param account: The account of this EmailTokenization.  # noqa: E501
        :type: Account
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")  # noqa: E501

        self._account = account

    @property
    def account_full_name(self):
        """Gets the account_full_name of this EmailTokenization.  # noqa: E501


        :return: The account_full_name of this EmailTokenization.  # noqa: E501
        :rtype: str
        """
        return self._account_full_name

    @account_full_name.setter
    def account_full_name(self, account_full_name):
        """Sets the account_full_name of this EmailTokenization.


        :param account_full_name: The account_full_name of this EmailTokenization.  # noqa: E501
        :type: str
        """
        if account_full_name is None:
            raise ValueError("Invalid value for `account_full_name`, must not be `None`")  # noqa: E501

        self._account_full_name = account_full_name

    @property
    def subscription_id(self):
        """Gets the subscription_id of this EmailTokenization.  # noqa: E501


        :return: The subscription_id of this EmailTokenization.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this EmailTokenization.


        :param subscription_id: The subscription_id of this EmailTokenization.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def subscription_name(self):
        """Gets the subscription_name of this EmailTokenization.  # noqa: E501


        :return: The subscription_name of this EmailTokenization.  # noqa: E501
        :rtype: str
        """
        return self._subscription_name

    @subscription_name.setter
    def subscription_name(self, subscription_name):
        """Sets the subscription_name of this EmailTokenization.


        :param subscription_name: The subscription_name of this EmailTokenization.  # noqa: E501
        :type: str
        """

        self._subscription_name = subscription_name

    @property
    def product_rate_plan_name(self):
        """Gets the product_rate_plan_name of this EmailTokenization.  # noqa: E501


        :return: The product_rate_plan_name of this EmailTokenization.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_name

    @product_rate_plan_name.setter
    def product_rate_plan_name(self, product_rate_plan_name):
        """Sets the product_rate_plan_name of this EmailTokenization.


        :param product_rate_plan_name: The product_rate_plan_name of this EmailTokenization.  # noqa: E501
        :type: str
        """

        self._product_rate_plan_name = product_rate_plan_name

    @property
    def invoice_id(self):
        """Gets the invoice_id of this EmailTokenization.  # noqa: E501


        :return: The invoice_id of this EmailTokenization.  # noqa: E501
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this EmailTokenization.


        :param invoice_id: The invoice_id of this EmailTokenization.  # noqa: E501
        :type: str
        """

        self._invoice_id = invoice_id

    @property
    def invoice_version_id(self):
        """Gets the invoice_version_id of this EmailTokenization.  # noqa: E501


        :return: The invoice_version_id of this EmailTokenization.  # noqa: E501
        :rtype: str
        """
        return self._invoice_version_id

    @invoice_version_id.setter
    def invoice_version_id(self, invoice_version_id):
        """Sets the invoice_version_id of this EmailTokenization.


        :param invoice_version_id: The invoice_version_id of this EmailTokenization.  # noqa: E501
        :type: str
        """

        self._invoice_version_id = invoice_version_id

    @property
    def logo_url(self):
        """Gets the logo_url of this EmailTokenization.  # noqa: E501


        :return: The logo_url of this EmailTokenization.  # noqa: E501
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this EmailTokenization.


        :param logo_url: The logo_url of this EmailTokenization.  # noqa: E501
        :type: str
        """

        self._logo_url = logo_url

    @property
    def currency(self):
        """Gets the currency of this EmailTokenization.  # noqa: E501


        :return: The currency of this EmailTokenization.  # noqa: E501
        :rtype: CreditNoteCurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this EmailTokenization.


        :param currency: The currency of this EmailTokenization.  # noqa: E501
        :type: CreditNoteCurrency
        """

        self._currency = currency

    @property
    def amount(self):
        """Gets the amount of this EmailTokenization.  # noqa: E501


        :return: The amount of this EmailTokenization.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this EmailTokenization.


        :param amount: The amount of this EmailTokenization.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def last_sent(self):
        """Gets the last_sent of this EmailTokenization.  # noqa: E501


        :return: The last_sent of this EmailTokenization.  # noqa: E501
        :rtype: datetime
        """
        return self._last_sent

    @last_sent.setter
    def last_sent(self, last_sent):
        """Sets the last_sent of this EmailTokenization.


        :param last_sent: The last_sent of this EmailTokenization.  # noqa: E501
        :type: datetime
        """

        self._last_sent = last_sent

    @property
    def valid_till(self):
        """Gets the valid_till of this EmailTokenization.  # noqa: E501


        :return: The valid_till of this EmailTokenization.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_till

    @valid_till.setter
    def valid_till(self, valid_till):
        """Sets the valid_till of this EmailTokenization.


        :param valid_till: The valid_till of this EmailTokenization.  # noqa: E501
        :type: datetime
        """
        if valid_till is None:
            raise ValueError("Invalid value for `valid_till`, must not be `None`")  # noqa: E501

        self._valid_till = valid_till

    @property
    def payment_method_id(self):
        """Gets the payment_method_id of this EmailTokenization.  # noqa: E501


        :return: The payment_method_id of this EmailTokenization.  # noqa: E501
        :rtype: str
        """
        return self._payment_method_id

    @payment_method_id.setter
    def payment_method_id(self, payment_method_id):
        """Sets the payment_method_id of this EmailTokenization.


        :param payment_method_id: The payment_method_id of this EmailTokenization.  # noqa: E501
        :type: str
        """

        self._payment_method_id = payment_method_id

    @property
    def make_default(self):
        """Gets the make_default of this EmailTokenization.  # noqa: E501


        :return: The make_default of this EmailTokenization.  # noqa: E501
        :rtype: bool
        """
        return self._make_default

    @make_default.setter
    def make_default(self, make_default):
        """Sets the make_default of this EmailTokenization.


        :param make_default: The make_default of this EmailTokenization.  # noqa: E501
        :type: bool
        """

        self._make_default = make_default

    @property
    def charge_immediately(self):
        """Gets the charge_immediately of this EmailTokenization.  # noqa: E501


        :return: The charge_immediately of this EmailTokenization.  # noqa: E501
        :rtype: bool
        """
        return self._charge_immediately

    @charge_immediately.setter
    def charge_immediately(self, charge_immediately):
        """Sets the charge_immediately of this EmailTokenization.


        :param charge_immediately: The charge_immediately of this EmailTokenization.  # noqa: E501
        :type: bool
        """

        self._charge_immediately = charge_immediately

    @property
    def capture_profile(self):
        """Gets the capture_profile of this EmailTokenization.  # noqa: E501


        :return: The capture_profile of this EmailTokenization.  # noqa: E501
        :rtype: bool
        """
        return self._capture_profile

    @capture_profile.setter
    def capture_profile(self, capture_profile):
        """Sets the capture_profile of this EmailTokenization.


        :param capture_profile: The capture_profile of this EmailTokenization.  # noqa: E501
        :type: bool
        """

        self._capture_profile = capture_profile

    @property
    def capture_billing_address(self):
        """Gets the capture_billing_address of this EmailTokenization.  # noqa: E501


        :return: The capture_billing_address of this EmailTokenization.  # noqa: E501
        :rtype: bool
        """
        return self._capture_billing_address

    @capture_billing_address.setter
    def capture_billing_address(self, capture_billing_address):
        """Sets the capture_billing_address of this EmailTokenization.


        :param capture_billing_address: The capture_billing_address of this EmailTokenization.  # noqa: E501
        :type: bool
        """

        self._capture_billing_address = capture_billing_address

    @property
    def capture_shipping_address(self):
        """Gets the capture_shipping_address of this EmailTokenization.  # noqa: E501


        :return: The capture_shipping_address of this EmailTokenization.  # noqa: E501
        :rtype: bool
        """
        return self._capture_shipping_address

    @capture_shipping_address.setter
    def capture_shipping_address(self, capture_shipping_address):
        """Sets the capture_shipping_address of this EmailTokenization.


        :param capture_shipping_address: The capture_shipping_address of this EmailTokenization.  # noqa: E501
        :type: bool
        """

        self._capture_shipping_address = capture_shipping_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmailTokenization, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailTokenization):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
