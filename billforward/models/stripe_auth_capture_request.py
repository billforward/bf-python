# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from billforward.models.auth_capture_request import AuthCaptureRequest  # noqa: F401,E501

class StripeAuthCaptureRequest(AuthCaptureRequest):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stripe_token': 'str',
        'card_id': 'str',
        'customer_id': 'str',
        'requires_setup_intent': 'bool'
    }
    if hasattr(AuthCaptureRequest, "swagger_types"):
        swagger_types.update(AuthCaptureRequest.swagger_types)

    attribute_map = {
        'stripe_token': 'stripeToken',
        'card_id': 'cardID',
        'customer_id': 'customerID',
        'requires_setup_intent': 'requiresSetupIntent'
    }
    if hasattr(AuthCaptureRequest, "attribute_map"):
        attribute_map.update(AuthCaptureRequest.attribute_map)

    def __init__(self, stripe_token=None, card_id=None, customer_id=None, requires_setup_intent=None, *args, **kwargs):  # noqa: E501
        """StripeAuthCaptureRequest - a model defined in Swagger"""  # noqa: E501
        self._stripe_token = None
        self._card_id = None
        self._customer_id = None
        self._requires_setup_intent = None
        self.discriminator = None
        self.stripe_token = stripe_token
        if card_id is not None:
            self.card_id = card_id
        if customer_id is not None:
            self.customer_id = customer_id
        if requires_setup_intent is not None:
            self.requires_setup_intent = requires_setup_intent
        AuthCaptureRequest.__init__(self, *args, **kwargs)

    @property
    def stripe_token(self):
        """Gets the stripe_token of this StripeAuthCaptureRequest.  # noqa: E501


        :return: The stripe_token of this StripeAuthCaptureRequest.  # noqa: E501
        :rtype: str
        """
        return self._stripe_token

    @stripe_token.setter
    def stripe_token(self, stripe_token):
        """Sets the stripe_token of this StripeAuthCaptureRequest.


        :param stripe_token: The stripe_token of this StripeAuthCaptureRequest.  # noqa: E501
        :type: str
        """
        if stripe_token is None:
            raise ValueError("Invalid value for `stripe_token`, must not be `None`")  # noqa: E501

        self._stripe_token = stripe_token

    @property
    def card_id(self):
        """Gets the card_id of this StripeAuthCaptureRequest.  # noqa: E501


        :return: The card_id of this StripeAuthCaptureRequest.  # noqa: E501
        :rtype: str
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """Sets the card_id of this StripeAuthCaptureRequest.


        :param card_id: The card_id of this StripeAuthCaptureRequest.  # noqa: E501
        :type: str
        """

        self._card_id = card_id

    @property
    def customer_id(self):
        """Gets the customer_id of this StripeAuthCaptureRequest.  # noqa: E501


        :return: The customer_id of this StripeAuthCaptureRequest.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this StripeAuthCaptureRequest.


        :param customer_id: The customer_id of this StripeAuthCaptureRequest.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def requires_setup_intent(self):
        """Gets the requires_setup_intent of this StripeAuthCaptureRequest.  # noqa: E501


        :return: The requires_setup_intent of this StripeAuthCaptureRequest.  # noqa: E501
        :rtype: bool
        """
        return self._requires_setup_intent

    @requires_setup_intent.setter
    def requires_setup_intent(self, requires_setup_intent):
        """Sets the requires_setup_intent of this StripeAuthCaptureRequest.


        :param requires_setup_intent: The requires_setup_intent of this StripeAuthCaptureRequest.  # noqa: E501
        :type: bool
        """

        self._requires_setup_intent = requires_setup_intent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StripeAuthCaptureRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StripeAuthCaptureRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
