# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TokenizationEpxredirectBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cust_nbr': 'str',
        'merch_nbr': 'str',
        'dba_nbr': 'str',
        'terminal_nbr': 'str',
        'tran_code': 'str',
        'amount': 'str',
        'auth_account': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'exp_date': 'str',
        'bp_resp_code': 'str',
        'bp_resp_text': 'str',
        'bp_field_errors': 'str',
        'msg_version': 'str',
        'tran_type': 'str',
        'tran_nbr': 'str',
        'local_date': 'str',
        'local_time': 'str',
        'auth_guid': 'str',
        'auth_resp': 'str',
        'auth_code': 'str',
        'auth_cvv2': 'str',
        'auth_resp_text': 'str',
        'auth_card_type': 'str',
        'auth_tran_date_gmt': 'str',
        'auth_amount_requested': 'str',
        'auth_amount': 'str',
        'auth_currency_code': 'str',
        'network_response': 'str',
        'auth_masked_account_nbr': 'str',
        'user_data_9': 'str',
        'user_data_10': 'str'
    }

    attribute_map = {
        'cust_nbr': 'CUST_NBR',
        'merch_nbr': 'MERCH_NBR',
        'dba_nbr': 'DBA_NBR',
        'terminal_nbr': 'TERMINAL_NBR',
        'tran_code': 'TRAN_CODE',
        'amount': 'AMOUNT',
        'auth_account': 'AUTH_ACCOUNT',
        'first_name': 'FIRST_NAME',
        'last_name': 'LAST_NAME',
        'exp_date': 'EXP_DATE',
        'bp_resp_code': 'BP_RESP_CODE',
        'bp_resp_text': 'BP_RESP_TEXT',
        'bp_field_errors': 'BP_FIELD_ERRORS',
        'msg_version': 'MSG_VERSION',
        'tran_type': 'TRAN_TYPE',
        'tran_nbr': 'TRAN_NBR',
        'local_date': 'LOCAL_DATE',
        'local_time': 'LOCAL_TIME',
        'auth_guid': 'AUTH_GUID',
        'auth_resp': 'AUTH_RESP',
        'auth_code': 'AUTH_CODE',
        'auth_cvv2': 'AUTH_CVV2',
        'auth_resp_text': 'AUTH_RESP_TEXT',
        'auth_card_type': 'AUTH_CARD_TYPE',
        'auth_tran_date_gmt': 'AUTH_TRAN_DATE_GMT',
        'auth_amount_requested': 'AUTH_AMOUNT_REQUESTED',
        'auth_amount': 'AUTH_AMOUNT',
        'auth_currency_code': 'AUTH_CURRENCY_CODE',
        'network_response': 'NETWORK_RESPONSE',
        'auth_masked_account_nbr': 'AUTH_MASKED_ACCOUNT_NBR',
        'user_data_9': 'USER_DATA_9',
        'user_data_10': 'USER_DATA_10'
    }

    def __init__(self, cust_nbr=None, merch_nbr=None, dba_nbr=None, terminal_nbr=None, tran_code=None, amount=None, auth_account=None, first_name=None, last_name=None, exp_date=None, bp_resp_code=None, bp_resp_text=None, bp_field_errors=None, msg_version=None, tran_type=None, tran_nbr=None, local_date=None, local_time=None, auth_guid=None, auth_resp=None, auth_code=None, auth_cvv2=None, auth_resp_text=None, auth_card_type=None, auth_tran_date_gmt=None, auth_amount_requested=None, auth_amount=None, auth_currency_code=None, network_response=None, auth_masked_account_nbr=None, user_data_9=None, user_data_10=None):  # noqa: E501
        """TokenizationEpxredirectBody - a model defined in Swagger"""  # noqa: E501
        self._cust_nbr = None
        self._merch_nbr = None
        self._dba_nbr = None
        self._terminal_nbr = None
        self._tran_code = None
        self._amount = None
        self._auth_account = None
        self._first_name = None
        self._last_name = None
        self._exp_date = None
        self._bp_resp_code = None
        self._bp_resp_text = None
        self._bp_field_errors = None
        self._msg_version = None
        self._tran_type = None
        self._tran_nbr = None
        self._local_date = None
        self._local_time = None
        self._auth_guid = None
        self._auth_resp = None
        self._auth_code = None
        self._auth_cvv2 = None
        self._auth_resp_text = None
        self._auth_card_type = None
        self._auth_tran_date_gmt = None
        self._auth_amount_requested = None
        self._auth_amount = None
        self._auth_currency_code = None
        self._network_response = None
        self._auth_masked_account_nbr = None
        self._user_data_9 = None
        self._user_data_10 = None
        self.discriminator = None
        if cust_nbr is not None:
            self.cust_nbr = cust_nbr
        if merch_nbr is not None:
            self.merch_nbr = merch_nbr
        if dba_nbr is not None:
            self.dba_nbr = dba_nbr
        if terminal_nbr is not None:
            self.terminal_nbr = terminal_nbr
        if tran_code is not None:
            self.tran_code = tran_code
        if amount is not None:
            self.amount = amount
        if auth_account is not None:
            self.auth_account = auth_account
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if exp_date is not None:
            self.exp_date = exp_date
        if bp_resp_code is not None:
            self.bp_resp_code = bp_resp_code
        if bp_resp_text is not None:
            self.bp_resp_text = bp_resp_text
        if bp_field_errors is not None:
            self.bp_field_errors = bp_field_errors
        if msg_version is not None:
            self.msg_version = msg_version
        if tran_type is not None:
            self.tran_type = tran_type
        if tran_nbr is not None:
            self.tran_nbr = tran_nbr
        if local_date is not None:
            self.local_date = local_date
        if local_time is not None:
            self.local_time = local_time
        if auth_guid is not None:
            self.auth_guid = auth_guid
        if auth_resp is not None:
            self.auth_resp = auth_resp
        if auth_code is not None:
            self.auth_code = auth_code
        if auth_cvv2 is not None:
            self.auth_cvv2 = auth_cvv2
        if auth_resp_text is not None:
            self.auth_resp_text = auth_resp_text
        if auth_card_type is not None:
            self.auth_card_type = auth_card_type
        if auth_tran_date_gmt is not None:
            self.auth_tran_date_gmt = auth_tran_date_gmt
        if auth_amount_requested is not None:
            self.auth_amount_requested = auth_amount_requested
        if auth_amount is not None:
            self.auth_amount = auth_amount
        if auth_currency_code is not None:
            self.auth_currency_code = auth_currency_code
        if network_response is not None:
            self.network_response = network_response
        if auth_masked_account_nbr is not None:
            self.auth_masked_account_nbr = auth_masked_account_nbr
        if user_data_9 is not None:
            self.user_data_9 = user_data_9
        if user_data_10 is not None:
            self.user_data_10 = user_data_10

    @property
    def cust_nbr(self):
        """Gets the cust_nbr of this TokenizationEpxredirectBody.  # noqa: E501


        :return: The cust_nbr of this TokenizationEpxredirectBody.  # noqa: E501
        :rtype: str
        """
        return self._cust_nbr

    @cust_nbr.setter
    def cust_nbr(self, cust_nbr):
        """Sets the cust_nbr of this TokenizationEpxredirectBody.


        :param cust_nbr: The cust_nbr of this TokenizationEpxredirectBody.  # noqa: E501
        :type: str
        """

        self._cust_nbr = cust_nbr

    @property
    def merch_nbr(self):
        """Gets the merch_nbr of this TokenizationEpxredirectBody.  # noqa: E501


        :return: The merch_nbr of this TokenizationEpxredirectBody.  # noqa: E501
        :rtype: str
        """
        return self._merch_nbr

    @merch_nbr.setter
    def merch_nbr(self, merch_nbr):
        """Sets the merch_nbr of this TokenizationEpxredirectBody.


        :param merch_nbr: The merch_nbr of this TokenizationEpxredirectBody.  # noqa: E501
        :type: str
        """

        self._merch_nbr = merch_nbr

    @property
    def dba_nbr(self):
        """Gets the dba_nbr of this TokenizationEpxredirectBody.  # noqa: E501


        :return: The dba_nbr of this TokenizationEpxredirectBody.  # noqa: E501
        :rtype: str
        """
        return self._dba_nbr

    @dba_nbr.setter
    def dba_nbr(self, dba_nbr):
        """Sets the dba_nbr of this TokenizationEpxredirectBody.


        :param dba_nbr: The dba_nbr of this TokenizationEpxredirectBody.  # noqa: E501
        :type: str
        """

        self._dba_nbr = dba_nbr

    @property
    def terminal_nbr(self):
        """Gets the terminal_nbr of this TokenizationEpxredirectBody.  # noqa: E501


        :return: The terminal_nbr of this TokenizationEpxredirectBody.  # noqa: E501
        :rtype: str
        """
        return self._terminal_nbr

    @terminal_nbr.setter
    def terminal_nbr(self, terminal_nbr):
        """Sets the terminal_nbr of this TokenizationEpxredirectBody.


        :param terminal_nbr: The terminal_nbr of this TokenizationEpxredirectBody.  # noqa: E501
        :type: str
        """

        self._terminal_nbr = terminal_nbr

    @property
    def tran_code(self):
        """Gets the tran_code of this TokenizationEpxredirectBody.  # noqa: E501


        :return: The tran_code of this TokenizationEpxredirectBody.  # noqa: E501
        :rtype: str
        """
        return self._tran_code

    @tran_code.setter
    def tran_code(self, tran_code):
        """Sets the tran_code of this TokenizationEpxredirectBody.


        :param tran_code: The tran_code of this TokenizationEpxredirectBody.  # noqa: E501
        :type: str
        """

        self._tran_code = tran_code

    @property
    def amount(self):
        """Gets the amount of this TokenizationEpxredirectBody.  # noqa: E501


        :return: The amount of this TokenizationEpxredirectBody.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this TokenizationEpxredirectBody.


        :param amount: The amount of this TokenizationEpxredirectBody.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def auth_account(self):
        """Gets the auth_account of this TokenizationEpxredirectBody.  # noqa: E501


        :return: The auth_account of this TokenizationEpxredirectBody.  # noqa: E501
        :rtype: str
        """
        return self._auth_account

    @auth_account.setter
    def auth_account(self, auth_account):
        """Sets the auth_account of this TokenizationEpxredirectBody.


        :param auth_account: The auth_account of this TokenizationEpxredirectBody.  # noqa: E501
        :type: str
        """

        self._auth_account = auth_account

    @property
    def first_name(self):
        """Gets the first_name of this TokenizationEpxredirectBody.  # noqa: E501


        :return: The first_name of this TokenizationEpxredirectBody.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this TokenizationEpxredirectBody.


        :param first_name: The first_name of this TokenizationEpxredirectBody.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this TokenizationEpxredirectBody.  # noqa: E501


        :return: The last_name of this TokenizationEpxredirectBody.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this TokenizationEpxredirectBody.


        :param last_name: The last_name of this TokenizationEpxredirectBody.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def exp_date(self):
        """Gets the exp_date of this TokenizationEpxredirectBody.  # noqa: E501


        :return: The exp_date of this TokenizationEpxredirectBody.  # noqa: E501
        :rtype: str
        """
        return self._exp_date

    @exp_date.setter
    def exp_date(self, exp_date):
        """Sets the exp_date of this TokenizationEpxredirectBody.


        :param exp_date: The exp_date of this TokenizationEpxredirectBody.  # noqa: E501
        :type: str
        """

        self._exp_date = exp_date

    @property
    def bp_resp_code(self):
        """Gets the bp_resp_code of this TokenizationEpxredirectBody.  # noqa: E501


        :return: The bp_resp_code of this TokenizationEpxredirectBody.  # noqa: E501
        :rtype: str
        """
        return self._bp_resp_code

    @bp_resp_code.setter
    def bp_resp_code(self, bp_resp_code):
        """Sets the bp_resp_code of this TokenizationEpxredirectBody.


        :param bp_resp_code: The bp_resp_code of this TokenizationEpxredirectBody.  # noqa: E501
        :type: str
        """

        self._bp_resp_code = bp_resp_code

    @property
    def bp_resp_text(self):
        """Gets the bp_resp_text of this TokenizationEpxredirectBody.  # noqa: E501


        :return: The bp_resp_text of this TokenizationEpxredirectBody.  # noqa: E501
        :rtype: str
        """
        return self._bp_resp_text

    @bp_resp_text.setter
    def bp_resp_text(self, bp_resp_text):
        """Sets the bp_resp_text of this TokenizationEpxredirectBody.


        :param bp_resp_text: The bp_resp_text of this TokenizationEpxredirectBody.  # noqa: E501
        :type: str
        """

        self._bp_resp_text = bp_resp_text

    @property
    def bp_field_errors(self):
        """Gets the bp_field_errors of this TokenizationEpxredirectBody.  # noqa: E501


        :return: The bp_field_errors of this TokenizationEpxredirectBody.  # noqa: E501
        :rtype: str
        """
        return self._bp_field_errors

    @bp_field_errors.setter
    def bp_field_errors(self, bp_field_errors):
        """Sets the bp_field_errors of this TokenizationEpxredirectBody.


        :param bp_field_errors: The bp_field_errors of this TokenizationEpxredirectBody.  # noqa: E501
        :type: str
        """

        self._bp_field_errors = bp_field_errors

    @property
    def msg_version(self):
        """Gets the msg_version of this TokenizationEpxredirectBody.  # noqa: E501


        :return: The msg_version of this TokenizationEpxredirectBody.  # noqa: E501
        :rtype: str
        """
        return self._msg_version

    @msg_version.setter
    def msg_version(self, msg_version):
        """Sets the msg_version of this TokenizationEpxredirectBody.


        :param msg_version: The msg_version of this TokenizationEpxredirectBody.  # noqa: E501
        :type: str
        """

        self._msg_version = msg_version

    @property
    def tran_type(self):
        """Gets the tran_type of this TokenizationEpxredirectBody.  # noqa: E501


        :return: The tran_type of this TokenizationEpxredirectBody.  # noqa: E501
        :rtype: str
        """
        return self._tran_type

    @tran_type.setter
    def tran_type(self, tran_type):
        """Sets the tran_type of this TokenizationEpxredirectBody.


        :param tran_type: The tran_type of this TokenizationEpxredirectBody.  # noqa: E501
        :type: str
        """

        self._tran_type = tran_type

    @property
    def tran_nbr(self):
        """Gets the tran_nbr of this TokenizationEpxredirectBody.  # noqa: E501


        :return: The tran_nbr of this TokenizationEpxredirectBody.  # noqa: E501
        :rtype: str
        """
        return self._tran_nbr

    @tran_nbr.setter
    def tran_nbr(self, tran_nbr):
        """Sets the tran_nbr of this TokenizationEpxredirectBody.


        :param tran_nbr: The tran_nbr of this TokenizationEpxredirectBody.  # noqa: E501
        :type: str
        """

        self._tran_nbr = tran_nbr

    @property
    def local_date(self):
        """Gets the local_date of this TokenizationEpxredirectBody.  # noqa: E501


        :return: The local_date of this TokenizationEpxredirectBody.  # noqa: E501
        :rtype: str
        """
        return self._local_date

    @local_date.setter
    def local_date(self, local_date):
        """Sets the local_date of this TokenizationEpxredirectBody.


        :param local_date: The local_date of this TokenizationEpxredirectBody.  # noqa: E501
        :type: str
        """

        self._local_date = local_date

    @property
    def local_time(self):
        """Gets the local_time of this TokenizationEpxredirectBody.  # noqa: E501


        :return: The local_time of this TokenizationEpxredirectBody.  # noqa: E501
        :rtype: str
        """
        return self._local_time

    @local_time.setter
    def local_time(self, local_time):
        """Sets the local_time of this TokenizationEpxredirectBody.


        :param local_time: The local_time of this TokenizationEpxredirectBody.  # noqa: E501
        :type: str
        """

        self._local_time = local_time

    @property
    def auth_guid(self):
        """Gets the auth_guid of this TokenizationEpxredirectBody.  # noqa: E501


        :return: The auth_guid of this TokenizationEpxredirectBody.  # noqa: E501
        :rtype: str
        """
        return self._auth_guid

    @auth_guid.setter
    def auth_guid(self, auth_guid):
        """Sets the auth_guid of this TokenizationEpxredirectBody.


        :param auth_guid: The auth_guid of this TokenizationEpxredirectBody.  # noqa: E501
        :type: str
        """

        self._auth_guid = auth_guid

    @property
    def auth_resp(self):
        """Gets the auth_resp of this TokenizationEpxredirectBody.  # noqa: E501


        :return: The auth_resp of this TokenizationEpxredirectBody.  # noqa: E501
        :rtype: str
        """
        return self._auth_resp

    @auth_resp.setter
    def auth_resp(self, auth_resp):
        """Sets the auth_resp of this TokenizationEpxredirectBody.


        :param auth_resp: The auth_resp of this TokenizationEpxredirectBody.  # noqa: E501
        :type: str
        """

        self._auth_resp = auth_resp

    @property
    def auth_code(self):
        """Gets the auth_code of this TokenizationEpxredirectBody.  # noqa: E501


        :return: The auth_code of this TokenizationEpxredirectBody.  # noqa: E501
        :rtype: str
        """
        return self._auth_code

    @auth_code.setter
    def auth_code(self, auth_code):
        """Sets the auth_code of this TokenizationEpxredirectBody.


        :param auth_code: The auth_code of this TokenizationEpxredirectBody.  # noqa: E501
        :type: str
        """

        self._auth_code = auth_code

    @property
    def auth_cvv2(self):
        """Gets the auth_cvv2 of this TokenizationEpxredirectBody.  # noqa: E501


        :return: The auth_cvv2 of this TokenizationEpxredirectBody.  # noqa: E501
        :rtype: str
        """
        return self._auth_cvv2

    @auth_cvv2.setter
    def auth_cvv2(self, auth_cvv2):
        """Sets the auth_cvv2 of this TokenizationEpxredirectBody.


        :param auth_cvv2: The auth_cvv2 of this TokenizationEpxredirectBody.  # noqa: E501
        :type: str
        """

        self._auth_cvv2 = auth_cvv2

    @property
    def auth_resp_text(self):
        """Gets the auth_resp_text of this TokenizationEpxredirectBody.  # noqa: E501


        :return: The auth_resp_text of this TokenizationEpxredirectBody.  # noqa: E501
        :rtype: str
        """
        return self._auth_resp_text

    @auth_resp_text.setter
    def auth_resp_text(self, auth_resp_text):
        """Sets the auth_resp_text of this TokenizationEpxredirectBody.


        :param auth_resp_text: The auth_resp_text of this TokenizationEpxredirectBody.  # noqa: E501
        :type: str
        """

        self._auth_resp_text = auth_resp_text

    @property
    def auth_card_type(self):
        """Gets the auth_card_type of this TokenizationEpxredirectBody.  # noqa: E501


        :return: The auth_card_type of this TokenizationEpxredirectBody.  # noqa: E501
        :rtype: str
        """
        return self._auth_card_type

    @auth_card_type.setter
    def auth_card_type(self, auth_card_type):
        """Sets the auth_card_type of this TokenizationEpxredirectBody.


        :param auth_card_type: The auth_card_type of this TokenizationEpxredirectBody.  # noqa: E501
        :type: str
        """

        self._auth_card_type = auth_card_type

    @property
    def auth_tran_date_gmt(self):
        """Gets the auth_tran_date_gmt of this TokenizationEpxredirectBody.  # noqa: E501


        :return: The auth_tran_date_gmt of this TokenizationEpxredirectBody.  # noqa: E501
        :rtype: str
        """
        return self._auth_tran_date_gmt

    @auth_tran_date_gmt.setter
    def auth_tran_date_gmt(self, auth_tran_date_gmt):
        """Sets the auth_tran_date_gmt of this TokenizationEpxredirectBody.


        :param auth_tran_date_gmt: The auth_tran_date_gmt of this TokenizationEpxredirectBody.  # noqa: E501
        :type: str
        """

        self._auth_tran_date_gmt = auth_tran_date_gmt

    @property
    def auth_amount_requested(self):
        """Gets the auth_amount_requested of this TokenizationEpxredirectBody.  # noqa: E501


        :return: The auth_amount_requested of this TokenizationEpxredirectBody.  # noqa: E501
        :rtype: str
        """
        return self._auth_amount_requested

    @auth_amount_requested.setter
    def auth_amount_requested(self, auth_amount_requested):
        """Sets the auth_amount_requested of this TokenizationEpxredirectBody.


        :param auth_amount_requested: The auth_amount_requested of this TokenizationEpxredirectBody.  # noqa: E501
        :type: str
        """

        self._auth_amount_requested = auth_amount_requested

    @property
    def auth_amount(self):
        """Gets the auth_amount of this TokenizationEpxredirectBody.  # noqa: E501


        :return: The auth_amount of this TokenizationEpxredirectBody.  # noqa: E501
        :rtype: str
        """
        return self._auth_amount

    @auth_amount.setter
    def auth_amount(self, auth_amount):
        """Sets the auth_amount of this TokenizationEpxredirectBody.


        :param auth_amount: The auth_amount of this TokenizationEpxredirectBody.  # noqa: E501
        :type: str
        """

        self._auth_amount = auth_amount

    @property
    def auth_currency_code(self):
        """Gets the auth_currency_code of this TokenizationEpxredirectBody.  # noqa: E501


        :return: The auth_currency_code of this TokenizationEpxredirectBody.  # noqa: E501
        :rtype: str
        """
        return self._auth_currency_code

    @auth_currency_code.setter
    def auth_currency_code(self, auth_currency_code):
        """Sets the auth_currency_code of this TokenizationEpxredirectBody.


        :param auth_currency_code: The auth_currency_code of this TokenizationEpxredirectBody.  # noqa: E501
        :type: str
        """

        self._auth_currency_code = auth_currency_code

    @property
    def network_response(self):
        """Gets the network_response of this TokenizationEpxredirectBody.  # noqa: E501


        :return: The network_response of this TokenizationEpxredirectBody.  # noqa: E501
        :rtype: str
        """
        return self._network_response

    @network_response.setter
    def network_response(self, network_response):
        """Sets the network_response of this TokenizationEpxredirectBody.


        :param network_response: The network_response of this TokenizationEpxredirectBody.  # noqa: E501
        :type: str
        """

        self._network_response = network_response

    @property
    def auth_masked_account_nbr(self):
        """Gets the auth_masked_account_nbr of this TokenizationEpxredirectBody.  # noqa: E501


        :return: The auth_masked_account_nbr of this TokenizationEpxredirectBody.  # noqa: E501
        :rtype: str
        """
        return self._auth_masked_account_nbr

    @auth_masked_account_nbr.setter
    def auth_masked_account_nbr(self, auth_masked_account_nbr):
        """Sets the auth_masked_account_nbr of this TokenizationEpxredirectBody.


        :param auth_masked_account_nbr: The auth_masked_account_nbr of this TokenizationEpxredirectBody.  # noqa: E501
        :type: str
        """

        self._auth_masked_account_nbr = auth_masked_account_nbr

    @property
    def user_data_9(self):
        """Gets the user_data_9 of this TokenizationEpxredirectBody.  # noqa: E501


        :return: The user_data_9 of this TokenizationEpxredirectBody.  # noqa: E501
        :rtype: str
        """
        return self._user_data_9

    @user_data_9.setter
    def user_data_9(self, user_data_9):
        """Sets the user_data_9 of this TokenizationEpxredirectBody.


        :param user_data_9: The user_data_9 of this TokenizationEpxredirectBody.  # noqa: E501
        :type: str
        """

        self._user_data_9 = user_data_9

    @property
    def user_data_10(self):
        """Gets the user_data_10 of this TokenizationEpxredirectBody.  # noqa: E501


        :return: The user_data_10 of this TokenizationEpxredirectBody.  # noqa: E501
        :rtype: str
        """
        return self._user_data_10

    @user_data_10.setter
    def user_data_10(self, user_data_10):
        """Sets the user_data_10 of this TokenizationEpxredirectBody.


        :param user_data_10: The user_data_10 of this TokenizationEpxredirectBody.  # noqa: E501
        :type: str
        """

        self._user_data_10 = user_data_10

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TokenizationEpxredirectBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TokenizationEpxredirectBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
