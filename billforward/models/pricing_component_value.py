# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PricingComponentValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'changed_by': 'str',
        'updated': 'datetime',
        'id': 'str',
        'version_id': 'str',
        'pricing_component_id': 'str',
        'pricing_component_name': 'str',
        'subscription_id': 'str',
        'organization_id': 'str',
        'value': 'int',
        'applies_from': 'datetime',
        'applies_till': 'datetime',
        'pending_change': 'PendingComponentValueChange',
        'inferred_from_default': 'bool'
    }

    attribute_map = {
        'created': 'created',
        'changed_by': 'changedBy',
        'updated': 'updated',
        'id': 'id',
        'version_id': 'versionID',
        'pricing_component_id': 'pricingComponentID',
        'pricing_component_name': 'pricingComponentName',
        'subscription_id': 'subscriptionID',
        'organization_id': 'organizationID',
        'value': 'value',
        'applies_from': 'appliesFrom',
        'applies_till': 'appliesTill',
        'pending_change': 'pendingChange',
        'inferred_from_default': 'inferredFromDefault'
    }

    def __init__(self, created=None, changed_by=None, updated=None, id=None, version_id=None, pricing_component_id=None, pricing_component_name=None, subscription_id=None, organization_id=None, value=None, applies_from=None, applies_till=None, pending_change=None, inferred_from_default=None):  # noqa: E501
        """PricingComponentValue - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._changed_by = None
        self._updated = None
        self._id = None
        self._version_id = None
        self._pricing_component_id = None
        self._pricing_component_name = None
        self._subscription_id = None
        self._organization_id = None
        self._value = None
        self._applies_from = None
        self._applies_till = None
        self._pending_change = None
        self._inferred_from_default = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if changed_by is not None:
            self.changed_by = changed_by
        if updated is not None:
            self.updated = updated
        self.id = id
        if version_id is not None:
            self.version_id = version_id
        if pricing_component_id is not None:
            self.pricing_component_id = pricing_component_id
        if pricing_component_name is not None:
            self.pricing_component_name = pricing_component_name
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if organization_id is not None:
            self.organization_id = organization_id
        self.value = value
        if applies_from is not None:
            self.applies_from = applies_from
        if applies_till is not None:
            self.applies_till = applies_till
        if pending_change is not None:
            self.pending_change = pending_change
        if inferred_from_default is not None:
            self.inferred_from_default = inferred_from_default

    @property
    def created(self):
        """Gets the created of this PricingComponentValue.  # noqa: E501


        :return: The created of this PricingComponentValue.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this PricingComponentValue.


        :param created: The created of this PricingComponentValue.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """Gets the changed_by of this PricingComponentValue.  # noqa: E501


        :return: The changed_by of this PricingComponentValue.  # noqa: E501
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """Sets the changed_by of this PricingComponentValue.


        :param changed_by: The changed_by of this PricingComponentValue.  # noqa: E501
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """Gets the updated of this PricingComponentValue.  # noqa: E501


        :return: The updated of this PricingComponentValue.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this PricingComponentValue.


        :param updated: The updated of this PricingComponentValue.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """Gets the id of this PricingComponentValue.  # noqa: E501


        :return: The id of this PricingComponentValue.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PricingComponentValue.


        :param id: The id of this PricingComponentValue.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def version_id(self):
        """Gets the version_id of this PricingComponentValue.  # noqa: E501


        :return: The version_id of this PricingComponentValue.  # noqa: E501
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this PricingComponentValue.


        :param version_id: The version_id of this PricingComponentValue.  # noqa: E501
        :type: str
        """

        self._version_id = version_id

    @property
    def pricing_component_id(self):
        """Gets the pricing_component_id of this PricingComponentValue.  # noqa: E501


        :return: The pricing_component_id of this PricingComponentValue.  # noqa: E501
        :rtype: str
        """
        return self._pricing_component_id

    @pricing_component_id.setter
    def pricing_component_id(self, pricing_component_id):
        """Sets the pricing_component_id of this PricingComponentValue.


        :param pricing_component_id: The pricing_component_id of this PricingComponentValue.  # noqa: E501
        :type: str
        """

        self._pricing_component_id = pricing_component_id

    @property
    def pricing_component_name(self):
        """Gets the pricing_component_name of this PricingComponentValue.  # noqa: E501


        :return: The pricing_component_name of this PricingComponentValue.  # noqa: E501
        :rtype: str
        """
        return self._pricing_component_name

    @pricing_component_name.setter
    def pricing_component_name(self, pricing_component_name):
        """Sets the pricing_component_name of this PricingComponentValue.


        :param pricing_component_name: The pricing_component_name of this PricingComponentValue.  # noqa: E501
        :type: str
        """

        self._pricing_component_name = pricing_component_name

    @property
    def subscription_id(self):
        """Gets the subscription_id of this PricingComponentValue.  # noqa: E501


        :return: The subscription_id of this PricingComponentValue.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this PricingComponentValue.


        :param subscription_id: The subscription_id of this PricingComponentValue.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def organization_id(self):
        """Gets the organization_id of this PricingComponentValue.  # noqa: E501


        :return: The organization_id of this PricingComponentValue.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this PricingComponentValue.


        :param organization_id: The organization_id of this PricingComponentValue.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def value(self):
        """Gets the value of this PricingComponentValue.  # noqa: E501


        :return: The value of this PricingComponentValue.  # noqa: E501
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this PricingComponentValue.


        :param value: The value of this PricingComponentValue.  # noqa: E501
        :type: int
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def applies_from(self):
        """Gets the applies_from of this PricingComponentValue.  # noqa: E501


        :return: The applies_from of this PricingComponentValue.  # noqa: E501
        :rtype: datetime
        """
        return self._applies_from

    @applies_from.setter
    def applies_from(self, applies_from):
        """Sets the applies_from of this PricingComponentValue.


        :param applies_from: The applies_from of this PricingComponentValue.  # noqa: E501
        :type: datetime
        """

        self._applies_from = applies_from

    @property
    def applies_till(self):
        """Gets the applies_till of this PricingComponentValue.  # noqa: E501


        :return: The applies_till of this PricingComponentValue.  # noqa: E501
        :rtype: datetime
        """
        return self._applies_till

    @applies_till.setter
    def applies_till(self, applies_till):
        """Sets the applies_till of this PricingComponentValue.


        :param applies_till: The applies_till of this PricingComponentValue.  # noqa: E501
        :type: datetime
        """

        self._applies_till = applies_till

    @property
    def pending_change(self):
        """Gets the pending_change of this PricingComponentValue.  # noqa: E501


        :return: The pending_change of this PricingComponentValue.  # noqa: E501
        :rtype: PendingComponentValueChange
        """
        return self._pending_change

    @pending_change.setter
    def pending_change(self, pending_change):
        """Sets the pending_change of this PricingComponentValue.


        :param pending_change: The pending_change of this PricingComponentValue.  # noqa: E501
        :type: PendingComponentValueChange
        """

        self._pending_change = pending_change

    @property
    def inferred_from_default(self):
        """Gets the inferred_from_default of this PricingComponentValue.  # noqa: E501


        :return: The inferred_from_default of this PricingComponentValue.  # noqa: E501
        :rtype: bool
        """
        return self._inferred_from_default

    @inferred_from_default.setter
    def inferred_from_default(self, inferred_from_default):
        """Sets the inferred_from_default of this PricingComponentValue.


        :param inferred_from_default: The inferred_from_default of this PricingComponentValue.  # noqa: E501
        :type: bool
        """

        self._inferred_from_default = inferred_from_default

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PricingComponentValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PricingComponentValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
