# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from billforward.models.auth_capture_request import AuthCaptureRequest  # noqa: F401,E501

class ShuttleAuthCaptureRequest(AuthCaptureRequest):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'shuttle_payment_method': 'str',
        'shuttle_instance_id': 'str'
    }
    if hasattr(AuthCaptureRequest, "swagger_types"):
        swagger_types.update(AuthCaptureRequest.swagger_types)

    attribute_map = {
        'shuttle_payment_method': 'shuttlePaymentMethod',
        'shuttle_instance_id': 'shuttleInstanceId'
    }
    if hasattr(AuthCaptureRequest, "attribute_map"):
        attribute_map.update(AuthCaptureRequest.attribute_map)

    def __init__(self, shuttle_payment_method=None, shuttle_instance_id=None, *args, **kwargs):  # noqa: E501
        """ShuttleAuthCaptureRequest - a model defined in Swagger"""  # noqa: E501
        self._shuttle_payment_method = None
        self._shuttle_instance_id = None
        self.discriminator = None
        self.shuttle_payment_method = shuttle_payment_method
        self.shuttle_instance_id = shuttle_instance_id
        AuthCaptureRequest.__init__(self, *args, **kwargs)

    @property
    def shuttle_payment_method(self):
        """Gets the shuttle_payment_method of this ShuttleAuthCaptureRequest.  # noqa: E501


        :return: The shuttle_payment_method of this ShuttleAuthCaptureRequest.  # noqa: E501
        :rtype: str
        """
        return self._shuttle_payment_method

    @shuttle_payment_method.setter
    def shuttle_payment_method(self, shuttle_payment_method):
        """Sets the shuttle_payment_method of this ShuttleAuthCaptureRequest.


        :param shuttle_payment_method: The shuttle_payment_method of this ShuttleAuthCaptureRequest.  # noqa: E501
        :type: str
        """
        if shuttle_payment_method is None:
            raise ValueError("Invalid value for `shuttle_payment_method`, must not be `None`")  # noqa: E501

        self._shuttle_payment_method = shuttle_payment_method

    @property
    def shuttle_instance_id(self):
        """Gets the shuttle_instance_id of this ShuttleAuthCaptureRequest.  # noqa: E501


        :return: The shuttle_instance_id of this ShuttleAuthCaptureRequest.  # noqa: E501
        :rtype: str
        """
        return self._shuttle_instance_id

    @shuttle_instance_id.setter
    def shuttle_instance_id(self, shuttle_instance_id):
        """Sets the shuttle_instance_id of this ShuttleAuthCaptureRequest.


        :param shuttle_instance_id: The shuttle_instance_id of this ShuttleAuthCaptureRequest.  # noqa: E501
        :type: str
        """
        if shuttle_instance_id is None:
            raise ValueError("Invalid value for `shuttle_instance_id`, must not be `None`")  # noqa: E501

        self._shuttle_instance_id = shuttle_instance_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShuttleAuthCaptureRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShuttleAuthCaptureRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
