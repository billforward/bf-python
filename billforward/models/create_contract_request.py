# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateContractRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'organization_id': 'str',
        'account_id': 'str',
        'name': 'str',
        'description': 'str',
        'start': 'datetime',
        'contract_end_behaviour': 'str',
        'valid_from': 'datetime',
        'valid_till': 'datetime',
        'contract_periods': 'list[CreateContractPeriodRequest]'
    }

    attribute_map = {
        'created': 'created',
        'organization_id': 'organizationID',
        'account_id': 'accountID',
        'name': 'name',
        'description': 'description',
        'start': 'start',
        'contract_end_behaviour': 'contractEndBehaviour',
        'valid_from': 'validFrom',
        'valid_till': 'validTill',
        'contract_periods': 'contractPeriods'
    }

    def __init__(self, created=None, organization_id=None, account_id=None, name=None, description=None, start=None, contract_end_behaviour=None, valid_from=None, valid_till=None, contract_periods=None):  # noqa: E501
        """CreateContractRequest - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._organization_id = None
        self._account_id = None
        self._name = None
        self._description = None
        self._start = None
        self._contract_end_behaviour = None
        self._valid_from = None
        self._valid_till = None
        self._contract_periods = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if organization_id is not None:
            self.organization_id = organization_id
        if account_id is not None:
            self.account_id = account_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if start is not None:
            self.start = start
        self.contract_end_behaviour = contract_end_behaviour
        self.valid_from = valid_from
        if valid_till is not None:
            self.valid_till = valid_till
        if contract_periods is not None:
            self.contract_periods = contract_periods

    @property
    def created(self):
        """Gets the created of this CreateContractRequest.  # noqa: E501


        :return: The created of this CreateContractRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this CreateContractRequest.


        :param created: The created of this CreateContractRequest.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def organization_id(self):
        """Gets the organization_id of this CreateContractRequest.  # noqa: E501


        :return: The organization_id of this CreateContractRequest.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this CreateContractRequest.


        :param organization_id: The organization_id of this CreateContractRequest.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def account_id(self):
        """Gets the account_id of this CreateContractRequest.  # noqa: E501


        :return: The account_id of this CreateContractRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CreateContractRequest.


        :param account_id: The account_id of this CreateContractRequest.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def name(self):
        """Gets the name of this CreateContractRequest.  # noqa: E501


        :return: The name of this CreateContractRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateContractRequest.


        :param name: The name of this CreateContractRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateContractRequest.  # noqa: E501


        :return: The description of this CreateContractRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateContractRequest.


        :param description: The description of this CreateContractRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def start(self):
        """Gets the start of this CreateContractRequest.  # noqa: E501


        :return: The start of this CreateContractRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this CreateContractRequest.


        :param start: The start of this CreateContractRequest.  # noqa: E501
        :type: datetime
        """

        self._start = start

    @property
    def contract_end_behaviour(self):
        """Gets the contract_end_behaviour of this CreateContractRequest.  # noqa: E501


        :return: The contract_end_behaviour of this CreateContractRequest.  # noqa: E501
        :rtype: str
        """
        return self._contract_end_behaviour

    @contract_end_behaviour.setter
    def contract_end_behaviour(self, contract_end_behaviour):
        """Sets the contract_end_behaviour of this CreateContractRequest.


        :param contract_end_behaviour: The contract_end_behaviour of this CreateContractRequest.  # noqa: E501
        :type: str
        """
        if contract_end_behaviour is None:
            raise ValueError("Invalid value for `contract_end_behaviour`, must not be `None`")  # noqa: E501
        allowed_values = ["ExpireSubscription", "EvergreenSubscription"]  # noqa: E501
        if contract_end_behaviour not in allowed_values:
            raise ValueError(
                "Invalid value for `contract_end_behaviour` ({0}), must be one of {1}"  # noqa: E501
                .format(contract_end_behaviour, allowed_values)
            )

        self._contract_end_behaviour = contract_end_behaviour

    @property
    def valid_from(self):
        """Gets the valid_from of this CreateContractRequest.  # noqa: E501


        :return: The valid_from of this CreateContractRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this CreateContractRequest.


        :param valid_from: The valid_from of this CreateContractRequest.  # noqa: E501
        :type: datetime
        """
        if valid_from is None:
            raise ValueError("Invalid value for `valid_from`, must not be `None`")  # noqa: E501

        self._valid_from = valid_from

    @property
    def valid_till(self):
        """Gets the valid_till of this CreateContractRequest.  # noqa: E501


        :return: The valid_till of this CreateContractRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_till

    @valid_till.setter
    def valid_till(self, valid_till):
        """Sets the valid_till of this CreateContractRequest.


        :param valid_till: The valid_till of this CreateContractRequest.  # noqa: E501
        :type: datetime
        """

        self._valid_till = valid_till

    @property
    def contract_periods(self):
        """Gets the contract_periods of this CreateContractRequest.  # noqa: E501


        :return: The contract_periods of this CreateContractRequest.  # noqa: E501
        :rtype: list[CreateContractPeriodRequest]
        """
        return self._contract_periods

    @contract_periods.setter
    def contract_periods(self, contract_periods):
        """Sets the contract_periods of this CreateContractRequest.


        :param contract_periods: The contract_periods of this CreateContractRequest.  # noqa: E501
        :type: list[CreateContractPeriodRequest]
        """

        self._contract_periods = contract_periods

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateContractRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateContractRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
