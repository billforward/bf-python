# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InvoiceExecutionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'payment_amount': 'float',
        'force_paid': 'bool',
        'force_paid_reason': 'str',
        'organization_id': 'str',
        'payment_method_id': 'str'
    }

    attribute_map = {
        'created': 'created',
        'payment_amount': 'paymentAmount',
        'force_paid': 'forcePaid',
        'force_paid_reason': 'forcePaidReason',
        'organization_id': 'organizationID',
        'payment_method_id': 'paymentMethodID'
    }

    def __init__(self, created=None, payment_amount=None, force_paid=None, force_paid_reason=None, organization_id=None, payment_method_id=None):  # noqa: E501
        """InvoiceExecutionRequest - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._payment_amount = None
        self._force_paid = None
        self._force_paid_reason = None
        self._organization_id = None
        self._payment_method_id = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if payment_amount is not None:
            self.payment_amount = payment_amount
        self.force_paid = force_paid
        if force_paid_reason is not None:
            self.force_paid_reason = force_paid_reason
        if organization_id is not None:
            self.organization_id = organization_id
        if payment_method_id is not None:
            self.payment_method_id = payment_method_id

    @property
    def created(self):
        """Gets the created of this InvoiceExecutionRequest.  # noqa: E501


        :return: The created of this InvoiceExecutionRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this InvoiceExecutionRequest.


        :param created: The created of this InvoiceExecutionRequest.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def payment_amount(self):
        """Gets the payment_amount of this InvoiceExecutionRequest.  # noqa: E501


        :return: The payment_amount of this InvoiceExecutionRequest.  # noqa: E501
        :rtype: float
        """
        return self._payment_amount

    @payment_amount.setter
    def payment_amount(self, payment_amount):
        """Sets the payment_amount of this InvoiceExecutionRequest.


        :param payment_amount: The payment_amount of this InvoiceExecutionRequest.  # noqa: E501
        :type: float
        """

        self._payment_amount = payment_amount

    @property
    def force_paid(self):
        """Gets the force_paid of this InvoiceExecutionRequest.  # noqa: E501


        :return: The force_paid of this InvoiceExecutionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._force_paid

    @force_paid.setter
    def force_paid(self, force_paid):
        """Sets the force_paid of this InvoiceExecutionRequest.


        :param force_paid: The force_paid of this InvoiceExecutionRequest.  # noqa: E501
        :type: bool
        """
        if force_paid is None:
            raise ValueError("Invalid value for `force_paid`, must not be `None`")  # noqa: E501

        self._force_paid = force_paid

    @property
    def force_paid_reason(self):
        """Gets the force_paid_reason of this InvoiceExecutionRequest.  # noqa: E501


        :return: The force_paid_reason of this InvoiceExecutionRequest.  # noqa: E501
        :rtype: str
        """
        return self._force_paid_reason

    @force_paid_reason.setter
    def force_paid_reason(self, force_paid_reason):
        """Sets the force_paid_reason of this InvoiceExecutionRequest.


        :param force_paid_reason: The force_paid_reason of this InvoiceExecutionRequest.  # noqa: E501
        :type: str
        """

        self._force_paid_reason = force_paid_reason

    @property
    def organization_id(self):
        """Gets the organization_id of this InvoiceExecutionRequest.  # noqa: E501


        :return: The organization_id of this InvoiceExecutionRequest.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this InvoiceExecutionRequest.


        :param organization_id: The organization_id of this InvoiceExecutionRequest.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def payment_method_id(self):
        """Gets the payment_method_id of this InvoiceExecutionRequest.  # noqa: E501


        :return: The payment_method_id of this InvoiceExecutionRequest.  # noqa: E501
        :rtype: str
        """
        return self._payment_method_id

    @payment_method_id.setter
    def payment_method_id(self, payment_method_id):
        """Sets the payment_method_id of this InvoiceExecutionRequest.


        :param payment_method_id: The payment_method_id of this InvoiceExecutionRequest.  # noqa: E501
        :type: str
        """

        self._payment_method_id = payment_method_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvoiceExecutionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoiceExecutionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
