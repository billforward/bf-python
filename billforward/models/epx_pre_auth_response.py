# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EpxPreAuthResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'organization_id': 'str',
        'tac': 'str',
        'cust_nbr': 'str',
        'merch_nbr': 'str',
        'dba_nbr': 'str',
        'terminal_nbr': 'str',
        'batch_id': 'str',
        'tran_code': 'str',
        'amount': 'str',
        'currency_code': 'str'
    }

    attribute_map = {
        'created': 'created',
        'organization_id': 'organizationID',
        'tac': 'tac',
        'cust_nbr': 'custNbr',
        'merch_nbr': 'merchNbr',
        'dba_nbr': 'dbaNbr',
        'terminal_nbr': 'terminalNbr',
        'batch_id': 'batchId',
        'tran_code': 'tranCode',
        'amount': 'amount',
        'currency_code': 'currencyCode'
    }

    def __init__(self, created=None, organization_id=None, tac=None, cust_nbr=None, merch_nbr=None, dba_nbr=None, terminal_nbr=None, batch_id=None, tran_code=None, amount=None, currency_code=None):  # noqa: E501
        """EpxPreAuthResponse - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._organization_id = None
        self._tac = None
        self._cust_nbr = None
        self._merch_nbr = None
        self._dba_nbr = None
        self._terminal_nbr = None
        self._batch_id = None
        self._tran_code = None
        self._amount = None
        self._currency_code = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if organization_id is not None:
            self.organization_id = organization_id
        if tac is not None:
            self.tac = tac
        if cust_nbr is not None:
            self.cust_nbr = cust_nbr
        if merch_nbr is not None:
            self.merch_nbr = merch_nbr
        if dba_nbr is not None:
            self.dba_nbr = dba_nbr
        if terminal_nbr is not None:
            self.terminal_nbr = terminal_nbr
        if batch_id is not None:
            self.batch_id = batch_id
        if tran_code is not None:
            self.tran_code = tran_code
        if amount is not None:
            self.amount = amount
        if currency_code is not None:
            self.currency_code = currency_code

    @property
    def created(self):
        """Gets the created of this EpxPreAuthResponse.  # noqa: E501


        :return: The created of this EpxPreAuthResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this EpxPreAuthResponse.


        :param created: The created of this EpxPreAuthResponse.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def organization_id(self):
        """Gets the organization_id of this EpxPreAuthResponse.  # noqa: E501


        :return: The organization_id of this EpxPreAuthResponse.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this EpxPreAuthResponse.


        :param organization_id: The organization_id of this EpxPreAuthResponse.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def tac(self):
        """Gets the tac of this EpxPreAuthResponse.  # noqa: E501


        :return: The tac of this EpxPreAuthResponse.  # noqa: E501
        :rtype: str
        """
        return self._tac

    @tac.setter
    def tac(self, tac):
        """Sets the tac of this EpxPreAuthResponse.


        :param tac: The tac of this EpxPreAuthResponse.  # noqa: E501
        :type: str
        """

        self._tac = tac

    @property
    def cust_nbr(self):
        """Gets the cust_nbr of this EpxPreAuthResponse.  # noqa: E501


        :return: The cust_nbr of this EpxPreAuthResponse.  # noqa: E501
        :rtype: str
        """
        return self._cust_nbr

    @cust_nbr.setter
    def cust_nbr(self, cust_nbr):
        """Sets the cust_nbr of this EpxPreAuthResponse.


        :param cust_nbr: The cust_nbr of this EpxPreAuthResponse.  # noqa: E501
        :type: str
        """

        self._cust_nbr = cust_nbr

    @property
    def merch_nbr(self):
        """Gets the merch_nbr of this EpxPreAuthResponse.  # noqa: E501


        :return: The merch_nbr of this EpxPreAuthResponse.  # noqa: E501
        :rtype: str
        """
        return self._merch_nbr

    @merch_nbr.setter
    def merch_nbr(self, merch_nbr):
        """Sets the merch_nbr of this EpxPreAuthResponse.


        :param merch_nbr: The merch_nbr of this EpxPreAuthResponse.  # noqa: E501
        :type: str
        """

        self._merch_nbr = merch_nbr

    @property
    def dba_nbr(self):
        """Gets the dba_nbr of this EpxPreAuthResponse.  # noqa: E501


        :return: The dba_nbr of this EpxPreAuthResponse.  # noqa: E501
        :rtype: str
        """
        return self._dba_nbr

    @dba_nbr.setter
    def dba_nbr(self, dba_nbr):
        """Sets the dba_nbr of this EpxPreAuthResponse.


        :param dba_nbr: The dba_nbr of this EpxPreAuthResponse.  # noqa: E501
        :type: str
        """

        self._dba_nbr = dba_nbr

    @property
    def terminal_nbr(self):
        """Gets the terminal_nbr of this EpxPreAuthResponse.  # noqa: E501


        :return: The terminal_nbr of this EpxPreAuthResponse.  # noqa: E501
        :rtype: str
        """
        return self._terminal_nbr

    @terminal_nbr.setter
    def terminal_nbr(self, terminal_nbr):
        """Sets the terminal_nbr of this EpxPreAuthResponse.


        :param terminal_nbr: The terminal_nbr of this EpxPreAuthResponse.  # noqa: E501
        :type: str
        """

        self._terminal_nbr = terminal_nbr

    @property
    def batch_id(self):
        """Gets the batch_id of this EpxPreAuthResponse.  # noqa: E501


        :return: The batch_id of this EpxPreAuthResponse.  # noqa: E501
        :rtype: str
        """
        return self._batch_id

    @batch_id.setter
    def batch_id(self, batch_id):
        """Sets the batch_id of this EpxPreAuthResponse.


        :param batch_id: The batch_id of this EpxPreAuthResponse.  # noqa: E501
        :type: str
        """

        self._batch_id = batch_id

    @property
    def tran_code(self):
        """Gets the tran_code of this EpxPreAuthResponse.  # noqa: E501


        :return: The tran_code of this EpxPreAuthResponse.  # noqa: E501
        :rtype: str
        """
        return self._tran_code

    @tran_code.setter
    def tran_code(self, tran_code):
        """Sets the tran_code of this EpxPreAuthResponse.


        :param tran_code: The tran_code of this EpxPreAuthResponse.  # noqa: E501
        :type: str
        """

        self._tran_code = tran_code

    @property
    def amount(self):
        """Gets the amount of this EpxPreAuthResponse.  # noqa: E501


        :return: The amount of this EpxPreAuthResponse.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this EpxPreAuthResponse.


        :param amount: The amount of this EpxPreAuthResponse.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def currency_code(self):
        """Gets the currency_code of this EpxPreAuthResponse.  # noqa: E501


        :return: The currency_code of this EpxPreAuthResponse.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this EpxPreAuthResponse.


        :param currency_code: The currency_code of this EpxPreAuthResponse.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EpxPreAuthResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EpxPreAuthResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
