# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContractPeriod(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'changed_by': 'str',
        'updated': 'datetime',
        'id': 'str',
        'organization_id': 'str',
        'subscription_duration_period': 'int',
        'subscription_duration_period_type': 'str',
        'state': 'str',
        'contract_period': 'int',
        'subscription_periods': 'int',
        'purchase_order': 'str',
        'quote': 'ApiQuote'
    }

    attribute_map = {
        'created': 'created',
        'changed_by': 'changedBy',
        'updated': 'updated',
        'id': 'id',
        'organization_id': 'organizationID',
        'subscription_duration_period': 'subscriptionDurationPeriod',
        'subscription_duration_period_type': 'subscriptionDurationPeriodType',
        'state': 'state',
        'contract_period': 'contractPeriod',
        'subscription_periods': 'subscriptionPeriods',
        'purchase_order': 'purchaseOrder',
        'quote': 'quote'
    }

    def __init__(self, created=None, changed_by=None, updated=None, id=None, organization_id=None, subscription_duration_period=None, subscription_duration_period_type=None, state=None, contract_period=None, subscription_periods=None, purchase_order=None, quote=None):  # noqa: E501
        """ContractPeriod - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._changed_by = None
        self._updated = None
        self._id = None
        self._organization_id = None
        self._subscription_duration_period = None
        self._subscription_duration_period_type = None
        self._state = None
        self._contract_period = None
        self._subscription_periods = None
        self._purchase_order = None
        self._quote = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if changed_by is not None:
            self.changed_by = changed_by
        if updated is not None:
            self.updated = updated
        if id is not None:
            self.id = id
        if organization_id is not None:
            self.organization_id = organization_id
        if subscription_duration_period is not None:
            self.subscription_duration_period = subscription_duration_period
        if subscription_duration_period_type is not None:
            self.subscription_duration_period_type = subscription_duration_period_type
        self.state = state
        if contract_period is not None:
            self.contract_period = contract_period
        if subscription_periods is not None:
            self.subscription_periods = subscription_periods
        if purchase_order is not None:
            self.purchase_order = purchase_order
        if quote is not None:
            self.quote = quote

    @property
    def created(self):
        """Gets the created of this ContractPeriod.  # noqa: E501


        :return: The created of this ContractPeriod.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ContractPeriod.


        :param created: The created of this ContractPeriod.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """Gets the changed_by of this ContractPeriod.  # noqa: E501


        :return: The changed_by of this ContractPeriod.  # noqa: E501
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """Sets the changed_by of this ContractPeriod.


        :param changed_by: The changed_by of this ContractPeriod.  # noqa: E501
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """Gets the updated of this ContractPeriod.  # noqa: E501


        :return: The updated of this ContractPeriod.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this ContractPeriod.


        :param updated: The updated of this ContractPeriod.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """Gets the id of this ContractPeriod.  # noqa: E501


        :return: The id of this ContractPeriod.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContractPeriod.


        :param id: The id of this ContractPeriod.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def organization_id(self):
        """Gets the organization_id of this ContractPeriod.  # noqa: E501


        :return: The organization_id of this ContractPeriod.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this ContractPeriod.


        :param organization_id: The organization_id of this ContractPeriod.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def subscription_duration_period(self):
        """Gets the subscription_duration_period of this ContractPeriod.  # noqa: E501


        :return: The subscription_duration_period of this ContractPeriod.  # noqa: E501
        :rtype: int
        """
        return self._subscription_duration_period

    @subscription_duration_period.setter
    def subscription_duration_period(self, subscription_duration_period):
        """Sets the subscription_duration_period of this ContractPeriod.


        :param subscription_duration_period: The subscription_duration_period of this ContractPeriod.  # noqa: E501
        :type: int
        """

        self._subscription_duration_period = subscription_duration_period

    @property
    def subscription_duration_period_type(self):
        """Gets the subscription_duration_period_type of this ContractPeriod.  # noqa: E501


        :return: The subscription_duration_period_type of this ContractPeriod.  # noqa: E501
        :rtype: str
        """
        return self._subscription_duration_period_type

    @subscription_duration_period_type.setter
    def subscription_duration_period_type(self, subscription_duration_period_type):
        """Sets the subscription_duration_period_type of this ContractPeriod.


        :param subscription_duration_period_type: The subscription_duration_period_type of this ContractPeriod.  # noqa: E501
        :type: str
        """
        allowed_values = ["minutes", "days", "months", "years"]  # noqa: E501
        if subscription_duration_period_type not in allowed_values:
            raise ValueError(
                "Invalid value for `subscription_duration_period_type` ({0}), must be one of {1}"  # noqa: E501
                .format(subscription_duration_period_type, allowed_values)
            )

        self._subscription_duration_period_type = subscription_duration_period_type

    @property
    def state(self):
        """Gets the state of this ContractPeriod.  # noqa: E501


        :return: The state of this ContractPeriod.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ContractPeriod.


        :param state: The state of this ContractPeriod.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["Pending", "Current", "Expired", "Voided"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def contract_period(self):
        """Gets the contract_period of this ContractPeriod.  # noqa: E501


        :return: The contract_period of this ContractPeriod.  # noqa: E501
        :rtype: int
        """
        return self._contract_period

    @contract_period.setter
    def contract_period(self, contract_period):
        """Sets the contract_period of this ContractPeriod.


        :param contract_period: The contract_period of this ContractPeriod.  # noqa: E501
        :type: int
        """

        self._contract_period = contract_period

    @property
    def subscription_periods(self):
        """Gets the subscription_periods of this ContractPeriod.  # noqa: E501


        :return: The subscription_periods of this ContractPeriod.  # noqa: E501
        :rtype: int
        """
        return self._subscription_periods

    @subscription_periods.setter
    def subscription_periods(self, subscription_periods):
        """Sets the subscription_periods of this ContractPeriod.


        :param subscription_periods: The subscription_periods of this ContractPeriod.  # noqa: E501
        :type: int
        """

        self._subscription_periods = subscription_periods

    @property
    def purchase_order(self):
        """Gets the purchase_order of this ContractPeriod.  # noqa: E501


        :return: The purchase_order of this ContractPeriod.  # noqa: E501
        :rtype: str
        """
        return self._purchase_order

    @purchase_order.setter
    def purchase_order(self, purchase_order):
        """Sets the purchase_order of this ContractPeriod.


        :param purchase_order: The purchase_order of this ContractPeriod.  # noqa: E501
        :type: str
        """

        self._purchase_order = purchase_order

    @property
    def quote(self):
        """Gets the quote of this ContractPeriod.  # noqa: E501


        :return: The quote of this ContractPeriod.  # noqa: E501
        :rtype: ApiQuote
        """
        return self._quote

    @quote.setter
    def quote(self, quote):
        """Sets the quote of this ContractPeriod.


        :param quote: The quote of this ContractPeriod.  # noqa: E501
        :type: ApiQuote
        """

        self._quote = quote

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContractPeriod, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContractPeriod):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
