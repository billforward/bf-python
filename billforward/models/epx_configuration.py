# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from billforward.models.api_configuration import APIConfiguration  # noqa: F401,E501

class EpxConfiguration(APIConfiguration):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'terminal_nbr': 'str',
        'merch_nbr': 'str',
        'cust_nbr': 'str',
        'mac': 'str',
        'dba_nbr': 'str'
    }
    if hasattr(APIConfiguration, "swagger_types"):
        swagger_types.update(APIConfiguration.swagger_types)

    attribute_map = {
        'terminal_nbr': 'terminalNbr',
        'merch_nbr': 'merchNbr',
        'cust_nbr': 'custNbr',
        'mac': 'mac',
        'dba_nbr': 'dbaNbr'
    }
    if hasattr(APIConfiguration, "attribute_map"):
        attribute_map.update(APIConfiguration.attribute_map)

    def __init__(self, terminal_nbr=None, merch_nbr=None, cust_nbr=None, mac=None, dba_nbr=None, *args, **kwargs):  # noqa: E501
        """EpxConfiguration - a model defined in Swagger"""  # noqa: E501
        self._terminal_nbr = None
        self._merch_nbr = None
        self._cust_nbr = None
        self._mac = None
        self._dba_nbr = None
        self.discriminator = None
        if terminal_nbr is not None:
            self.terminal_nbr = terminal_nbr
        if merch_nbr is not None:
            self.merch_nbr = merch_nbr
        if cust_nbr is not None:
            self.cust_nbr = cust_nbr
        if mac is not None:
            self.mac = mac
        if dba_nbr is not None:
            self.dba_nbr = dba_nbr
        APIConfiguration.__init__(self, *args, **kwargs)

    @property
    def terminal_nbr(self):
        """Gets the terminal_nbr of this EpxConfiguration.  # noqa: E501


        :return: The terminal_nbr of this EpxConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._terminal_nbr

    @terminal_nbr.setter
    def terminal_nbr(self, terminal_nbr):
        """Sets the terminal_nbr of this EpxConfiguration.


        :param terminal_nbr: The terminal_nbr of this EpxConfiguration.  # noqa: E501
        :type: str
        """

        self._terminal_nbr = terminal_nbr

    @property
    def merch_nbr(self):
        """Gets the merch_nbr of this EpxConfiguration.  # noqa: E501


        :return: The merch_nbr of this EpxConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._merch_nbr

    @merch_nbr.setter
    def merch_nbr(self, merch_nbr):
        """Sets the merch_nbr of this EpxConfiguration.


        :param merch_nbr: The merch_nbr of this EpxConfiguration.  # noqa: E501
        :type: str
        """

        self._merch_nbr = merch_nbr

    @property
    def cust_nbr(self):
        """Gets the cust_nbr of this EpxConfiguration.  # noqa: E501


        :return: The cust_nbr of this EpxConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._cust_nbr

    @cust_nbr.setter
    def cust_nbr(self, cust_nbr):
        """Sets the cust_nbr of this EpxConfiguration.


        :param cust_nbr: The cust_nbr of this EpxConfiguration.  # noqa: E501
        :type: str
        """

        self._cust_nbr = cust_nbr

    @property
    def mac(self):
        """Gets the mac of this EpxConfiguration.  # noqa: E501


        :return: The mac of this EpxConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """Sets the mac of this EpxConfiguration.


        :param mac: The mac of this EpxConfiguration.  # noqa: E501
        :type: str
        """

        self._mac = mac

    @property
    def dba_nbr(self):
        """Gets the dba_nbr of this EpxConfiguration.  # noqa: E501


        :return: The dba_nbr of this EpxConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._dba_nbr

    @dba_nbr.setter
    def dba_nbr(self, dba_nbr):
        """Sets the dba_nbr of this EpxConfiguration.


        :param dba_nbr: The dba_nbr of this EpxConfiguration.  # noqa: E501
        :type: str
        """

        self._dba_nbr = dba_nbr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EpxConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EpxConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
