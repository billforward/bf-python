# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class DunningLine(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, changed_by=None, updated=None, id=None, organization_id=None, type=None, attempt_ix=None, minutes_delay=None, gateway=None, deleted=False, organization=None):
        """
        DunningLine - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'changed_by': 'str',
            'updated': 'datetime',
            'id': 'str',
            'organization_id': 'str',
            'type': 'str',
            'attempt_ix': 'int',
            'minutes_delay': 'int',
            'gateway': 'str',
            'deleted': 'bool',
            'organization': 'Organization'
        }

        self.attribute_map = {
            'created': 'created',
            'changed_by': 'changedBy',
            'updated': 'updated',
            'id': 'id',
            'organization_id': 'organizationID',
            'type': 'type',
            'attempt_ix': 'attemptIx',
            'minutes_delay': 'minutesDelay',
            'gateway': 'gateway',
            'deleted': 'deleted',
            'organization': 'organization'
        }

        self._created = created
        self._changed_by = changed_by
        self._updated = updated
        self._id = id
        self._organization_id = organization_id
        self._type = type
        self._attempt_ix = attempt_ix
        self._minutes_delay = minutes_delay
        self._gateway = gateway
        self._deleted = deleted
        self._organization = organization

    @property
    def created(self):
        """
        Gets the created of this DunningLine.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this DunningLine.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this DunningLine.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this DunningLine.
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """
        Gets the changed_by of this DunningLine.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :return: The changed_by of this DunningLine.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """
        Sets the changed_by of this DunningLine.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :param changed_by: The changed_by of this DunningLine.
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """
        Gets the updated of this DunningLine.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :return: The updated of this DunningLine.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this DunningLine.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :param updated: The updated of this DunningLine.
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """
        Gets the id of this DunningLine.
        { \"description\" : \"ID of the dunning-line.\", \"verbs\":[\"GET\"] }

        :return: The id of this DunningLine.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DunningLine.
        { \"description\" : \"ID of the dunning-line.\", \"verbs\":[\"GET\"] }

        :param id: The id of this DunningLine.
        :type: str
        """

        self._id = id

    @property
    def organization_id(self):
        """
        Gets the organization_id of this DunningLine.
        { \"description\" : \"ID of the organization associated with the dunning-line.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The organization_id of this DunningLine.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this DunningLine.
        { \"description\" : \"ID of the organization associated with the dunning-line.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param organization_id: The organization_id of this DunningLine.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def type(self):
        """
        Gets the type of this DunningLine.
        { \"description\" : \"ID of the organization associated with the dunning-line.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The type of this DunningLine.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this DunningLine.
        { \"description\" : \"ID of the organization associated with the dunning-line.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param type: The type of this DunningLine.
        :type: str
        """
        allowed_values = ["Invoice", "Notification"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def attempt_ix(self):
        """
        Gets the attempt_ix of this DunningLine.
        { \"description\" : \"The payment attempt this dunning line applies to, specified as a positive integer. Dunning lines are ZERO indexed.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The attempt_ix of this DunningLine.
        :rtype: int
        """
        return self._attempt_ix

    @attempt_ix.setter
    def attempt_ix(self, attempt_ix):
        """
        Sets the attempt_ix of this DunningLine.
        { \"description\" : \"The payment attempt this dunning line applies to, specified as a positive integer. Dunning lines are ZERO indexed.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param attempt_ix: The attempt_ix of this DunningLine.
        :type: int
        """

        self._attempt_ix = attempt_ix

    @property
    def minutes_delay(self):
        """
        Gets the minutes_delay of this DunningLine.
        { \"description\" : \"The time before the next payment attempt in minutes.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The minutes_delay of this DunningLine.
        :rtype: int
        """
        return self._minutes_delay

    @minutes_delay.setter
    def minutes_delay(self, minutes_delay):
        """
        Sets the minutes_delay of this DunningLine.
        { \"description\" : \"The time before the next payment attempt in minutes.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param minutes_delay: The minutes_delay of this DunningLine.
        :type: int
        """

        self._minutes_delay = minutes_delay

    @property
    def gateway(self):
        """
        Gets the gateway of this DunningLine.
        { \"description\" : \"The payment gateway to use for this payment attempt.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The gateway of this DunningLine.
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """
        Sets the gateway of this DunningLine.
        { \"description\" : \"The payment gateway to use for this payment attempt.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param gateway: The gateway of this DunningLine.
        :type: str
        """
        allowed_values = ["cybersource_token", "card_vault", "paypal_simple", "locustworld", "free", "coupon", "credit_note", "stripe", "braintree", "balanced", "paypal", "billforward_test", "offline", "trial", "stripeACH", "authorizeNet", "spreedly", "sagePay", "trustCommerce", "payvision", "kash"]
        if gateway not in allowed_values:
            raise ValueError(
                "Invalid value for `gateway` ({0}), must be one of {1}"
                .format(gateway, allowed_values)
            )

        self._gateway = gateway

    @property
    def deleted(self):
        """
        Gets the deleted of this DunningLine.
        { \"description\" : \"Has the dunning-line been deleted?\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The deleted of this DunningLine.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """
        Sets the deleted of this DunningLine.
        { \"description\" : \"Has the dunning-line been deleted?\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param deleted: The deleted of this DunningLine.
        :type: bool
        """

        self._deleted = deleted

    @property
    def organization(self):
        """
        Gets the organization of this DunningLine.
        { \"description\" : \"organization associated with the dunning-line.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The organization of this DunningLine.
        :rtype: Organization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """
        Sets the organization of this DunningLine.
        { \"description\" : \"organization associated with the dunning-line.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param organization: The organization of this DunningLine.
        :type: Organization
        """

        self._organization = organization

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
