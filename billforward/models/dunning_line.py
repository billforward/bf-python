# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DunningLine(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'changed_by': 'str',
        'updated': 'datetime',
        'id': 'str',
        'organization_id': 'str',
        'type': 'str',
        'attempt_ix': 'int',
        'minutes_delay': 'int',
        'gateway': 'str',
        'deleted': 'bool'
    }

    attribute_map = {
        'created': 'created',
        'changed_by': 'changedBy',
        'updated': 'updated',
        'id': 'id',
        'organization_id': 'organizationID',
        'type': 'type',
        'attempt_ix': 'attemptIx',
        'minutes_delay': 'minutesDelay',
        'gateway': 'gateway',
        'deleted': 'deleted'
    }

    def __init__(self, created=None, changed_by=None, updated=None, id=None, organization_id=None, type=None, attempt_ix=None, minutes_delay=None, gateway=None, deleted=None):  # noqa: E501
        """DunningLine - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._changed_by = None
        self._updated = None
        self._id = None
        self._organization_id = None
        self._type = None
        self._attempt_ix = None
        self._minutes_delay = None
        self._gateway = None
        self._deleted = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if changed_by is not None:
            self.changed_by = changed_by
        if updated is not None:
            self.updated = updated
        if id is not None:
            self.id = id
        self.organization_id = organization_id
        self.type = type
        self.attempt_ix = attempt_ix
        self.minutes_delay = minutes_delay
        if gateway is not None:
            self.gateway = gateway
        if deleted is not None:
            self.deleted = deleted

    @property
    def created(self):
        """Gets the created of this DunningLine.  # noqa: E501


        :return: The created of this DunningLine.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this DunningLine.


        :param created: The created of this DunningLine.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """Gets the changed_by of this DunningLine.  # noqa: E501


        :return: The changed_by of this DunningLine.  # noqa: E501
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """Sets the changed_by of this DunningLine.


        :param changed_by: The changed_by of this DunningLine.  # noqa: E501
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """Gets the updated of this DunningLine.  # noqa: E501


        :return: The updated of this DunningLine.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this DunningLine.


        :param updated: The updated of this DunningLine.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """Gets the id of this DunningLine.  # noqa: E501


        :return: The id of this DunningLine.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DunningLine.


        :param id: The id of this DunningLine.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def organization_id(self):
        """Gets the organization_id of this DunningLine.  # noqa: E501


        :return: The organization_id of this DunningLine.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this DunningLine.


        :param organization_id: The organization_id of this DunningLine.  # noqa: E501
        :type: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")  # noqa: E501

        self._organization_id = organization_id

    @property
    def type(self):
        """Gets the type of this DunningLine.  # noqa: E501


        :return: The type of this DunningLine.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DunningLine.


        :param type: The type of this DunningLine.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["Invoice", "Notification"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def attempt_ix(self):
        """Gets the attempt_ix of this DunningLine.  # noqa: E501


        :return: The attempt_ix of this DunningLine.  # noqa: E501
        :rtype: int
        """
        return self._attempt_ix

    @attempt_ix.setter
    def attempt_ix(self, attempt_ix):
        """Sets the attempt_ix of this DunningLine.


        :param attempt_ix: The attempt_ix of this DunningLine.  # noqa: E501
        :type: int
        """
        if attempt_ix is None:
            raise ValueError("Invalid value for `attempt_ix`, must not be `None`")  # noqa: E501

        self._attempt_ix = attempt_ix

    @property
    def minutes_delay(self):
        """Gets the minutes_delay of this DunningLine.  # noqa: E501


        :return: The minutes_delay of this DunningLine.  # noqa: E501
        :rtype: int
        """
        return self._minutes_delay

    @minutes_delay.setter
    def minutes_delay(self, minutes_delay):
        """Sets the minutes_delay of this DunningLine.


        :param minutes_delay: The minutes_delay of this DunningLine.  # noqa: E501
        :type: int
        """
        if minutes_delay is None:
            raise ValueError("Invalid value for `minutes_delay`, must not be `None`")  # noqa: E501

        self._minutes_delay = minutes_delay

    @property
    def gateway(self):
        """Gets the gateway of this DunningLine.  # noqa: E501


        :return: The gateway of this DunningLine.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this DunningLine.


        :param gateway: The gateway of this DunningLine.  # noqa: E501
        :type: str
        """
        allowed_values = ["VOID", "cybersource_token", "card_vault", "paypal_simple", "locustworld", "free", "coupon", "credit_note", "stripe", "braintree", "zooz", "balanced", "paypal", "billforward_test", "offline", "trial", "stripeACH", "goCardless", "authorizeNet", "spreedly", "sagePay", "trustCommerce", "payvision", "kash", "epx", "shuttle", "square", "billforwardRandomizer", "cardConnect", "ebanx"]  # noqa: E501
        if gateway not in allowed_values:
            raise ValueError(
                "Invalid value for `gateway` ({0}), must be one of {1}"  # noqa: E501
                .format(gateway, allowed_values)
            )

        self._gateway = gateway

    @property
    def deleted(self):
        """Gets the deleted of this DunningLine.  # noqa: E501


        :return: The deleted of this DunningLine.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this DunningLine.


        :param deleted: The deleted of this DunningLine.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DunningLine, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DunningLine):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
