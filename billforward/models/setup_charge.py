# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from billforward.models.subscription_charge import SubscriptionCharge  # noqa: F401,E501

class SetupCharge(SubscriptionCharge):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pricing_component_id': 'str',
        'unit_of_measure_id': 'str',
        'pricing_component_value': 'int'
    }
    if hasattr(SubscriptionCharge, "swagger_types"):
        swagger_types.update(SubscriptionCharge.swagger_types)

    attribute_map = {
        'pricing_component_id': 'pricingComponentID',
        'unit_of_measure_id': 'unitOfMeasureID',
        'pricing_component_value': 'pricingComponentValue'
    }
    if hasattr(SubscriptionCharge, "attribute_map"):
        attribute_map.update(SubscriptionCharge.attribute_map)

    def __init__(self, pricing_component_id=None, unit_of_measure_id=None, pricing_component_value=None, *args, **kwargs):  # noqa: E501
        """SetupCharge - a model defined in Swagger"""  # noqa: E501
        self._pricing_component_id = None
        self._unit_of_measure_id = None
        self._pricing_component_value = None
        self.discriminator = None
        self.pricing_component_id = pricing_component_id
        self.unit_of_measure_id = unit_of_measure_id
        self.pricing_component_value = pricing_component_value
        SubscriptionCharge.__init__(self, *args, **kwargs)

    @property
    def pricing_component_id(self):
        """Gets the pricing_component_id of this SetupCharge.  # noqa: E501


        :return: The pricing_component_id of this SetupCharge.  # noqa: E501
        :rtype: str
        """
        return self._pricing_component_id

    @pricing_component_id.setter
    def pricing_component_id(self, pricing_component_id):
        """Sets the pricing_component_id of this SetupCharge.


        :param pricing_component_id: The pricing_component_id of this SetupCharge.  # noqa: E501
        :type: str
        """
        if pricing_component_id is None:
            raise ValueError("Invalid value for `pricing_component_id`, must not be `None`")  # noqa: E501

        self._pricing_component_id = pricing_component_id

    @property
    def unit_of_measure_id(self):
        """Gets the unit_of_measure_id of this SetupCharge.  # noqa: E501


        :return: The unit_of_measure_id of this SetupCharge.  # noqa: E501
        :rtype: str
        """
        return self._unit_of_measure_id

    @unit_of_measure_id.setter
    def unit_of_measure_id(self, unit_of_measure_id):
        """Sets the unit_of_measure_id of this SetupCharge.


        :param unit_of_measure_id: The unit_of_measure_id of this SetupCharge.  # noqa: E501
        :type: str
        """
        if unit_of_measure_id is None:
            raise ValueError("Invalid value for `unit_of_measure_id`, must not be `None`")  # noqa: E501

        self._unit_of_measure_id = unit_of_measure_id

    @property
    def pricing_component_value(self):
        """Gets the pricing_component_value of this SetupCharge.  # noqa: E501


        :return: The pricing_component_value of this SetupCharge.  # noqa: E501
        :rtype: int
        """
        return self._pricing_component_value

    @pricing_component_value.setter
    def pricing_component_value(self, pricing_component_value):
        """Sets the pricing_component_value of this SetupCharge.


        :param pricing_component_value: The pricing_component_value of this SetupCharge.  # noqa: E501
        :type: int
        """
        if pricing_component_value is None:
            raise ValueError("Invalid value for `pricing_component_value`, must not be `None`")  # noqa: E501

        self._pricing_component_value = pricing_component_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SetupCharge, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SetupCharge):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
