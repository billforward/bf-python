# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateOfflinePaymentRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'organization_id': 'str',
        'amount': 'float',
        'name': 'str',
        'description': 'str',
        'payment_reference': 'str',
        'type': 'str',
        'currency': 'CreditNoteCurrency',
        'payment_received': 'datetime',
        'invoice_id': 'str',
        'account_id': 'str',
        'subscription_id': 'str'
    }

    attribute_map = {
        'created': 'created',
        'organization_id': 'organizationID',
        'amount': 'amount',
        'name': 'name',
        'description': 'description',
        'payment_reference': 'paymentReference',
        'type': 'type',
        'currency': 'currency',
        'payment_received': 'paymentReceived',
        'invoice_id': 'invoiceID',
        'account_id': 'accountID',
        'subscription_id': 'subscriptionID'
    }

    def __init__(self, created=None, organization_id=None, amount=None, name=None, description=None, payment_reference=None, type=None, currency=None, payment_received=None, invoice_id=None, account_id=None, subscription_id=None):  # noqa: E501
        """CreateOfflinePaymentRequest - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._organization_id = None
        self._amount = None
        self._name = None
        self._description = None
        self._payment_reference = None
        self._type = None
        self._currency = None
        self._payment_received = None
        self._invoice_id = None
        self._account_id = None
        self._subscription_id = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if organization_id is not None:
            self.organization_id = organization_id
        if amount is not None:
            self.amount = amount
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if payment_reference is not None:
            self.payment_reference = payment_reference
        if type is not None:
            self.type = type
        if currency is not None:
            self.currency = currency
        if payment_received is not None:
            self.payment_received = payment_received
        if invoice_id is not None:
            self.invoice_id = invoice_id
        if account_id is not None:
            self.account_id = account_id
        if subscription_id is not None:
            self.subscription_id = subscription_id

    @property
    def created(self):
        """Gets the created of this CreateOfflinePaymentRequest.  # noqa: E501


        :return: The created of this CreateOfflinePaymentRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this CreateOfflinePaymentRequest.


        :param created: The created of this CreateOfflinePaymentRequest.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def organization_id(self):
        """Gets the organization_id of this CreateOfflinePaymentRequest.  # noqa: E501


        :return: The organization_id of this CreateOfflinePaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this CreateOfflinePaymentRequest.


        :param organization_id: The organization_id of this CreateOfflinePaymentRequest.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def amount(self):
        """Gets the amount of this CreateOfflinePaymentRequest.  # noqa: E501


        :return: The amount of this CreateOfflinePaymentRequest.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CreateOfflinePaymentRequest.


        :param amount: The amount of this CreateOfflinePaymentRequest.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def name(self):
        """Gets the name of this CreateOfflinePaymentRequest.  # noqa: E501


        :return: The name of this CreateOfflinePaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateOfflinePaymentRequest.


        :param name: The name of this CreateOfflinePaymentRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateOfflinePaymentRequest.  # noqa: E501


        :return: The description of this CreateOfflinePaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateOfflinePaymentRequest.


        :param description: The description of this CreateOfflinePaymentRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def payment_reference(self):
        """Gets the payment_reference of this CreateOfflinePaymentRequest.  # noqa: E501


        :return: The payment_reference of this CreateOfflinePaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._payment_reference

    @payment_reference.setter
    def payment_reference(self, payment_reference):
        """Sets the payment_reference of this CreateOfflinePaymentRequest.


        :param payment_reference: The payment_reference of this CreateOfflinePaymentRequest.  # noqa: E501
        :type: str
        """

        self._payment_reference = payment_reference

    @property
    def type(self):
        """Gets the type of this CreateOfflinePaymentRequest.  # noqa: E501


        :return: The type of this CreateOfflinePaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateOfflinePaymentRequest.


        :param type: The type of this CreateOfflinePaymentRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["WireTransfer", "Check", "Cash", "Other", "Prepayment"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def currency(self):
        """Gets the currency of this CreateOfflinePaymentRequest.  # noqa: E501


        :return: The currency of this CreateOfflinePaymentRequest.  # noqa: E501
        :rtype: CreditNoteCurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CreateOfflinePaymentRequest.


        :param currency: The currency of this CreateOfflinePaymentRequest.  # noqa: E501
        :type: CreditNoteCurrency
        """

        self._currency = currency

    @property
    def payment_received(self):
        """Gets the payment_received of this CreateOfflinePaymentRequest.  # noqa: E501


        :return: The payment_received of this CreateOfflinePaymentRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._payment_received

    @payment_received.setter
    def payment_received(self, payment_received):
        """Sets the payment_received of this CreateOfflinePaymentRequest.


        :param payment_received: The payment_received of this CreateOfflinePaymentRequest.  # noqa: E501
        :type: datetime
        """

        self._payment_received = payment_received

    @property
    def invoice_id(self):
        """Gets the invoice_id of this CreateOfflinePaymentRequest.  # noqa: E501


        :return: The invoice_id of this CreateOfflinePaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this CreateOfflinePaymentRequest.


        :param invoice_id: The invoice_id of this CreateOfflinePaymentRequest.  # noqa: E501
        :type: str
        """

        self._invoice_id = invoice_id

    @property
    def account_id(self):
        """Gets the account_id of this CreateOfflinePaymentRequest.  # noqa: E501


        :return: The account_id of this CreateOfflinePaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CreateOfflinePaymentRequest.


        :param account_id: The account_id of this CreateOfflinePaymentRequest.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this CreateOfflinePaymentRequest.  # noqa: E501


        :return: The subscription_id of this CreateOfflinePaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this CreateOfflinePaymentRequest.


        :param subscription_id: The subscription_id of this CreateOfflinePaymentRequest.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateOfflinePaymentRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateOfflinePaymentRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
