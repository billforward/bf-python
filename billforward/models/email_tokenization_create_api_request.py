# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EmailTokenizationCreateAPIRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'organization_id': 'str',
        'account_id': 'str',
        'invoice_id': 'str',
        'gateway_type': 'str',
        'make_default': 'bool',
        'charge_immediately': 'bool',
        'capture_profile': 'bool',
        'capture_billing_address': 'bool',
        'capture_shipping_address': 'bool'
    }

    attribute_map = {
        'organization_id': 'organizationID',
        'account_id': 'accountID',
        'invoice_id': 'invoiceID',
        'gateway_type': 'gatewayType',
        'make_default': 'makeDefault',
        'charge_immediately': 'chargeImmediately',
        'capture_profile': 'captureProfile',
        'capture_billing_address': 'captureBillingAddress',
        'capture_shipping_address': 'captureShippingAddress'
    }

    def __init__(self, organization_id=None, account_id=None, invoice_id=None, gateway_type=None, make_default=None, charge_immediately=None, capture_profile=None, capture_billing_address=None, capture_shipping_address=None):  # noqa: E501
        """EmailTokenizationCreateAPIRequest - a model defined in Swagger"""  # noqa: E501
        self._organization_id = None
        self._account_id = None
        self._invoice_id = None
        self._gateway_type = None
        self._make_default = None
        self._charge_immediately = None
        self._capture_profile = None
        self._capture_billing_address = None
        self._capture_shipping_address = None
        self.discriminator = None
        if organization_id is not None:
            self.organization_id = organization_id
        if account_id is not None:
            self.account_id = account_id
        if invoice_id is not None:
            self.invoice_id = invoice_id
        if gateway_type is not None:
            self.gateway_type = gateway_type
        if make_default is not None:
            self.make_default = make_default
        if charge_immediately is not None:
            self.charge_immediately = charge_immediately
        if capture_profile is not None:
            self.capture_profile = capture_profile
        if capture_billing_address is not None:
            self.capture_billing_address = capture_billing_address
        if capture_shipping_address is not None:
            self.capture_shipping_address = capture_shipping_address

    @property
    def organization_id(self):
        """Gets the organization_id of this EmailTokenizationCreateAPIRequest.  # noqa: E501


        :return: The organization_id of this EmailTokenizationCreateAPIRequest.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this EmailTokenizationCreateAPIRequest.


        :param organization_id: The organization_id of this EmailTokenizationCreateAPIRequest.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def account_id(self):
        """Gets the account_id of this EmailTokenizationCreateAPIRequest.  # noqa: E501


        :return: The account_id of this EmailTokenizationCreateAPIRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this EmailTokenizationCreateAPIRequest.


        :param account_id: The account_id of this EmailTokenizationCreateAPIRequest.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def invoice_id(self):
        """Gets the invoice_id of this EmailTokenizationCreateAPIRequest.  # noqa: E501


        :return: The invoice_id of this EmailTokenizationCreateAPIRequest.  # noqa: E501
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this EmailTokenizationCreateAPIRequest.


        :param invoice_id: The invoice_id of this EmailTokenizationCreateAPIRequest.  # noqa: E501
        :type: str
        """

        self._invoice_id = invoice_id

    @property
    def gateway_type(self):
        """Gets the gateway_type of this EmailTokenizationCreateAPIRequest.  # noqa: E501


        :return: The gateway_type of this EmailTokenizationCreateAPIRequest.  # noqa: E501
        :rtype: str
        """
        return self._gateway_type

    @gateway_type.setter
    def gateway_type(self, gateway_type):
        """Sets the gateway_type of this EmailTokenizationCreateAPIRequest.


        :param gateway_type: The gateway_type of this EmailTokenizationCreateAPIRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Stripe", "StripeACH", "GoCardless", "Shuttle", "CardConnect", "EBANX"]  # noqa: E501
        if gateway_type not in allowed_values:
            raise ValueError(
                "Invalid value for `gateway_type` ({0}), must be one of {1}"  # noqa: E501
                .format(gateway_type, allowed_values)
            )

        self._gateway_type = gateway_type

    @property
    def make_default(self):
        """Gets the make_default of this EmailTokenizationCreateAPIRequest.  # noqa: E501


        :return: The make_default of this EmailTokenizationCreateAPIRequest.  # noqa: E501
        :rtype: bool
        """
        return self._make_default

    @make_default.setter
    def make_default(self, make_default):
        """Sets the make_default of this EmailTokenizationCreateAPIRequest.


        :param make_default: The make_default of this EmailTokenizationCreateAPIRequest.  # noqa: E501
        :type: bool
        """

        self._make_default = make_default

    @property
    def charge_immediately(self):
        """Gets the charge_immediately of this EmailTokenizationCreateAPIRequest.  # noqa: E501


        :return: The charge_immediately of this EmailTokenizationCreateAPIRequest.  # noqa: E501
        :rtype: bool
        """
        return self._charge_immediately

    @charge_immediately.setter
    def charge_immediately(self, charge_immediately):
        """Sets the charge_immediately of this EmailTokenizationCreateAPIRequest.


        :param charge_immediately: The charge_immediately of this EmailTokenizationCreateAPIRequest.  # noqa: E501
        :type: bool
        """

        self._charge_immediately = charge_immediately

    @property
    def capture_profile(self):
        """Gets the capture_profile of this EmailTokenizationCreateAPIRequest.  # noqa: E501


        :return: The capture_profile of this EmailTokenizationCreateAPIRequest.  # noqa: E501
        :rtype: bool
        """
        return self._capture_profile

    @capture_profile.setter
    def capture_profile(self, capture_profile):
        """Sets the capture_profile of this EmailTokenizationCreateAPIRequest.


        :param capture_profile: The capture_profile of this EmailTokenizationCreateAPIRequest.  # noqa: E501
        :type: bool
        """

        self._capture_profile = capture_profile

    @property
    def capture_billing_address(self):
        """Gets the capture_billing_address of this EmailTokenizationCreateAPIRequest.  # noqa: E501


        :return: The capture_billing_address of this EmailTokenizationCreateAPIRequest.  # noqa: E501
        :rtype: bool
        """
        return self._capture_billing_address

    @capture_billing_address.setter
    def capture_billing_address(self, capture_billing_address):
        """Sets the capture_billing_address of this EmailTokenizationCreateAPIRequest.


        :param capture_billing_address: The capture_billing_address of this EmailTokenizationCreateAPIRequest.  # noqa: E501
        :type: bool
        """

        self._capture_billing_address = capture_billing_address

    @property
    def capture_shipping_address(self):
        """Gets the capture_shipping_address of this EmailTokenizationCreateAPIRequest.  # noqa: E501


        :return: The capture_shipping_address of this EmailTokenizationCreateAPIRequest.  # noqa: E501
        :rtype: bool
        """
        return self._capture_shipping_address

    @capture_shipping_address.setter
    def capture_shipping_address(self, capture_shipping_address):
        """Sets the capture_shipping_address of this EmailTokenizationCreateAPIRequest.


        :param capture_shipping_address: The capture_shipping_address of this EmailTokenizationCreateAPIRequest.  # noqa: E501
        :type: bool
        """

        self._capture_shipping_address = capture_shipping_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmailTokenizationCreateAPIRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailTokenizationCreateAPIRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
