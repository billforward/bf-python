# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CreateSubscriptionChargeAmendment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, changed_by=None, updated=None, type=None, id=None, organization_id=None, subscription_id=None, amendment_type=None, actioning_time=None, actioned_time=None, state=None, deleted=False, subscription_charge_id=None, description=None, amount=None, discount=None, invoicing_type=None, tax_status=None, subscription_charge=None, pricing_component_value_change=None, pricing_component_id=None):
        """
        CreateSubscriptionChargeAmendment - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'changed_by': 'str',
            'updated': 'datetime',
            'type': 'str',
            'id': 'str',
            'organization_id': 'str',
            'subscription_id': 'str',
            'amendment_type': 'str',
            'actioning_time': 'datetime',
            'actioned_time': 'datetime',
            'state': 'str',
            'deleted': 'bool',
            'subscription_charge_id': 'str',
            'description': 'str',
            'amount': 'float',
            'discount': 'float',
            'invoicing_type': 'str',
            'tax_status': 'str',
            'subscription_charge': 'SubscriptionCharge',
            'pricing_component_value_change': 'InsertableBillingEntity',
            'pricing_component_id': 'str'
        }

        self.attribute_map = {
            'created': 'created',
            'changed_by': 'changedBy',
            'updated': 'updated',
            'type': '@type',
            'id': 'id',
            'organization_id': 'organizationID',
            'subscription_id': 'subscriptionID',
            'amendment_type': 'amendmentType',
            'actioning_time': 'actioningTime',
            'actioned_time': 'actionedTime',
            'state': 'state',
            'deleted': 'deleted',
            'subscription_charge_id': 'subscriptionChargeID',
            'description': 'description',
            'amount': 'amount',
            'discount': 'discount',
            'invoicing_type': 'invoicingType',
            'tax_status': 'taxStatus',
            'subscription_charge': 'subscriptionCharge',
            'pricing_component_value_change': 'pricingComponentValueChange',
            'pricing_component_id': 'pricingComponentID'
        }

        self._created = created
        self._changed_by = changed_by
        self._updated = updated
        self._type = type
        self._id = id
        self._organization_id = organization_id
        self._subscription_id = subscription_id
        self._amendment_type = amendment_type
        self._actioning_time = actioning_time
        self._actioned_time = actioned_time
        self._state = state
        self._deleted = deleted
        self._subscription_charge_id = subscription_charge_id
        self._description = description
        self._amount = amount
        self._discount = discount
        self._invoicing_type = invoicing_type
        self._tax_status = tax_status
        self._subscription_charge = subscription_charge
        self._pricing_component_value_change = pricing_component_value_change
        self._pricing_component_id = pricing_component_id

    @property
    def created(self):
        """
        Gets the created of this CreateSubscriptionChargeAmendment.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this CreateSubscriptionChargeAmendment.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this CreateSubscriptionChargeAmendment.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this CreateSubscriptionChargeAmendment.
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """
        Gets the changed_by of this CreateSubscriptionChargeAmendment.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :return: The changed_by of this CreateSubscriptionChargeAmendment.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """
        Sets the changed_by of this CreateSubscriptionChargeAmendment.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :param changed_by: The changed_by of this CreateSubscriptionChargeAmendment.
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """
        Gets the updated of this CreateSubscriptionChargeAmendment.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :return: The updated of this CreateSubscriptionChargeAmendment.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this CreateSubscriptionChargeAmendment.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :param updated: The updated of this CreateSubscriptionChargeAmendment.
        :type: datetime
        """

        self._updated = updated

    @property
    def type(self):
        """
        Gets the type of this CreateSubscriptionChargeAmendment.
        { \"description\" : \"\", \"default\" : \"\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The type of this CreateSubscriptionChargeAmendment.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this CreateSubscriptionChargeAmendment.
        { \"description\" : \"\", \"default\" : \"\", \"verbs\":[\"POST\",\"GET\"] }

        :param type: The type of this CreateSubscriptionChargeAmendment.
        :type: str
        """
        allowed_values = ["InvoiceOutstandingChargesAmendment", "IssueInvoiceAmendment", "PricingComponentValueAmendment", "InvoiceRecalculationAmendment", "CancellationAmendment", "InvoiceNextExecutionAttemptAmendment", "FixedTermExpiryAmendment", "EndTrialAmendment", "ProductRatePlanMigrationAmendment", "AmendmentDiscardAmendment", "UpdateComponentValueAmendment", "ServiceEndAmendment", "ResumeSubscriptionAmendment", "CreateSubscriptionChargeAmendment", "TimerAmendment"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def id(self):
        """
        Gets the id of this CreateSubscriptionChargeAmendment.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :return: The id of this CreateSubscriptionChargeAmendment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CreateSubscriptionChargeAmendment.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :param id: The id of this CreateSubscriptionChargeAmendment.
        :type: str
        """

        self._id = id

    @property
    def organization_id(self):
        """
        Gets the organization_id of this CreateSubscriptionChargeAmendment.
        { \"description\" : \"\", \"verbs\":[\"\"] }

        :return: The organization_id of this CreateSubscriptionChargeAmendment.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this CreateSubscriptionChargeAmendment.
        { \"description\" : \"\", \"verbs\":[\"\"] }

        :param organization_id: The organization_id of this CreateSubscriptionChargeAmendment.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def subscription_id(self):
        """
        Gets the subscription_id of this CreateSubscriptionChargeAmendment.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The subscription_id of this CreateSubscriptionChargeAmendment.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """
        Sets the subscription_id of this CreateSubscriptionChargeAmendment.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param subscription_id: The subscription_id of this CreateSubscriptionChargeAmendment.
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def amendment_type(self):
        """
        Gets the amendment_type of this CreateSubscriptionChargeAmendment.
        { \"description\" : \"Type of amendment\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The amendment_type of this CreateSubscriptionChargeAmendment.
        :rtype: str
        """
        return self._amendment_type

    @amendment_type.setter
    def amendment_type(self, amendment_type):
        """
        Sets the amendment_type of this CreateSubscriptionChargeAmendment.
        { \"description\" : \"Type of amendment\", \"verbs\":[\"POST\",\"GET\"] }

        :param amendment_type: The amendment_type of this CreateSubscriptionChargeAmendment.
        :type: str
        """
        allowed_values = ["InvoiceNextExecutionAttempt", "Cancellation", "PricingComponentValue", "AmendmentDiscard", "Compound", "FixedTermExpiry", "InvoiceRecalculation", "EndTrial", "InvoiceOutstandingCharges", "IssueInvoice", "ProductRatePlanMigration", "UpdateComponentValue", "ServiceEnd", "ResumeSubscription", "CreateSubscriptionCharge", "Timer"]
        if amendment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `amendment_type` ({0}), must be one of {1}"
                .format(amendment_type, allowed_values)
            )

        self._amendment_type = amendment_type

    @property
    def actioning_time(self):
        """
        Gets the actioning_time of this CreateSubscriptionChargeAmendment.
        { \"description\" : \"When the amendment will run\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The actioning_time of this CreateSubscriptionChargeAmendment.
        :rtype: datetime
        """
        return self._actioning_time

    @actioning_time.setter
    def actioning_time(self, actioning_time):
        """
        Sets the actioning_time of this CreateSubscriptionChargeAmendment.
        { \"description\" : \"When the amendment will run\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param actioning_time: The actioning_time of this CreateSubscriptionChargeAmendment.
        :type: datetime
        """

        self._actioning_time = actioning_time

    @property
    def actioned_time(self):
        """
        Gets the actioned_time of this CreateSubscriptionChargeAmendment.
        { \"description\" : \"The time the amendment completed.\", \"verbs\":[\"GET\"] }

        :return: The actioned_time of this CreateSubscriptionChargeAmendment.
        :rtype: datetime
        """
        return self._actioned_time

    @actioned_time.setter
    def actioned_time(self, actioned_time):
        """
        Sets the actioned_time of this CreateSubscriptionChargeAmendment.
        { \"description\" : \"The time the amendment completed.\", \"verbs\":[\"GET\"] }

        :param actioned_time: The actioned_time of this CreateSubscriptionChargeAmendment.
        :type: datetime
        """

        self._actioned_time = actioned_time

    @property
    def state(self):
        """
        Gets the state of this CreateSubscriptionChargeAmendment.
        Whether the subscription-amendment is: pending (to be actioned in the future), succeeded (actioning completed), failed (actioning was attempted but no effect was made) or discarded (the amendment had been cancelled before being actioned). Default: Pending

        :return: The state of this CreateSubscriptionChargeAmendment.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this CreateSubscriptionChargeAmendment.
        Whether the subscription-amendment is: pending (to be actioned in the future), succeeded (actioning completed), failed (actioning was attempted but no effect was made) or discarded (the amendment had been cancelled before being actioned). Default: Pending

        :param state: The state of this CreateSubscriptionChargeAmendment.
        :type: str
        """
        allowed_values = ["Pending", "Succeeded", "Failed", "Discarded"]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def deleted(self):
        """
        Gets the deleted of this CreateSubscriptionChargeAmendment.
        { \"description\" : \"Is the amendment deleted.\", \"verbs\":[\"GET\"] }

        :return: The deleted of this CreateSubscriptionChargeAmendment.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """
        Sets the deleted of this CreateSubscriptionChargeAmendment.
        { \"description\" : \"Is the amendment deleted.\", \"verbs\":[\"GET\"] }

        :param deleted: The deleted of this CreateSubscriptionChargeAmendment.
        :type: bool
        """

        self._deleted = deleted

    @property
    def subscription_charge_id(self):
        """
        Gets the subscription_charge_id of this CreateSubscriptionChargeAmendment.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :return: The subscription_charge_id of this CreateSubscriptionChargeAmendment.
        :rtype: str
        """
        return self._subscription_charge_id

    @subscription_charge_id.setter
    def subscription_charge_id(self, subscription_charge_id):
        """
        Sets the subscription_charge_id of this CreateSubscriptionChargeAmendment.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :param subscription_charge_id: The subscription_charge_id of this CreateSubscriptionChargeAmendment.
        :type: str
        """

        self._subscription_charge_id = subscription_charge_id

    @property
    def description(self):
        """
        Gets the description of this CreateSubscriptionChargeAmendment.
        { \"description\" : \".\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The description of this CreateSubscriptionChargeAmendment.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this CreateSubscriptionChargeAmendment.
        { \"description\" : \".\", \"verbs\":[\"POST\",\"GET\"] }

        :param description: The description of this CreateSubscriptionChargeAmendment.
        :type: str
        """

        self._description = description

    @property
    def amount(self):
        """
        Gets the amount of this CreateSubscriptionChargeAmendment.
        { \"description\" : \"Monetary value to charge in the same currency as the subscription.\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The amount of this CreateSubscriptionChargeAmendment.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this CreateSubscriptionChargeAmendment.
        { \"description\" : \"Monetary value to charge in the same currency as the subscription.\", \"verbs\":[\"POST\",\"GET\"] }

        :param amount: The amount of this CreateSubscriptionChargeAmendment.
        :type: float
        """

        self._amount = amount

    @property
    def discount(self):
        """
        Gets the discount of this CreateSubscriptionChargeAmendment.
        { \"description\" : \"\", \"verbs\":[] }

        :return: The discount of this CreateSubscriptionChargeAmendment.
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """
        Sets the discount of this CreateSubscriptionChargeAmendment.
        { \"description\" : \"\", \"verbs\":[] }

        :param discount: The discount of this CreateSubscriptionChargeAmendment.
        :type: float
        """

        self._discount = discount

    @property
    def invoicing_type(self):
        """
        Gets the invoicing_type of this CreateSubscriptionChargeAmendment.
        { \"description\" : \"<span class=\\\"label label-default\\\">Immediate</span> invoicing will result in an invoice being issued immediately for the charge. <span class=\\\"label label-default\\\">Aggregated</span> invoicing will generate a charge to be added to the next issued invoice, for example at the current billing period end.\", \"default\" : \"Aggregated\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The invoicing_type of this CreateSubscriptionChargeAmendment.
        :rtype: str
        """
        return self._invoicing_type

    @invoicing_type.setter
    def invoicing_type(self, invoicing_type):
        """
        Sets the invoicing_type of this CreateSubscriptionChargeAmendment.
        { \"description\" : \"<span class=\\\"label label-default\\\">Immediate</span> invoicing will result in an invoice being issued immediately for the charge. <span class=\\\"label label-default\\\">Aggregated</span> invoicing will generate a charge to be added to the next issued invoice, for example at the current billing period end.\", \"default\" : \"Aggregated\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param invoicing_type: The invoicing_type of this CreateSubscriptionChargeAmendment.
        :type: str
        """
        allowed_values = ["Immediate", "Aggregated"]
        if invoicing_type not in allowed_values:
            raise ValueError(
                "Invalid value for `invoicing_type` ({0}), must be one of {1}"
                .format(invoicing_type, allowed_values)
            )

        self._invoicing_type = invoicing_type

    @property
    def tax_status(self):
        """
        Gets the tax_status of this CreateSubscriptionChargeAmendment.
        { \"description\" : \"Whether the amount specified is <span class=\\\"label label-default\\\">inclusive</span> or <span class=\\\"label label-default\\\">exclusive</span> of tax\",  \"default\" : \"inclusive\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The tax_status of this CreateSubscriptionChargeAmendment.
        :rtype: str
        """
        return self._tax_status

    @tax_status.setter
    def tax_status(self, tax_status):
        """
        Sets the tax_status of this CreateSubscriptionChargeAmendment.
        { \"description\" : \"Whether the amount specified is <span class=\\\"label label-default\\\">inclusive</span> or <span class=\\\"label label-default\\\">exclusive</span> of tax\",  \"default\" : \"inclusive\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param tax_status: The tax_status of this CreateSubscriptionChargeAmendment.
        :type: str
        """
        allowed_values = ["inclusive", "exclusive"]
        if tax_status not in allowed_values:
            raise ValueError(
                "Invalid value for `tax_status` ({0}), must be one of {1}"
                .format(tax_status, allowed_values)
            )

        self._tax_status = tax_status

    @property
    def subscription_charge(self):
        """
        Gets the subscription_charge of this CreateSubscriptionChargeAmendment.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :return: The subscription_charge of this CreateSubscriptionChargeAmendment.
        :rtype: SubscriptionCharge
        """
        return self._subscription_charge

    @subscription_charge.setter
    def subscription_charge(self, subscription_charge):
        """
        Sets the subscription_charge of this CreateSubscriptionChargeAmendment.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :param subscription_charge: The subscription_charge of this CreateSubscriptionChargeAmendment.
        :type: SubscriptionCharge
        """

        self._subscription_charge = subscription_charge

    @property
    def pricing_component_value_change(self):
        """
        Gets the pricing_component_value_change of this CreateSubscriptionChargeAmendment.
        { \"description\" : \"\", \"verbs\":[] }

        :return: The pricing_component_value_change of this CreateSubscriptionChargeAmendment.
        :rtype: InsertableBillingEntity
        """
        return self._pricing_component_value_change

    @pricing_component_value_change.setter
    def pricing_component_value_change(self, pricing_component_value_change):
        """
        Sets the pricing_component_value_change of this CreateSubscriptionChargeAmendment.
        { \"description\" : \"\", \"verbs\":[] }

        :param pricing_component_value_change: The pricing_component_value_change of this CreateSubscriptionChargeAmendment.
        :type: InsertableBillingEntity
        """

        self._pricing_component_value_change = pricing_component_value_change

    @property
    def pricing_component_id(self):
        """
        Gets the pricing_component_id of this CreateSubscriptionChargeAmendment.
        { \"description\" : \"\", \"verbs\":[] }

        :return: The pricing_component_id of this CreateSubscriptionChargeAmendment.
        :rtype: str
        """
        return self._pricing_component_id

    @pricing_component_id.setter
    def pricing_component_id(self, pricing_component_id):
        """
        Sets the pricing_component_id of this CreateSubscriptionChargeAmendment.
        { \"description\" : \"\", \"verbs\":[] }

        :param pricing_component_id: The pricing_component_id of this CreateSubscriptionChargeAmendment.
        :type: str
        """

        self._pricing_component_id = pricing_component_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
