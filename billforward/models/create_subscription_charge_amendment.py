# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from billforward.models.amendment import Amendment  # noqa: F401,E501

class CreateSubscriptionChargeAmendment(Amendment):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subscription_charge_id': 'str',
        'amount': 'float',
        'discount': 'float',
        'type': 'str',
        'invoicing_type': 'str',
        'tax_status': 'str',
        'subscription_charge': 'SubscriptionCharge',
        'pricing_component_value_change': 'PricingComponentValueChange',
        'pricing_component_id': 'str'
    }
    if hasattr(Amendment, "swagger_types"):
        swagger_types.update(Amendment.swagger_types)

    attribute_map = {
        'subscription_charge_id': 'subscriptionChargeID',
        'amount': 'amount',
        'discount': 'discount',
        'type': 'type',
        'invoicing_type': 'invoicingType',
        'tax_status': 'taxStatus',
        'subscription_charge': 'subscriptionCharge',
        'pricing_component_value_change': 'pricingComponentValueChange',
        'pricing_component_id': 'pricingComponentID'
    }
    if hasattr(Amendment, "attribute_map"):
        attribute_map.update(Amendment.attribute_map)

    def __init__(self, subscription_charge_id=None, amount=None, discount=None, type=None, invoicing_type=None, tax_status=None, subscription_charge=None, pricing_component_value_change=None, pricing_component_id=None, *args, **kwargs):  # noqa: E501
        """CreateSubscriptionChargeAmendment - a model defined in Swagger"""  # noqa: E501
        self._subscription_charge_id = None
        self._amount = None
        self._discount = None
        self._type = None
        self._invoicing_type = None
        self._tax_status = None
        self._subscription_charge = None
        self._pricing_component_value_change = None
        self._pricing_component_id = None
        self.discriminator = None
        if subscription_charge_id is not None:
            self.subscription_charge_id = subscription_charge_id
        self.amount = amount
        if discount is not None:
            self.discount = discount
        self.type = type
        self.invoicing_type = invoicing_type
        self.tax_status = tax_status
        if subscription_charge is not None:
            self.subscription_charge = subscription_charge
        if pricing_component_value_change is not None:
            self.pricing_component_value_change = pricing_component_value_change
        if pricing_component_id is not None:
            self.pricing_component_id = pricing_component_id
        Amendment.__init__(self, *args, **kwargs)

    @property
    def subscription_charge_id(self):
        """Gets the subscription_charge_id of this CreateSubscriptionChargeAmendment.  # noqa: E501


        :return: The subscription_charge_id of this CreateSubscriptionChargeAmendment.  # noqa: E501
        :rtype: str
        """
        return self._subscription_charge_id

    @subscription_charge_id.setter
    def subscription_charge_id(self, subscription_charge_id):
        """Sets the subscription_charge_id of this CreateSubscriptionChargeAmendment.


        :param subscription_charge_id: The subscription_charge_id of this CreateSubscriptionChargeAmendment.  # noqa: E501
        :type: str
        """

        self._subscription_charge_id = subscription_charge_id

    @property
    def amount(self):
        """Gets the amount of this CreateSubscriptionChargeAmendment.  # noqa: E501


        :return: The amount of this CreateSubscriptionChargeAmendment.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CreateSubscriptionChargeAmendment.


        :param amount: The amount of this CreateSubscriptionChargeAmendment.  # noqa: E501
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def discount(self):
        """Gets the discount of this CreateSubscriptionChargeAmendment.  # noqa: E501


        :return: The discount of this CreateSubscriptionChargeAmendment.  # noqa: E501
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this CreateSubscriptionChargeAmendment.


        :param discount: The discount of this CreateSubscriptionChargeAmendment.  # noqa: E501
        :type: float
        """

        self._discount = discount

    @property
    def type(self):
        """Gets the type of this CreateSubscriptionChargeAmendment.  # noqa: E501


        :return: The type of this CreateSubscriptionChargeAmendment.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateSubscriptionChargeAmendment.


        :param type: The type of this CreateSubscriptionChargeAmendment.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["Setup", "Upgrade", "Manual", "ProductRatePlanMigration", "Arrears", "Advance", "Coupon", "Usage", "PricingComponent", "Prepayment", "AffiliateCommission"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def invoicing_type(self):
        """Gets the invoicing_type of this CreateSubscriptionChargeAmendment.  # noqa: E501


        :return: The invoicing_type of this CreateSubscriptionChargeAmendment.  # noqa: E501
        :rtype: str
        """
        return self._invoicing_type

    @invoicing_type.setter
    def invoicing_type(self, invoicing_type):
        """Sets the invoicing_type of this CreateSubscriptionChargeAmendment.


        :param invoicing_type: The invoicing_type of this CreateSubscriptionChargeAmendment.  # noqa: E501
        :type: str
        """
        if invoicing_type is None:
            raise ValueError("Invalid value for `invoicing_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Immediate", "Aggregated"]  # noqa: E501
        if invoicing_type not in allowed_values:
            raise ValueError(
                "Invalid value for `invoicing_type` ({0}), must be one of {1}"  # noqa: E501
                .format(invoicing_type, allowed_values)
            )

        self._invoicing_type = invoicing_type

    @property
    def tax_status(self):
        """Gets the tax_status of this CreateSubscriptionChargeAmendment.  # noqa: E501


        :return: The tax_status of this CreateSubscriptionChargeAmendment.  # noqa: E501
        :rtype: str
        """
        return self._tax_status

    @tax_status.setter
    def tax_status(self, tax_status):
        """Sets the tax_status of this CreateSubscriptionChargeAmendment.


        :param tax_status: The tax_status of this CreateSubscriptionChargeAmendment.  # noqa: E501
        :type: str
        """
        if tax_status is None:
            raise ValueError("Invalid value for `tax_status`, must not be `None`")  # noqa: E501
        allowed_values = ["inclusive", "exclusive"]  # noqa: E501
        if tax_status not in allowed_values:
            raise ValueError(
                "Invalid value for `tax_status` ({0}), must be one of {1}"  # noqa: E501
                .format(tax_status, allowed_values)
            )

        self._tax_status = tax_status

    @property
    def subscription_charge(self):
        """Gets the subscription_charge of this CreateSubscriptionChargeAmendment.  # noqa: E501


        :return: The subscription_charge of this CreateSubscriptionChargeAmendment.  # noqa: E501
        :rtype: SubscriptionCharge
        """
        return self._subscription_charge

    @subscription_charge.setter
    def subscription_charge(self, subscription_charge):
        """Sets the subscription_charge of this CreateSubscriptionChargeAmendment.


        :param subscription_charge: The subscription_charge of this CreateSubscriptionChargeAmendment.  # noqa: E501
        :type: SubscriptionCharge
        """

        self._subscription_charge = subscription_charge

    @property
    def pricing_component_value_change(self):
        """Gets the pricing_component_value_change of this CreateSubscriptionChargeAmendment.  # noqa: E501


        :return: The pricing_component_value_change of this CreateSubscriptionChargeAmendment.  # noqa: E501
        :rtype: PricingComponentValueChange
        """
        return self._pricing_component_value_change

    @pricing_component_value_change.setter
    def pricing_component_value_change(self, pricing_component_value_change):
        """Sets the pricing_component_value_change of this CreateSubscriptionChargeAmendment.


        :param pricing_component_value_change: The pricing_component_value_change of this CreateSubscriptionChargeAmendment.  # noqa: E501
        :type: PricingComponentValueChange
        """

        self._pricing_component_value_change = pricing_component_value_change

    @property
    def pricing_component_id(self):
        """Gets the pricing_component_id of this CreateSubscriptionChargeAmendment.  # noqa: E501


        :return: The pricing_component_id of this CreateSubscriptionChargeAmendment.  # noqa: E501
        :rtype: str
        """
        return self._pricing_component_id

    @pricing_component_id.setter
    def pricing_component_id(self, pricing_component_id):
        """Sets the pricing_component_id of this CreateSubscriptionChargeAmendment.


        :param pricing_component_id: The pricing_component_id of this CreateSubscriptionChargeAmendment.  # noqa: E501
        :type: str
        """

        self._pricing_component_id = pricing_component_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateSubscriptionChargeAmendment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateSubscriptionChargeAmendment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
