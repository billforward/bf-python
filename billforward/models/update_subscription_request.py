# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class UpdateSubscriptionRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, description=None, start=None, end=None, state=None, parent_id=None, aggregate_all_subscriptions_on_account=False, failed_payment_behaviour=None):
        """
        UpdateSubscriptionRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'description': 'str',
            'start': 'datetime',
            'end': 'datetime',
            'state': 'str',
            'parent_id': 'str',
            'aggregate_all_subscriptions_on_account': 'bool',
            'failed_payment_behaviour': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'start': 'start',
            'end': 'end',
            'state': 'state',
            'parent_id': 'parentID',
            'aggregate_all_subscriptions_on_account': 'aggregateAllSubscriptionsOnAccount',
            'failed_payment_behaviour': 'failedPaymentBehaviour'
        }

        self._id = id
        self._name = name
        self._description = description
        self._start = start
        self._end = end
        self._state = state
        self._parent_id = parent_id
        self._aggregate_all_subscriptions_on_account = aggregate_all_subscriptions_on_account
        self._failed_payment_behaviour = failed_payment_behaviour

    @property
    def id(self):
        """
        Gets the id of this UpdateSubscriptionRequest.
        {\"description\":\"ID of the Subscription you wish to update.\",\"verbs\":[\"POST\"]}

        :return: The id of this UpdateSubscriptionRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this UpdateSubscriptionRequest.
        {\"description\":\"ID of the Subscription you wish to update.\",\"verbs\":[\"POST\"]}

        :param id: The id of this UpdateSubscriptionRequest.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this UpdateSubscriptionRequest.
        {\"description\":\"New name to assign to the updated subscription. This is primarily for your benefit &mdash; for example, to enable you to identify subscriptions at a glance in the BillForward web interface (e.g. 'Customer 1425, guy@mail.com, Premium membership').\",\"verbs\":[\"POST\"]}

        :return: The name of this UpdateSubscriptionRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this UpdateSubscriptionRequest.
        {\"description\":\"New name to assign to the updated subscription. This is primarily for your benefit &mdash; for example, to enable you to identify subscriptions at a glance in the BillForward web interface (e.g. 'Customer 1425, guy@mail.com, Premium membership').\",\"verbs\":[\"POST\"]}

        :param name: The name of this UpdateSubscriptionRequest.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this UpdateSubscriptionRequest.
        {\"description\":\"New description to assign to the updated subscription. This is primarily for your benefit &mdash; for example, you could write here the mechanism through which you obtained this customer. (e.g. 'Customer obtained through Lazy Wednesdays promotion').\",\"verbs\":[\"POST\"]}

        :return: The description of this UpdateSubscriptionRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this UpdateSubscriptionRequest.
        {\"description\":\"New description to assign to the updated subscription. This is primarily for your benefit &mdash; for example, you could write here the mechanism through which you obtained this customer. (e.g. 'Customer obtained through Lazy Wednesdays promotion').\",\"verbs\":[\"POST\"]}

        :param description: The description of this UpdateSubscriptionRequest.
        :type: str
        """

        self._description = description

    @property
    def start(self):
        """
        Gets the start of this UpdateSubscriptionRequest.
        {\"description\":\"[Can only be changed if subscription is still in Provisioned state] ISO 8601 UTC DateTime (e.g. 2015-06-16T11:58:41Z) describing the date at which the subscription should enter its first service period.\",\"verbs\":[\"POST\"]}

        :return: The start of this UpdateSubscriptionRequest.
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """
        Sets the start of this UpdateSubscriptionRequest.
        {\"description\":\"[Can only be changed if subscription is still in Provisioned state] ISO 8601 UTC DateTime (e.g. 2015-06-16T11:58:41Z) describing the date at which the subscription should enter its first service period.\",\"verbs\":[\"POST\"]}

        :param start: The start of this UpdateSubscriptionRequest.
        :type: datetime
        """

        self._start = start

    @property
    def end(self):
        """
        Gets the end of this UpdateSubscriptionRequest.
        {\"description\":\"[Can only be changed if subscription is still in Provisioned state] ISO 8601 UTC DateTime (e.g. 2015-06-16T11:58:41Z) describing the date at which the subscription should finish its first service period.\",\"verbs\":[\"POST\"]}

        :return: The end of this UpdateSubscriptionRequest.
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """
        Sets the end of this UpdateSubscriptionRequest.
        {\"description\":\"[Can only be changed if subscription is still in Provisioned state] ISO 8601 UTC DateTime (e.g. 2015-06-16T11:58:41Z) describing the date at which the subscription should finish its first service period.\",\"verbs\":[\"POST\"]}

        :param end: The end of this UpdateSubscriptionRequest.
        :type: datetime
        """

        self._end = end

    @property
    def state(self):
        """
        Gets the state of this UpdateSubscriptionRequest.
        {\"description\":\"[Can only be changed if subscription is still in Provisioned state] The state into which you wish to move the updated subscription.<br><span class=\\\"label label-default\\\">AwaitingPayment</span> &mdash; The subscription is activated. After `start` time is surpassed, it will begin service and raise its first invoice.\",\"verbs\":[\"POST\"]}

        :return: The state of this UpdateSubscriptionRequest.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this UpdateSubscriptionRequest.
        {\"description\":\"[Can only be changed if subscription is still in Provisioned state] The state into which you wish to move the updated subscription.<br><span class=\\\"label label-default\\\">AwaitingPayment</span> &mdash; The subscription is activated. After `start` time is surpassed, it will begin service and raise its first invoice.\",\"verbs\":[\"POST\"]}

        :param state: The state of this UpdateSubscriptionRequest.
        :type: str
        """
        allowed_values = ["Trial", "Provisioned", "Paid", "AwaitingPayment", "Cancelled", "Failed", "Expired"]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def parent_id(self):
        """
        Gets the parent_id of this UpdateSubscriptionRequest.
        {\"description\":\"ID of a parent subscription which will collect the charges raised by this subscription. The parent becomes responsible for paying those charges.\",\"verbs\":[\"POST\"]}

        :return: The parent_id of this UpdateSubscriptionRequest.
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """
        Sets the parent_id of this UpdateSubscriptionRequest.
        {\"description\":\"ID of a parent subscription which will collect the charges raised by this subscription. The parent becomes responsible for paying those charges.\",\"verbs\":[\"POST\"]}

        :param parent_id: The parent_id of this UpdateSubscriptionRequest.
        :type: str
        """

        self._parent_id = parent_id

    @property
    def aggregate_all_subscriptions_on_account(self):
        """
        Gets the aggregate_all_subscriptions_on_account of this UpdateSubscriptionRequest.
        {\"description\":\"Whether this subscription should become an 'aggregating subscription', collecting charges (starting now) from all other subscriptions (current and future) belonging to this BillForward Account.\",\"verbs\":[\"POST\"]}

        :return: The aggregate_all_subscriptions_on_account of this UpdateSubscriptionRequest.
        :rtype: bool
        """
        return self._aggregate_all_subscriptions_on_account

    @aggregate_all_subscriptions_on_account.setter
    def aggregate_all_subscriptions_on_account(self, aggregate_all_subscriptions_on_account):
        """
        Sets the aggregate_all_subscriptions_on_account of this UpdateSubscriptionRequest.
        {\"description\":\"Whether this subscription should become an 'aggregating subscription', collecting charges (starting now) from all other subscriptions (current and future) belonging to this BillForward Account.\",\"verbs\":[\"POST\"]}

        :param aggregate_all_subscriptions_on_account: The aggregate_all_subscriptions_on_account of this UpdateSubscriptionRequest.
        :type: bool
        """

        self._aggregate_all_subscriptions_on_account = aggregate_all_subscriptions_on_account

    @property
    def failed_payment_behaviour(self):
        """
        Gets the failed_payment_behaviour of this UpdateSubscriptionRequest.
        {\"default\":\"None\",\"description\":\"The action that should be taken, should an invoice for some subscription to this rate plan remain unpaid despite the dunning period's being exceeded.<br><span class=\\\"label label-default\\\">CancelSubscription</span> &mdash; Demotes the subscription to the `Failed` state as soon as the dunning period is exceeded.<br><span class=\\\"label label-default\\\">None</span> &mdash; The subscription is allowed to continue in the `AwaitingPayment` state indefinitely even if the dunning period is exceeded.For slow payment cycles &mdash; or when manual invoice remediation is common &mdash; <span class=\\\"label label-default\\\">None</span> is recommended.<br>In a heavily-automated SaaS environment, automatic cancellation via <span class=\\\"label label-default\\\">CancelSubscription</span> is recommended.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :return: The failed_payment_behaviour of this UpdateSubscriptionRequest.
        :rtype: str
        """
        return self._failed_payment_behaviour

    @failed_payment_behaviour.setter
    def failed_payment_behaviour(self, failed_payment_behaviour):
        """
        Sets the failed_payment_behaviour of this UpdateSubscriptionRequest.
        {\"default\":\"None\",\"description\":\"The action that should be taken, should an invoice for some subscription to this rate plan remain unpaid despite the dunning period's being exceeded.<br><span class=\\\"label label-default\\\">CancelSubscription</span> &mdash; Demotes the subscription to the `Failed` state as soon as the dunning period is exceeded.<br><span class=\\\"label label-default\\\">None</span> &mdash; The subscription is allowed to continue in the `AwaitingPayment` state indefinitely even if the dunning period is exceeded.For slow payment cycles &mdash; or when manual invoice remediation is common &mdash; <span class=\\\"label label-default\\\">None</span> is recommended.<br>In a heavily-automated SaaS environment, automatic cancellation via <span class=\\\"label label-default\\\">CancelSubscription</span> is recommended.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :param failed_payment_behaviour: The failed_payment_behaviour of this UpdateSubscriptionRequest.
        :type: str
        """
        allowed_values = ["CancelSubscription", "None"]
        if failed_payment_behaviour not in allowed_values:
            raise ValueError(
                "Invalid value for `failed_payment_behaviour` ({0}), must be one of {1}"
                .format(failed_payment_behaviour, allowed_values)
            )

        self._failed_payment_behaviour = failed_payment_behaviour

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
