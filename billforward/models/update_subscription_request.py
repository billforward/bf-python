# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateSubscriptionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'id': 'str',
        'organization_id': 'str',
        'name': 'str',
        'description': 'str',
        'contract_start': 'datetime',
        'start': 'datetime',
        'end': 'datetime',
        'trial_end': 'datetime',
        'type': 'str',
        'state': 'str',
        'parent_id': 'str',
        'exclude_from_auto_aggregation': 'bool',
        'failed_payment_behaviour': 'str',
        'payment_terms': 'int',
        'align_period_with_aggregating_subscription': 'bool',
        'ignore_first_period_usage': 'bool',
        'extras': 'Extras',
        'purchase_order': 'str',
        'subscription_id': 'str',
        'dry_run': 'bool'
    }

    attribute_map = {
        'created': 'created',
        'id': 'id',
        'organization_id': 'organizationID',
        'name': 'name',
        'description': 'description',
        'contract_start': 'contractStart',
        'start': 'start',
        'end': 'end',
        'trial_end': 'trialEnd',
        'type': 'type',
        'state': 'state',
        'parent_id': 'parentID',
        'exclude_from_auto_aggregation': 'excludeFromAutoAggregation',
        'failed_payment_behaviour': 'failedPaymentBehaviour',
        'payment_terms': 'paymentTerms',
        'align_period_with_aggregating_subscription': 'alignPeriodWithAggregatingSubscription',
        'ignore_first_period_usage': 'ignoreFirstPeriodUsage',
        'extras': 'extras',
        'purchase_order': 'purchaseOrder',
        'subscription_id': 'subscriptionID',
        'dry_run': 'dryRun'
    }

    def __init__(self, created=None, id=None, organization_id=None, name=None, description=None, contract_start=None, start=None, end=None, trial_end=None, type=None, state=None, parent_id=None, exclude_from_auto_aggregation=None, failed_payment_behaviour=None, payment_terms=None, align_period_with_aggregating_subscription=None, ignore_first_period_usage=None, extras=None, purchase_order=None, subscription_id=None, dry_run=None):  # noqa: E501
        """UpdateSubscriptionRequest - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._id = None
        self._organization_id = None
        self._name = None
        self._description = None
        self._contract_start = None
        self._start = None
        self._end = None
        self._trial_end = None
        self._type = None
        self._state = None
        self._parent_id = None
        self._exclude_from_auto_aggregation = None
        self._failed_payment_behaviour = None
        self._payment_terms = None
        self._align_period_with_aggregating_subscription = None
        self._ignore_first_period_usage = None
        self._extras = None
        self._purchase_order = None
        self._subscription_id = None
        self._dry_run = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if id is not None:
            self.id = id
        if organization_id is not None:
            self.organization_id = organization_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if contract_start is not None:
            self.contract_start = contract_start
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if trial_end is not None:
            self.trial_end = trial_end
        if type is not None:
            self.type = type
        if state is not None:
            self.state = state
        if parent_id is not None:
            self.parent_id = parent_id
        if exclude_from_auto_aggregation is not None:
            self.exclude_from_auto_aggregation = exclude_from_auto_aggregation
        if failed_payment_behaviour is not None:
            self.failed_payment_behaviour = failed_payment_behaviour
        if payment_terms is not None:
            self.payment_terms = payment_terms
        if align_period_with_aggregating_subscription is not None:
            self.align_period_with_aggregating_subscription = align_period_with_aggregating_subscription
        if ignore_first_period_usage is not None:
            self.ignore_first_period_usage = ignore_first_period_usage
        if extras is not None:
            self.extras = extras
        if purchase_order is not None:
            self.purchase_order = purchase_order
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if dry_run is not None:
            self.dry_run = dry_run

    @property
    def created(self):
        """Gets the created of this UpdateSubscriptionRequest.  # noqa: E501


        :return: The created of this UpdateSubscriptionRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this UpdateSubscriptionRequest.


        :param created: The created of this UpdateSubscriptionRequest.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def id(self):
        """Gets the id of this UpdateSubscriptionRequest.  # noqa: E501


        :return: The id of this UpdateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UpdateSubscriptionRequest.


        :param id: The id of this UpdateSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def organization_id(self):
        """Gets the organization_id of this UpdateSubscriptionRequest.  # noqa: E501


        :return: The organization_id of this UpdateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this UpdateSubscriptionRequest.


        :param organization_id: The organization_id of this UpdateSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def name(self):
        """Gets the name of this UpdateSubscriptionRequest.  # noqa: E501


        :return: The name of this UpdateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateSubscriptionRequest.


        :param name: The name of this UpdateSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this UpdateSubscriptionRequest.  # noqa: E501


        :return: The description of this UpdateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateSubscriptionRequest.


        :param description: The description of this UpdateSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def contract_start(self):
        """Gets the contract_start of this UpdateSubscriptionRequest.  # noqa: E501


        :return: The contract_start of this UpdateSubscriptionRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._contract_start

    @contract_start.setter
    def contract_start(self, contract_start):
        """Sets the contract_start of this UpdateSubscriptionRequest.


        :param contract_start: The contract_start of this UpdateSubscriptionRequest.  # noqa: E501
        :type: datetime
        """

        self._contract_start = contract_start

    @property
    def start(self):
        """Gets the start of this UpdateSubscriptionRequest.  # noqa: E501


        :return: The start of this UpdateSubscriptionRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this UpdateSubscriptionRequest.


        :param start: The start of this UpdateSubscriptionRequest.  # noqa: E501
        :type: datetime
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this UpdateSubscriptionRequest.  # noqa: E501


        :return: The end of this UpdateSubscriptionRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this UpdateSubscriptionRequest.


        :param end: The end of this UpdateSubscriptionRequest.  # noqa: E501
        :type: datetime
        """

        self._end = end

    @property
    def trial_end(self):
        """Gets the trial_end of this UpdateSubscriptionRequest.  # noqa: E501


        :return: The trial_end of this UpdateSubscriptionRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._trial_end

    @trial_end.setter
    def trial_end(self, trial_end):
        """Sets the trial_end of this UpdateSubscriptionRequest.


        :param trial_end: The trial_end of this UpdateSubscriptionRequest.  # noqa: E501
        :type: datetime
        """

        self._trial_end = trial_end

    @property
    def type(self):
        """Gets the type of this UpdateSubscriptionRequest.  # noqa: E501


        :return: The type of this UpdateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UpdateSubscriptionRequest.


        :param type: The type of this UpdateSubscriptionRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Subscription", "Trial", "FixedTerm"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def state(self):
        """Gets the state of this UpdateSubscriptionRequest.  # noqa: E501


        :return: The state of this UpdateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this UpdateSubscriptionRequest.


        :param state: The state of this UpdateSubscriptionRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Trial", "Provisioned", "Paid", "AwaitingPayment", "Cancelled", "Failed", "Expired"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def parent_id(self):
        """Gets the parent_id of this UpdateSubscriptionRequest.  # noqa: E501


        :return: The parent_id of this UpdateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this UpdateSubscriptionRequest.


        :param parent_id: The parent_id of this UpdateSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def exclude_from_auto_aggregation(self):
        """Gets the exclude_from_auto_aggregation of this UpdateSubscriptionRequest.  # noqa: E501


        :return: The exclude_from_auto_aggregation of this UpdateSubscriptionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_from_auto_aggregation

    @exclude_from_auto_aggregation.setter
    def exclude_from_auto_aggregation(self, exclude_from_auto_aggregation):
        """Sets the exclude_from_auto_aggregation of this UpdateSubscriptionRequest.


        :param exclude_from_auto_aggregation: The exclude_from_auto_aggregation of this UpdateSubscriptionRequest.  # noqa: E501
        :type: bool
        """

        self._exclude_from_auto_aggregation = exclude_from_auto_aggregation

    @property
    def failed_payment_behaviour(self):
        """Gets the failed_payment_behaviour of this UpdateSubscriptionRequest.  # noqa: E501


        :return: The failed_payment_behaviour of this UpdateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._failed_payment_behaviour

    @failed_payment_behaviour.setter
    def failed_payment_behaviour(self, failed_payment_behaviour):
        """Sets the failed_payment_behaviour of this UpdateSubscriptionRequest.


        :param failed_payment_behaviour: The failed_payment_behaviour of this UpdateSubscriptionRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["CancelSubscription", "None"]  # noqa: E501
        if failed_payment_behaviour not in allowed_values:
            raise ValueError(
                "Invalid value for `failed_payment_behaviour` ({0}), must be one of {1}"  # noqa: E501
                .format(failed_payment_behaviour, allowed_values)
            )

        self._failed_payment_behaviour = failed_payment_behaviour

    @property
    def payment_terms(self):
        """Gets the payment_terms of this UpdateSubscriptionRequest.  # noqa: E501


        :return: The payment_terms of this UpdateSubscriptionRequest.  # noqa: E501
        :rtype: int
        """
        return self._payment_terms

    @payment_terms.setter
    def payment_terms(self, payment_terms):
        """Sets the payment_terms of this UpdateSubscriptionRequest.


        :param payment_terms: The payment_terms of this UpdateSubscriptionRequest.  # noqa: E501
        :type: int
        """

        self._payment_terms = payment_terms

    @property
    def align_period_with_aggregating_subscription(self):
        """Gets the align_period_with_aggregating_subscription of this UpdateSubscriptionRequest.  # noqa: E501


        :return: The align_period_with_aggregating_subscription of this UpdateSubscriptionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._align_period_with_aggregating_subscription

    @align_period_with_aggregating_subscription.setter
    def align_period_with_aggregating_subscription(self, align_period_with_aggregating_subscription):
        """Sets the align_period_with_aggregating_subscription of this UpdateSubscriptionRequest.


        :param align_period_with_aggregating_subscription: The align_period_with_aggregating_subscription of this UpdateSubscriptionRequest.  # noqa: E501
        :type: bool
        """

        self._align_period_with_aggregating_subscription = align_period_with_aggregating_subscription

    @property
    def ignore_first_period_usage(self):
        """Gets the ignore_first_period_usage of this UpdateSubscriptionRequest.  # noqa: E501


        :return: The ignore_first_period_usage of this UpdateSubscriptionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_first_period_usage

    @ignore_first_period_usage.setter
    def ignore_first_period_usage(self, ignore_first_period_usage):
        """Sets the ignore_first_period_usage of this UpdateSubscriptionRequest.


        :param ignore_first_period_usage: The ignore_first_period_usage of this UpdateSubscriptionRequest.  # noqa: E501
        :type: bool
        """

        self._ignore_first_period_usage = ignore_first_period_usage

    @property
    def extras(self):
        """Gets the extras of this UpdateSubscriptionRequest.  # noqa: E501


        :return: The extras of this UpdateSubscriptionRequest.  # noqa: E501
        :rtype: Extras
        """
        return self._extras

    @extras.setter
    def extras(self, extras):
        """Sets the extras of this UpdateSubscriptionRequest.


        :param extras: The extras of this UpdateSubscriptionRequest.  # noqa: E501
        :type: Extras
        """

        self._extras = extras

    @property
    def purchase_order(self):
        """Gets the purchase_order of this UpdateSubscriptionRequest.  # noqa: E501


        :return: The purchase_order of this UpdateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._purchase_order

    @purchase_order.setter
    def purchase_order(self, purchase_order):
        """Sets the purchase_order of this UpdateSubscriptionRequest.


        :param purchase_order: The purchase_order of this UpdateSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._purchase_order = purchase_order

    @property
    def subscription_id(self):
        """Gets the subscription_id of this UpdateSubscriptionRequest.  # noqa: E501


        :return: The subscription_id of this UpdateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this UpdateSubscriptionRequest.


        :param subscription_id: The subscription_id of this UpdateSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def dry_run(self):
        """Gets the dry_run of this UpdateSubscriptionRequest.  # noqa: E501


        :return: The dry_run of this UpdateSubscriptionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """Sets the dry_run of this UpdateSubscriptionRequest.


        :param dry_run: The dry_run of this UpdateSubscriptionRequest.  # noqa: E501
        :type: bool
        """

        self._dry_run = dry_run

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateSubscriptionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateSubscriptionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
