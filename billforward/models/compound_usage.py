# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CompoundUsage(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, changed_by=None, usages=None, organization_id=None):
        """
        CompoundUsage - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'changed_by': 'str',
            'usages': 'list[Usage]',
            'organization_id': 'str'
        }

        self.attribute_map = {
            'created': 'created',
            'changed_by': 'changedBy',
            'usages': 'usages',
            'organization_id': 'organizationID'
        }

        self._created = created
        self._changed_by = changed_by
        self._usages = usages
        self._organization_id = organization_id

    @property
    def created(self):
        """
        Gets the created of this CompoundUsage.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this CompoundUsage.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this CompoundUsage.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this CompoundUsage.
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """
        Gets the changed_by of this CompoundUsage.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :return: The changed_by of this CompoundUsage.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """
        Sets the changed_by of this CompoundUsage.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :param changed_by: The changed_by of this CompoundUsage.
        :type: str
        """

        self._changed_by = changed_by

    @property
    def usages(self):
        """
        Gets the usages of this CompoundUsage.
        { \"description\" : \"Array of Usage objects that you wish to operate on.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The usages of this CompoundUsage.
        :rtype: list[Usage]
        """
        return self._usages

    @usages.setter
    def usages(self, usages):
        """
        Sets the usages of this CompoundUsage.
        { \"description\" : \"Array of Usage objects that you wish to operate on.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param usages: The usages of this CompoundUsage.
        :type: list[Usage]
        """

        self._usages = usages

    @property
    def organization_id(self):
        """
        Gets the organization_id of this CompoundUsage.
        { \"description\" : \"ID of the organization to which these usage instances belong.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The organization_id of this CompoundUsage.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this CompoundUsage.
        { \"description\" : \"ID of the organization to which these usage instances belong.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param organization_id: The organization_id of this CompoundUsage.
        :type: str
        """

        self._organization_id = organization_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
