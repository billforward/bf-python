# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Profile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'changed_by': 'str',
        'updated': 'datetime',
        'id': 'str',
        'account_id': 'str',
        'organization_id': 'str',
        'email': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'company_name': 'str',
        'logo_url': 'str',
        'addresses': 'list[Address]',
        'mobile': 'str',
        'landline': 'str',
        'fax': 'str',
        'dob': 'datetime',
        'vat_number': 'str',
        'additional_emails': 'str',
        'additional_information': 'str',
        'correspondence_language': 'str',
        'ava_tax_customer_usage_type': 'str',
        'apply_tax': 'bool'
    }

    attribute_map = {
        'created': 'created',
        'changed_by': 'changedBy',
        'updated': 'updated',
        'id': 'id',
        'account_id': 'accountID',
        'organization_id': 'organizationID',
        'email': 'email',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'company_name': 'companyName',
        'logo_url': 'logoURL',
        'addresses': 'addresses',
        'mobile': 'mobile',
        'landline': 'landline',
        'fax': 'fax',
        'dob': 'dob',
        'vat_number': 'vatNumber',
        'additional_emails': 'additionalEmails',
        'additional_information': 'additionalInformation',
        'correspondence_language': 'correspondenceLanguage',
        'ava_tax_customer_usage_type': 'avaTaxCustomerUsageType',
        'apply_tax': 'applyTax'
    }

    def __init__(self, created=None, changed_by=None, updated=None, id=None, account_id=None, organization_id=None, email=None, first_name=None, last_name=None, company_name=None, logo_url=None, addresses=None, mobile=None, landline=None, fax=None, dob=None, vat_number=None, additional_emails=None, additional_information=None, correspondence_language=None, ava_tax_customer_usage_type=None, apply_tax=None):  # noqa: E501
        """Profile - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._changed_by = None
        self._updated = None
        self._id = None
        self._account_id = None
        self._organization_id = None
        self._email = None
        self._first_name = None
        self._last_name = None
        self._company_name = None
        self._logo_url = None
        self._addresses = None
        self._mobile = None
        self._landline = None
        self._fax = None
        self._dob = None
        self._vat_number = None
        self._additional_emails = None
        self._additional_information = None
        self._correspondence_language = None
        self._ava_tax_customer_usage_type = None
        self._apply_tax = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if changed_by is not None:
            self.changed_by = changed_by
        if updated is not None:
            self.updated = updated
        if id is not None:
            self.id = id
        self.account_id = account_id
        self.organization_id = organization_id
        if email is not None:
            self.email = email
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if company_name is not None:
            self.company_name = company_name
        if logo_url is not None:
            self.logo_url = logo_url
        if addresses is not None:
            self.addresses = addresses
        if mobile is not None:
            self.mobile = mobile
        if landline is not None:
            self.landline = landline
        if fax is not None:
            self.fax = fax
        if dob is not None:
            self.dob = dob
        if vat_number is not None:
            self.vat_number = vat_number
        if additional_emails is not None:
            self.additional_emails = additional_emails
        if additional_information is not None:
            self.additional_information = additional_information
        if correspondence_language is not None:
            self.correspondence_language = correspondence_language
        if ava_tax_customer_usage_type is not None:
            self.ava_tax_customer_usage_type = ava_tax_customer_usage_type
        if apply_tax is not None:
            self.apply_tax = apply_tax

    @property
    def created(self):
        """Gets the created of this Profile.  # noqa: E501


        :return: The created of this Profile.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Profile.


        :param created: The created of this Profile.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """Gets the changed_by of this Profile.  # noqa: E501


        :return: The changed_by of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """Sets the changed_by of this Profile.


        :param changed_by: The changed_by of this Profile.  # noqa: E501
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """Gets the updated of this Profile.  # noqa: E501


        :return: The updated of this Profile.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Profile.


        :param updated: The updated of this Profile.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """Gets the id of this Profile.  # noqa: E501


        :return: The id of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Profile.


        :param id: The id of this Profile.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def account_id(self):
        """Gets the account_id of this Profile.  # noqa: E501


        :return: The account_id of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Profile.


        :param account_id: The account_id of this Profile.  # noqa: E501
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def organization_id(self):
        """Gets the organization_id of this Profile.  # noqa: E501


        :return: The organization_id of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this Profile.


        :param organization_id: The organization_id of this Profile.  # noqa: E501
        :type: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")  # noqa: E501

        self._organization_id = organization_id

    @property
    def email(self):
        """Gets the email of this Profile.  # noqa: E501


        :return: The email of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Profile.


        :param email: The email of this Profile.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this Profile.  # noqa: E501


        :return: The first_name of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Profile.


        :param first_name: The first_name of this Profile.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Profile.  # noqa: E501


        :return: The last_name of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Profile.


        :param last_name: The last_name of this Profile.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def company_name(self):
        """Gets the company_name of this Profile.  # noqa: E501


        :return: The company_name of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this Profile.


        :param company_name: The company_name of this Profile.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def logo_url(self):
        """Gets the logo_url of this Profile.  # noqa: E501


        :return: The logo_url of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this Profile.


        :param logo_url: The logo_url of this Profile.  # noqa: E501
        :type: str
        """

        self._logo_url = logo_url

    @property
    def addresses(self):
        """Gets the addresses of this Profile.  # noqa: E501


        :return: The addresses of this Profile.  # noqa: E501
        :rtype: list[Address]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this Profile.


        :param addresses: The addresses of this Profile.  # noqa: E501
        :type: list[Address]
        """

        self._addresses = addresses

    @property
    def mobile(self):
        """Gets the mobile of this Profile.  # noqa: E501


        :return: The mobile of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this Profile.


        :param mobile: The mobile of this Profile.  # noqa: E501
        :type: str
        """

        self._mobile = mobile

    @property
    def landline(self):
        """Gets the landline of this Profile.  # noqa: E501


        :return: The landline of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._landline

    @landline.setter
    def landline(self, landline):
        """Sets the landline of this Profile.


        :param landline: The landline of this Profile.  # noqa: E501
        :type: str
        """

        self._landline = landline

    @property
    def fax(self):
        """Gets the fax of this Profile.  # noqa: E501


        :return: The fax of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """Sets the fax of this Profile.


        :param fax: The fax of this Profile.  # noqa: E501
        :type: str
        """

        self._fax = fax

    @property
    def dob(self):
        """Gets the dob of this Profile.  # noqa: E501


        :return: The dob of this Profile.  # noqa: E501
        :rtype: datetime
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this Profile.


        :param dob: The dob of this Profile.  # noqa: E501
        :type: datetime
        """

        self._dob = dob

    @property
    def vat_number(self):
        """Gets the vat_number of this Profile.  # noqa: E501


        :return: The vat_number of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._vat_number

    @vat_number.setter
    def vat_number(self, vat_number):
        """Sets the vat_number of this Profile.


        :param vat_number: The vat_number of this Profile.  # noqa: E501
        :type: str
        """

        self._vat_number = vat_number

    @property
    def additional_emails(self):
        """Gets the additional_emails of this Profile.  # noqa: E501


        :return: The additional_emails of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._additional_emails

    @additional_emails.setter
    def additional_emails(self, additional_emails):
        """Sets the additional_emails of this Profile.


        :param additional_emails: The additional_emails of this Profile.  # noqa: E501
        :type: str
        """

        self._additional_emails = additional_emails

    @property
    def additional_information(self):
        """Gets the additional_information of this Profile.  # noqa: E501


        :return: The additional_information of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._additional_information

    @additional_information.setter
    def additional_information(self, additional_information):
        """Sets the additional_information of this Profile.


        :param additional_information: The additional_information of this Profile.  # noqa: E501
        :type: str
        """

        self._additional_information = additional_information

    @property
    def correspondence_language(self):
        """Gets the correspondence_language of this Profile.  # noqa: E501


        :return: The correspondence_language of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._correspondence_language

    @correspondence_language.setter
    def correspondence_language(self, correspondence_language):
        """Sets the correspondence_language of this Profile.


        :param correspondence_language: The correspondence_language of this Profile.  # noqa: E501
        :type: str
        """

        self._correspondence_language = correspondence_language

    @property
    def ava_tax_customer_usage_type(self):
        """Gets the ava_tax_customer_usage_type of this Profile.  # noqa: E501


        :return: The ava_tax_customer_usage_type of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._ava_tax_customer_usage_type

    @ava_tax_customer_usage_type.setter
    def ava_tax_customer_usage_type(self, ava_tax_customer_usage_type):
        """Sets the ava_tax_customer_usage_type of this Profile.


        :param ava_tax_customer_usage_type: The ava_tax_customer_usage_type of this Profile.  # noqa: E501
        :type: str
        """

        self._ava_tax_customer_usage_type = ava_tax_customer_usage_type

    @property
    def apply_tax(self):
        """Gets the apply_tax of this Profile.  # noqa: E501


        :return: The apply_tax of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._apply_tax

    @apply_tax.setter
    def apply_tax(self, apply_tax):
        """Sets the apply_tax of this Profile.


        :param apply_tax: The apply_tax of this Profile.  # noqa: E501
        :type: bool
        """

        self._apply_tax = apply_tax

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Profile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Profile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
