# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CouponBook(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, book_code=None, created=None, changed_by=None, updated=None, id=None, crm_id=None, organization_id=None, coupon_book_definition_id=None, name=None, cost=None, remaining_coupons=None, max_remaining_coupons=None, maximum_coupon_uses=None, deleted=False):
        """
        CouponBook - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'book_code': 'str',
            'created': 'datetime',
            'changed_by': 'str',
            'updated': 'datetime',
            'id': 'str',
            'crm_id': 'str',
            'organization_id': 'str',
            'coupon_book_definition_id': 'str',
            'name': 'str',
            'cost': 'float',
            'remaining_coupons': 'int',
            'max_remaining_coupons': 'int',
            'maximum_coupon_uses': 'int',
            'deleted': 'bool'
        }

        self.attribute_map = {
            'book_code': 'bookCode',
            'created': 'created',
            'changed_by': 'changedBy',
            'updated': 'updated',
            'id': 'id',
            'crm_id': 'crmID',
            'organization_id': 'organizationID',
            'coupon_book_definition_id': 'couponBookDefinitionID',
            'name': 'name',
            'cost': 'cost',
            'remaining_coupons': 'remainingCoupons',
            'max_remaining_coupons': 'maxRemainingCoupons',
            'maximum_coupon_uses': 'maximumCouponUses',
            'deleted': 'deleted'
        }

        self._book_code = book_code
        self._created = created
        self._changed_by = changed_by
        self._updated = updated
        self._id = id
        self._crm_id = crm_id
        self._organization_id = organization_id
        self._coupon_book_definition_id = coupon_book_definition_id
        self._name = name
        self._cost = cost
        self._remaining_coupons = remaining_coupons
        self._max_remaining_coupons = max_remaining_coupons
        self._maximum_coupon_uses = maximum_coupon_uses
        self._deleted = deleted

    @property
    def book_code(self):
        """
        Gets the book_code of this CouponBook.
        { \"description\" : \"The book code for the coupon-book. This is used to create coupon-instances which are associated with subscriptions.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The book_code of this CouponBook.
        :rtype: str
        """
        return self._book_code

    @book_code.setter
    def book_code(self, book_code):
        """
        Sets the book_code of this CouponBook.
        { \"description\" : \"The book code for the coupon-book. This is used to create coupon-instances which are associated with subscriptions.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param book_code: The book_code of this CouponBook.
        :type: str
        """

        self._book_code = book_code

    @property
    def created(self):
        """
        Gets the created of this CouponBook.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this CouponBook.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this CouponBook.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this CouponBook.
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """
        Gets the changed_by of this CouponBook.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :return: The changed_by of this CouponBook.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """
        Sets the changed_by of this CouponBook.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :param changed_by: The changed_by of this CouponBook.
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """
        Gets the updated of this CouponBook.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :return: The updated of this CouponBook.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this CouponBook.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :param updated: The updated of this CouponBook.
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """
        Gets the id of this CouponBook.
        { \"description\" : \"ID of the coupon-book.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The id of this CouponBook.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CouponBook.
        { \"description\" : \"ID of the coupon-book.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param id: The id of this CouponBook.
        :type: str
        """

        self._id = id

    @property
    def crm_id(self):
        """
        Gets the crm_id of this CouponBook.
        { \"description\" : \"CRM ID of the product-rate-plan.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The crm_id of this CouponBook.
        :rtype: str
        """
        return self._crm_id

    @crm_id.setter
    def crm_id(self, crm_id):
        """
        Sets the crm_id of this CouponBook.
        { \"description\" : \"CRM ID of the product-rate-plan.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param crm_id: The crm_id of this CouponBook.
        :type: str
        """

        self._crm_id = crm_id

    @property
    def organization_id(self):
        """
        Gets the organization_id of this CouponBook.
        { \"description\" : \"Organization associated with the  the coupon-book.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The organization_id of this CouponBook.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this CouponBook.
        { \"description\" : \"Organization associated with the  the coupon-book.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param organization_id: The organization_id of this CouponBook.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def coupon_book_definition_id(self):
        """
        Gets the coupon_book_definition_id of this CouponBook.
        { \"description\" : \"ID of the coupon-book-definition associated with the coupon-book.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The coupon_book_definition_id of this CouponBook.
        :rtype: str
        """
        return self._coupon_book_definition_id

    @coupon_book_definition_id.setter
    def coupon_book_definition_id(self, coupon_book_definition_id):
        """
        Sets the coupon_book_definition_id of this CouponBook.
        { \"description\" : \"ID of the coupon-book-definition associated with the coupon-book.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param coupon_book_definition_id: The coupon_book_definition_id of this CouponBook.
        :type: str
        """

        self._coupon_book_definition_id = coupon_book_definition_id

    @property
    def name(self):
        """
        Gets the name of this CouponBook.
        { \"description\" : \"The human readable name of the coupon-book.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The name of this CouponBook.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CouponBook.
        { \"description\" : \"The human readable name of the coupon-book.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param name: The name of this CouponBook.
        :type: str
        """

        self._name = name

    @property
    def cost(self):
        """
        Gets the cost of this CouponBook.
        { \"description\" : \"The cost of the coupon-book. Can be used to keep track of coupon-book sales.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The cost of this CouponBook.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """
        Sets the cost of this CouponBook.
        { \"description\" : \"The cost of the coupon-book. Can be used to keep track of coupon-book sales.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param cost: The cost of this CouponBook.
        :type: float
        """

        self._cost = cost

    @property
    def remaining_coupons(self):
        """
        Gets the remaining_coupons of this CouponBook.
        { \"description\" : \"The number of available coupon-instances left in the coupon-book.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The remaining_coupons of this CouponBook.
        :rtype: int
        """
        return self._remaining_coupons

    @remaining_coupons.setter
    def remaining_coupons(self, remaining_coupons):
        """
        Sets the remaining_coupons of this CouponBook.
        { \"description\" : \"The number of available coupon-instances left in the coupon-book.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param remaining_coupons: The remaining_coupons of this CouponBook.
        :type: int
        """

        self._remaining_coupons = remaining_coupons

    @property
    def max_remaining_coupons(self):
        """
        Gets the max_remaining_coupons of this CouponBook.
        { \"description\" : \"The original number of available coupon-instances that the coupon-book can hold.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The max_remaining_coupons of this CouponBook.
        :rtype: int
        """
        return self._max_remaining_coupons

    @max_remaining_coupons.setter
    def max_remaining_coupons(self, max_remaining_coupons):
        """
        Sets the max_remaining_coupons of this CouponBook.
        { \"description\" : \"The original number of available coupon-instances that the coupon-book can hold.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param max_remaining_coupons: The max_remaining_coupons of this CouponBook.
        :type: int
        """

        self._max_remaining_coupons = max_remaining_coupons

    @property
    def maximum_coupon_uses(self):
        """
        Gets the maximum_coupon_uses of this CouponBook.
        { \"description\" : \"The maximum number of uses each coupon-instance created from this coupon-book can have.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The maximum_coupon_uses of this CouponBook.
        :rtype: int
        """
        return self._maximum_coupon_uses

    @maximum_coupon_uses.setter
    def maximum_coupon_uses(self, maximum_coupon_uses):
        """
        Sets the maximum_coupon_uses of this CouponBook.
        { \"description\" : \"The maximum number of uses each coupon-instance created from this coupon-book can have.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param maximum_coupon_uses: The maximum_coupon_uses of this CouponBook.
        :type: int
        """

        self._maximum_coupon_uses = maximum_coupon_uses

    @property
    def deleted(self):
        """
        Gets the deleted of this CouponBook.
        { \"description\" : \"Has the coupon book been deleted?\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The deleted of this CouponBook.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """
        Sets the deleted of this CouponBook.
        { \"description\" : \"Has the coupon book been deleted?\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param deleted: The deleted of this CouponBook.
        :type: bool
        """

        self._deleted = deleted

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
