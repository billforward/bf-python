# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class APIConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'changed_by': 'str',
        'updated': 'datetime',
        'id': 'str',
        'organization_id': 'str',
        'type': 'str',
        'environment': 'str',
        'merchant_id': 'str',
        'public_key': 'str',
        'private_key': 'str',
        'endpoint': 'str',
        'client_id': 'str',
        'client_secret': 'str',
        'gateway_account_id': 'str',
        'refresh_token': 'str',
        'deleted': 'bool',
        'api_login_id': 'str',
        'transaction_key': 'str',
        'expires_at': 'datetime',
        'migrations': 'list[Migration]',
        'gateway_type': 'str',
        'apilogin_id': 'str',
        'production': 'bool',
        'environment_type': 'str',
        'apikey': 'str'
    }

    attribute_map = {
        'created': 'created',
        'changed_by': 'changedBy',
        'updated': 'updated',
        'id': 'id',
        'organization_id': 'organizationID',
        'type': 'type',
        'environment': 'environment',
        'merchant_id': 'merchantID',
        'public_key': 'publicKey',
        'private_key': 'privateKey',
        'endpoint': 'endpoint',
        'client_id': 'clientID',
        'client_secret': 'clientSecret',
        'gateway_account_id': 'gatewayAccountID',
        'refresh_token': 'refreshToken',
        'deleted': 'deleted',
        'api_login_id': 'APILoginID',
        'transaction_key': 'transactionKey',
        'expires_at': 'expiresAt',
        'migrations': 'migrations',
        'gateway_type': 'gatewayType',
        'apilogin_id': 'apiloginID',
        'production': 'production',
        'environment_type': 'environmentType',
        'apikey': 'apikey'
    }

    def __init__(self, created=None, changed_by=None, updated=None, id=None, organization_id=None, type=None, environment=None, merchant_id=None, public_key=None, private_key=None, endpoint=None, client_id=None, client_secret=None, gateway_account_id=None, refresh_token=None, deleted=None, api_login_id=None, transaction_key=None, expires_at=None, migrations=None, gateway_type=None, apilogin_id=None, production=None, environment_type=None, apikey=None):  # noqa: E501
        """APIConfiguration - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._changed_by = None
        self._updated = None
        self._id = None
        self._organization_id = None
        self._type = None
        self._environment = None
        self._merchant_id = None
        self._public_key = None
        self._private_key = None
        self._endpoint = None
        self._client_id = None
        self._client_secret = None
        self._gateway_account_id = None
        self._refresh_token = None
        self._deleted = None
        self._api_login_id = None
        self._transaction_key = None
        self._expires_at = None
        self._migrations = None
        self._gateway_type = None
        self._apilogin_id = None
        self._production = None
        self._environment_type = None
        self._apikey = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if changed_by is not None:
            self.changed_by = changed_by
        if updated is not None:
            self.updated = updated
        if id is not None:
            self.id = id
        if organization_id is not None:
            self.organization_id = organization_id
        if type is not None:
            self.type = type
        if environment is not None:
            self.environment = environment
        if merchant_id is not None:
            self.merchant_id = merchant_id
        if public_key is not None:
            self.public_key = public_key
        if private_key is not None:
            self.private_key = private_key
        if endpoint is not None:
            self.endpoint = endpoint
        if client_id is not None:
            self.client_id = client_id
        if client_secret is not None:
            self.client_secret = client_secret
        if gateway_account_id is not None:
            self.gateway_account_id = gateway_account_id
        if refresh_token is not None:
            self.refresh_token = refresh_token
        self.deleted = deleted
        if api_login_id is not None:
            self.api_login_id = api_login_id
        if transaction_key is not None:
            self.transaction_key = transaction_key
        if expires_at is not None:
            self.expires_at = expires_at
        if migrations is not None:
            self.migrations = migrations
        if gateway_type is not None:
            self.gateway_type = gateway_type
        if apilogin_id is not None:
            self.apilogin_id = apilogin_id
        if production is not None:
            self.production = production
        if environment_type is not None:
            self.environment_type = environment_type
        if apikey is not None:
            self.apikey = apikey

    @property
    def created(self):
        """Gets the created of this APIConfiguration.  # noqa: E501


        :return: The created of this APIConfiguration.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this APIConfiguration.


        :param created: The created of this APIConfiguration.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """Gets the changed_by of this APIConfiguration.  # noqa: E501


        :return: The changed_by of this APIConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """Sets the changed_by of this APIConfiguration.


        :param changed_by: The changed_by of this APIConfiguration.  # noqa: E501
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """Gets the updated of this APIConfiguration.  # noqa: E501


        :return: The updated of this APIConfiguration.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this APIConfiguration.


        :param updated: The updated of this APIConfiguration.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """Gets the id of this APIConfiguration.  # noqa: E501


        :return: The id of this APIConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this APIConfiguration.


        :param id: The id of this APIConfiguration.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def organization_id(self):
        """Gets the organization_id of this APIConfiguration.  # noqa: E501


        :return: The organization_id of this APIConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this APIConfiguration.


        :param organization_id: The organization_id of this APIConfiguration.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def type(self):
        """Gets the type of this APIConfiguration.  # noqa: E501


        :return: The type of this APIConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this APIConfiguration.


        :param type: The type of this APIConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["Balanced", "Braintree", "Cybersource", "Paypal", "Stripe", "Shuttle", "AuthorizeNet", "Spreedly", "SagePay", "GoCardless", "TrustCommerce", "Payvision", "Epx", "Kash", "Zooz", "Square", "CardConnect", "EBANX"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def environment(self):
        """Gets the environment of this APIConfiguration.  # noqa: E501


        :return: The environment of this APIConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this APIConfiguration.


        :param environment: The environment of this APIConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["Sandbox", "Production"]  # noqa: E501
        if environment not in allowed_values:
            raise ValueError(
                "Invalid value for `environment` ({0}), must be one of {1}"  # noqa: E501
                .format(environment, allowed_values)
            )

        self._environment = environment

    @property
    def merchant_id(self):
        """Gets the merchant_id of this APIConfiguration.  # noqa: E501


        :return: The merchant_id of this APIConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this APIConfiguration.


        :param merchant_id: The merchant_id of this APIConfiguration.  # noqa: E501
        :type: str
        """

        self._merchant_id = merchant_id

    @property
    def public_key(self):
        """Gets the public_key of this APIConfiguration.  # noqa: E501


        :return: The public_key of this APIConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this APIConfiguration.


        :param public_key: The public_key of this APIConfiguration.  # noqa: E501
        :type: str
        """

        self._public_key = public_key

    @property
    def private_key(self):
        """Gets the private_key of this APIConfiguration.  # noqa: E501


        :return: The private_key of this APIConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this APIConfiguration.


        :param private_key: The private_key of this APIConfiguration.  # noqa: E501
        :type: str
        """

        self._private_key = private_key

    @property
    def endpoint(self):
        """Gets the endpoint of this APIConfiguration.  # noqa: E501


        :return: The endpoint of this APIConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this APIConfiguration.


        :param endpoint: The endpoint of this APIConfiguration.  # noqa: E501
        :type: str
        """

        self._endpoint = endpoint

    @property
    def client_id(self):
        """Gets the client_id of this APIConfiguration.  # noqa: E501


        :return: The client_id of this APIConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this APIConfiguration.


        :param client_id: The client_id of this APIConfiguration.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this APIConfiguration.  # noqa: E501


        :return: The client_secret of this APIConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this APIConfiguration.


        :param client_secret: The client_secret of this APIConfiguration.  # noqa: E501
        :type: str
        """

        self._client_secret = client_secret

    @property
    def gateway_account_id(self):
        """Gets the gateway_account_id of this APIConfiguration.  # noqa: E501


        :return: The gateway_account_id of this APIConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._gateway_account_id

    @gateway_account_id.setter
    def gateway_account_id(self, gateway_account_id):
        """Sets the gateway_account_id of this APIConfiguration.


        :param gateway_account_id: The gateway_account_id of this APIConfiguration.  # noqa: E501
        :type: str
        """

        self._gateway_account_id = gateway_account_id

    @property
    def refresh_token(self):
        """Gets the refresh_token of this APIConfiguration.  # noqa: E501


        :return: The refresh_token of this APIConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this APIConfiguration.


        :param refresh_token: The refresh_token of this APIConfiguration.  # noqa: E501
        :type: str
        """

        self._refresh_token = refresh_token

    @property
    def deleted(self):
        """Gets the deleted of this APIConfiguration.  # noqa: E501


        :return: The deleted of this APIConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this APIConfiguration.


        :param deleted: The deleted of this APIConfiguration.  # noqa: E501
        :type: bool
        """
        if deleted is None:
            raise ValueError("Invalid value for `deleted`, must not be `None`")  # noqa: E501

        self._deleted = deleted

    @property
    def api_login_id(self):
        """Gets the api_login_id of this APIConfiguration.  # noqa: E501


        :return: The api_login_id of this APIConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._api_login_id

    @api_login_id.setter
    def api_login_id(self, api_login_id):
        """Sets the api_login_id of this APIConfiguration.


        :param api_login_id: The api_login_id of this APIConfiguration.  # noqa: E501
        :type: str
        """

        self._api_login_id = api_login_id

    @property
    def transaction_key(self):
        """Gets the transaction_key of this APIConfiguration.  # noqa: E501


        :return: The transaction_key of this APIConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._transaction_key

    @transaction_key.setter
    def transaction_key(self, transaction_key):
        """Sets the transaction_key of this APIConfiguration.


        :param transaction_key: The transaction_key of this APIConfiguration.  # noqa: E501
        :type: str
        """

        self._transaction_key = transaction_key

    @property
    def expires_at(self):
        """Gets the expires_at of this APIConfiguration.  # noqa: E501


        :return: The expires_at of this APIConfiguration.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this APIConfiguration.


        :param expires_at: The expires_at of this APIConfiguration.  # noqa: E501
        :type: datetime
        """

        self._expires_at = expires_at

    @property
    def migrations(self):
        """Gets the migrations of this APIConfiguration.  # noqa: E501


        :return: The migrations of this APIConfiguration.  # noqa: E501
        :rtype: list[Migration]
        """
        return self._migrations

    @migrations.setter
    def migrations(self, migrations):
        """Sets the migrations of this APIConfiguration.


        :param migrations: The migrations of this APIConfiguration.  # noqa: E501
        :type: list[Migration]
        """

        self._migrations = migrations

    @property
    def gateway_type(self):
        """Gets the gateway_type of this APIConfiguration.  # noqa: E501


        :return: The gateway_type of this APIConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._gateway_type

    @gateway_type.setter
    def gateway_type(self, gateway_type):
        """Sets the gateway_type of this APIConfiguration.


        :param gateway_type: The gateway_type of this APIConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["VOID", "cybersource_token", "card_vault", "paypal_simple", "locustworld", "free", "coupon", "credit_note", "stripe", "braintree", "zooz", "balanced", "paypal", "billforward_test", "offline", "trial", "stripeACH", "goCardless", "authorizeNet", "spreedly", "sagePay", "trustCommerce", "payvision", "kash", "epx", "shuttle", "square", "billforwardRandomizer", "cardConnect", "ebanx"]  # noqa: E501
        if gateway_type not in allowed_values:
            raise ValueError(
                "Invalid value for `gateway_type` ({0}), must be one of {1}"  # noqa: E501
                .format(gateway_type, allowed_values)
            )

        self._gateway_type = gateway_type

    @property
    def apilogin_id(self):
        """Gets the apilogin_id of this APIConfiguration.  # noqa: E501


        :return: The apilogin_id of this APIConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._apilogin_id

    @apilogin_id.setter
    def apilogin_id(self, apilogin_id):
        """Sets the apilogin_id of this APIConfiguration.


        :param apilogin_id: The apilogin_id of this APIConfiguration.  # noqa: E501
        :type: str
        """

        self._apilogin_id = apilogin_id

    @property
    def production(self):
        """Gets the production of this APIConfiguration.  # noqa: E501


        :return: The production of this APIConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._production

    @production.setter
    def production(self, production):
        """Sets the production of this APIConfiguration.


        :param production: The production of this APIConfiguration.  # noqa: E501
        :type: bool
        """

        self._production = production

    @property
    def environment_type(self):
        """Gets the environment_type of this APIConfiguration.  # noqa: E501


        :return: The environment_type of this APIConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._environment_type

    @environment_type.setter
    def environment_type(self, environment_type):
        """Sets the environment_type of this APIConfiguration.


        :param environment_type: The environment_type of this APIConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["Sandbox", "Production"]  # noqa: E501
        if environment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `environment_type` ({0}), must be one of {1}"  # noqa: E501
                .format(environment_type, allowed_values)
            )

        self._environment_type = environment_type

    @property
    def apikey(self):
        """Gets the apikey of this APIConfiguration.  # noqa: E501


        :return: The apikey of this APIConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._apikey

    @apikey.setter
    def apikey(self, apikey):
        """Sets the apikey of this APIConfiguration.


        :param apikey: The apikey of this APIConfiguration.  # noqa: E501
        :type: str
        """

        self._apikey = apikey

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(APIConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, APIConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
