# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PricingComponentValueChange(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'changed_by': 'str',
        'id': 'str',
        'unit_of_measure_id': 'str',
        'subscription_id': 'str',
        'invoice_id': 'str',
        'organization_id': 'str',
        'new_value': 'int',
        'old_value': 'int',
        'mode': 'str',
        'state': 'str',
        'applied': 'datetime',
        'as_of': 'datetime',
        'discardable': 'bool',
        'as_of_date': 'datetime',
        'pricing_component_id': 'str'
    }

    attribute_map = {
        'created': 'created',
        'changed_by': 'changedBy',
        'id': 'id',
        'unit_of_measure_id': 'unitOfMeasureID',
        'subscription_id': 'subscriptionID',
        'invoice_id': 'invoiceID',
        'organization_id': 'organizationID',
        'new_value': 'newValue',
        'old_value': 'oldValue',
        'mode': 'mode',
        'state': 'state',
        'applied': 'applied',
        'as_of': 'asOf',
        'discardable': 'discardable',
        'as_of_date': 'asOfDate',
        'pricing_component_id': 'pricingComponentID'
    }

    def __init__(self, created=None, changed_by=None, id=None, unit_of_measure_id=None, subscription_id=None, invoice_id=None, organization_id=None, new_value=None, old_value=None, mode=None, state=None, applied=None, as_of=None, discardable=None, as_of_date=None, pricing_component_id=None):  # noqa: E501
        """PricingComponentValueChange - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._changed_by = None
        self._id = None
        self._unit_of_measure_id = None
        self._subscription_id = None
        self._invoice_id = None
        self._organization_id = None
        self._new_value = None
        self._old_value = None
        self._mode = None
        self._state = None
        self._applied = None
        self._as_of = None
        self._discardable = None
        self._as_of_date = None
        self._pricing_component_id = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if changed_by is not None:
            self.changed_by = changed_by
        if id is not None:
            self.id = id
        if unit_of_measure_id is not None:
            self.unit_of_measure_id = unit_of_measure_id
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if invoice_id is not None:
            self.invoice_id = invoice_id
        if organization_id is not None:
            self.organization_id = organization_id
        self.new_value = new_value
        self.old_value = old_value
        self.mode = mode
        self.state = state
        if applied is not None:
            self.applied = applied
        self.as_of = as_of
        if discardable is not None:
            self.discardable = discardable
        if as_of_date is not None:
            self.as_of_date = as_of_date
        self.pricing_component_id = pricing_component_id

    @property
    def created(self):
        """Gets the created of this PricingComponentValueChange.  # noqa: E501


        :return: The created of this PricingComponentValueChange.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this PricingComponentValueChange.


        :param created: The created of this PricingComponentValueChange.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """Gets the changed_by of this PricingComponentValueChange.  # noqa: E501


        :return: The changed_by of this PricingComponentValueChange.  # noqa: E501
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """Sets the changed_by of this PricingComponentValueChange.


        :param changed_by: The changed_by of this PricingComponentValueChange.  # noqa: E501
        :type: str
        """

        self._changed_by = changed_by

    @property
    def id(self):
        """Gets the id of this PricingComponentValueChange.  # noqa: E501


        :return: The id of this PricingComponentValueChange.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PricingComponentValueChange.


        :param id: The id of this PricingComponentValueChange.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def unit_of_measure_id(self):
        """Gets the unit_of_measure_id of this PricingComponentValueChange.  # noqa: E501


        :return: The unit_of_measure_id of this PricingComponentValueChange.  # noqa: E501
        :rtype: str
        """
        return self._unit_of_measure_id

    @unit_of_measure_id.setter
    def unit_of_measure_id(self, unit_of_measure_id):
        """Sets the unit_of_measure_id of this PricingComponentValueChange.


        :param unit_of_measure_id: The unit_of_measure_id of this PricingComponentValueChange.  # noqa: E501
        :type: str
        """

        self._unit_of_measure_id = unit_of_measure_id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this PricingComponentValueChange.  # noqa: E501


        :return: The subscription_id of this PricingComponentValueChange.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this PricingComponentValueChange.


        :param subscription_id: The subscription_id of this PricingComponentValueChange.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def invoice_id(self):
        """Gets the invoice_id of this PricingComponentValueChange.  # noqa: E501


        :return: The invoice_id of this PricingComponentValueChange.  # noqa: E501
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this PricingComponentValueChange.


        :param invoice_id: The invoice_id of this PricingComponentValueChange.  # noqa: E501
        :type: str
        """

        self._invoice_id = invoice_id

    @property
    def organization_id(self):
        """Gets the organization_id of this PricingComponentValueChange.  # noqa: E501


        :return: The organization_id of this PricingComponentValueChange.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this PricingComponentValueChange.


        :param organization_id: The organization_id of this PricingComponentValueChange.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def new_value(self):
        """Gets the new_value of this PricingComponentValueChange.  # noqa: E501


        :return: The new_value of this PricingComponentValueChange.  # noqa: E501
        :rtype: int
        """
        return self._new_value

    @new_value.setter
    def new_value(self, new_value):
        """Sets the new_value of this PricingComponentValueChange.


        :param new_value: The new_value of this PricingComponentValueChange.  # noqa: E501
        :type: int
        """
        if new_value is None:
            raise ValueError("Invalid value for `new_value`, must not be `None`")  # noqa: E501

        self._new_value = new_value

    @property
    def old_value(self):
        """Gets the old_value of this PricingComponentValueChange.  # noqa: E501


        :return: The old_value of this PricingComponentValueChange.  # noqa: E501
        :rtype: int
        """
        return self._old_value

    @old_value.setter
    def old_value(self, old_value):
        """Sets the old_value of this PricingComponentValueChange.


        :param old_value: The old_value of this PricingComponentValueChange.  # noqa: E501
        :type: int
        """
        if old_value is None:
            raise ValueError("Invalid value for `old_value`, must not be `None`")  # noqa: E501

        self._old_value = old_value

    @property
    def mode(self):
        """Gets the mode of this PricingComponentValueChange.  # noqa: E501


        :return: The mode of this PricingComponentValueChange.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this PricingComponentValueChange.


        :param mode: The mode of this PricingComponentValueChange.  # noqa: E501
        :type: str
        """
        if mode is None:
            raise ValueError("Invalid value for `mode`, must not be `None`")  # noqa: E501
        allowed_values = ["immediate", "delayed"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def state(self):
        """Gets the state of this PricingComponentValueChange.  # noqa: E501


        :return: The state of this PricingComponentValueChange.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PricingComponentValueChange.


        :param state: The state of this PricingComponentValueChange.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["New", "Accepted", "Rejected", "ChargeCreated"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def applied(self):
        """Gets the applied of this PricingComponentValueChange.  # noqa: E501


        :return: The applied of this PricingComponentValueChange.  # noqa: E501
        :rtype: datetime
        """
        return self._applied

    @applied.setter
    def applied(self, applied):
        """Sets the applied of this PricingComponentValueChange.


        :param applied: The applied of this PricingComponentValueChange.  # noqa: E501
        :type: datetime
        """

        self._applied = applied

    @property
    def as_of(self):
        """Gets the as_of of this PricingComponentValueChange.  # noqa: E501


        :return: The as_of of this PricingComponentValueChange.  # noqa: E501
        :rtype: datetime
        """
        return self._as_of

    @as_of.setter
    def as_of(self, as_of):
        """Sets the as_of of this PricingComponentValueChange.


        :param as_of: The as_of of this PricingComponentValueChange.  # noqa: E501
        :type: datetime
        """
        if as_of is None:
            raise ValueError("Invalid value for `as_of`, must not be `None`")  # noqa: E501

        self._as_of = as_of

    @property
    def discardable(self):
        """Gets the discardable of this PricingComponentValueChange.  # noqa: E501


        :return: The discardable of this PricingComponentValueChange.  # noqa: E501
        :rtype: bool
        """
        return self._discardable

    @discardable.setter
    def discardable(self, discardable):
        """Sets the discardable of this PricingComponentValueChange.


        :param discardable: The discardable of this PricingComponentValueChange.  # noqa: E501
        :type: bool
        """

        self._discardable = discardable

    @property
    def as_of_date(self):
        """Gets the as_of_date of this PricingComponentValueChange.  # noqa: E501


        :return: The as_of_date of this PricingComponentValueChange.  # noqa: E501
        :rtype: datetime
        """
        return self._as_of_date

    @as_of_date.setter
    def as_of_date(self, as_of_date):
        """Sets the as_of_date of this PricingComponentValueChange.


        :param as_of_date: The as_of_date of this PricingComponentValueChange.  # noqa: E501
        :type: datetime
        """

        self._as_of_date = as_of_date

    @property
    def pricing_component_id(self):
        """Gets the pricing_component_id of this PricingComponentValueChange.  # noqa: E501


        :return: The pricing_component_id of this PricingComponentValueChange.  # noqa: E501
        :rtype: str
        """
        return self._pricing_component_id

    @pricing_component_id.setter
    def pricing_component_id(self, pricing_component_id):
        """Sets the pricing_component_id of this PricingComponentValueChange.


        :param pricing_component_id: The pricing_component_id of this PricingComponentValueChange.  # noqa: E501
        :type: str
        """
        if pricing_component_id is None:
            raise ValueError("Invalid value for `pricing_component_id`, must not be `None`")  # noqa: E501

        self._pricing_component_id = pricing_component_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PricingComponentValueChange, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PricingComponentValueChange):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
