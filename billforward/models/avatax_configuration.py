# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AvataxConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'changed_by': 'str',
        'updated': 'datetime',
        'id': 'str',
        'organization_id': 'str',
        'account_number': 'str',
        'licence_key': 'str',
        'company_code': 'str',
        'address_id': 'str',
        'enabled': 'bool',
        'enable_logging': 'bool',
        'commit_transactions': 'bool',
        'address_validation': 'bool',
        'prod_env': 'bool',
        'deleted': 'bool'
    }

    attribute_map = {
        'created': 'created',
        'changed_by': 'changedBy',
        'updated': 'updated',
        'id': 'id',
        'organization_id': 'organizationID',
        'account_number': 'accountNumber',
        'licence_key': 'licenceKey',
        'company_code': 'companyCode',
        'address_id': 'addressId',
        'enabled': 'enabled',
        'enable_logging': 'enableLogging',
        'commit_transactions': 'commitTransactions',
        'address_validation': 'addressValidation',
        'prod_env': 'prodEnv',
        'deleted': 'deleted'
    }

    def __init__(self, created=None, changed_by=None, updated=None, id=None, organization_id=None, account_number=None, licence_key=None, company_code=None, address_id=None, enabled=None, enable_logging=None, commit_transactions=None, address_validation=None, prod_env=None, deleted=None):  # noqa: E501
        """AvataxConfiguration - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._changed_by = None
        self._updated = None
        self._id = None
        self._organization_id = None
        self._account_number = None
        self._licence_key = None
        self._company_code = None
        self._address_id = None
        self._enabled = None
        self._enable_logging = None
        self._commit_transactions = None
        self._address_validation = None
        self._prod_env = None
        self._deleted = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if changed_by is not None:
            self.changed_by = changed_by
        if updated is not None:
            self.updated = updated
        if id is not None:
            self.id = id
        self.organization_id = organization_id
        self.account_number = account_number
        self.licence_key = licence_key
        self.company_code = company_code
        self.address_id = address_id
        self.enabled = enabled
        self.enable_logging = enable_logging
        self.commit_transactions = commit_transactions
        self.address_validation = address_validation
        self.prod_env = prod_env
        if deleted is not None:
            self.deleted = deleted

    @property
    def created(self):
        """Gets the created of this AvataxConfiguration.  # noqa: E501


        :return: The created of this AvataxConfiguration.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this AvataxConfiguration.


        :param created: The created of this AvataxConfiguration.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """Gets the changed_by of this AvataxConfiguration.  # noqa: E501


        :return: The changed_by of this AvataxConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """Sets the changed_by of this AvataxConfiguration.


        :param changed_by: The changed_by of this AvataxConfiguration.  # noqa: E501
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """Gets the updated of this AvataxConfiguration.  # noqa: E501


        :return: The updated of this AvataxConfiguration.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this AvataxConfiguration.


        :param updated: The updated of this AvataxConfiguration.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """Gets the id of this AvataxConfiguration.  # noqa: E501


        :return: The id of this AvataxConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AvataxConfiguration.


        :param id: The id of this AvataxConfiguration.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def organization_id(self):
        """Gets the organization_id of this AvataxConfiguration.  # noqa: E501


        :return: The organization_id of this AvataxConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this AvataxConfiguration.


        :param organization_id: The organization_id of this AvataxConfiguration.  # noqa: E501
        :type: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")  # noqa: E501

        self._organization_id = organization_id

    @property
    def account_number(self):
        """Gets the account_number of this AvataxConfiguration.  # noqa: E501


        :return: The account_number of this AvataxConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this AvataxConfiguration.


        :param account_number: The account_number of this AvataxConfiguration.  # noqa: E501
        :type: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")  # noqa: E501

        self._account_number = account_number

    @property
    def licence_key(self):
        """Gets the licence_key of this AvataxConfiguration.  # noqa: E501


        :return: The licence_key of this AvataxConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._licence_key

    @licence_key.setter
    def licence_key(self, licence_key):
        """Sets the licence_key of this AvataxConfiguration.


        :param licence_key: The licence_key of this AvataxConfiguration.  # noqa: E501
        :type: str
        """
        if licence_key is None:
            raise ValueError("Invalid value for `licence_key`, must not be `None`")  # noqa: E501

        self._licence_key = licence_key

    @property
    def company_code(self):
        """Gets the company_code of this AvataxConfiguration.  # noqa: E501


        :return: The company_code of this AvataxConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._company_code

    @company_code.setter
    def company_code(self, company_code):
        """Sets the company_code of this AvataxConfiguration.


        :param company_code: The company_code of this AvataxConfiguration.  # noqa: E501
        :type: str
        """
        if company_code is None:
            raise ValueError("Invalid value for `company_code`, must not be `None`")  # noqa: E501

        self._company_code = company_code

    @property
    def address_id(self):
        """Gets the address_id of this AvataxConfiguration.  # noqa: E501


        :return: The address_id of this AvataxConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._address_id

    @address_id.setter
    def address_id(self, address_id):
        """Sets the address_id of this AvataxConfiguration.


        :param address_id: The address_id of this AvataxConfiguration.  # noqa: E501
        :type: str
        """
        if address_id is None:
            raise ValueError("Invalid value for `address_id`, must not be `None`")  # noqa: E501

        self._address_id = address_id

    @property
    def enabled(self):
        """Gets the enabled of this AvataxConfiguration.  # noqa: E501


        :return: The enabled of this AvataxConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this AvataxConfiguration.


        :param enabled: The enabled of this AvataxConfiguration.  # noqa: E501
        :type: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    @property
    def enable_logging(self):
        """Gets the enable_logging of this AvataxConfiguration.  # noqa: E501


        :return: The enable_logging of this AvataxConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._enable_logging

    @enable_logging.setter
    def enable_logging(self, enable_logging):
        """Sets the enable_logging of this AvataxConfiguration.


        :param enable_logging: The enable_logging of this AvataxConfiguration.  # noqa: E501
        :type: bool
        """
        if enable_logging is None:
            raise ValueError("Invalid value for `enable_logging`, must not be `None`")  # noqa: E501

        self._enable_logging = enable_logging

    @property
    def commit_transactions(self):
        """Gets the commit_transactions of this AvataxConfiguration.  # noqa: E501


        :return: The commit_transactions of this AvataxConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._commit_transactions

    @commit_transactions.setter
    def commit_transactions(self, commit_transactions):
        """Sets the commit_transactions of this AvataxConfiguration.


        :param commit_transactions: The commit_transactions of this AvataxConfiguration.  # noqa: E501
        :type: bool
        """
        if commit_transactions is None:
            raise ValueError("Invalid value for `commit_transactions`, must not be `None`")  # noqa: E501

        self._commit_transactions = commit_transactions

    @property
    def address_validation(self):
        """Gets the address_validation of this AvataxConfiguration.  # noqa: E501


        :return: The address_validation of this AvataxConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._address_validation

    @address_validation.setter
    def address_validation(self, address_validation):
        """Sets the address_validation of this AvataxConfiguration.


        :param address_validation: The address_validation of this AvataxConfiguration.  # noqa: E501
        :type: bool
        """
        if address_validation is None:
            raise ValueError("Invalid value for `address_validation`, must not be `None`")  # noqa: E501

        self._address_validation = address_validation

    @property
    def prod_env(self):
        """Gets the prod_env of this AvataxConfiguration.  # noqa: E501


        :return: The prod_env of this AvataxConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._prod_env

    @prod_env.setter
    def prod_env(self, prod_env):
        """Sets the prod_env of this AvataxConfiguration.


        :param prod_env: The prod_env of this AvataxConfiguration.  # noqa: E501
        :type: bool
        """
        if prod_env is None:
            raise ValueError("Invalid value for `prod_env`, must not be `None`")  # noqa: E501

        self._prod_env = prod_env

    @property
    def deleted(self):
        """Gets the deleted of this AvataxConfiguration.  # noqa: E501


        :return: The deleted of this AvataxConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this AvataxConfiguration.


        :param deleted: The deleted of this AvataxConfiguration.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AvataxConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AvataxConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
