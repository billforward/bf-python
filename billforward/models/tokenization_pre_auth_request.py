# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TokenizationPreAuthRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'changed_by': 'str',
        'gateway_id': 'str',
        'gateway': 'str',
        'organization_id': 'str',
        'bill_forward_url': 'str',
        'bill_forward_public_token': 'str',
        'email_tokenization_id': 'str',
        'id': 'str',
        'at_type': 'str'
    }

    attribute_map = {
        'created': 'created',
        'changed_by': 'changedBy',
        'gateway_id': 'gatewayID',
        'gateway': 'gateway',
        'organization_id': 'organizationID',
        'bill_forward_url': 'billForwardURL',
        'bill_forward_public_token': 'billForwardPublicToken',
        'email_tokenization_id': 'emailTokenizationID',
        'id': 'id',
        'at_type': '@type'
    }

    discriminator_value_class_map = {
          'SpreedlyPreAuthRequest': 'SpreedlyPreAuthRequest',
'SagePayPreAuthRequest': 'SagePayPreAuthRequest',
'StripePreAuthRequest': 'StripePreAuthRequest',
'PayVisionPreAuthRequest': 'PayVisionPreAuthRequest',
'BraintreePreAuthRequest': 'BraintreePreAuthRequest',
'ShuttlePreAuthRequest': 'ShuttlePreAuthRequest'    }

    def __init__(self, created=None, changed_by=None, gateway_id=None, gateway=None, organization_id=None, bill_forward_url=None, bill_forward_public_token=None, email_tokenization_id=None, id=None, at_type=None):  # noqa: E501
        """TokenizationPreAuthRequest - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._changed_by = None
        self._gateway_id = None
        self._gateway = None
        self._organization_id = None
        self._bill_forward_url = None
        self._bill_forward_public_token = None
        self._email_tokenization_id = None
        self._id = None
        self._at_type = None
        self.discriminator = '@type'
        if created is not None:
            self.created = created
        if changed_by is not None:
            self.changed_by = changed_by
        if gateway_id is not None:
            self.gateway_id = gateway_id
        if gateway is not None:
            self.gateway = gateway
        if organization_id is not None:
            self.organization_id = organization_id
        if bill_forward_url is not None:
            self.bill_forward_url = bill_forward_url
        if bill_forward_public_token is not None:
            self.bill_forward_public_token = bill_forward_public_token
        if email_tokenization_id is not None:
            self.email_tokenization_id = email_tokenization_id
        if id is not None:
            self.id = id
        self.at_type = at_type

    @property
    def created(self):
        """Gets the created of this TokenizationPreAuthRequest.  # noqa: E501


        :return: The created of this TokenizationPreAuthRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this TokenizationPreAuthRequest.


        :param created: The created of this TokenizationPreAuthRequest.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """Gets the changed_by of this TokenizationPreAuthRequest.  # noqa: E501


        :return: The changed_by of this TokenizationPreAuthRequest.  # noqa: E501
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """Sets the changed_by of this TokenizationPreAuthRequest.


        :param changed_by: The changed_by of this TokenizationPreAuthRequest.  # noqa: E501
        :type: str
        """

        self._changed_by = changed_by

    @property
    def gateway_id(self):
        """Gets the gateway_id of this TokenizationPreAuthRequest.  # noqa: E501


        :return: The gateway_id of this TokenizationPreAuthRequest.  # noqa: E501
        :rtype: str
        """
        return self._gateway_id

    @gateway_id.setter
    def gateway_id(self, gateway_id):
        """Sets the gateway_id of this TokenizationPreAuthRequest.


        :param gateway_id: The gateway_id of this TokenizationPreAuthRequest.  # noqa: E501
        :type: str
        """

        self._gateway_id = gateway_id

    @property
    def gateway(self):
        """Gets the gateway of this TokenizationPreAuthRequest.  # noqa: E501


        :return: The gateway of this TokenizationPreAuthRequest.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this TokenizationPreAuthRequest.


        :param gateway: The gateway of this TokenizationPreAuthRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Balanced", "Braintree", "Cybersource", "Paypal", "Stripe", "Shuttle", "AuthorizeNet", "Spreedly", "SagePay", "GoCardless", "TrustCommerce", "Payvision", "Epx", "Kash", "Zooz", "Square", "CardConnect", "EBANX"]  # noqa: E501
        if gateway not in allowed_values:
            raise ValueError(
                "Invalid value for `gateway` ({0}), must be one of {1}"  # noqa: E501
                .format(gateway, allowed_values)
            )

        self._gateway = gateway

    @property
    def organization_id(self):
        """Gets the organization_id of this TokenizationPreAuthRequest.  # noqa: E501


        :return: The organization_id of this TokenizationPreAuthRequest.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this TokenizationPreAuthRequest.


        :param organization_id: The organization_id of this TokenizationPreAuthRequest.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def bill_forward_url(self):
        """Gets the bill_forward_url of this TokenizationPreAuthRequest.  # noqa: E501


        :return: The bill_forward_url of this TokenizationPreAuthRequest.  # noqa: E501
        :rtype: str
        """
        return self._bill_forward_url

    @bill_forward_url.setter
    def bill_forward_url(self, bill_forward_url):
        """Sets the bill_forward_url of this TokenizationPreAuthRequest.


        :param bill_forward_url: The bill_forward_url of this TokenizationPreAuthRequest.  # noqa: E501
        :type: str
        """

        self._bill_forward_url = bill_forward_url

    @property
    def bill_forward_public_token(self):
        """Gets the bill_forward_public_token of this TokenizationPreAuthRequest.  # noqa: E501


        :return: The bill_forward_public_token of this TokenizationPreAuthRequest.  # noqa: E501
        :rtype: str
        """
        return self._bill_forward_public_token

    @bill_forward_public_token.setter
    def bill_forward_public_token(self, bill_forward_public_token):
        """Sets the bill_forward_public_token of this TokenizationPreAuthRequest.


        :param bill_forward_public_token: The bill_forward_public_token of this TokenizationPreAuthRequest.  # noqa: E501
        :type: str
        """

        self._bill_forward_public_token = bill_forward_public_token

    @property
    def email_tokenization_id(self):
        """Gets the email_tokenization_id of this TokenizationPreAuthRequest.  # noqa: E501


        :return: The email_tokenization_id of this TokenizationPreAuthRequest.  # noqa: E501
        :rtype: str
        """
        return self._email_tokenization_id

    @email_tokenization_id.setter
    def email_tokenization_id(self, email_tokenization_id):
        """Sets the email_tokenization_id of this TokenizationPreAuthRequest.


        :param email_tokenization_id: The email_tokenization_id of this TokenizationPreAuthRequest.  # noqa: E501
        :type: str
        """

        self._email_tokenization_id = email_tokenization_id

    @property
    def id(self):
        """Gets the id of this TokenizationPreAuthRequest.  # noqa: E501


        :return: The id of this TokenizationPreAuthRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TokenizationPreAuthRequest.


        :param id: The id of this TokenizationPreAuthRequest.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def at_type(self):
        """Gets the at_type of this TokenizationPreAuthRequest.  # noqa: E501


        :return: The at_type of this TokenizationPreAuthRequest.  # noqa: E501
        :rtype: str
        """
        return self._at_type

    @at_type.setter
    def at_type(self, at_type):
        """Sets the at_type of this TokenizationPreAuthRequest.


        :param at_type: The at_type of this TokenizationPreAuthRequest.  # noqa: E501
        :type: str
        """
        if at_type is None:
            raise ValueError("Invalid value for `at_type`, must not be `None`")  # noqa: E501

        self._at_type = at_type

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TokenizationPreAuthRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TokenizationPreAuthRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
