# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TimeResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'periods': 'int',
        'to': 'datetime',
        'dry_run': 'bool',
        'skip_intermediate_periods': 'bool',
        'handle_child_subscriptions': 'bool',
        'handle_amendments': 'bool',
        'execution_strategy': 'str',
        'freeze_on_completion': 'bool',
        'organization_id': 'str',
        'subscription_id': 'str',
        'advance_inclusively': 'bool',
        'subscriptions': 'list[Subscription]',
        'invoices': 'list[Invoice]'
    }

    attribute_map = {
        'created': 'created',
        'periods': 'periods',
        'to': 'to',
        'dry_run': 'dryRun',
        'skip_intermediate_periods': 'skipIntermediatePeriods',
        'handle_child_subscriptions': 'handleChildSubscriptions',
        'handle_amendments': 'handleAmendments',
        'execution_strategy': 'executionStrategy',
        'freeze_on_completion': 'freezeOnCompletion',
        'organization_id': 'organizationID',
        'subscription_id': 'subscriptionID',
        'advance_inclusively': 'advanceInclusively',
        'subscriptions': 'subscriptions',
        'invoices': 'invoices'
    }

    def __init__(self, created=None, periods=None, to=None, dry_run=None, skip_intermediate_periods=None, handle_child_subscriptions=None, handle_amendments=None, execution_strategy=None, freeze_on_completion=None, organization_id=None, subscription_id=None, advance_inclusively=None, subscriptions=None, invoices=None):  # noqa: E501
        """TimeResponse - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._periods = None
        self._to = None
        self._dry_run = None
        self._skip_intermediate_periods = None
        self._handle_child_subscriptions = None
        self._handle_amendments = None
        self._execution_strategy = None
        self._freeze_on_completion = None
        self._organization_id = None
        self._subscription_id = None
        self._advance_inclusively = None
        self._subscriptions = None
        self._invoices = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if periods is not None:
            self.periods = periods
        if to is not None:
            self.to = to
        if dry_run is not None:
            self.dry_run = dry_run
        if skip_intermediate_periods is not None:
            self.skip_intermediate_periods = skip_intermediate_periods
        if handle_child_subscriptions is not None:
            self.handle_child_subscriptions = handle_child_subscriptions
        if handle_amendments is not None:
            self.handle_amendments = handle_amendments
        if execution_strategy is not None:
            self.execution_strategy = execution_strategy
        if freeze_on_completion is not None:
            self.freeze_on_completion = freeze_on_completion
        if organization_id is not None:
            self.organization_id = organization_id
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if advance_inclusively is not None:
            self.advance_inclusively = advance_inclusively
        if subscriptions is not None:
            self.subscriptions = subscriptions
        if invoices is not None:
            self.invoices = invoices

    @property
    def created(self):
        """Gets the created of this TimeResponse.  # noqa: E501


        :return: The created of this TimeResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this TimeResponse.


        :param created: The created of this TimeResponse.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def periods(self):
        """Gets the periods of this TimeResponse.  # noqa: E501


        :return: The periods of this TimeResponse.  # noqa: E501
        :rtype: int
        """
        return self._periods

    @periods.setter
    def periods(self, periods):
        """Sets the periods of this TimeResponse.


        :param periods: The periods of this TimeResponse.  # noqa: E501
        :type: int
        """

        self._periods = periods

    @property
    def to(self):
        """Gets the to of this TimeResponse.  # noqa: E501


        :return: The to of this TimeResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this TimeResponse.


        :param to: The to of this TimeResponse.  # noqa: E501
        :type: datetime
        """

        self._to = to

    @property
    def dry_run(self):
        """Gets the dry_run of this TimeResponse.  # noqa: E501


        :return: The dry_run of this TimeResponse.  # noqa: E501
        :rtype: bool
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """Sets the dry_run of this TimeResponse.


        :param dry_run: The dry_run of this TimeResponse.  # noqa: E501
        :type: bool
        """

        self._dry_run = dry_run

    @property
    def skip_intermediate_periods(self):
        """Gets the skip_intermediate_periods of this TimeResponse.  # noqa: E501


        :return: The skip_intermediate_periods of this TimeResponse.  # noqa: E501
        :rtype: bool
        """
        return self._skip_intermediate_periods

    @skip_intermediate_periods.setter
    def skip_intermediate_periods(self, skip_intermediate_periods):
        """Sets the skip_intermediate_periods of this TimeResponse.


        :param skip_intermediate_periods: The skip_intermediate_periods of this TimeResponse.  # noqa: E501
        :type: bool
        """

        self._skip_intermediate_periods = skip_intermediate_periods

    @property
    def handle_child_subscriptions(self):
        """Gets the handle_child_subscriptions of this TimeResponse.  # noqa: E501


        :return: The handle_child_subscriptions of this TimeResponse.  # noqa: E501
        :rtype: bool
        """
        return self._handle_child_subscriptions

    @handle_child_subscriptions.setter
    def handle_child_subscriptions(self, handle_child_subscriptions):
        """Sets the handle_child_subscriptions of this TimeResponse.


        :param handle_child_subscriptions: The handle_child_subscriptions of this TimeResponse.  # noqa: E501
        :type: bool
        """

        self._handle_child_subscriptions = handle_child_subscriptions

    @property
    def handle_amendments(self):
        """Gets the handle_amendments of this TimeResponse.  # noqa: E501


        :return: The handle_amendments of this TimeResponse.  # noqa: E501
        :rtype: bool
        """
        return self._handle_amendments

    @handle_amendments.setter
    def handle_amendments(self, handle_amendments):
        """Sets the handle_amendments of this TimeResponse.


        :param handle_amendments: The handle_amendments of this TimeResponse.  # noqa: E501
        :type: bool
        """

        self._handle_amendments = handle_amendments

    @property
    def execution_strategy(self):
        """Gets the execution_strategy of this TimeResponse.  # noqa: E501


        :return: The execution_strategy of this TimeResponse.  # noqa: E501
        :rtype: str
        """
        return self._execution_strategy

    @execution_strategy.setter
    def execution_strategy(self, execution_strategy):
        """Sets the execution_strategy of this TimeResponse.


        :param execution_strategy: The execution_strategy of this TimeResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["SingleAttempt", "FollowDunning", "None"]  # noqa: E501
        if execution_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `execution_strategy` ({0}), must be one of {1}"  # noqa: E501
                .format(execution_strategy, allowed_values)
            )

        self._execution_strategy = execution_strategy

    @property
    def freeze_on_completion(self):
        """Gets the freeze_on_completion of this TimeResponse.  # noqa: E501


        :return: The freeze_on_completion of this TimeResponse.  # noqa: E501
        :rtype: bool
        """
        return self._freeze_on_completion

    @freeze_on_completion.setter
    def freeze_on_completion(self, freeze_on_completion):
        """Sets the freeze_on_completion of this TimeResponse.


        :param freeze_on_completion: The freeze_on_completion of this TimeResponse.  # noqa: E501
        :type: bool
        """

        self._freeze_on_completion = freeze_on_completion

    @property
    def organization_id(self):
        """Gets the organization_id of this TimeResponse.  # noqa: E501


        :return: The organization_id of this TimeResponse.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this TimeResponse.


        :param organization_id: The organization_id of this TimeResponse.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this TimeResponse.  # noqa: E501


        :return: The subscription_id of this TimeResponse.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this TimeResponse.


        :param subscription_id: The subscription_id of this TimeResponse.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def advance_inclusively(self):
        """Gets the advance_inclusively of this TimeResponse.  # noqa: E501


        :return: The advance_inclusively of this TimeResponse.  # noqa: E501
        :rtype: bool
        """
        return self._advance_inclusively

    @advance_inclusively.setter
    def advance_inclusively(self, advance_inclusively):
        """Sets the advance_inclusively of this TimeResponse.


        :param advance_inclusively: The advance_inclusively of this TimeResponse.  # noqa: E501
        :type: bool
        """

        self._advance_inclusively = advance_inclusively

    @property
    def subscriptions(self):
        """Gets the subscriptions of this TimeResponse.  # noqa: E501


        :return: The subscriptions of this TimeResponse.  # noqa: E501
        :rtype: list[Subscription]
        """
        return self._subscriptions

    @subscriptions.setter
    def subscriptions(self, subscriptions):
        """Sets the subscriptions of this TimeResponse.


        :param subscriptions: The subscriptions of this TimeResponse.  # noqa: E501
        :type: list[Subscription]
        """

        self._subscriptions = subscriptions

    @property
    def invoices(self):
        """Gets the invoices of this TimeResponse.  # noqa: E501


        :return: The invoices of this TimeResponse.  # noqa: E501
        :rtype: list[Invoice]
        """
        return self._invoices

    @invoices.setter
    def invoices(self, invoices):
        """Sets the invoices of this TimeResponse.


        :param invoices: The invoices of this TimeResponse.  # noqa: E501
        :type: list[Invoice]
        """

        self._invoices = invoices

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
