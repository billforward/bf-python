# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SingleRecalculateChargeRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'id': 'str',
        'organization_id': 'str',
        'name': 'str',
        'description': 'str',
        'quantity_label': 'str',
        'amount': 'float',
        'invoicing_type': 'str',
        'pricing_component_value': 'int',
        'recalculation_behaviour': 'str'
    }

    attribute_map = {
        'created': 'created',
        'id': 'id',
        'organization_id': 'organizationID',
        'name': 'name',
        'description': 'description',
        'quantity_label': 'quantityLabel',
        'amount': 'amount',
        'invoicing_type': 'invoicingType',
        'pricing_component_value': 'pricingComponentValue',
        'recalculation_behaviour': 'recalculationBehaviour'
    }

    def __init__(self, created=None, id=None, organization_id=None, name=None, description=None, quantity_label=None, amount=None, invoicing_type=None, pricing_component_value=None, recalculation_behaviour=None):  # noqa: E501
        """SingleRecalculateChargeRequest - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._id = None
        self._organization_id = None
        self._name = None
        self._description = None
        self._quantity_label = None
        self._amount = None
        self._invoicing_type = None
        self._pricing_component_value = None
        self._recalculation_behaviour = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if id is not None:
            self.id = id
        if organization_id is not None:
            self.organization_id = organization_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if quantity_label is not None:
            self.quantity_label = quantity_label
        if amount is not None:
            self.amount = amount
        if invoicing_type is not None:
            self.invoicing_type = invoicing_type
        if pricing_component_value is not None:
            self.pricing_component_value = pricing_component_value
        self.recalculation_behaviour = recalculation_behaviour

    @property
    def created(self):
        """Gets the created of this SingleRecalculateChargeRequest.  # noqa: E501


        :return: The created of this SingleRecalculateChargeRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this SingleRecalculateChargeRequest.


        :param created: The created of this SingleRecalculateChargeRequest.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def id(self):
        """Gets the id of this SingleRecalculateChargeRequest.  # noqa: E501


        :return: The id of this SingleRecalculateChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SingleRecalculateChargeRequest.


        :param id: The id of this SingleRecalculateChargeRequest.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def organization_id(self):
        """Gets the organization_id of this SingleRecalculateChargeRequest.  # noqa: E501


        :return: The organization_id of this SingleRecalculateChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this SingleRecalculateChargeRequest.


        :param organization_id: The organization_id of this SingleRecalculateChargeRequest.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def name(self):
        """Gets the name of this SingleRecalculateChargeRequest.  # noqa: E501


        :return: The name of this SingleRecalculateChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SingleRecalculateChargeRequest.


        :param name: The name of this SingleRecalculateChargeRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this SingleRecalculateChargeRequest.  # noqa: E501


        :return: The description of this SingleRecalculateChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SingleRecalculateChargeRequest.


        :param description: The description of this SingleRecalculateChargeRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def quantity_label(self):
        """Gets the quantity_label of this SingleRecalculateChargeRequest.  # noqa: E501


        :return: The quantity_label of this SingleRecalculateChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._quantity_label

    @quantity_label.setter
    def quantity_label(self, quantity_label):
        """Sets the quantity_label of this SingleRecalculateChargeRequest.


        :param quantity_label: The quantity_label of this SingleRecalculateChargeRequest.  # noqa: E501
        :type: str
        """

        self._quantity_label = quantity_label

    @property
    def amount(self):
        """Gets the amount of this SingleRecalculateChargeRequest.  # noqa: E501


        :return: The amount of this SingleRecalculateChargeRequest.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this SingleRecalculateChargeRequest.


        :param amount: The amount of this SingleRecalculateChargeRequest.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def invoicing_type(self):
        """Gets the invoicing_type of this SingleRecalculateChargeRequest.  # noqa: E501


        :return: The invoicing_type of this SingleRecalculateChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._invoicing_type

    @invoicing_type.setter
    def invoicing_type(self, invoicing_type):
        """Sets the invoicing_type of this SingleRecalculateChargeRequest.


        :param invoicing_type: The invoicing_type of this SingleRecalculateChargeRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Immediate", "Aggregated"]  # noqa: E501
        if invoicing_type not in allowed_values:
            raise ValueError(
                "Invalid value for `invoicing_type` ({0}), must be one of {1}"  # noqa: E501
                .format(invoicing_type, allowed_values)
            )

        self._invoicing_type = invoicing_type

    @property
    def pricing_component_value(self):
        """Gets the pricing_component_value of this SingleRecalculateChargeRequest.  # noqa: E501


        :return: The pricing_component_value of this SingleRecalculateChargeRequest.  # noqa: E501
        :rtype: int
        """
        return self._pricing_component_value

    @pricing_component_value.setter
    def pricing_component_value(self, pricing_component_value):
        """Sets the pricing_component_value of this SingleRecalculateChargeRequest.


        :param pricing_component_value: The pricing_component_value of this SingleRecalculateChargeRequest.  # noqa: E501
        :type: int
        """

        self._pricing_component_value = pricing_component_value

    @property
    def recalculation_behaviour(self):
        """Gets the recalculation_behaviour of this SingleRecalculateChargeRequest.  # noqa: E501


        :return: The recalculation_behaviour of this SingleRecalculateChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._recalculation_behaviour

    @recalculation_behaviour.setter
    def recalculation_behaviour(self, recalculation_behaviour):
        """Sets the recalculation_behaviour of this SingleRecalculateChargeRequest.


        :param recalculation_behaviour: The recalculation_behaviour of this SingleRecalculateChargeRequest.  # noqa: E501
        :type: str
        """
        if recalculation_behaviour is None:
            raise ValueError("Invalid value for `recalculation_behaviour`, must not be `None`")  # noqa: E501
        allowed_values = ["RecalculateWithLatestPricing", "RecalculateWithCurrentPricing"]  # noqa: E501
        if recalculation_behaviour not in allowed_values:
            raise ValueError(
                "Invalid value for `recalculation_behaviour` ({0}), must be one of {1}"  # noqa: E501
                .format(recalculation_behaviour, allowed_values)
            )

        self._recalculation_behaviour = recalculation_behaviour

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SingleRecalculateChargeRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SingleRecalculateChargeRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
