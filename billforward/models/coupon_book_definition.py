# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CouponBookDefinition(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, changed_by=None, updated=None, id=None, crm_id=None, organization_id=None, coupon_definition_id=None, name=None, description=None, minimum=None, maximum=None, step=None, definition_valid_from=None, definition_valid_till=None, instance_duration=None, instance_duration_period=None, state=None):
        """
        CouponBookDefinition - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'changed_by': 'str',
            'updated': 'datetime',
            'id': 'str',
            'crm_id': 'str',
            'organization_id': 'str',
            'coupon_definition_id': 'str',
            'name': 'str',
            'description': 'str',
            'minimum': 'int',
            'maximum': 'int',
            'step': 'int',
            'definition_valid_from': 'datetime',
            'definition_valid_till': 'datetime',
            'instance_duration': 'int',
            'instance_duration_period': 'str',
            'state': 'str'
        }

        self.attribute_map = {
            'created': 'created',
            'changed_by': 'changedBy',
            'updated': 'updated',
            'id': 'id',
            'crm_id': 'crmID',
            'organization_id': 'organizationID',
            'coupon_definition_id': 'couponDefinitionID',
            'name': 'name',
            'description': 'description',
            'minimum': 'minimum',
            'maximum': 'maximum',
            'step': 'step',
            'definition_valid_from': 'definitionValidFrom',
            'definition_valid_till': 'definitionValidTill',
            'instance_duration': 'instanceDuration',
            'instance_duration_period': 'instanceDurationPeriod',
            'state': 'state'
        }

        self._created = created
        self._changed_by = changed_by
        self._updated = updated
        self._id = id
        self._crm_id = crm_id
        self._organization_id = organization_id
        self._coupon_definition_id = coupon_definition_id
        self._name = name
        self._description = description
        self._minimum = minimum
        self._maximum = maximum
        self._step = step
        self._definition_valid_from = definition_valid_from
        self._definition_valid_till = definition_valid_till
        self._instance_duration = instance_duration
        self._instance_duration_period = instance_duration_period
        self._state = state

    @property
    def created(self):
        """
        Gets the created of this CouponBookDefinition.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this CouponBookDefinition.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this CouponBookDefinition.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this CouponBookDefinition.
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """
        Gets the changed_by of this CouponBookDefinition.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :return: The changed_by of this CouponBookDefinition.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """
        Sets the changed_by of this CouponBookDefinition.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :param changed_by: The changed_by of this CouponBookDefinition.
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """
        Gets the updated of this CouponBookDefinition.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :return: The updated of this CouponBookDefinition.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this CouponBookDefinition.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :param updated: The updated of this CouponBookDefinition.
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """
        Gets the id of this CouponBookDefinition.
        { \"description\" : \"ID of the coupon-book-definition.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The id of this CouponBookDefinition.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CouponBookDefinition.
        { \"description\" : \"ID of the coupon-book-definition.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param id: The id of this CouponBookDefinition.
        :type: str
        """

        self._id = id

    @property
    def crm_id(self):
        """
        Gets the crm_id of this CouponBookDefinition.
        { \"description\" : \"CRM ID of the product-rate-plan.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The crm_id of this CouponBookDefinition.
        :rtype: str
        """
        return self._crm_id

    @crm_id.setter
    def crm_id(self, crm_id):
        """
        Sets the crm_id of this CouponBookDefinition.
        { \"description\" : \"CRM ID of the product-rate-plan.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param crm_id: The crm_id of this CouponBookDefinition.
        :type: str
        """

        self._crm_id = crm_id

    @property
    def organization_id(self):
        """
        Gets the organization_id of this CouponBookDefinition.
        { \"description\" : \"Organization associated with the coupon-book-definition.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The organization_id of this CouponBookDefinition.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this CouponBookDefinition.
        { \"description\" : \"Organization associated with the coupon-book-definition.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param organization_id: The organization_id of this CouponBookDefinition.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def coupon_definition_id(self):
        """
        Gets the coupon_definition_id of this CouponBookDefinition.
        { \"description\" : \"The unique ID of the coupon-definition associated with the coupon-book-definition.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The coupon_definition_id of this CouponBookDefinition.
        :rtype: str
        """
        return self._coupon_definition_id

    @coupon_definition_id.setter
    def coupon_definition_id(self, coupon_definition_id):
        """
        Sets the coupon_definition_id of this CouponBookDefinition.
        { \"description\" : \"The unique ID of the coupon-definition associated with the coupon-book-definition.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param coupon_definition_id: The coupon_definition_id of this CouponBookDefinition.
        :type: str
        """

        self._coupon_definition_id = coupon_definition_id

    @property
    def name(self):
        """
        Gets the name of this CouponBookDefinition.
        { \"description\" : \"The human readable name of the coupon-book-definition.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The name of this CouponBookDefinition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CouponBookDefinition.
        { \"description\" : \"The human readable name of the coupon-book-definition.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param name: The name of this CouponBookDefinition.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this CouponBookDefinition.
        { \"description\" : \"The human readable description of the coupon-book-definition.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The description of this CouponBookDefinition.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this CouponBookDefinition.
        { \"description\" : \"The human readable description of the coupon-book-definition.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param description: The description of this CouponBookDefinition.
        :type: str
        """

        self._description = description

    @property
    def minimum(self):
        """
        Gets the minimum of this CouponBookDefinition.
        { \"description\" : \"The minimum number of coupon-instances a coupon-book can hold.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The minimum of this CouponBookDefinition.
        :rtype: int
        """
        return self._minimum

    @minimum.setter
    def minimum(self, minimum):
        """
        Sets the minimum of this CouponBookDefinition.
        { \"description\" : \"The minimum number of coupon-instances a coupon-book can hold.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param minimum: The minimum of this CouponBookDefinition.
        :type: int
        """

        self._minimum = minimum

    @property
    def maximum(self):
        """
        Gets the maximum of this CouponBookDefinition.
        { \"description\" : \"The maximum number of coupon-instances a coupon-book can hold.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The maximum of this CouponBookDefinition.
        :rtype: int
        """
        return self._maximum

    @maximum.setter
    def maximum(self, maximum):
        """
        Sets the maximum of this CouponBookDefinition.
        { \"description\" : \"The maximum number of coupon-instances a coupon-book can hold.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param maximum: The maximum of this CouponBookDefinition.
        :type: int
        """

        self._maximum = maximum

    @property
    def step(self):
        """
        Gets the step of this CouponBookDefinition.
        { \"description\" : \"The stepping parameter between the minimum and the maximum value. E.g. if the minimum is 100, the maximum is 150, and the step is 10, this means the coupon-books can hold 100, 110, 120, 130, 140 or 150 coupon-instances.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The step of this CouponBookDefinition.
        :rtype: int
        """
        return self._step

    @step.setter
    def step(self, step):
        """
        Sets the step of this CouponBookDefinition.
        { \"description\" : \"The stepping parameter between the minimum and the maximum value. E.g. if the minimum is 100, the maximum is 150, and the step is 10, this means the coupon-books can hold 100, 110, 120, 130, 140 or 150 coupon-instances.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param step: The step of this CouponBookDefinition.
        :type: int
        """

        self._step = step

    @property
    def definition_valid_from(self):
        """
        Gets the definition_valid_from of this CouponBookDefinition.
        { \"description\" : \"The UTC DateTime that the coupon-book-definition is valid from.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The definition_valid_from of this CouponBookDefinition.
        :rtype: datetime
        """
        return self._definition_valid_from

    @definition_valid_from.setter
    def definition_valid_from(self, definition_valid_from):
        """
        Sets the definition_valid_from of this CouponBookDefinition.
        { \"description\" : \"The UTC DateTime that the coupon-book-definition is valid from.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param definition_valid_from: The definition_valid_from of this CouponBookDefinition.
        :type: datetime
        """

        self._definition_valid_from = definition_valid_from

    @property
    def definition_valid_till(self):
        """
        Gets the definition_valid_till of this CouponBookDefinition.
        { \"description\" : \"The UTC DateTime that the coupon-book-definition is valid until.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The definition_valid_till of this CouponBookDefinition.
        :rtype: datetime
        """
        return self._definition_valid_till

    @definition_valid_till.setter
    def definition_valid_till(self, definition_valid_till):
        """
        Sets the definition_valid_till of this CouponBookDefinition.
        { \"description\" : \"The UTC DateTime that the coupon-book-definition is valid until.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param definition_valid_till: The definition_valid_till of this CouponBookDefinition.
        :type: datetime
        """

        self._definition_valid_till = definition_valid_till

    @property
    def instance_duration(self):
        """
        Gets the instance_duration of this CouponBookDefinition.
        { \"description\" : \"Reserved for future use.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The instance_duration of this CouponBookDefinition.
        :rtype: int
        """
        return self._instance_duration

    @instance_duration.setter
    def instance_duration(self, instance_duration):
        """
        Sets the instance_duration of this CouponBookDefinition.
        { \"description\" : \"Reserved for future use.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param instance_duration: The instance_duration of this CouponBookDefinition.
        :type: int
        """

        self._instance_duration = instance_duration

    @property
    def instance_duration_period(self):
        """
        Gets the instance_duration_period of this CouponBookDefinition.
        { \"description\" : \"Reserved for future use.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The instance_duration_period of this CouponBookDefinition.
        :rtype: str
        """
        return self._instance_duration_period

    @instance_duration_period.setter
    def instance_duration_period(self, instance_duration_period):
        """
        Sets the instance_duration_period of this CouponBookDefinition.
        { \"description\" : \"Reserved for future use.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param instance_duration_period: The instance_duration_period of this CouponBookDefinition.
        :type: str
        """
        allowed_values = ["minutes", "hours", "days", "months", "years"]
        if instance_duration_period not in allowed_values:
            raise ValueError(
                "Invalid value for `instance_duration_period` ({0}), must be one of {1}"
                .format(instance_duration_period, allowed_values)
            )

        self._instance_duration_period = instance_duration_period

    @property
    def state(self):
        """
        Gets the state of this CouponBookDefinition.
        { \"description\" : \"The current state of the coupon-book-definition.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The state of this CouponBookDefinition.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this CouponBookDefinition.
        { \"description\" : \"The current state of the coupon-book-definition.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param state: The state of this CouponBookDefinition.
        :type: str
        """
        allowed_values = ["development", "production", "deleted"]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
