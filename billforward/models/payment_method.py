# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class PaymentMethod(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, changed_by=None, updated=None, id=None, crm_id=None, account_id=None, organization_id=None, name=None, description=None, card_holder_name=None, expiry_date=None, card_type=None, country=None, province=None, first_six=None, last_four=None, expiry_year=None, expiry_month=None, link_id=None, gateway=None, ip_address=None, ip_address_country=None, state=None, deleted=False, default_payment_method=False):
        """
        PaymentMethod - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'changed_by': 'str',
            'updated': 'datetime',
            'id': 'str',
            'crm_id': 'str',
            'account_id': 'str',
            'organization_id': 'str',
            'name': 'str',
            'description': 'str',
            'card_holder_name': 'str',
            'expiry_date': 'str',
            'card_type': 'str',
            'country': 'str',
            'province': 'str',
            'first_six': 'str',
            'last_four': 'str',
            'expiry_year': 'int',
            'expiry_month': 'int',
            'link_id': 'str',
            'gateway': 'str',
            'ip_address': 'str',
            'ip_address_country': 'str',
            'state': 'str',
            'deleted': 'bool',
            'default_payment_method': 'bool'
        }

        self.attribute_map = {
            'created': 'created',
            'changed_by': 'changedBy',
            'updated': 'updated',
            'id': 'id',
            'crm_id': 'crmID',
            'account_id': 'accountID',
            'organization_id': 'organizationID',
            'name': 'name',
            'description': 'description',
            'card_holder_name': 'cardHolderName',
            'expiry_date': 'expiryDate',
            'card_type': 'cardType',
            'country': 'country',
            'province': 'province',
            'first_six': 'firstSix',
            'last_four': 'lastFour',
            'expiry_year': 'expiryYear',
            'expiry_month': 'expiryMonth',
            'link_id': 'linkID',
            'gateway': 'gateway',
            'ip_address': 'ipAddress',
            'ip_address_country': 'ipAddressCountry',
            'state': 'state',
            'deleted': 'deleted',
            'default_payment_method': 'defaultPaymentMethod'
        }

        self._created = created
        self._changed_by = changed_by
        self._updated = updated
        self._id = id
        self._crm_id = crm_id
        self._account_id = account_id
        self._organization_id = organization_id
        self._name = name
        self._description = description
        self._card_holder_name = card_holder_name
        self._expiry_date = expiry_date
        self._card_type = card_type
        self._country = country
        self._province = province
        self._first_six = first_six
        self._last_four = last_four
        self._expiry_year = expiry_year
        self._expiry_month = expiry_month
        self._link_id = link_id
        self._gateway = gateway
        self._ip_address = ip_address
        self._ip_address_country = ip_address_country
        self._state = state
        self._deleted = deleted
        self._default_payment_method = default_payment_method

    @property
    def created(self):
        """
        Gets the created of this PaymentMethod.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this PaymentMethod.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this PaymentMethod.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this PaymentMethod.
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """
        Gets the changed_by of this PaymentMethod.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :return: The changed_by of this PaymentMethod.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """
        Sets the changed_by of this PaymentMethod.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :param changed_by: The changed_by of this PaymentMethod.
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """
        Gets the updated of this PaymentMethod.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :return: The updated of this PaymentMethod.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this PaymentMethod.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :param updated: The updated of this PaymentMethod.
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """
        Gets the id of this PaymentMethod.
        { \"description\" : \"ID of the payment-method.\", \"verbs\":[\"GET\"] }

        :return: The id of this PaymentMethod.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PaymentMethod.
        { \"description\" : \"ID of the payment-method.\", \"verbs\":[\"GET\"] }

        :param id: The id of this PaymentMethod.
        :type: str
        """

        self._id = id

    @property
    def crm_id(self):
        """
        Gets the crm_id of this PaymentMethod.
        { \"description\" : \"CRM ID of the product-rate-plan.\", \"verbs\":] }

        :return: The crm_id of this PaymentMethod.
        :rtype: str
        """
        return self._crm_id

    @crm_id.setter
    def crm_id(self, crm_id):
        """
        Sets the crm_id of this PaymentMethod.
        { \"description\" : \"CRM ID of the product-rate-plan.\", \"verbs\":] }

        :param crm_id: The crm_id of this PaymentMethod.
        :type: str
        """

        self._crm_id = crm_id

    @property
    def account_id(self):
        """
        Gets the account_id of this PaymentMethod.
        { \"description\" : \"ID of the account associated with the payment-method.\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The account_id of this PaymentMethod.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """
        Sets the account_id of this PaymentMethod.
        { \"description\" : \"ID of the account associated with the payment-method.\", \"verbs\":[\"POST\",\"GET\"] }

        :param account_id: The account_id of this PaymentMethod.
        :type: str
        """

        self._account_id = account_id

    @property
    def organization_id(self):
        """
        Gets the organization_id of this PaymentMethod.


        :return: The organization_id of this PaymentMethod.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this PaymentMethod.


        :param organization_id: The organization_id of this PaymentMethod.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def name(self):
        """
        Gets the name of this PaymentMethod.
        { \"description\" : \"Name of the payment-method.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The name of this PaymentMethod.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this PaymentMethod.
        { \"description\" : \"Name of the payment-method.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param name: The name of this PaymentMethod.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this PaymentMethod.
        { \"description\" : \"Description of the payment-method.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The description of this PaymentMethod.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this PaymentMethod.
        { \"description\" : \"Description of the payment-method.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param description: The description of this PaymentMethod.
        :type: str
        """

        self._description = description

    @property
    def card_holder_name(self):
        """
        Gets the card_holder_name of this PaymentMethod.
        { \"description\" : \"Name of the card holder\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The card_holder_name of this PaymentMethod.
        :rtype: str
        """
        return self._card_holder_name

    @card_holder_name.setter
    def card_holder_name(self, card_holder_name):
        """
        Sets the card_holder_name of this PaymentMethod.
        { \"description\" : \"Name of the card holder\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param card_holder_name: The card_holder_name of this PaymentMethod.
        :type: str
        """

        self._card_holder_name = card_holder_name

    @property
    def expiry_date(self):
        """
        Gets the expiry_date of this PaymentMethod.
        { \"description\" : \"In the case of card payment methods this is the expiry date of the card, format should be MMYY including leading 0's. For example 0115 for January 2015.\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The expiry_date of this PaymentMethod.
        :rtype: str
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """
        Sets the expiry_date of this PaymentMethod.
        { \"description\" : \"In the case of card payment methods this is the expiry date of the card, format should be MMYY including leading 0's. For example 0115 for January 2015.\", \"verbs\":[\"POST\",\"GET\"] }

        :param expiry_date: The expiry_date of this PaymentMethod.
        :type: str
        """

        self._expiry_date = expiry_date

    @property
    def card_type(self):
        """
        Gets the card_type of this PaymentMethod.
        { \"description\" : \"Type of the card. In the case of card payment methods this is the payment type, for example VISA, MasterCard.\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The card_type of this PaymentMethod.
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """
        Sets the card_type of this PaymentMethod.
        { \"description\" : \"Type of the card. In the case of card payment methods this is the payment type, for example VISA, MasterCard.\", \"verbs\":[\"POST\",\"GET\"] }

        :param card_type: The card_type of this PaymentMethod.
        :type: str
        """

        self._card_type = card_type

    @property
    def country(self):
        """
        Gets the country of this PaymentMethod.


        :return: The country of this PaymentMethod.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this PaymentMethod.


        :param country: The country of this PaymentMethod.
        :type: str
        """

        self._country = country

    @property
    def province(self):
        """
        Gets the province of this PaymentMethod.


        :return: The province of this PaymentMethod.
        :rtype: str
        """
        return self._province

    @province.setter
    def province(self, province):
        """
        Sets the province of this PaymentMethod.


        :param province: The province of this PaymentMethod.
        :type: str
        """

        self._province = province

    @property
    def first_six(self):
        """
        Gets the first_six of this PaymentMethod.


        :return: The first_six of this PaymentMethod.
        :rtype: str
        """
        return self._first_six

    @first_six.setter
    def first_six(self, first_six):
        """
        Sets the first_six of this PaymentMethod.


        :param first_six: The first_six of this PaymentMethod.
        :type: str
        """

        self._first_six = first_six

    @property
    def last_four(self):
        """
        Gets the last_four of this PaymentMethod.


        :return: The last_four of this PaymentMethod.
        :rtype: str
        """
        return self._last_four

    @last_four.setter
    def last_four(self, last_four):
        """
        Sets the last_four of this PaymentMethod.


        :param last_four: The last_four of this PaymentMethod.
        :type: str
        """

        self._last_four = last_four

    @property
    def expiry_year(self):
        """
        Gets the expiry_year of this PaymentMethod.


        :return: The expiry_year of this PaymentMethod.
        :rtype: int
        """
        return self._expiry_year

    @expiry_year.setter
    def expiry_year(self, expiry_year):
        """
        Sets the expiry_year of this PaymentMethod.


        :param expiry_year: The expiry_year of this PaymentMethod.
        :type: int
        """

        self._expiry_year = expiry_year

    @property
    def expiry_month(self):
        """
        Gets the expiry_month of this PaymentMethod.


        :return: The expiry_month of this PaymentMethod.
        :rtype: int
        """
        return self._expiry_month

    @expiry_month.setter
    def expiry_month(self, expiry_month):
        """
        Sets the expiry_month of this PaymentMethod.


        :param expiry_month: The expiry_month of this PaymentMethod.
        :type: int
        """

        self._expiry_month = expiry_month

    @property
    def link_id(self):
        """
        Gets the link_id of this PaymentMethod.


        :return: The link_id of this PaymentMethod.
        :rtype: str
        """
        return self._link_id

    @link_id.setter
    def link_id(self, link_id):
        """
        Sets the link_id of this PaymentMethod.


        :param link_id: The link_id of this PaymentMethod.
        :type: str
        """

        self._link_id = link_id

    @property
    def gateway(self):
        """
        Gets the gateway of this PaymentMethod.
        { \"description\" : \"Gateway type for payment-method.\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The gateway of this PaymentMethod.
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """
        Sets the gateway of this PaymentMethod.
        { \"description\" : \"Gateway type for payment-method.\", \"verbs\":[\"POST\",\"GET\"] }

        :param gateway: The gateway of this PaymentMethod.
        :type: str
        """
        allowed_values = ["cybersource_token", "card_vault", "paypal_simple", "locustworld", "free", "coupon", "credit_note", "stripe", "braintree", "balanced", "paypal", "billforward_test", "offline", "trial", "stripeACH", "authorizeNet", "spreedly", "sagePay", "trustCommerce", "payvision", "kash"]
        if gateway not in allowed_values:
            raise ValueError(
                "Invalid value for `gateway` ({0}), must be one of {1}"
                .format(gateway, allowed_values)
            )

        self._gateway = gateway

    @property
    def ip_address(self):
        """
        Gets the ip_address of this PaymentMethod.
        {\"description\":\"IP address associated with this payment method.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :return: The ip_address of this PaymentMethod.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """
        Sets the ip_address of this PaymentMethod.
        {\"description\":\"IP address associated with this payment method.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :param ip_address: The ip_address of this PaymentMethod.
        :type: str
        """

        self._ip_address = ip_address

    @property
    def ip_address_country(self):
        """
        Gets the ip_address_country of this PaymentMethod.
        {\"description\":\"Country of the IP address associated with this payment method.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :return: The ip_address_country of this PaymentMethod.
        :rtype: str
        """
        return self._ip_address_country

    @ip_address_country.setter
    def ip_address_country(self, ip_address_country):
        """
        Sets the ip_address_country of this PaymentMethod.
        {\"description\":\"Country of the IP address associated with this payment method.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :param ip_address_country: The ip_address_country of this PaymentMethod.
        :type: str
        """

        self._ip_address_country = ip_address_country

    @property
    def state(self):
        """
        Gets the state of this PaymentMethod.
        { \"description\" : \"State of the payment-method.\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The state of this PaymentMethod.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this PaymentMethod.
        { \"description\" : \"State of the payment-method.\", \"verbs\":[\"POST\",\"GET\"] }

        :param state: The state of this PaymentMethod.
        :type: str
        """
        allowed_values = ["Pending", "Active", "Expiring", "Expired"]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def deleted(self):
        """
        Gets the deleted of this PaymentMethod.
        {\"default\" : \"false\", \"description\" : \"Indicates if a payment-method has been retired. If a payment-method has been retired it can still be retrieved using the appropriate flag on API requests. Generally payment-methods will be retired by customers wanting to remove the payment method from their account. Caution should be used when requested deleted payment methods.\", \"verbs\":[\"GET\"] }

        :return: The deleted of this PaymentMethod.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """
        Sets the deleted of this PaymentMethod.
        {\"default\" : \"false\", \"description\" : \"Indicates if a payment-method has been retired. If a payment-method has been retired it can still be retrieved using the appropriate flag on API requests. Generally payment-methods will be retired by customers wanting to remove the payment method from their account. Caution should be used when requested deleted payment methods.\", \"verbs\":[\"GET\"] }

        :param deleted: The deleted of this PaymentMethod.
        :type: bool
        """

        self._deleted = deleted

    @property
    def default_payment_method(self):
        """
        Gets the default_payment_method of this PaymentMethod.
        {\"default\" : \"false\", \"description\" : \"Indicates if this is the default payment method for the account.\", \"verbs\":[\"GET\",\"POST\",\"PUT\"]  }

        :return: The default_payment_method of this PaymentMethod.
        :rtype: bool
        """
        return self._default_payment_method

    @default_payment_method.setter
    def default_payment_method(self, default_payment_method):
        """
        Sets the default_payment_method of this PaymentMethod.
        {\"default\" : \"false\", \"description\" : \"Indicates if this is the default payment method for the account.\", \"verbs\":[\"GET\",\"POST\",\"PUT\"]  }

        :param default_payment_method: The default_payment_method of this PaymentMethod.
        :type: bool
        """

        self._default_payment_method = default_payment_method

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
