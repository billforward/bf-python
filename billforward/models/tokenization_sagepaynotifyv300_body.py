# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TokenizationSagepaynotifyv300Body(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vps_protocol': 'str',
        'tx_type': 'str',
        'vendor_tx_code': 'str',
        'status': 'str',
        'vps_tx_id': 'str',
        'card_type': 'str',
        'token': 'str',
        'status_detail': 'str',
        'last4_digits': 'str',
        'vps_signature': 'str',
        'expiry_date': 'str'
    }

    attribute_map = {
        'vps_protocol': 'VPSProtocol',
        'tx_type': 'TxType',
        'vendor_tx_code': 'VendorTxCode',
        'status': 'Status',
        'vps_tx_id': 'VPSTxId',
        'card_type': 'CardType',
        'token': 'Token',
        'status_detail': 'StatusDetail',
        'last4_digits': 'Last4Digits',
        'vps_signature': 'VPSSignature',
        'expiry_date': 'ExpiryDate'
    }

    def __init__(self, vps_protocol=None, tx_type=None, vendor_tx_code=None, status=None, vps_tx_id=None, card_type=None, token=None, status_detail=None, last4_digits=None, vps_signature=None, expiry_date=None):  # noqa: E501
        """TokenizationSagepaynotifyv300Body - a model defined in Swagger"""  # noqa: E501
        self._vps_protocol = None
        self._tx_type = None
        self._vendor_tx_code = None
        self._status = None
        self._vps_tx_id = None
        self._card_type = None
        self._token = None
        self._status_detail = None
        self._last4_digits = None
        self._vps_signature = None
        self._expiry_date = None
        self.discriminator = None
        if vps_protocol is not None:
            self.vps_protocol = vps_protocol
        if tx_type is not None:
            self.tx_type = tx_type
        if vendor_tx_code is not None:
            self.vendor_tx_code = vendor_tx_code
        if status is not None:
            self.status = status
        if vps_tx_id is not None:
            self.vps_tx_id = vps_tx_id
        if card_type is not None:
            self.card_type = card_type
        if token is not None:
            self.token = token
        if status_detail is not None:
            self.status_detail = status_detail
        if last4_digits is not None:
            self.last4_digits = last4_digits
        if vps_signature is not None:
            self.vps_signature = vps_signature
        if expiry_date is not None:
            self.expiry_date = expiry_date

    @property
    def vps_protocol(self):
        """Gets the vps_protocol of this TokenizationSagepaynotifyv300Body.  # noqa: E501


        :return: The vps_protocol of this TokenizationSagepaynotifyv300Body.  # noqa: E501
        :rtype: str
        """
        return self._vps_protocol

    @vps_protocol.setter
    def vps_protocol(self, vps_protocol):
        """Sets the vps_protocol of this TokenizationSagepaynotifyv300Body.


        :param vps_protocol: The vps_protocol of this TokenizationSagepaynotifyv300Body.  # noqa: E501
        :type: str
        """

        self._vps_protocol = vps_protocol

    @property
    def tx_type(self):
        """Gets the tx_type of this TokenizationSagepaynotifyv300Body.  # noqa: E501


        :return: The tx_type of this TokenizationSagepaynotifyv300Body.  # noqa: E501
        :rtype: str
        """
        return self._tx_type

    @tx_type.setter
    def tx_type(self, tx_type):
        """Sets the tx_type of this TokenizationSagepaynotifyv300Body.


        :param tx_type: The tx_type of this TokenizationSagepaynotifyv300Body.  # noqa: E501
        :type: str
        """

        self._tx_type = tx_type

    @property
    def vendor_tx_code(self):
        """Gets the vendor_tx_code of this TokenizationSagepaynotifyv300Body.  # noqa: E501


        :return: The vendor_tx_code of this TokenizationSagepaynotifyv300Body.  # noqa: E501
        :rtype: str
        """
        return self._vendor_tx_code

    @vendor_tx_code.setter
    def vendor_tx_code(self, vendor_tx_code):
        """Sets the vendor_tx_code of this TokenizationSagepaynotifyv300Body.


        :param vendor_tx_code: The vendor_tx_code of this TokenizationSagepaynotifyv300Body.  # noqa: E501
        :type: str
        """

        self._vendor_tx_code = vendor_tx_code

    @property
    def status(self):
        """Gets the status of this TokenizationSagepaynotifyv300Body.  # noqa: E501


        :return: The status of this TokenizationSagepaynotifyv300Body.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TokenizationSagepaynotifyv300Body.


        :param status: The status of this TokenizationSagepaynotifyv300Body.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def vps_tx_id(self):
        """Gets the vps_tx_id of this TokenizationSagepaynotifyv300Body.  # noqa: E501


        :return: The vps_tx_id of this TokenizationSagepaynotifyv300Body.  # noqa: E501
        :rtype: str
        """
        return self._vps_tx_id

    @vps_tx_id.setter
    def vps_tx_id(self, vps_tx_id):
        """Sets the vps_tx_id of this TokenizationSagepaynotifyv300Body.


        :param vps_tx_id: The vps_tx_id of this TokenizationSagepaynotifyv300Body.  # noqa: E501
        :type: str
        """

        self._vps_tx_id = vps_tx_id

    @property
    def card_type(self):
        """Gets the card_type of this TokenizationSagepaynotifyv300Body.  # noqa: E501


        :return: The card_type of this TokenizationSagepaynotifyv300Body.  # noqa: E501
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this TokenizationSagepaynotifyv300Body.


        :param card_type: The card_type of this TokenizationSagepaynotifyv300Body.  # noqa: E501
        :type: str
        """

        self._card_type = card_type

    @property
    def token(self):
        """Gets the token of this TokenizationSagepaynotifyv300Body.  # noqa: E501


        :return: The token of this TokenizationSagepaynotifyv300Body.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this TokenizationSagepaynotifyv300Body.


        :param token: The token of this TokenizationSagepaynotifyv300Body.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def status_detail(self):
        """Gets the status_detail of this TokenizationSagepaynotifyv300Body.  # noqa: E501


        :return: The status_detail of this TokenizationSagepaynotifyv300Body.  # noqa: E501
        :rtype: str
        """
        return self._status_detail

    @status_detail.setter
    def status_detail(self, status_detail):
        """Sets the status_detail of this TokenizationSagepaynotifyv300Body.


        :param status_detail: The status_detail of this TokenizationSagepaynotifyv300Body.  # noqa: E501
        :type: str
        """

        self._status_detail = status_detail

    @property
    def last4_digits(self):
        """Gets the last4_digits of this TokenizationSagepaynotifyv300Body.  # noqa: E501


        :return: The last4_digits of this TokenizationSagepaynotifyv300Body.  # noqa: E501
        :rtype: str
        """
        return self._last4_digits

    @last4_digits.setter
    def last4_digits(self, last4_digits):
        """Sets the last4_digits of this TokenizationSagepaynotifyv300Body.


        :param last4_digits: The last4_digits of this TokenizationSagepaynotifyv300Body.  # noqa: E501
        :type: str
        """

        self._last4_digits = last4_digits

    @property
    def vps_signature(self):
        """Gets the vps_signature of this TokenizationSagepaynotifyv300Body.  # noqa: E501


        :return: The vps_signature of this TokenizationSagepaynotifyv300Body.  # noqa: E501
        :rtype: str
        """
        return self._vps_signature

    @vps_signature.setter
    def vps_signature(self, vps_signature):
        """Sets the vps_signature of this TokenizationSagepaynotifyv300Body.


        :param vps_signature: The vps_signature of this TokenizationSagepaynotifyv300Body.  # noqa: E501
        :type: str
        """

        self._vps_signature = vps_signature

    @property
    def expiry_date(self):
        """Gets the expiry_date of this TokenizationSagepaynotifyv300Body.  # noqa: E501


        :return: The expiry_date of this TokenizationSagepaynotifyv300Body.  # noqa: E501
        :rtype: str
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this TokenizationSagepaynotifyv300Body.


        :param expiry_date: The expiry_date of this TokenizationSagepaynotifyv300Body.  # noqa: E501
        :type: str
        """

        self._expiry_date = expiry_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TokenizationSagepaynotifyv300Body, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TokenizationSagepaynotifyv300Body):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
