# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RevenueAttributions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'changed_by': 'str',
        'id': 'str',
        'organization_id': 'str',
        'invoice_id': 'str',
        'invoice_version_id': 'str',
        'child_invoice_version_id': 'str',
        'child_invoice_line_id': 'str',
        'currency': 'CreditNoteCurrency',
        'nominal_amount': 'float',
        'actual_amount': 'float',
        'pricing_component_id': 'str',
        'pricing_component_name': 'str',
        'product_rate_plan_id': 'str',
        'product_rate_plan_name': 'str',
        'product_rate_plan_name_public': 'str',
        'product_id': 'str',
        'product_name': 'str',
        'product_name_public': 'str',
        'child_subscription_id': 'str',
        'subscription_id': 'str',
        'account_id': 'str',
        'period_start': 'datetime',
        'period_end': 'datetime',
        'pricing_component_charge_type': 'str',
        'debit_quantity': 'int',
        'province': 'str',
        'country': 'str',
        'manual_charge_name': 'str'
    }

    attribute_map = {
        'created': 'created',
        'changed_by': 'changedBy',
        'id': 'id',
        'organization_id': 'organizationID',
        'invoice_id': 'invoiceID',
        'invoice_version_id': 'invoiceVersionID',
        'child_invoice_version_id': 'childInvoiceVersionID',
        'child_invoice_line_id': 'childInvoiceLineID',
        'currency': 'currency',
        'nominal_amount': 'nominalAmount',
        'actual_amount': 'actualAmount',
        'pricing_component_id': 'pricingComponentID',
        'pricing_component_name': 'pricingComponentName',
        'product_rate_plan_id': 'productRatePlanID',
        'product_rate_plan_name': 'productRatePlanName',
        'product_rate_plan_name_public': 'productRatePlanNamePublic',
        'product_id': 'productID',
        'product_name': 'productName',
        'product_name_public': 'productNamePublic',
        'child_subscription_id': 'childSubscriptionID',
        'subscription_id': 'subscriptionID',
        'account_id': 'accountID',
        'period_start': 'periodStart',
        'period_end': 'periodEnd',
        'pricing_component_charge_type': 'pricingComponentChargeType',
        'debit_quantity': 'debitQuantity',
        'province': 'province',
        'country': 'country',
        'manual_charge_name': 'manualChargeName'
    }

    def __init__(self, created=None, changed_by=None, id=None, organization_id=None, invoice_id=None, invoice_version_id=None, child_invoice_version_id=None, child_invoice_line_id=None, currency=None, nominal_amount=None, actual_amount=None, pricing_component_id=None, pricing_component_name=None, product_rate_plan_id=None, product_rate_plan_name=None, product_rate_plan_name_public=None, product_id=None, product_name=None, product_name_public=None, child_subscription_id=None, subscription_id=None, account_id=None, period_start=None, period_end=None, pricing_component_charge_type=None, debit_quantity=None, province=None, country=None, manual_charge_name=None):  # noqa: E501
        """RevenueAttributions - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._changed_by = None
        self._id = None
        self._organization_id = None
        self._invoice_id = None
        self._invoice_version_id = None
        self._child_invoice_version_id = None
        self._child_invoice_line_id = None
        self._currency = None
        self._nominal_amount = None
        self._actual_amount = None
        self._pricing_component_id = None
        self._pricing_component_name = None
        self._product_rate_plan_id = None
        self._product_rate_plan_name = None
        self._product_rate_plan_name_public = None
        self._product_id = None
        self._product_name = None
        self._product_name_public = None
        self._child_subscription_id = None
        self._subscription_id = None
        self._account_id = None
        self._period_start = None
        self._period_end = None
        self._pricing_component_charge_type = None
        self._debit_quantity = None
        self._province = None
        self._country = None
        self._manual_charge_name = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if changed_by is not None:
            self.changed_by = changed_by
        if id is not None:
            self.id = id
        self.organization_id = organization_id
        self.invoice_id = invoice_id
        self.invoice_version_id = invoice_version_id
        self.child_invoice_version_id = child_invoice_version_id
        if child_invoice_line_id is not None:
            self.child_invoice_line_id = child_invoice_line_id
        self.currency = currency
        self.nominal_amount = nominal_amount
        self.actual_amount = actual_amount
        if pricing_component_id is not None:
            self.pricing_component_id = pricing_component_id
        if pricing_component_name is not None:
            self.pricing_component_name = pricing_component_name
        if product_rate_plan_id is not None:
            self.product_rate_plan_id = product_rate_plan_id
        if product_rate_plan_name is not None:
            self.product_rate_plan_name = product_rate_plan_name
        if product_rate_plan_name_public is not None:
            self.product_rate_plan_name_public = product_rate_plan_name_public
        if product_id is not None:
            self.product_id = product_id
        if product_name is not None:
            self.product_name = product_name
        if product_name_public is not None:
            self.product_name_public = product_name_public
        if child_subscription_id is not None:
            self.child_subscription_id = child_subscription_id
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if account_id is not None:
            self.account_id = account_id
        self.period_start = period_start
        self.period_end = period_end
        if pricing_component_charge_type is not None:
            self.pricing_component_charge_type = pricing_component_charge_type
        if debit_quantity is not None:
            self.debit_quantity = debit_quantity
        if province is not None:
            self.province = province
        if country is not None:
            self.country = country
        if manual_charge_name is not None:
            self.manual_charge_name = manual_charge_name

    @property
    def created(self):
        """Gets the created of this RevenueAttributions.  # noqa: E501


        :return: The created of this RevenueAttributions.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this RevenueAttributions.


        :param created: The created of this RevenueAttributions.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """Gets the changed_by of this RevenueAttributions.  # noqa: E501


        :return: The changed_by of this RevenueAttributions.  # noqa: E501
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """Sets the changed_by of this RevenueAttributions.


        :param changed_by: The changed_by of this RevenueAttributions.  # noqa: E501
        :type: str
        """

        self._changed_by = changed_by

    @property
    def id(self):
        """Gets the id of this RevenueAttributions.  # noqa: E501


        :return: The id of this RevenueAttributions.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RevenueAttributions.


        :param id: The id of this RevenueAttributions.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def organization_id(self):
        """Gets the organization_id of this RevenueAttributions.  # noqa: E501


        :return: The organization_id of this RevenueAttributions.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this RevenueAttributions.


        :param organization_id: The organization_id of this RevenueAttributions.  # noqa: E501
        :type: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")  # noqa: E501

        self._organization_id = organization_id

    @property
    def invoice_id(self):
        """Gets the invoice_id of this RevenueAttributions.  # noqa: E501


        :return: The invoice_id of this RevenueAttributions.  # noqa: E501
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this RevenueAttributions.


        :param invoice_id: The invoice_id of this RevenueAttributions.  # noqa: E501
        :type: str
        """
        if invoice_id is None:
            raise ValueError("Invalid value for `invoice_id`, must not be `None`")  # noqa: E501

        self._invoice_id = invoice_id

    @property
    def invoice_version_id(self):
        """Gets the invoice_version_id of this RevenueAttributions.  # noqa: E501


        :return: The invoice_version_id of this RevenueAttributions.  # noqa: E501
        :rtype: str
        """
        return self._invoice_version_id

    @invoice_version_id.setter
    def invoice_version_id(self, invoice_version_id):
        """Sets the invoice_version_id of this RevenueAttributions.


        :param invoice_version_id: The invoice_version_id of this RevenueAttributions.  # noqa: E501
        :type: str
        """
        if invoice_version_id is None:
            raise ValueError("Invalid value for `invoice_version_id`, must not be `None`")  # noqa: E501

        self._invoice_version_id = invoice_version_id

    @property
    def child_invoice_version_id(self):
        """Gets the child_invoice_version_id of this RevenueAttributions.  # noqa: E501


        :return: The child_invoice_version_id of this RevenueAttributions.  # noqa: E501
        :rtype: str
        """
        return self._child_invoice_version_id

    @child_invoice_version_id.setter
    def child_invoice_version_id(self, child_invoice_version_id):
        """Sets the child_invoice_version_id of this RevenueAttributions.


        :param child_invoice_version_id: The child_invoice_version_id of this RevenueAttributions.  # noqa: E501
        :type: str
        """
        if child_invoice_version_id is None:
            raise ValueError("Invalid value for `child_invoice_version_id`, must not be `None`")  # noqa: E501

        self._child_invoice_version_id = child_invoice_version_id

    @property
    def child_invoice_line_id(self):
        """Gets the child_invoice_line_id of this RevenueAttributions.  # noqa: E501


        :return: The child_invoice_line_id of this RevenueAttributions.  # noqa: E501
        :rtype: str
        """
        return self._child_invoice_line_id

    @child_invoice_line_id.setter
    def child_invoice_line_id(self, child_invoice_line_id):
        """Sets the child_invoice_line_id of this RevenueAttributions.


        :param child_invoice_line_id: The child_invoice_line_id of this RevenueAttributions.  # noqa: E501
        :type: str
        """

        self._child_invoice_line_id = child_invoice_line_id

    @property
    def currency(self):
        """Gets the currency of this RevenueAttributions.  # noqa: E501


        :return: The currency of this RevenueAttributions.  # noqa: E501
        :rtype: CreditNoteCurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this RevenueAttributions.


        :param currency: The currency of this RevenueAttributions.  # noqa: E501
        :type: CreditNoteCurrency
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def nominal_amount(self):
        """Gets the nominal_amount of this RevenueAttributions.  # noqa: E501


        :return: The nominal_amount of this RevenueAttributions.  # noqa: E501
        :rtype: float
        """
        return self._nominal_amount

    @nominal_amount.setter
    def nominal_amount(self, nominal_amount):
        """Sets the nominal_amount of this RevenueAttributions.


        :param nominal_amount: The nominal_amount of this RevenueAttributions.  # noqa: E501
        :type: float
        """
        if nominal_amount is None:
            raise ValueError("Invalid value for `nominal_amount`, must not be `None`")  # noqa: E501

        self._nominal_amount = nominal_amount

    @property
    def actual_amount(self):
        """Gets the actual_amount of this RevenueAttributions.  # noqa: E501


        :return: The actual_amount of this RevenueAttributions.  # noqa: E501
        :rtype: float
        """
        return self._actual_amount

    @actual_amount.setter
    def actual_amount(self, actual_amount):
        """Sets the actual_amount of this RevenueAttributions.


        :param actual_amount: The actual_amount of this RevenueAttributions.  # noqa: E501
        :type: float
        """
        if actual_amount is None:
            raise ValueError("Invalid value for `actual_amount`, must not be `None`")  # noqa: E501

        self._actual_amount = actual_amount

    @property
    def pricing_component_id(self):
        """Gets the pricing_component_id of this RevenueAttributions.  # noqa: E501


        :return: The pricing_component_id of this RevenueAttributions.  # noqa: E501
        :rtype: str
        """
        return self._pricing_component_id

    @pricing_component_id.setter
    def pricing_component_id(self, pricing_component_id):
        """Sets the pricing_component_id of this RevenueAttributions.


        :param pricing_component_id: The pricing_component_id of this RevenueAttributions.  # noqa: E501
        :type: str
        """

        self._pricing_component_id = pricing_component_id

    @property
    def pricing_component_name(self):
        """Gets the pricing_component_name of this RevenueAttributions.  # noqa: E501


        :return: The pricing_component_name of this RevenueAttributions.  # noqa: E501
        :rtype: str
        """
        return self._pricing_component_name

    @pricing_component_name.setter
    def pricing_component_name(self, pricing_component_name):
        """Sets the pricing_component_name of this RevenueAttributions.


        :param pricing_component_name: The pricing_component_name of this RevenueAttributions.  # noqa: E501
        :type: str
        """

        self._pricing_component_name = pricing_component_name

    @property
    def product_rate_plan_id(self):
        """Gets the product_rate_plan_id of this RevenueAttributions.  # noqa: E501


        :return: The product_rate_plan_id of this RevenueAttributions.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_id

    @product_rate_plan_id.setter
    def product_rate_plan_id(self, product_rate_plan_id):
        """Sets the product_rate_plan_id of this RevenueAttributions.


        :param product_rate_plan_id: The product_rate_plan_id of this RevenueAttributions.  # noqa: E501
        :type: str
        """

        self._product_rate_plan_id = product_rate_plan_id

    @property
    def product_rate_plan_name(self):
        """Gets the product_rate_plan_name of this RevenueAttributions.  # noqa: E501


        :return: The product_rate_plan_name of this RevenueAttributions.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_name

    @product_rate_plan_name.setter
    def product_rate_plan_name(self, product_rate_plan_name):
        """Sets the product_rate_plan_name of this RevenueAttributions.


        :param product_rate_plan_name: The product_rate_plan_name of this RevenueAttributions.  # noqa: E501
        :type: str
        """

        self._product_rate_plan_name = product_rate_plan_name

    @property
    def product_rate_plan_name_public(self):
        """Gets the product_rate_plan_name_public of this RevenueAttributions.  # noqa: E501


        :return: The product_rate_plan_name_public of this RevenueAttributions.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_name_public

    @product_rate_plan_name_public.setter
    def product_rate_plan_name_public(self, product_rate_plan_name_public):
        """Sets the product_rate_plan_name_public of this RevenueAttributions.


        :param product_rate_plan_name_public: The product_rate_plan_name_public of this RevenueAttributions.  # noqa: E501
        :type: str
        """

        self._product_rate_plan_name_public = product_rate_plan_name_public

    @property
    def product_id(self):
        """Gets the product_id of this RevenueAttributions.  # noqa: E501


        :return: The product_id of this RevenueAttributions.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this RevenueAttributions.


        :param product_id: The product_id of this RevenueAttributions.  # noqa: E501
        :type: str
        """

        self._product_id = product_id

    @property
    def product_name(self):
        """Gets the product_name of this RevenueAttributions.  # noqa: E501


        :return: The product_name of this RevenueAttributions.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this RevenueAttributions.


        :param product_name: The product_name of this RevenueAttributions.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def product_name_public(self):
        """Gets the product_name_public of this RevenueAttributions.  # noqa: E501


        :return: The product_name_public of this RevenueAttributions.  # noqa: E501
        :rtype: str
        """
        return self._product_name_public

    @product_name_public.setter
    def product_name_public(self, product_name_public):
        """Sets the product_name_public of this RevenueAttributions.


        :param product_name_public: The product_name_public of this RevenueAttributions.  # noqa: E501
        :type: str
        """

        self._product_name_public = product_name_public

    @property
    def child_subscription_id(self):
        """Gets the child_subscription_id of this RevenueAttributions.  # noqa: E501


        :return: The child_subscription_id of this RevenueAttributions.  # noqa: E501
        :rtype: str
        """
        return self._child_subscription_id

    @child_subscription_id.setter
    def child_subscription_id(self, child_subscription_id):
        """Sets the child_subscription_id of this RevenueAttributions.


        :param child_subscription_id: The child_subscription_id of this RevenueAttributions.  # noqa: E501
        :type: str
        """

        self._child_subscription_id = child_subscription_id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this RevenueAttributions.  # noqa: E501


        :return: The subscription_id of this RevenueAttributions.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this RevenueAttributions.


        :param subscription_id: The subscription_id of this RevenueAttributions.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def account_id(self):
        """Gets the account_id of this RevenueAttributions.  # noqa: E501


        :return: The account_id of this RevenueAttributions.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this RevenueAttributions.


        :param account_id: The account_id of this RevenueAttributions.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def period_start(self):
        """Gets the period_start of this RevenueAttributions.  # noqa: E501


        :return: The period_start of this RevenueAttributions.  # noqa: E501
        :rtype: datetime
        """
        return self._period_start

    @period_start.setter
    def period_start(self, period_start):
        """Sets the period_start of this RevenueAttributions.


        :param period_start: The period_start of this RevenueAttributions.  # noqa: E501
        :type: datetime
        """
        if period_start is None:
            raise ValueError("Invalid value for `period_start`, must not be `None`")  # noqa: E501

        self._period_start = period_start

    @property
    def period_end(self):
        """Gets the period_end of this RevenueAttributions.  # noqa: E501


        :return: The period_end of this RevenueAttributions.  # noqa: E501
        :rtype: datetime
        """
        return self._period_end

    @period_end.setter
    def period_end(self, period_end):
        """Sets the period_end of this RevenueAttributions.


        :param period_end: The period_end of this RevenueAttributions.  # noqa: E501
        :type: datetime
        """
        if period_end is None:
            raise ValueError("Invalid value for `period_end`, must not be `None`")  # noqa: E501

        self._period_end = period_end

    @property
    def pricing_component_charge_type(self):
        """Gets the pricing_component_charge_type of this RevenueAttributions.  # noqa: E501


        :return: The pricing_component_charge_type of this RevenueAttributions.  # noqa: E501
        :rtype: str
        """
        return self._pricing_component_charge_type

    @pricing_component_charge_type.setter
    def pricing_component_charge_type(self, pricing_component_charge_type):
        """Sets the pricing_component_charge_type of this RevenueAttributions.


        :param pricing_component_charge_type: The pricing_component_charge_type of this RevenueAttributions.  # noqa: E501
        :type: str
        """
        allowed_values = ["setup", "subscription", "arrears", "usage"]  # noqa: E501
        if pricing_component_charge_type not in allowed_values:
            raise ValueError(
                "Invalid value for `pricing_component_charge_type` ({0}), must be one of {1}"  # noqa: E501
                .format(pricing_component_charge_type, allowed_values)
            )

        self._pricing_component_charge_type = pricing_component_charge_type

    @property
    def debit_quantity(self):
        """Gets the debit_quantity of this RevenueAttributions.  # noqa: E501


        :return: The debit_quantity of this RevenueAttributions.  # noqa: E501
        :rtype: int
        """
        return self._debit_quantity

    @debit_quantity.setter
    def debit_quantity(self, debit_quantity):
        """Sets the debit_quantity of this RevenueAttributions.


        :param debit_quantity: The debit_quantity of this RevenueAttributions.  # noqa: E501
        :type: int
        """

        self._debit_quantity = debit_quantity

    @property
    def province(self):
        """Gets the province of this RevenueAttributions.  # noqa: E501


        :return: The province of this RevenueAttributions.  # noqa: E501
        :rtype: str
        """
        return self._province

    @province.setter
    def province(self, province):
        """Sets the province of this RevenueAttributions.


        :param province: The province of this RevenueAttributions.  # noqa: E501
        :type: str
        """

        self._province = province

    @property
    def country(self):
        """Gets the country of this RevenueAttributions.  # noqa: E501


        :return: The country of this RevenueAttributions.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this RevenueAttributions.


        :param country: The country of this RevenueAttributions.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def manual_charge_name(self):
        """Gets the manual_charge_name of this RevenueAttributions.  # noqa: E501


        :return: The manual_charge_name of this RevenueAttributions.  # noqa: E501
        :rtype: str
        """
        return self._manual_charge_name

    @manual_charge_name.setter
    def manual_charge_name(self, manual_charge_name):
        """Sets the manual_charge_name of this RevenueAttributions.


        :param manual_charge_name: The manual_charge_name of this RevenueAttributions.  # noqa: E501
        :type: str
        """

        self._manual_charge_name = manual_charge_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RevenueAttributions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RevenueAttributions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
