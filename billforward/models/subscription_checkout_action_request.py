# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SubscriptionCheckoutActionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'checkout': 'str',
        'account_id': 'str',
        'start': 'datetime',
        'coupon_codes': 'list[str]',
        'organization_id': 'str'
    }

    attribute_map = {
        'checkout': 'checkout',
        'account_id': 'accountID',
        'start': 'start',
        'coupon_codes': 'couponCodes',
        'organization_id': 'organizationID'
    }

    def __init__(self, checkout=None, account_id=None, start=None, coupon_codes=None, organization_id=None):  # noqa: E501
        """SubscriptionCheckoutActionRequest - a model defined in Swagger"""  # noqa: E501
        self._checkout = None
        self._account_id = None
        self._start = None
        self._coupon_codes = None
        self._organization_id = None
        self.discriminator = None
        if checkout is not None:
            self.checkout = checkout
        if account_id is not None:
            self.account_id = account_id
        if start is not None:
            self.start = start
        if coupon_codes is not None:
            self.coupon_codes = coupon_codes
        if organization_id is not None:
            self.organization_id = organization_id

    @property
    def checkout(self):
        """Gets the checkout of this SubscriptionCheckoutActionRequest.  # noqa: E501


        :return: The checkout of this SubscriptionCheckoutActionRequest.  # noqa: E501
        :rtype: str
        """
        return self._checkout

    @checkout.setter
    def checkout(self, checkout):
        """Sets the checkout of this SubscriptionCheckoutActionRequest.


        :param checkout: The checkout of this SubscriptionCheckoutActionRequest.  # noqa: E501
        :type: str
        """

        self._checkout = checkout

    @property
    def account_id(self):
        """Gets the account_id of this SubscriptionCheckoutActionRequest.  # noqa: E501


        :return: The account_id of this SubscriptionCheckoutActionRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this SubscriptionCheckoutActionRequest.


        :param account_id: The account_id of this SubscriptionCheckoutActionRequest.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def start(self):
        """Gets the start of this SubscriptionCheckoutActionRequest.  # noqa: E501


        :return: The start of this SubscriptionCheckoutActionRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this SubscriptionCheckoutActionRequest.


        :param start: The start of this SubscriptionCheckoutActionRequest.  # noqa: E501
        :type: datetime
        """

        self._start = start

    @property
    def coupon_codes(self):
        """Gets the coupon_codes of this SubscriptionCheckoutActionRequest.  # noqa: E501


        :return: The coupon_codes of this SubscriptionCheckoutActionRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._coupon_codes

    @coupon_codes.setter
    def coupon_codes(self, coupon_codes):
        """Sets the coupon_codes of this SubscriptionCheckoutActionRequest.


        :param coupon_codes: The coupon_codes of this SubscriptionCheckoutActionRequest.  # noqa: E501
        :type: list[str]
        """

        self._coupon_codes = coupon_codes

    @property
    def organization_id(self):
        """Gets the organization_id of this SubscriptionCheckoutActionRequest.  # noqa: E501


        :return: The organization_id of this SubscriptionCheckoutActionRequest.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this SubscriptionCheckoutActionRequest.


        :param organization_id: The organization_id of this SubscriptionCheckoutActionRequest.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubscriptionCheckoutActionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionCheckoutActionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
