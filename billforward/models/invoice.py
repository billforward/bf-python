# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Invoice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'changed_by': 'str',
        'updated': 'datetime',
        'metadata': 'dict(str, object)',
        'version_id': 'str',
        'id': 'str',
        'subscription_id': 'str',
        'subscription_version_id': 'str',
        'account_id': 'str',
        'organization_id': 'str',
        'parent_invoice_id': 'str',
        'name': 'str',
        'description': 'str',
        'state': 'str',
        'issued': 'datetime',
        'due': 'datetime',
        'period_start': 'datetime',
        'period_end': 'datetime',
        'deleted': 'bool',
        'total_execution_attempts': 'int',
        'last_execution_attempt': 'datetime',
        'next_execution_attempt': 'datetime',
        'final_execution_attempt': 'datetime',
        'payment_received': 'datetime',
        'currency': 'CreditNoteCurrency',
        'cost_excluding_tax': 'float',
        'invoice_cost': 'float',
        'non_discounted_cost': 'float',
        'non_discounted_cost_excluding_tax': 'float',
        'invoice_paid': 'float',
        'discount_amount': 'float',
        'discount_amount_excluding_tax': 'float',
        'invoice_refunded': 'float',
        'credit_rolled_over': 'float',
        'credit_rolled_over_excluding_tax': 'float',
        'type': 'str',
        'locked': 'str',
        'managed_by': 'str',
        'initial_invoice': 'bool',
        'processing': 'bool',
        'purchase_order': 'str',
        'version_number': 'int',
        'invoice_lines': 'list[InvoiceLines]',
        'tax_lines': 'list[TaxLine]',
        'invoice_payments': 'list[InvoicePayments]',
        'invoice_refunds': 'list[Refund]',
        'invoice_credit_notes': 'list[CreditNote]',
        'charges': 'list[SubscriptionCharge]',
        'payment_terms': 'int',
        'children': 'list[Invoice]',
        'executions': 'list[ExecutionReceiptResponse]',
        'total_invoice_cost': 'float',
        'zero_cost': 'bool',
        'c_rmid': 'str'
    }

    attribute_map = {
        'created': 'created',
        'changed_by': 'changedBy',
        'updated': 'updated',
        'metadata': 'metadata',
        'version_id': 'versionID',
        'id': 'id',
        'subscription_id': 'subscriptionID',
        'subscription_version_id': 'subscriptionVersionID',
        'account_id': 'accountID',
        'organization_id': 'organizationID',
        'parent_invoice_id': 'parentInvoiceID',
        'name': 'name',
        'description': 'description',
        'state': 'state',
        'issued': 'issued',
        'due': 'due',
        'period_start': 'periodStart',
        'period_end': 'periodEnd',
        'deleted': 'deleted',
        'total_execution_attempts': 'totalExecutionAttempts',
        'last_execution_attempt': 'lastExecutionAttempt',
        'next_execution_attempt': 'nextExecutionAttempt',
        'final_execution_attempt': 'finalExecutionAttempt',
        'payment_received': 'paymentReceived',
        'currency': 'currency',
        'cost_excluding_tax': 'costExcludingTax',
        'invoice_cost': 'invoiceCost',
        'non_discounted_cost': 'nonDiscountedCost',
        'non_discounted_cost_excluding_tax': 'nonDiscountedCostExcludingTax',
        'invoice_paid': 'invoicePaid',
        'discount_amount': 'discountAmount',
        'discount_amount_excluding_tax': 'discountAmountExcludingTax',
        'invoice_refunded': 'invoiceRefunded',
        'credit_rolled_over': 'creditRolledOver',
        'credit_rolled_over_excluding_tax': 'creditRolledOverExcludingTax',
        'type': 'type',
        'locked': 'locked',
        'managed_by': 'managedBy',
        'initial_invoice': 'initialInvoice',
        'processing': 'processing',
        'purchase_order': 'purchaseOrder',
        'version_number': 'versionNumber',
        'invoice_lines': 'invoiceLines',
        'tax_lines': 'taxLines',
        'invoice_payments': 'invoicePayments',
        'invoice_refunds': 'invoiceRefunds',
        'invoice_credit_notes': 'invoiceCreditNotes',
        'charges': 'charges',
        'payment_terms': 'paymentTerms',
        'children': 'children',
        'executions': 'executions',
        'total_invoice_cost': 'totalInvoiceCost',
        'zero_cost': 'zeroCost',
        'c_rmid': 'cRMID'
    }

    def __init__(self, created=None, changed_by=None, updated=None, metadata=None, version_id=None, id=None, subscription_id=None, subscription_version_id=None, account_id=None, organization_id=None, parent_invoice_id=None, name=None, description=None, state=None, issued=None, due=None, period_start=None, period_end=None, deleted=None, total_execution_attempts=None, last_execution_attempt=None, next_execution_attempt=None, final_execution_attempt=None, payment_received=None, currency=None, cost_excluding_tax=None, invoice_cost=None, non_discounted_cost=None, non_discounted_cost_excluding_tax=None, invoice_paid=None, discount_amount=None, discount_amount_excluding_tax=None, invoice_refunded=None, credit_rolled_over=None, credit_rolled_over_excluding_tax=None, type=None, locked=None, managed_by=None, initial_invoice=None, processing=None, purchase_order=None, version_number=None, invoice_lines=None, tax_lines=None, invoice_payments=None, invoice_refunds=None, invoice_credit_notes=None, charges=None, payment_terms=None, children=None, executions=None, total_invoice_cost=None, zero_cost=None, c_rmid=None):  # noqa: E501
        """Invoice - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._changed_by = None
        self._updated = None
        self._metadata = None
        self._version_id = None
        self._id = None
        self._subscription_id = None
        self._subscription_version_id = None
        self._account_id = None
        self._organization_id = None
        self._parent_invoice_id = None
        self._name = None
        self._description = None
        self._state = None
        self._issued = None
        self._due = None
        self._period_start = None
        self._period_end = None
        self._deleted = None
        self._total_execution_attempts = None
        self._last_execution_attempt = None
        self._next_execution_attempt = None
        self._final_execution_attempt = None
        self._payment_received = None
        self._currency = None
        self._cost_excluding_tax = None
        self._invoice_cost = None
        self._non_discounted_cost = None
        self._non_discounted_cost_excluding_tax = None
        self._invoice_paid = None
        self._discount_amount = None
        self._discount_amount_excluding_tax = None
        self._invoice_refunded = None
        self._credit_rolled_over = None
        self._credit_rolled_over_excluding_tax = None
        self._type = None
        self._locked = None
        self._managed_by = None
        self._initial_invoice = None
        self._processing = None
        self._purchase_order = None
        self._version_number = None
        self._invoice_lines = None
        self._tax_lines = None
        self._invoice_payments = None
        self._invoice_refunds = None
        self._invoice_credit_notes = None
        self._charges = None
        self._payment_terms = None
        self._children = None
        self._executions = None
        self._total_invoice_cost = None
        self._zero_cost = None
        self._c_rmid = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if changed_by is not None:
            self.changed_by = changed_by
        if updated is not None:
            self.updated = updated
        if metadata is not None:
            self.metadata = metadata
        if version_id is not None:
            self.version_id = version_id
        if id is not None:
            self.id = id
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if subscription_version_id is not None:
            self.subscription_version_id = subscription_version_id
        self.account_id = account_id
        self.organization_id = organization_id
        if parent_invoice_id is not None:
            self.parent_invoice_id = parent_invoice_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        self.state = state
        if issued is not None:
            self.issued = issued
        if due is not None:
            self.due = due
        if period_start is not None:
            self.period_start = period_start
        if period_end is not None:
            self.period_end = period_end
        self.deleted = deleted
        if total_execution_attempts is not None:
            self.total_execution_attempts = total_execution_attempts
        if last_execution_attempt is not None:
            self.last_execution_attempt = last_execution_attempt
        if next_execution_attempt is not None:
            self.next_execution_attempt = next_execution_attempt
        if final_execution_attempt is not None:
            self.final_execution_attempt = final_execution_attempt
        if payment_received is not None:
            self.payment_received = payment_received
        self.currency = currency
        self.cost_excluding_tax = cost_excluding_tax
        self.invoice_cost = invoice_cost
        if non_discounted_cost is not None:
            self.non_discounted_cost = non_discounted_cost
        if non_discounted_cost_excluding_tax is not None:
            self.non_discounted_cost_excluding_tax = non_discounted_cost_excluding_tax
        if invoice_paid is not None:
            self.invoice_paid = invoice_paid
        if discount_amount is not None:
            self.discount_amount = discount_amount
        if discount_amount_excluding_tax is not None:
            self.discount_amount_excluding_tax = discount_amount_excluding_tax
        if invoice_refunded is not None:
            self.invoice_refunded = invoice_refunded
        self.credit_rolled_over = credit_rolled_over
        if credit_rolled_over_excluding_tax is not None:
            self.credit_rolled_over_excluding_tax = credit_rolled_over_excluding_tax
        self.type = type
        if locked is not None:
            self.locked = locked
        if managed_by is not None:
            self.managed_by = managed_by
        self.initial_invoice = initial_invoice
        self.processing = processing
        if purchase_order is not None:
            self.purchase_order = purchase_order
        self.version_number = version_number
        if invoice_lines is not None:
            self.invoice_lines = invoice_lines
        if tax_lines is not None:
            self.tax_lines = tax_lines
        if invoice_payments is not None:
            self.invoice_payments = invoice_payments
        if invoice_refunds is not None:
            self.invoice_refunds = invoice_refunds
        if invoice_credit_notes is not None:
            self.invoice_credit_notes = invoice_credit_notes
        if charges is not None:
            self.charges = charges
        if payment_terms is not None:
            self.payment_terms = payment_terms
        if children is not None:
            self.children = children
        if executions is not None:
            self.executions = executions
        if total_invoice_cost is not None:
            self.total_invoice_cost = total_invoice_cost
        if zero_cost is not None:
            self.zero_cost = zero_cost
        if c_rmid is not None:
            self.c_rmid = c_rmid

    @property
    def created(self):
        """Gets the created of this Invoice.  # noqa: E501


        :return: The created of this Invoice.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Invoice.


        :param created: The created of this Invoice.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """Gets the changed_by of this Invoice.  # noqa: E501


        :return: The changed_by of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """Sets the changed_by of this Invoice.


        :param changed_by: The changed_by of this Invoice.  # noqa: E501
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """Gets the updated of this Invoice.  # noqa: E501


        :return: The updated of this Invoice.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Invoice.


        :param updated: The updated of this Invoice.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def metadata(self):
        """Gets the metadata of this Invoice.  # noqa: E501


        :return: The metadata of this Invoice.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Invoice.


        :param metadata: The metadata of this Invoice.  # noqa: E501
        :type: dict(str, object)
        """

        self._metadata = metadata

    @property
    def version_id(self):
        """Gets the version_id of this Invoice.  # noqa: E501


        :return: The version_id of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this Invoice.


        :param version_id: The version_id of this Invoice.  # noqa: E501
        :type: str
        """

        self._version_id = version_id

    @property
    def id(self):
        """Gets the id of this Invoice.  # noqa: E501


        :return: The id of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Invoice.


        :param id: The id of this Invoice.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this Invoice.  # noqa: E501


        :return: The subscription_id of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this Invoice.


        :param subscription_id: The subscription_id of this Invoice.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def subscription_version_id(self):
        """Gets the subscription_version_id of this Invoice.  # noqa: E501


        :return: The subscription_version_id of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._subscription_version_id

    @subscription_version_id.setter
    def subscription_version_id(self, subscription_version_id):
        """Sets the subscription_version_id of this Invoice.


        :param subscription_version_id: The subscription_version_id of this Invoice.  # noqa: E501
        :type: str
        """

        self._subscription_version_id = subscription_version_id

    @property
    def account_id(self):
        """Gets the account_id of this Invoice.  # noqa: E501


        :return: The account_id of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Invoice.


        :param account_id: The account_id of this Invoice.  # noqa: E501
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def organization_id(self):
        """Gets the organization_id of this Invoice.  # noqa: E501


        :return: The organization_id of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this Invoice.


        :param organization_id: The organization_id of this Invoice.  # noqa: E501
        :type: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")  # noqa: E501

        self._organization_id = organization_id

    @property
    def parent_invoice_id(self):
        """Gets the parent_invoice_id of this Invoice.  # noqa: E501


        :return: The parent_invoice_id of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._parent_invoice_id

    @parent_invoice_id.setter
    def parent_invoice_id(self, parent_invoice_id):
        """Sets the parent_invoice_id of this Invoice.


        :param parent_invoice_id: The parent_invoice_id of this Invoice.  # noqa: E501
        :type: str
        """

        self._parent_invoice_id = parent_invoice_id

    @property
    def name(self):
        """Gets the name of this Invoice.  # noqa: E501


        :return: The name of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Invoice.


        :param name: The name of this Invoice.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Invoice.  # noqa: E501


        :return: The description of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Invoice.


        :param description: The description of this Invoice.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def state(self):
        """Gets the state of this Invoice.  # noqa: E501


        :return: The state of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Invoice.


        :param state: The state of this Invoice.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["Paid", "Unpaid", "Pending", "Voided"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def issued(self):
        """Gets the issued of this Invoice.  # noqa: E501


        :return: The issued of this Invoice.  # noqa: E501
        :rtype: datetime
        """
        return self._issued

    @issued.setter
    def issued(self, issued):
        """Sets the issued of this Invoice.


        :param issued: The issued of this Invoice.  # noqa: E501
        :type: datetime
        """

        self._issued = issued

    @property
    def due(self):
        """Gets the due of this Invoice.  # noqa: E501


        :return: The due of this Invoice.  # noqa: E501
        :rtype: datetime
        """
        return self._due

    @due.setter
    def due(self, due):
        """Sets the due of this Invoice.


        :param due: The due of this Invoice.  # noqa: E501
        :type: datetime
        """

        self._due = due

    @property
    def period_start(self):
        """Gets the period_start of this Invoice.  # noqa: E501


        :return: The period_start of this Invoice.  # noqa: E501
        :rtype: datetime
        """
        return self._period_start

    @period_start.setter
    def period_start(self, period_start):
        """Sets the period_start of this Invoice.


        :param period_start: The period_start of this Invoice.  # noqa: E501
        :type: datetime
        """

        self._period_start = period_start

    @property
    def period_end(self):
        """Gets the period_end of this Invoice.  # noqa: E501


        :return: The period_end of this Invoice.  # noqa: E501
        :rtype: datetime
        """
        return self._period_end

    @period_end.setter
    def period_end(self, period_end):
        """Sets the period_end of this Invoice.


        :param period_end: The period_end of this Invoice.  # noqa: E501
        :type: datetime
        """

        self._period_end = period_end

    @property
    def deleted(self):
        """Gets the deleted of this Invoice.  # noqa: E501


        :return: The deleted of this Invoice.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Invoice.


        :param deleted: The deleted of this Invoice.  # noqa: E501
        :type: bool
        """
        if deleted is None:
            raise ValueError("Invalid value for `deleted`, must not be `None`")  # noqa: E501

        self._deleted = deleted

    @property
    def total_execution_attempts(self):
        """Gets the total_execution_attempts of this Invoice.  # noqa: E501


        :return: The total_execution_attempts of this Invoice.  # noqa: E501
        :rtype: int
        """
        return self._total_execution_attempts

    @total_execution_attempts.setter
    def total_execution_attempts(self, total_execution_attempts):
        """Sets the total_execution_attempts of this Invoice.


        :param total_execution_attempts: The total_execution_attempts of this Invoice.  # noqa: E501
        :type: int
        """

        self._total_execution_attempts = total_execution_attempts

    @property
    def last_execution_attempt(self):
        """Gets the last_execution_attempt of this Invoice.  # noqa: E501


        :return: The last_execution_attempt of this Invoice.  # noqa: E501
        :rtype: datetime
        """
        return self._last_execution_attempt

    @last_execution_attempt.setter
    def last_execution_attempt(self, last_execution_attempt):
        """Sets the last_execution_attempt of this Invoice.


        :param last_execution_attempt: The last_execution_attempt of this Invoice.  # noqa: E501
        :type: datetime
        """

        self._last_execution_attempt = last_execution_attempt

    @property
    def next_execution_attempt(self):
        """Gets the next_execution_attempt of this Invoice.  # noqa: E501


        :return: The next_execution_attempt of this Invoice.  # noqa: E501
        :rtype: datetime
        """
        return self._next_execution_attempt

    @next_execution_attempt.setter
    def next_execution_attempt(self, next_execution_attempt):
        """Sets the next_execution_attempt of this Invoice.


        :param next_execution_attempt: The next_execution_attempt of this Invoice.  # noqa: E501
        :type: datetime
        """

        self._next_execution_attempt = next_execution_attempt

    @property
    def final_execution_attempt(self):
        """Gets the final_execution_attempt of this Invoice.  # noqa: E501


        :return: The final_execution_attempt of this Invoice.  # noqa: E501
        :rtype: datetime
        """
        return self._final_execution_attempt

    @final_execution_attempt.setter
    def final_execution_attempt(self, final_execution_attempt):
        """Sets the final_execution_attempt of this Invoice.


        :param final_execution_attempt: The final_execution_attempt of this Invoice.  # noqa: E501
        :type: datetime
        """

        self._final_execution_attempt = final_execution_attempt

    @property
    def payment_received(self):
        """Gets the payment_received of this Invoice.  # noqa: E501


        :return: The payment_received of this Invoice.  # noqa: E501
        :rtype: datetime
        """
        return self._payment_received

    @payment_received.setter
    def payment_received(self, payment_received):
        """Sets the payment_received of this Invoice.


        :param payment_received: The payment_received of this Invoice.  # noqa: E501
        :type: datetime
        """

        self._payment_received = payment_received

    @property
    def currency(self):
        """Gets the currency of this Invoice.  # noqa: E501


        :return: The currency of this Invoice.  # noqa: E501
        :rtype: CreditNoteCurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Invoice.


        :param currency: The currency of this Invoice.  # noqa: E501
        :type: CreditNoteCurrency
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def cost_excluding_tax(self):
        """Gets the cost_excluding_tax of this Invoice.  # noqa: E501


        :return: The cost_excluding_tax of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._cost_excluding_tax

    @cost_excluding_tax.setter
    def cost_excluding_tax(self, cost_excluding_tax):
        """Sets the cost_excluding_tax of this Invoice.


        :param cost_excluding_tax: The cost_excluding_tax of this Invoice.  # noqa: E501
        :type: float
        """
        if cost_excluding_tax is None:
            raise ValueError("Invalid value for `cost_excluding_tax`, must not be `None`")  # noqa: E501

        self._cost_excluding_tax = cost_excluding_tax

    @property
    def invoice_cost(self):
        """Gets the invoice_cost of this Invoice.  # noqa: E501


        :return: The invoice_cost of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._invoice_cost

    @invoice_cost.setter
    def invoice_cost(self, invoice_cost):
        """Sets the invoice_cost of this Invoice.


        :param invoice_cost: The invoice_cost of this Invoice.  # noqa: E501
        :type: float
        """
        if invoice_cost is None:
            raise ValueError("Invalid value for `invoice_cost`, must not be `None`")  # noqa: E501

        self._invoice_cost = invoice_cost

    @property
    def non_discounted_cost(self):
        """Gets the non_discounted_cost of this Invoice.  # noqa: E501


        :return: The non_discounted_cost of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._non_discounted_cost

    @non_discounted_cost.setter
    def non_discounted_cost(self, non_discounted_cost):
        """Sets the non_discounted_cost of this Invoice.


        :param non_discounted_cost: The non_discounted_cost of this Invoice.  # noqa: E501
        :type: float
        """

        self._non_discounted_cost = non_discounted_cost

    @property
    def non_discounted_cost_excluding_tax(self):
        """Gets the non_discounted_cost_excluding_tax of this Invoice.  # noqa: E501


        :return: The non_discounted_cost_excluding_tax of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._non_discounted_cost_excluding_tax

    @non_discounted_cost_excluding_tax.setter
    def non_discounted_cost_excluding_tax(self, non_discounted_cost_excluding_tax):
        """Sets the non_discounted_cost_excluding_tax of this Invoice.


        :param non_discounted_cost_excluding_tax: The non_discounted_cost_excluding_tax of this Invoice.  # noqa: E501
        :type: float
        """

        self._non_discounted_cost_excluding_tax = non_discounted_cost_excluding_tax

    @property
    def invoice_paid(self):
        """Gets the invoice_paid of this Invoice.  # noqa: E501


        :return: The invoice_paid of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._invoice_paid

    @invoice_paid.setter
    def invoice_paid(self, invoice_paid):
        """Sets the invoice_paid of this Invoice.


        :param invoice_paid: The invoice_paid of this Invoice.  # noqa: E501
        :type: float
        """

        self._invoice_paid = invoice_paid

    @property
    def discount_amount(self):
        """Gets the discount_amount of this Invoice.  # noqa: E501


        :return: The discount_amount of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount):
        """Sets the discount_amount of this Invoice.


        :param discount_amount: The discount_amount of this Invoice.  # noqa: E501
        :type: float
        """

        self._discount_amount = discount_amount

    @property
    def discount_amount_excluding_tax(self):
        """Gets the discount_amount_excluding_tax of this Invoice.  # noqa: E501


        :return: The discount_amount_excluding_tax of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._discount_amount_excluding_tax

    @discount_amount_excluding_tax.setter
    def discount_amount_excluding_tax(self, discount_amount_excluding_tax):
        """Sets the discount_amount_excluding_tax of this Invoice.


        :param discount_amount_excluding_tax: The discount_amount_excluding_tax of this Invoice.  # noqa: E501
        :type: float
        """

        self._discount_amount_excluding_tax = discount_amount_excluding_tax

    @property
    def invoice_refunded(self):
        """Gets the invoice_refunded of this Invoice.  # noqa: E501


        :return: The invoice_refunded of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._invoice_refunded

    @invoice_refunded.setter
    def invoice_refunded(self, invoice_refunded):
        """Sets the invoice_refunded of this Invoice.


        :param invoice_refunded: The invoice_refunded of this Invoice.  # noqa: E501
        :type: float
        """

        self._invoice_refunded = invoice_refunded

    @property
    def credit_rolled_over(self):
        """Gets the credit_rolled_over of this Invoice.  # noqa: E501


        :return: The credit_rolled_over of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._credit_rolled_over

    @credit_rolled_over.setter
    def credit_rolled_over(self, credit_rolled_over):
        """Sets the credit_rolled_over of this Invoice.


        :param credit_rolled_over: The credit_rolled_over of this Invoice.  # noqa: E501
        :type: float
        """
        if credit_rolled_over is None:
            raise ValueError("Invalid value for `credit_rolled_over`, must not be `None`")  # noqa: E501

        self._credit_rolled_over = credit_rolled_over

    @property
    def credit_rolled_over_excluding_tax(self):
        """Gets the credit_rolled_over_excluding_tax of this Invoice.  # noqa: E501


        :return: The credit_rolled_over_excluding_tax of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._credit_rolled_over_excluding_tax

    @credit_rolled_over_excluding_tax.setter
    def credit_rolled_over_excluding_tax(self, credit_rolled_over_excluding_tax):
        """Sets the credit_rolled_over_excluding_tax of this Invoice.


        :param credit_rolled_over_excluding_tax: The credit_rolled_over_excluding_tax of this Invoice.  # noqa: E501
        :type: float
        """

        self._credit_rolled_over_excluding_tax = credit_rolled_over_excluding_tax

    @property
    def type(self):
        """Gets the type of this Invoice.  # noqa: E501


        :return: The type of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Invoice.


        :param type: The type of this Invoice.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["Subscription", "Trial", "Charge", "FinalArrears", "Amendment", "Aggregated", "AffiliateCommission"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def locked(self):
        """Gets the locked of this Invoice.  # noqa: E501


        :return: The locked of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this Invoice.


        :param locked: The locked of this Invoice.  # noqa: E501
        :type: str
        """

        self._locked = locked

    @property
    def managed_by(self):
        """Gets the managed_by of this Invoice.  # noqa: E501


        :return: The managed_by of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._managed_by

    @managed_by.setter
    def managed_by(self, managed_by):
        """Sets the managed_by of this Invoice.


        :param managed_by: The managed_by of this Invoice.  # noqa: E501
        :type: str
        """
        allowed_values = ["BillForward", "Stripe"]  # noqa: E501
        if managed_by not in allowed_values:
            raise ValueError(
                "Invalid value for `managed_by` ({0}), must be one of {1}"  # noqa: E501
                .format(managed_by, allowed_values)
            )

        self._managed_by = managed_by

    @property
    def initial_invoice(self):
        """Gets the initial_invoice of this Invoice.  # noqa: E501


        :return: The initial_invoice of this Invoice.  # noqa: E501
        :rtype: bool
        """
        return self._initial_invoice

    @initial_invoice.setter
    def initial_invoice(self, initial_invoice):
        """Sets the initial_invoice of this Invoice.


        :param initial_invoice: The initial_invoice of this Invoice.  # noqa: E501
        :type: bool
        """
        if initial_invoice is None:
            raise ValueError("Invalid value for `initial_invoice`, must not be `None`")  # noqa: E501

        self._initial_invoice = initial_invoice

    @property
    def processing(self):
        """Gets the processing of this Invoice.  # noqa: E501


        :return: The processing of this Invoice.  # noqa: E501
        :rtype: bool
        """
        return self._processing

    @processing.setter
    def processing(self, processing):
        """Sets the processing of this Invoice.


        :param processing: The processing of this Invoice.  # noqa: E501
        :type: bool
        """
        if processing is None:
            raise ValueError("Invalid value for `processing`, must not be `None`")  # noqa: E501

        self._processing = processing

    @property
    def purchase_order(self):
        """Gets the purchase_order of this Invoice.  # noqa: E501


        :return: The purchase_order of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._purchase_order

    @purchase_order.setter
    def purchase_order(self, purchase_order):
        """Sets the purchase_order of this Invoice.


        :param purchase_order: The purchase_order of this Invoice.  # noqa: E501
        :type: str
        """

        self._purchase_order = purchase_order

    @property
    def version_number(self):
        """Gets the version_number of this Invoice.  # noqa: E501


        :return: The version_number of this Invoice.  # noqa: E501
        :rtype: int
        """
        return self._version_number

    @version_number.setter
    def version_number(self, version_number):
        """Sets the version_number of this Invoice.


        :param version_number: The version_number of this Invoice.  # noqa: E501
        :type: int
        """
        if version_number is None:
            raise ValueError("Invalid value for `version_number`, must not be `None`")  # noqa: E501

        self._version_number = version_number

    @property
    def invoice_lines(self):
        """Gets the invoice_lines of this Invoice.  # noqa: E501


        :return: The invoice_lines of this Invoice.  # noqa: E501
        :rtype: list[InvoiceLines]
        """
        return self._invoice_lines

    @invoice_lines.setter
    def invoice_lines(self, invoice_lines):
        """Sets the invoice_lines of this Invoice.


        :param invoice_lines: The invoice_lines of this Invoice.  # noqa: E501
        :type: list[InvoiceLines]
        """

        self._invoice_lines = invoice_lines

    @property
    def tax_lines(self):
        """Gets the tax_lines of this Invoice.  # noqa: E501


        :return: The tax_lines of this Invoice.  # noqa: E501
        :rtype: list[TaxLine]
        """
        return self._tax_lines

    @tax_lines.setter
    def tax_lines(self, tax_lines):
        """Sets the tax_lines of this Invoice.


        :param tax_lines: The tax_lines of this Invoice.  # noqa: E501
        :type: list[TaxLine]
        """

        self._tax_lines = tax_lines

    @property
    def invoice_payments(self):
        """Gets the invoice_payments of this Invoice.  # noqa: E501


        :return: The invoice_payments of this Invoice.  # noqa: E501
        :rtype: list[InvoicePayments]
        """
        return self._invoice_payments

    @invoice_payments.setter
    def invoice_payments(self, invoice_payments):
        """Sets the invoice_payments of this Invoice.


        :param invoice_payments: The invoice_payments of this Invoice.  # noqa: E501
        :type: list[InvoicePayments]
        """

        self._invoice_payments = invoice_payments

    @property
    def invoice_refunds(self):
        """Gets the invoice_refunds of this Invoice.  # noqa: E501


        :return: The invoice_refunds of this Invoice.  # noqa: E501
        :rtype: list[Refund]
        """
        return self._invoice_refunds

    @invoice_refunds.setter
    def invoice_refunds(self, invoice_refunds):
        """Sets the invoice_refunds of this Invoice.


        :param invoice_refunds: The invoice_refunds of this Invoice.  # noqa: E501
        :type: list[Refund]
        """

        self._invoice_refunds = invoice_refunds

    @property
    def invoice_credit_notes(self):
        """Gets the invoice_credit_notes of this Invoice.  # noqa: E501


        :return: The invoice_credit_notes of this Invoice.  # noqa: E501
        :rtype: list[CreditNote]
        """
        return self._invoice_credit_notes

    @invoice_credit_notes.setter
    def invoice_credit_notes(self, invoice_credit_notes):
        """Sets the invoice_credit_notes of this Invoice.


        :param invoice_credit_notes: The invoice_credit_notes of this Invoice.  # noqa: E501
        :type: list[CreditNote]
        """

        self._invoice_credit_notes = invoice_credit_notes

    @property
    def charges(self):
        """Gets the charges of this Invoice.  # noqa: E501


        :return: The charges of this Invoice.  # noqa: E501
        :rtype: list[SubscriptionCharge]
        """
        return self._charges

    @charges.setter
    def charges(self, charges):
        """Sets the charges of this Invoice.


        :param charges: The charges of this Invoice.  # noqa: E501
        :type: list[SubscriptionCharge]
        """

        self._charges = charges

    @property
    def payment_terms(self):
        """Gets the payment_terms of this Invoice.  # noqa: E501


        :return: The payment_terms of this Invoice.  # noqa: E501
        :rtype: int
        """
        return self._payment_terms

    @payment_terms.setter
    def payment_terms(self, payment_terms):
        """Sets the payment_terms of this Invoice.


        :param payment_terms: The payment_terms of this Invoice.  # noqa: E501
        :type: int
        """

        self._payment_terms = payment_terms

    @property
    def children(self):
        """Gets the children of this Invoice.  # noqa: E501


        :return: The children of this Invoice.  # noqa: E501
        :rtype: list[Invoice]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this Invoice.


        :param children: The children of this Invoice.  # noqa: E501
        :type: list[Invoice]
        """

        self._children = children

    @property
    def executions(self):
        """Gets the executions of this Invoice.  # noqa: E501


        :return: The executions of this Invoice.  # noqa: E501
        :rtype: list[ExecutionReceiptResponse]
        """
        return self._executions

    @executions.setter
    def executions(self, executions):
        """Sets the executions of this Invoice.


        :param executions: The executions of this Invoice.  # noqa: E501
        :type: list[ExecutionReceiptResponse]
        """

        self._executions = executions

    @property
    def total_invoice_cost(self):
        """Gets the total_invoice_cost of this Invoice.  # noqa: E501


        :return: The total_invoice_cost of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._total_invoice_cost

    @total_invoice_cost.setter
    def total_invoice_cost(self, total_invoice_cost):
        """Sets the total_invoice_cost of this Invoice.


        :param total_invoice_cost: The total_invoice_cost of this Invoice.  # noqa: E501
        :type: float
        """

        self._total_invoice_cost = total_invoice_cost

    @property
    def zero_cost(self):
        """Gets the zero_cost of this Invoice.  # noqa: E501


        :return: The zero_cost of this Invoice.  # noqa: E501
        :rtype: bool
        """
        return self._zero_cost

    @zero_cost.setter
    def zero_cost(self, zero_cost):
        """Sets the zero_cost of this Invoice.


        :param zero_cost: The zero_cost of this Invoice.  # noqa: E501
        :type: bool
        """

        self._zero_cost = zero_cost

    @property
    def c_rmid(self):
        """Gets the c_rmid of this Invoice.  # noqa: E501


        :return: The c_rmid of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._c_rmid

    @c_rmid.setter
    def c_rmid(self, c_rmid):
        """Sets the c_rmid of this Invoice.


        :param c_rmid: The c_rmid of this Invoice.  # noqa: E501
        :type: str
        """

        self._c_rmid = c_rmid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Invoice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Invoice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
