# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Invoice(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, changed_by=None, updated=None, version_id=None, id=None, crm_id=None, subscription_id=None, subscription_version_id=None, account_id=None, organization_id=None, parent_invoice_id=None, name=None, description=None, state=None, issued=None, period_start=None, period_end=None, due=None, deleted=False, total_execution_attempts=None, last_execution_attempt=None, next_execution_attempt=None, final_execution_attempt=None, payment_received=None, currency=None, cost_excluding_tax=None, invoice_cost=None, non_discounted_cost=None, non_discounted_cost_excluding_tax=None, invoice_paid=None, discount_amount=None, discount_amount_excluding_tax=None, invoice_refunded=None, credit_rolled_over=None, credit_rolled_over_excluding_tax=None, type=None, locked=None, managed_by=None, initial_invoice=False, version_number=None, invoice_lines=None, tax_lines=None, invoice_payments=None, invoice_refunds=None, invoice_credit_notes=None, charges=None, children=None):
        """
        Invoice - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'changed_by': 'str',
            'updated': 'datetime',
            'version_id': 'str',
            'id': 'str',
            'crm_id': 'str',
            'subscription_id': 'str',
            'subscription_version_id': 'str',
            'account_id': 'str',
            'organization_id': 'str',
            'parent_invoice_id': 'str',
            'name': 'str',
            'description': 'str',
            'state': 'str',
            'issued': 'datetime',
            'period_start': 'datetime',
            'period_end': 'datetime',
            'due': 'datetime',
            'deleted': 'bool',
            'total_execution_attempts': 'int',
            'last_execution_attempt': 'datetime',
            'next_execution_attempt': 'datetime',
            'final_execution_attempt': 'datetime',
            'payment_received': 'datetime',
            'currency': 'str',
            'cost_excluding_tax': 'float',
            'invoice_cost': 'float',
            'non_discounted_cost': 'float',
            'non_discounted_cost_excluding_tax': 'float',
            'invoice_paid': 'float',
            'discount_amount': 'float',
            'discount_amount_excluding_tax': 'float',
            'invoice_refunded': 'float',
            'credit_rolled_over': 'float',
            'credit_rolled_over_excluding_tax': 'float',
            'type': 'str',
            'locked': 'str',
            'managed_by': 'str',
            'initial_invoice': 'bool',
            'version_number': 'int',
            'invoice_lines': 'list[InvoiceLine]',
            'tax_lines': 'list[InsertableBillingEntity]',
            'invoice_payments': 'list[InvoicePayment]',
            'invoice_refunds': 'list[Refund]',
            'invoice_credit_notes': 'list[CreditNote]',
            'charges': 'list[SubscriptionCharge]',
            'children': 'list[Invoice]'
        }

        self.attribute_map = {
            'created': 'created',
            'changed_by': 'changedBy',
            'updated': 'updated',
            'version_id': 'versionID',
            'id': 'id',
            'crm_id': 'crmID',
            'subscription_id': 'subscriptionID',
            'subscription_version_id': 'subscriptionVersionID',
            'account_id': 'accountID',
            'organization_id': 'organizationID',
            'parent_invoice_id': 'parentInvoiceID',
            'name': 'name',
            'description': 'description',
            'state': 'state',
            'issued': 'issued',
            'period_start': 'periodStart',
            'period_end': 'periodEnd',
            'due': 'due',
            'deleted': 'deleted',
            'total_execution_attempts': 'totalExecutionAttempts',
            'last_execution_attempt': 'lastExecutionAttempt',
            'next_execution_attempt': 'nextExecutionAttempt',
            'final_execution_attempt': 'finalExecutionAttempt',
            'payment_received': 'paymentReceived',
            'currency': 'currency',
            'cost_excluding_tax': 'costExcludingTax',
            'invoice_cost': 'invoiceCost',
            'non_discounted_cost': 'nonDiscountedCost',
            'non_discounted_cost_excluding_tax': 'nonDiscountedCostExcludingTax',
            'invoice_paid': 'invoicePaid',
            'discount_amount': 'discountAmount',
            'discount_amount_excluding_tax': 'discountAmountExcludingTax',
            'invoice_refunded': 'invoiceRefunded',
            'credit_rolled_over': 'creditRolledOver',
            'credit_rolled_over_excluding_tax': 'creditRolledOverExcludingTax',
            'type': 'type',
            'locked': 'locked',
            'managed_by': 'managedBy',
            'initial_invoice': 'initialInvoice',
            'version_number': 'versionNumber',
            'invoice_lines': 'invoiceLines',
            'tax_lines': 'taxLines',
            'invoice_payments': 'invoicePayments',
            'invoice_refunds': 'invoiceRefunds',
            'invoice_credit_notes': 'invoiceCreditNotes',
            'charges': 'charges',
            'children': 'children'
        }

        self._created = created
        self._changed_by = changed_by
        self._updated = updated
        self._version_id = version_id
        self._id = id
        self._crm_id = crm_id
        self._subscription_id = subscription_id
        self._subscription_version_id = subscription_version_id
        self._account_id = account_id
        self._organization_id = organization_id
        self._parent_invoice_id = parent_invoice_id
        self._name = name
        self._description = description
        self._state = state
        self._issued = issued
        self._period_start = period_start
        self._period_end = period_end
        self._due = due
        self._deleted = deleted
        self._total_execution_attempts = total_execution_attempts
        self._last_execution_attempt = last_execution_attempt
        self._next_execution_attempt = next_execution_attempt
        self._final_execution_attempt = final_execution_attempt
        self._payment_received = payment_received
        self._currency = currency
        self._cost_excluding_tax = cost_excluding_tax
        self._invoice_cost = invoice_cost
        self._non_discounted_cost = non_discounted_cost
        self._non_discounted_cost_excluding_tax = non_discounted_cost_excluding_tax
        self._invoice_paid = invoice_paid
        self._discount_amount = discount_amount
        self._discount_amount_excluding_tax = discount_amount_excluding_tax
        self._invoice_refunded = invoice_refunded
        self._credit_rolled_over = credit_rolled_over
        self._credit_rolled_over_excluding_tax = credit_rolled_over_excluding_tax
        self._type = type
        self._locked = locked
        self._managed_by = managed_by
        self._initial_invoice = initial_invoice
        self._version_number = version_number
        self._invoice_lines = invoice_lines
        self._tax_lines = tax_lines
        self._invoice_payments = invoice_payments
        self._invoice_refunds = invoice_refunds
        self._invoice_credit_notes = invoice_credit_notes
        self._charges = charges
        self._children = children

    @property
    def created(self):
        """
        Gets the created of this Invoice.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this Invoice.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this Invoice.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this Invoice.
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """
        Gets the changed_by of this Invoice.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :return: The changed_by of this Invoice.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """
        Sets the changed_by of this Invoice.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :param changed_by: The changed_by of this Invoice.
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """
        Gets the updated of this Invoice.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :return: The updated of this Invoice.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this Invoice.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :param updated: The updated of this Invoice.
        :type: datetime
        """

        self._updated = updated

    @property
    def version_id(self):
        """
        Gets the version_id of this Invoice.
        { \"description\" : \"Version identifier of the invoice.\", \"verbs\":[\"GET\"] }

        :return: The version_id of this Invoice.
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """
        Sets the version_id of this Invoice.
        { \"description\" : \"Version identifier of the invoice.\", \"verbs\":[\"GET\"] }

        :param version_id: The version_id of this Invoice.
        :type: str
        """

        self._version_id = version_id

    @property
    def id(self):
        """
        Gets the id of this Invoice.
        { \"description\" : \"Unique identifier for the invoice.\", \"verbs\":[\"GET\"] }

        :return: The id of this Invoice.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Invoice.
        { \"description\" : \"Unique identifier for the invoice.\", \"verbs\":[\"GET\"] }

        :param id: The id of this Invoice.
        :type: str
        """

        self._id = id

    @property
    def crm_id(self):
        """
        Gets the crm_id of this Invoice.
        { \"description\" : \"CRM identifier of the invoice.\", \"verbs\":[\"PUT\",\"GET\"] }

        :return: The crm_id of this Invoice.
        :rtype: str
        """
        return self._crm_id

    @crm_id.setter
    def crm_id(self, crm_id):
        """
        Sets the crm_id of this Invoice.
        { \"description\" : \"CRM identifier of the invoice.\", \"verbs\":[\"PUT\",\"GET\"] }

        :param crm_id: The crm_id of this Invoice.
        :type: str
        """

        self._crm_id = crm_id

    @property
    def subscription_id(self):
        """
        Gets the subscription_id of this Invoice.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :return: The subscription_id of this Invoice.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """
        Sets the subscription_id of this Invoice.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :param subscription_id: The subscription_id of this Invoice.
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def subscription_version_id(self):
        """
        Gets the subscription_version_id of this Invoice.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :return: The subscription_version_id of this Invoice.
        :rtype: str
        """
        return self._subscription_version_id

    @subscription_version_id.setter
    def subscription_version_id(self, subscription_version_id):
        """
        Sets the subscription_version_id of this Invoice.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :param subscription_version_id: The subscription_version_id of this Invoice.
        :type: str
        """

        self._subscription_version_id = subscription_version_id

    @property
    def account_id(self):
        """
        Gets the account_id of this Invoice.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :return: The account_id of this Invoice.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """
        Sets the account_id of this Invoice.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :param account_id: The account_id of this Invoice.
        :type: str
        """

        self._account_id = account_id

    @property
    def organization_id(self):
        """
        Gets the organization_id of this Invoice.
        { \"description\" : \"\", \"verbs\":[] }

        :return: The organization_id of this Invoice.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this Invoice.
        { \"description\" : \"\", \"verbs\":[] }

        :param organization_id: The organization_id of this Invoice.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def parent_invoice_id(self):
        """
        Gets the parent_invoice_id of this Invoice.
        { \"description\" : \"\", \"verbs\":[] }

        :return: The parent_invoice_id of this Invoice.
        :rtype: str
        """
        return self._parent_invoice_id

    @parent_invoice_id.setter
    def parent_invoice_id(self, parent_invoice_id):
        """
        Sets the parent_invoice_id of this Invoice.
        { \"description\" : \"\", \"verbs\":[] }

        :param parent_invoice_id: The parent_invoice_id of this Invoice.
        :type: str
        """

        self._parent_invoice_id = parent_invoice_id

    @property
    def name(self):
        """
        Gets the name of this Invoice.
        { \"description\" : \"The name of the invoice\", \"verbs\":[] }

        :return: The name of this Invoice.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Invoice.
        { \"description\" : \"The name of the invoice\", \"verbs\":[] }

        :param name: The name of this Invoice.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this Invoice.
        { \"description\" : \"The description of the invoice\", \"verbs\":[] }

        :return: The description of this Invoice.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Invoice.
        { \"description\" : \"The description of the invoice\", \"verbs\":[] }

        :param description: The description of this Invoice.
        :type: str
        """

        self._description = description

    @property
    def state(self):
        """
        Gets the state of this Invoice.
        { \"description\" : \"Initially an invoice is set as unpaid. Once payment for the full value of the invoice has been received it is marked as paid. An invoice may be paid from various sources including cards, coupons or manual payments.\", \"verbs\":[\"GET\"] }

        :return: The state of this Invoice.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this Invoice.
        { \"description\" : \"Initially an invoice is set as unpaid. Once payment for the full value of the invoice has been received it is marked as paid. An invoice may be paid from various sources including cards, coupons or manual payments.\", \"verbs\":[\"GET\"] }

        :param state: The state of this Invoice.
        :type: str
        """
        allowed_values = ["Paid", "Unpaid", "Pending", "Voided"]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def issued(self):
        """
        Gets the issued of this Invoice.
        { \"description\" : \"The UTC DateTime when the invoice was first issued.\", \"verbs\":[\"GET\"] }

        :return: The issued of this Invoice.
        :rtype: datetime
        """
        return self._issued

    @issued.setter
    def issued(self, issued):
        """
        Sets the issued of this Invoice.
        { \"description\" : \"The UTC DateTime when the invoice was first issued.\", \"verbs\":[\"GET\"] }

        :param issued: The issued of this Invoice.
        :type: datetime
        """

        self._issued = issued

    @property
    def period_start(self):
        """
        Gets the period_start of this Invoice.
        { \"description\" : \"Start of the period being billed by this invoice, UTC DateTime\", \"verbs\":[\"GET\"] }

        :return: The period_start of this Invoice.
        :rtype: datetime
        """
        return self._period_start

    @period_start.setter
    def period_start(self, period_start):
        """
        Sets the period_start of this Invoice.
        { \"description\" : \"Start of the period being billed by this invoice, UTC DateTime\", \"verbs\":[\"GET\"] }

        :param period_start: The period_start of this Invoice.
        :type: datetime
        """

        self._period_start = period_start

    @property
    def period_end(self):
        """
        Gets the period_end of this Invoice.
        { \"description\" : \"End of the period being billed by this invoice, UTC DateTime.\", \"verbs\":[\"GET\"] }

        :return: The period_end of this Invoice.
        :rtype: datetime
        """
        return self._period_end

    @period_end.setter
    def period_end(self, period_end):
        """
        Sets the period_end of this Invoice.
        { \"description\" : \"End of the period being billed by this invoice, UTC DateTime.\", \"verbs\":[\"GET\"] }

        :param period_end: The period_end of this Invoice.
        :type: datetime
        """

        self._period_end = period_end

    @property
    def due(self):
        """
        Gets the due of this Invoice.
        { \"description\" : \"Date this invoice is due, UTC DateTime.\", \"verbs\":[\"GET\"] }

        :return: The due of this Invoice.
        :rtype: datetime
        """
        return self._due

    @due.setter
    def due(self, due):
        """
        Sets the due of this Invoice.
        { \"description\" : \"Date this invoice is due, UTC DateTime.\", \"verbs\":[\"GET\"] }

        :param due: The due of this Invoice.
        :type: datetime
        """

        self._due = due

    @property
    def deleted(self):
        """
        Gets the deleted of this Invoice.
        { \"description\" : \"Indicates if an invoice has been retired. If an invoice has been retired it can still be retrieved using the appropriate flag on API requests. Generally invoices will not be retired.\", \"verbs\":[] }

        :return: The deleted of this Invoice.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """
        Sets the deleted of this Invoice.
        { \"description\" : \"Indicates if an invoice has been retired. If an invoice has been retired it can still be retrieved using the appropriate flag on API requests. Generally invoices will not be retired.\", \"verbs\":[] }

        :param deleted: The deleted of this Invoice.
        :type: bool
        """

        self._deleted = deleted

    @property
    def total_execution_attempts(self):
        """
        Gets the total_execution_attempts of this Invoice.
        { \"description\" : \"Number of payment attempts for this invoice. This includes any manual execution attempts.\", \"verbs\":[\"GET\"] }

        :return: The total_execution_attempts of this Invoice.
        :rtype: int
        """
        return self._total_execution_attempts

    @total_execution_attempts.setter
    def total_execution_attempts(self, total_execution_attempts):
        """
        Sets the total_execution_attempts of this Invoice.
        { \"description\" : \"Number of payment attempts for this invoice. This includes any manual execution attempts.\", \"verbs\":[\"GET\"] }

        :param total_execution_attempts: The total_execution_attempts of this Invoice.
        :type: int
        """

        self._total_execution_attempts = total_execution_attempts

    @property
    def last_execution_attempt(self):
        """
        Gets the last_execution_attempt of this Invoice.
        { \"description\" : \"UTC DateTime of the invoice's last execution attempt. This was the last time an attempt was made to take payment for this invoice.\", \"verbs\":[\"GET\"] }

        :return: The last_execution_attempt of this Invoice.
        :rtype: datetime
        """
        return self._last_execution_attempt

    @last_execution_attempt.setter
    def last_execution_attempt(self, last_execution_attempt):
        """
        Sets the last_execution_attempt of this Invoice.
        { \"description\" : \"UTC DateTime of the invoice's last execution attempt. This was the last time an attempt was made to take payment for this invoice.\", \"verbs\":[\"GET\"] }

        :param last_execution_attempt: The last_execution_attempt of this Invoice.
        :type: datetime
        """

        self._last_execution_attempt = last_execution_attempt

    @property
    def next_execution_attempt(self):
        """
        Gets the next_execution_attempt of this Invoice.
        { \"description\" : \"UTC DateTime of the invoice's next execution attempt. If the next execution attempt is greater than the period end for this invoice, the invoice will not receive another automatic execution attempt.\", \"verbs\":[\"GET\"] }

        :return: The next_execution_attempt of this Invoice.
        :rtype: datetime
        """
        return self._next_execution_attempt

    @next_execution_attempt.setter
    def next_execution_attempt(self, next_execution_attempt):
        """
        Sets the next_execution_attempt of this Invoice.
        { \"description\" : \"UTC DateTime of the invoice's next execution attempt. If the next execution attempt is greater than the period end for this invoice, the invoice will not receive another automatic execution attempt.\", \"verbs\":[\"GET\"] }

        :param next_execution_attempt: The next_execution_attempt of this Invoice.
        :type: datetime
        """

        self._next_execution_attempt = next_execution_attempt

    @property
    def final_execution_attempt(self):
        """
        Gets the final_execution_attempt of this Invoice.
        { \"description\" : \"UTC DateTime of the invoice's final execution attempt. The final execution attempt. This may be less than the next execution attempt if the next execution attempt never occurred.\", \"verbs\":[\"GET\"] }

        :return: The final_execution_attempt of this Invoice.
        :rtype: datetime
        """
        return self._final_execution_attempt

    @final_execution_attempt.setter
    def final_execution_attempt(self, final_execution_attempt):
        """
        Sets the final_execution_attempt of this Invoice.
        { \"description\" : \"UTC DateTime of the invoice's final execution attempt. The final execution attempt. This may be less than the next execution attempt if the next execution attempt never occurred.\", \"verbs\":[\"GET\"] }

        :param final_execution_attempt: The final_execution_attempt of this Invoice.
        :type: datetime
        """

        self._final_execution_attempt = final_execution_attempt

    @property
    def payment_received(self):
        """
        Gets the payment_received of this Invoice.
        { \"description\" : \"UTC DateTime specifying when payment was received for the invoice.\", \"verbs\":[\"GET\"] }

        :return: The payment_received of this Invoice.
        :rtype: datetime
        """
        return self._payment_received

    @payment_received.setter
    def payment_received(self, payment_received):
        """
        Sets the payment_received of this Invoice.
        { \"description\" : \"UTC DateTime specifying when payment was received for the invoice.\", \"verbs\":[\"GET\"] }

        :param payment_received: The payment_received of this Invoice.
        :type: datetime
        """

        self._payment_received = payment_received

    @property
    def currency(self):
        """
        Gets the currency of this Invoice.
        { \"description\" : \"Currency of the invoice specified by a three character ISO 4217 currency code.\", \"verbs\":[\"GET\"] }

        :return: The currency of this Invoice.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """
        Sets the currency of this Invoice.
        { \"description\" : \"Currency of the invoice specified by a three character ISO 4217 currency code.\", \"verbs\":[\"GET\"] }

        :param currency: The currency of this Invoice.
        :type: str
        """

        self._currency = currency

    @property
    def cost_excluding_tax(self):
        """
        Gets the cost_excluding_tax of this Invoice.
        { \"description\" : \"Cost of the invoice exclusive of tax.\", \"verbs\":[\"GET\"] }

        :return: The cost_excluding_tax of this Invoice.
        :rtype: float
        """
        return self._cost_excluding_tax

    @cost_excluding_tax.setter
    def cost_excluding_tax(self, cost_excluding_tax):
        """
        Sets the cost_excluding_tax of this Invoice.
        { \"description\" : \"Cost of the invoice exclusive of tax.\", \"verbs\":[\"GET\"] }

        :param cost_excluding_tax: The cost_excluding_tax of this Invoice.
        :type: float
        """

        self._cost_excluding_tax = cost_excluding_tax

    @property
    def invoice_cost(self):
        """
        Gets the invoice_cost of this Invoice.
        { \"description\" : \"Cost of the invoice inclusive of tax.\", \"verbs\":[\"GET\"] }

        :return: The invoice_cost of this Invoice.
        :rtype: float
        """
        return self._invoice_cost

    @invoice_cost.setter
    def invoice_cost(self, invoice_cost):
        """
        Sets the invoice_cost of this Invoice.
        { \"description\" : \"Cost of the invoice inclusive of tax.\", \"verbs\":[\"GET\"] }

        :param invoice_cost: The invoice_cost of this Invoice.
        :type: float
        """

        self._invoice_cost = invoice_cost

    @property
    def non_discounted_cost(self):
        """
        Gets the non_discounted_cost of this Invoice.
        Cost of the invoice before discounts, inclusive of tax.

        :return: The non_discounted_cost of this Invoice.
        :rtype: float
        """
        return self._non_discounted_cost

    @non_discounted_cost.setter
    def non_discounted_cost(self, non_discounted_cost):
        """
        Sets the non_discounted_cost of this Invoice.
        Cost of the invoice before discounts, inclusive of tax.

        :param non_discounted_cost: The non_discounted_cost of this Invoice.
        :type: float
        """

        self._non_discounted_cost = non_discounted_cost

    @property
    def non_discounted_cost_excluding_tax(self):
        """
        Gets the non_discounted_cost_excluding_tax of this Invoice.
        Cost of the invoice before discounts, inclusive of tax.

        :return: The non_discounted_cost_excluding_tax of this Invoice.
        :rtype: float
        """
        return self._non_discounted_cost_excluding_tax

    @non_discounted_cost_excluding_tax.setter
    def non_discounted_cost_excluding_tax(self, non_discounted_cost_excluding_tax):
        """
        Sets the non_discounted_cost_excluding_tax of this Invoice.
        Cost of the invoice before discounts, inclusive of tax.

        :param non_discounted_cost_excluding_tax: The non_discounted_cost_excluding_tax of this Invoice.
        :type: float
        """

        self._non_discounted_cost_excluding_tax = non_discounted_cost_excluding_tax

    @property
    def invoice_paid(self):
        """
        Gets the invoice_paid of this Invoice.
        { \"description\" : \"Total amount of the invoice currently paid for. As the invoice may be paid by multiple payments, for example partly paid for by a voucher and then paid for by a card, this indicates the current paid amount of the invoice.\", \"verbs\":[\"GET\"] }

        :return: The invoice_paid of this Invoice.
        :rtype: float
        """
        return self._invoice_paid

    @invoice_paid.setter
    def invoice_paid(self, invoice_paid):
        """
        Sets the invoice_paid of this Invoice.
        { \"description\" : \"Total amount of the invoice currently paid for. As the invoice may be paid by multiple payments, for example partly paid for by a voucher and then paid for by a card, this indicates the current paid amount of the invoice.\", \"verbs\":[\"GET\"] }

        :param invoice_paid: The invoice_paid of this Invoice.
        :type: float
        """

        self._invoice_paid = invoice_paid

    @property
    def discount_amount(self):
        """
        Gets the discount_amount of this Invoice.
        { \"description\" : \"The amount of discounts for the invoice.\", \"verbs\":[\"GET\"] }

        :return: The discount_amount of this Invoice.
        :rtype: float
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount):
        """
        Sets the discount_amount of this Invoice.
        { \"description\" : \"The amount of discounts for the invoice.\", \"verbs\":[\"GET\"] }

        :param discount_amount: The discount_amount of this Invoice.
        :type: float
        """

        self._discount_amount = discount_amount

    @property
    def discount_amount_excluding_tax(self):
        """
        Gets the discount_amount_excluding_tax of this Invoice.
        { \"description\" : \"The amount of discounts for the invoice excluding tax.\", \"verbs\":[\"GET\"] }

        :return: The discount_amount_excluding_tax of this Invoice.
        :rtype: float
        """
        return self._discount_amount_excluding_tax

    @discount_amount_excluding_tax.setter
    def discount_amount_excluding_tax(self, discount_amount_excluding_tax):
        """
        Sets the discount_amount_excluding_tax of this Invoice.
        { \"description\" : \"The amount of discounts for the invoice excluding tax.\", \"verbs\":[\"GET\"] }

        :param discount_amount_excluding_tax: The discount_amount_excluding_tax of this Invoice.
        :type: float
        """

        self._discount_amount_excluding_tax = discount_amount_excluding_tax

    @property
    def invoice_refunded(self):
        """
        Gets the invoice_refunded of this Invoice.
        { \"description\" : \"Total amount of the invoice refunded.\", \"verbs\":[\"GET\"] }

        :return: The invoice_refunded of this Invoice.
        :rtype: float
        """
        return self._invoice_refunded

    @invoice_refunded.setter
    def invoice_refunded(self, invoice_refunded):
        """
        Sets the invoice_refunded of this Invoice.
        { \"description\" : \"Total amount of the invoice refunded.\", \"verbs\":[\"GET\"] }

        :param invoice_refunded: The invoice_refunded of this Invoice.
        :type: float
        """

        self._invoice_refunded = invoice_refunded

    @property
    def credit_rolled_over(self):
        """
        Gets the credit_rolled_over of this Invoice.
        { \"description\" : \"The amount of credit to be returned to the pool.\", \"verbs\":[\"GET\"] }

        :return: The credit_rolled_over of this Invoice.
        :rtype: float
        """
        return self._credit_rolled_over

    @credit_rolled_over.setter
    def credit_rolled_over(self, credit_rolled_over):
        """
        Sets the credit_rolled_over of this Invoice.
        { \"description\" : \"The amount of credit to be returned to the pool.\", \"verbs\":[\"GET\"] }

        :param credit_rolled_over: The credit_rolled_over of this Invoice.
        :type: float
        """

        self._credit_rolled_over = credit_rolled_over

    @property
    def credit_rolled_over_excluding_tax(self):
        """
        Gets the credit_rolled_over_excluding_tax of this Invoice.
        { \"description\" : \"The amount of credit to be returned to the pool excluding tax.\", \"verbs\":[\"GET\"] }

        :return: The credit_rolled_over_excluding_tax of this Invoice.
        :rtype: float
        """
        return self._credit_rolled_over_excluding_tax

    @credit_rolled_over_excluding_tax.setter
    def credit_rolled_over_excluding_tax(self, credit_rolled_over_excluding_tax):
        """
        Sets the credit_rolled_over_excluding_tax of this Invoice.
        { \"description\" : \"The amount of credit to be returned to the pool excluding tax.\", \"verbs\":[\"GET\"] }

        :param credit_rolled_over_excluding_tax: The credit_rolled_over_excluding_tax of this Invoice.
        :type: float
        """

        self._credit_rolled_over_excluding_tax = credit_rolled_over_excluding_tax

    @property
    def type(self):
        """
        Gets the type of this Invoice.
        { \"description\" : \"The type of the invoice. A subscription invoice is raised every time a subscription recurs. An amendment is created for intra-contract changes. An Adhoc invoice is created for payment that is taken out-of-band of a subscription. Finally the invoice generated for a trial period is marked as Trial.\", \"verbs\":[\"GET\"] }

        :return: The type of this Invoice.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Invoice.
        { \"description\" : \"The type of the invoice. A subscription invoice is raised every time a subscription recurs. An amendment is created for intra-contract changes. An Adhoc invoice is created for payment that is taken out-of-band of a subscription. Finally the invoice generated for a trial period is marked as Trial.\", \"verbs\":[\"GET\"] }

        :param type: The type of this Invoice.
        :type: str
        """
        allowed_values = ["Subscription", "Trial", "Charge", "FinalArrears", "Amendment", "Aggregated"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def locked(self):
        """
        Gets the locked of this Invoice.
        { \"description\" : \"If the subscription is locked, it will not be processed by the system\", \"verbs\":[] }

        :return: The locked of this Invoice.
        :rtype: str
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """
        Sets the locked of this Invoice.
        { \"description\" : \"If the subscription is locked, it will not be processed by the system\", \"verbs\":[] }

        :param locked: The locked of this Invoice.
        :type: str
        """

        self._locked = locked

    @property
    def managed_by(self):
        """
        Gets the managed_by of this Invoice.
        { \"description\" : \"Which system is responsible for managing the subscription.\", \"verbs\":[] }

        :return: The managed_by of this Invoice.
        :rtype: str
        """
        return self._managed_by

    @managed_by.setter
    def managed_by(self, managed_by):
        """
        Sets the managed_by of this Invoice.
        { \"description\" : \"Which system is responsible for managing the subscription.\", \"verbs\":[] }

        :param managed_by: The managed_by of this Invoice.
        :type: str
        """
        allowed_values = ["BillForward", "Stripe"]
        if managed_by not in allowed_values:
            raise ValueError(
                "Invalid value for `managed_by` ({0}), must be one of {1}"
                .format(managed_by, allowed_values)
            )

        self._managed_by = managed_by

    @property
    def initial_invoice(self):
        """
        Gets the initial_invoice of this Invoice.
        { \"description\" : \"Is this an initial invoice. An initial invoice is the first invoice generated for a subscription. Initial invoices will not have dunning applied to them and as such will only have a single payment attempt. For trial periods, the trial invoice is the initial invoice.\", \"verbs\":[\"GET\"] }

        :return: The initial_invoice of this Invoice.
        :rtype: bool
        """
        return self._initial_invoice

    @initial_invoice.setter
    def initial_invoice(self, initial_invoice):
        """
        Sets the initial_invoice of this Invoice.
        { \"description\" : \"Is this an initial invoice. An initial invoice is the first invoice generated for a subscription. Initial invoices will not have dunning applied to them and as such will only have a single payment attempt. For trial periods, the trial invoice is the initial invoice.\", \"verbs\":[\"GET\"] }

        :param initial_invoice: The initial_invoice of this Invoice.
        :type: bool
        """

        self._initial_invoice = initial_invoice

    @property
    def version_number(self):
        """
        Gets the version_number of this Invoice.
        { \"description\" : \"The version number of the Invoice.  The first version of an Invoice is version number 1\", \"verbs\":[\"GET\"] }

        :return: The version_number of this Invoice.
        :rtype: int
        """
        return self._version_number

    @version_number.setter
    def version_number(self, version_number):
        """
        Sets the version_number of this Invoice.
        { \"description\" : \"The version number of the Invoice.  The first version of an Invoice is version number 1\", \"verbs\":[\"GET\"] }

        :param version_number: The version_number of this Invoice.
        :type: int
        """

        self._version_number = version_number

    @property
    def invoice_lines(self):
        """
        Gets the invoice_lines of this Invoice.
        { \"description\" : \"The collection of invoice-lines associated with the invoice.\", \"verbs\":[\"GET\"] }

        :return: The invoice_lines of this Invoice.
        :rtype: list[InvoiceLine]
        """
        return self._invoice_lines

    @invoice_lines.setter
    def invoice_lines(self, invoice_lines):
        """
        Sets the invoice_lines of this Invoice.
        { \"description\" : \"The collection of invoice-lines associated with the invoice.\", \"verbs\":[\"GET\"] }

        :param invoice_lines: The invoice_lines of this Invoice.
        :type: list[InvoiceLine]
        """

        self._invoice_lines = invoice_lines

    @property
    def tax_lines(self):
        """
        Gets the tax_lines of this Invoice.


        :return: The tax_lines of this Invoice.
        :rtype: list[InsertableBillingEntity]
        """
        return self._tax_lines

    @tax_lines.setter
    def tax_lines(self, tax_lines):
        """
        Sets the tax_lines of this Invoice.


        :param tax_lines: The tax_lines of this Invoice.
        :type: list[InsertableBillingEntity]
        """

        self._tax_lines = tax_lines

    @property
    def invoice_payments(self):
        """
        Gets the invoice_payments of this Invoice.
        { \"description\" : \"Payments used for this invoice. Multiple payments may be associated with the invoice.\", \"verbs\":[\"GET\"] }

        :return: The invoice_payments of this Invoice.
        :rtype: list[InvoicePayment]
        """
        return self._invoice_payments

    @invoice_payments.setter
    def invoice_payments(self, invoice_payments):
        """
        Sets the invoice_payments of this Invoice.
        { \"description\" : \"Payments used for this invoice. Multiple payments may be associated with the invoice.\", \"verbs\":[\"GET\"] }

        :param invoice_payments: The invoice_payments of this Invoice.
        :type: list[InvoicePayment]
        """

        self._invoice_payments = invoice_payments

    @property
    def invoice_refunds(self):
        """
        Gets the invoice_refunds of this Invoice.
        { \"description\" : \"Refunds associated with this invoice. Multiple refunds may be associated with the invoice.\", \"verbs\":[\"GET\"] }

        :return: The invoice_refunds of this Invoice.
        :rtype: list[Refund]
        """
        return self._invoice_refunds

    @invoice_refunds.setter
    def invoice_refunds(self, invoice_refunds):
        """
        Sets the invoice_refunds of this Invoice.
        { \"description\" : \"Refunds associated with this invoice. Multiple refunds may be associated with the invoice.\", \"verbs\":[\"GET\"] }

        :param invoice_refunds: The invoice_refunds of this Invoice.
        :type: list[Refund]
        """

        self._invoice_refunds = invoice_refunds

    @property
    def invoice_credit_notes(self):
        """
        Gets the invoice_credit_notes of this Invoice.
        { \"description\" : \"Credit Notes associated with this invoice. Multiple credit notes may be associated with the invoice.\", \"verbs\":[\"GET\"] }

        :return: The invoice_credit_notes of this Invoice.
        :rtype: list[CreditNote]
        """
        return self._invoice_credit_notes

    @invoice_credit_notes.setter
    def invoice_credit_notes(self, invoice_credit_notes):
        """
        Sets the invoice_credit_notes of this Invoice.
        { \"description\" : \"Credit Notes associated with this invoice. Multiple credit notes may be associated with the invoice.\", \"verbs\":[\"GET\"] }

        :param invoice_credit_notes: The invoice_credit_notes of this Invoice.
        :type: list[CreditNote]
        """

        self._invoice_credit_notes = invoice_credit_notes

    @property
    def charges(self):
        """
        Gets the charges of this Invoice.


        :return: The charges of this Invoice.
        :rtype: list[SubscriptionCharge]
        """
        return self._charges

    @charges.setter
    def charges(self, charges):
        """
        Sets the charges of this Invoice.


        :param charges: The charges of this Invoice.
        :type: list[SubscriptionCharge]
        """

        self._charges = charges

    @property
    def children(self):
        """
        Gets the children of this Invoice.


        :return: The children of this Invoice.
        :rtype: list[Invoice]
        """
        return self._children

    @children.setter
    def children(self, children):
        """
        Sets the children of this Invoice.


        :param children: The children of this Invoice.
        :type: list[Invoice]
        """

        self._children = children

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
