# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ArrearsPricingComponentsByChargeModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'flat': 'list[FlatArrearsPricingComponent]',
        'tiered': 'list[TieredArrearsPricingComponent]',
        'volume': 'list[TieredArrearsPricingComponent]'
    }

    attribute_map = {
        'flat': 'flat',
        'tiered': 'tiered',
        'volume': 'volume'
    }

    def __init__(self, flat=None, tiered=None, volume=None):  # noqa: E501
        """ArrearsPricingComponentsByChargeModel - a model defined in Swagger"""  # noqa: E501
        self._flat = None
        self._tiered = None
        self._volume = None
        self.discriminator = None
        if flat is not None:
            self.flat = flat
        if tiered is not None:
            self.tiered = tiered
        if volume is not None:
            self.volume = volume

    @property
    def flat(self):
        """Gets the flat of this ArrearsPricingComponentsByChargeModel.  # noqa: E501


        :return: The flat of this ArrearsPricingComponentsByChargeModel.  # noqa: E501
        :rtype: list[FlatArrearsPricingComponent]
        """
        return self._flat

    @flat.setter
    def flat(self, flat):
        """Sets the flat of this ArrearsPricingComponentsByChargeModel.


        :param flat: The flat of this ArrearsPricingComponentsByChargeModel.  # noqa: E501
        :type: list[FlatArrearsPricingComponent]
        """

        self._flat = flat

    @property
    def tiered(self):
        """Gets the tiered of this ArrearsPricingComponentsByChargeModel.  # noqa: E501


        :return: The tiered of this ArrearsPricingComponentsByChargeModel.  # noqa: E501
        :rtype: list[TieredArrearsPricingComponent]
        """
        return self._tiered

    @tiered.setter
    def tiered(self, tiered):
        """Sets the tiered of this ArrearsPricingComponentsByChargeModel.


        :param tiered: The tiered of this ArrearsPricingComponentsByChargeModel.  # noqa: E501
        :type: list[TieredArrearsPricingComponent]
        """

        self._tiered = tiered

    @property
    def volume(self):
        """Gets the volume of this ArrearsPricingComponentsByChargeModel.  # noqa: E501


        :return: The volume of this ArrearsPricingComponentsByChargeModel.  # noqa: E501
        :rtype: list[TieredArrearsPricingComponent]
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this ArrearsPricingComponentsByChargeModel.


        :param volume: The volume of this ArrearsPricingComponentsByChargeModel.  # noqa: E501
        :type: list[TieredArrearsPricingComponent]
        """

        self._volume = volume

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ArrearsPricingComponentsByChargeModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArrearsPricingComponentsByChargeModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
