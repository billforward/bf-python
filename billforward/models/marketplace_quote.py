# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MarketplaceQuote(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'organization_id': 'str',
        'account_id': 'str',
        'invoice_id': 'str',
        'subscription_id': 'str',
        'calculator_results': 'list[CalculatorResult]',
        'currency': 'CreditNoteCurrency',
        'total': 'float'
    }

    attribute_map = {
        'created': 'created',
        'organization_id': 'organizationID',
        'account_id': 'accountID',
        'invoice_id': 'invoiceID',
        'subscription_id': 'subscriptionID',
        'calculator_results': 'calculatorResults',
        'currency': 'currency',
        'total': 'total'
    }

    def __init__(self, created=None, organization_id=None, account_id=None, invoice_id=None, subscription_id=None, calculator_results=None, currency=None, total=None):  # noqa: E501
        """MarketplaceQuote - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._organization_id = None
        self._account_id = None
        self._invoice_id = None
        self._subscription_id = None
        self._calculator_results = None
        self._currency = None
        self._total = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if organization_id is not None:
            self.organization_id = organization_id
        if account_id is not None:
            self.account_id = account_id
        if invoice_id is not None:
            self.invoice_id = invoice_id
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if calculator_results is not None:
            self.calculator_results = calculator_results
        if currency is not None:
            self.currency = currency
        if total is not None:
            self.total = total

    @property
    def created(self):
        """Gets the created of this MarketplaceQuote.  # noqa: E501


        :return: The created of this MarketplaceQuote.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this MarketplaceQuote.


        :param created: The created of this MarketplaceQuote.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def organization_id(self):
        """Gets the organization_id of this MarketplaceQuote.  # noqa: E501


        :return: The organization_id of this MarketplaceQuote.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this MarketplaceQuote.


        :param organization_id: The organization_id of this MarketplaceQuote.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def account_id(self):
        """Gets the account_id of this MarketplaceQuote.  # noqa: E501


        :return: The account_id of this MarketplaceQuote.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this MarketplaceQuote.


        :param account_id: The account_id of this MarketplaceQuote.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def invoice_id(self):
        """Gets the invoice_id of this MarketplaceQuote.  # noqa: E501


        :return: The invoice_id of this MarketplaceQuote.  # noqa: E501
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this MarketplaceQuote.


        :param invoice_id: The invoice_id of this MarketplaceQuote.  # noqa: E501
        :type: str
        """

        self._invoice_id = invoice_id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this MarketplaceQuote.  # noqa: E501


        :return: The subscription_id of this MarketplaceQuote.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this MarketplaceQuote.


        :param subscription_id: The subscription_id of this MarketplaceQuote.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def calculator_results(self):
        """Gets the calculator_results of this MarketplaceQuote.  # noqa: E501


        :return: The calculator_results of this MarketplaceQuote.  # noqa: E501
        :rtype: list[CalculatorResult]
        """
        return self._calculator_results

    @calculator_results.setter
    def calculator_results(self, calculator_results):
        """Sets the calculator_results of this MarketplaceQuote.


        :param calculator_results: The calculator_results of this MarketplaceQuote.  # noqa: E501
        :type: list[CalculatorResult]
        """

        self._calculator_results = calculator_results

    @property
    def currency(self):
        """Gets the currency of this MarketplaceQuote.  # noqa: E501


        :return: The currency of this MarketplaceQuote.  # noqa: E501
        :rtype: CreditNoteCurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this MarketplaceQuote.


        :param currency: The currency of this MarketplaceQuote.  # noqa: E501
        :type: CreditNoteCurrency
        """

        self._currency = currency

    @property
    def total(self):
        """Gets the total of this MarketplaceQuote.  # noqa: E501


        :return: The total of this MarketplaceQuote.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this MarketplaceQuote.


        :param total: The total of this MarketplaceQuote.  # noqa: E501
        :type: float
        """

        self._total = total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MarketplaceQuote, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MarketplaceQuote):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
