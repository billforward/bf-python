# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Payment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'changed_by': 'str',
        'updated': 'datetime',
        'metadata': 'dict(str, object)',
        'id': 'str',
        'crm_id': 'str',
        'account_id': 'str',
        'subscription_id': 'str',
        'payment_method_id': 'str',
        'invoice_id': 'str',
        'organization_id': 'str',
        'gateway': 'str',
        'currency': 'CreditNoteCurrency',
        'nominal_value': 'float',
        'actual_value': 'float',
        'payment_received': 'datetime',
        'refunded_value': 'float',
        'refund_id': 'str',
        'type': 'str',
        'remaining_nominal_value': 'float',
        'at_type': 'str'
    }

    attribute_map = {
        'created': 'created',
        'changed_by': 'changedBy',
        'updated': 'updated',
        'metadata': 'metadata',
        'id': 'id',
        'crm_id': 'crmID',
        'account_id': 'accountID',
        'subscription_id': 'subscriptionID',
        'payment_method_id': 'paymentMethodID',
        'invoice_id': 'invoiceID',
        'organization_id': 'organizationID',
        'gateway': 'gateway',
        'currency': 'currency',
        'nominal_value': 'nominalValue',
        'actual_value': 'actualValue',
        'payment_received': 'paymentReceived',
        'refunded_value': 'refundedValue',
        'refund_id': 'refundID',
        'type': 'type',
        'remaining_nominal_value': 'remainingNominalValue',
        'at_type': '@type'
    }

    discriminator_value_class_map = {
          'AuthorizeNetPayment': 'AuthorizeNetPayment',
'CardConnectPayment': 'CardConnectPayment',
'StripeACHPayment': 'StripeACHPayment',
'EBANXPayment': 'EBANXPayment',
'CouponPayment': 'CouponPayment',
'ShuttlePayment': 'ShuttlePayment',
'BraintreePayment': 'BraintreePayment',
'CreditNotePayment': 'CreditNotePayment',
'OfflinePayment': 'OfflinePayment',
'ZoozPayment': 'ZoozPayment',
'CybersourcePayment': 'CybersourcePayment',
'SagePayCardPayment': 'SagePayCardPayment',
'SquarePayment': 'SquarePayment',
'StripeCardPayment': 'StripeCardPayment',
'EpxPayment': 'EpxPayment',
'PaypalPayment': 'PaypalPayment'    }

    def __init__(self, created=None, changed_by=None, updated=None, metadata=None, id=None, crm_id=None, account_id=None, subscription_id=None, payment_method_id=None, invoice_id=None, organization_id=None, gateway=None, currency=None, nominal_value=None, actual_value=None, payment_received=None, refunded_value=None, refund_id=None, type=None, remaining_nominal_value=None, at_type=None):  # noqa: E501
        """Payment - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._changed_by = None
        self._updated = None
        self._metadata = None
        self._id = None
        self._crm_id = None
        self._account_id = None
        self._subscription_id = None
        self._payment_method_id = None
        self._invoice_id = None
        self._organization_id = None
        self._gateway = None
        self._currency = None
        self._nominal_value = None
        self._actual_value = None
        self._payment_received = None
        self._refunded_value = None
        self._refund_id = None
        self._type = None
        self._remaining_nominal_value = None
        self._at_type = None
        self.discriminator = '@type'
        if created is not None:
            self.created = created
        if changed_by is not None:
            self.changed_by = changed_by
        if updated is not None:
            self.updated = updated
        if metadata is not None:
            self.metadata = metadata
        if id is not None:
            self.id = id
        if crm_id is not None:
            self.crm_id = crm_id
        if account_id is not None:
            self.account_id = account_id
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if payment_method_id is not None:
            self.payment_method_id = payment_method_id
        if invoice_id is not None:
            self.invoice_id = invoice_id
        if organization_id is not None:
            self.organization_id = organization_id
        if gateway is not None:
            self.gateway = gateway
        self.currency = currency
        self.nominal_value = nominal_value
        self.actual_value = actual_value
        if payment_received is not None:
            self.payment_received = payment_received
        if refunded_value is not None:
            self.refunded_value = refunded_value
        if refund_id is not None:
            self.refund_id = refund_id
        self.type = type
        self.remaining_nominal_value = remaining_nominal_value
        self.at_type = at_type

    @property
    def created(self):
        """Gets the created of this Payment.  # noqa: E501


        :return: The created of this Payment.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Payment.


        :param created: The created of this Payment.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """Gets the changed_by of this Payment.  # noqa: E501


        :return: The changed_by of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """Sets the changed_by of this Payment.


        :param changed_by: The changed_by of this Payment.  # noqa: E501
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """Gets the updated of this Payment.  # noqa: E501


        :return: The updated of this Payment.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Payment.


        :param updated: The updated of this Payment.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def metadata(self):
        """Gets the metadata of this Payment.  # noqa: E501


        :return: The metadata of this Payment.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Payment.


        :param metadata: The metadata of this Payment.  # noqa: E501
        :type: dict(str, object)
        """

        self._metadata = metadata

    @property
    def id(self):
        """Gets the id of this Payment.  # noqa: E501


        :return: The id of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Payment.


        :param id: The id of this Payment.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def crm_id(self):
        """Gets the crm_id of this Payment.  # noqa: E501


        :return: The crm_id of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._crm_id

    @crm_id.setter
    def crm_id(self, crm_id):
        """Sets the crm_id of this Payment.


        :param crm_id: The crm_id of this Payment.  # noqa: E501
        :type: str
        """

        self._crm_id = crm_id

    @property
    def account_id(self):
        """Gets the account_id of this Payment.  # noqa: E501


        :return: The account_id of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Payment.


        :param account_id: The account_id of this Payment.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this Payment.  # noqa: E501


        :return: The subscription_id of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this Payment.


        :param subscription_id: The subscription_id of this Payment.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def payment_method_id(self):
        """Gets the payment_method_id of this Payment.  # noqa: E501


        :return: The payment_method_id of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._payment_method_id

    @payment_method_id.setter
    def payment_method_id(self, payment_method_id):
        """Sets the payment_method_id of this Payment.


        :param payment_method_id: The payment_method_id of this Payment.  # noqa: E501
        :type: str
        """

        self._payment_method_id = payment_method_id

    @property
    def invoice_id(self):
        """Gets the invoice_id of this Payment.  # noqa: E501


        :return: The invoice_id of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this Payment.


        :param invoice_id: The invoice_id of this Payment.  # noqa: E501
        :type: str
        """

        self._invoice_id = invoice_id

    @property
    def organization_id(self):
        """Gets the organization_id of this Payment.  # noqa: E501


        :return: The organization_id of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this Payment.


        :param organization_id: The organization_id of this Payment.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def gateway(self):
        """Gets the gateway of this Payment.  # noqa: E501


        :return: The gateway of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this Payment.


        :param gateway: The gateway of this Payment.  # noqa: E501
        :type: str
        """
        allowed_values = ["VOID", "cybersource_token", "card_vault", "paypal_simple", "locustworld", "free", "coupon", "credit_note", "stripe", "braintree", "zooz", "balanced", "paypal", "billforward_test", "offline", "trial", "stripeACH", "goCardless", "authorizeNet", "spreedly", "sagePay", "trustCommerce", "payvision", "kash", "epx", "shuttle", "square", "billforwardRandomizer", "cardConnect", "ebanx"]  # noqa: E501
        if gateway not in allowed_values:
            raise ValueError(
                "Invalid value for `gateway` ({0}), must be one of {1}"  # noqa: E501
                .format(gateway, allowed_values)
            )

        self._gateway = gateway

    @property
    def currency(self):
        """Gets the currency of this Payment.  # noqa: E501


        :return: The currency of this Payment.  # noqa: E501
        :rtype: CreditNoteCurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Payment.


        :param currency: The currency of this Payment.  # noqa: E501
        :type: CreditNoteCurrency
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def nominal_value(self):
        """Gets the nominal_value of this Payment.  # noqa: E501


        :return: The nominal_value of this Payment.  # noqa: E501
        :rtype: float
        """
        return self._nominal_value

    @nominal_value.setter
    def nominal_value(self, nominal_value):
        """Sets the nominal_value of this Payment.


        :param nominal_value: The nominal_value of this Payment.  # noqa: E501
        :type: float
        """
        if nominal_value is None:
            raise ValueError("Invalid value for `nominal_value`, must not be `None`")  # noqa: E501

        self._nominal_value = nominal_value

    @property
    def actual_value(self):
        """Gets the actual_value of this Payment.  # noqa: E501


        :return: The actual_value of this Payment.  # noqa: E501
        :rtype: float
        """
        return self._actual_value

    @actual_value.setter
    def actual_value(self, actual_value):
        """Sets the actual_value of this Payment.


        :param actual_value: The actual_value of this Payment.  # noqa: E501
        :type: float
        """
        if actual_value is None:
            raise ValueError("Invalid value for `actual_value`, must not be `None`")  # noqa: E501

        self._actual_value = actual_value

    @property
    def payment_received(self):
        """Gets the payment_received of this Payment.  # noqa: E501


        :return: The payment_received of this Payment.  # noqa: E501
        :rtype: datetime
        """
        return self._payment_received

    @payment_received.setter
    def payment_received(self, payment_received):
        """Sets the payment_received of this Payment.


        :param payment_received: The payment_received of this Payment.  # noqa: E501
        :type: datetime
        """

        self._payment_received = payment_received

    @property
    def refunded_value(self):
        """Gets the refunded_value of this Payment.  # noqa: E501


        :return: The refunded_value of this Payment.  # noqa: E501
        :rtype: float
        """
        return self._refunded_value

    @refunded_value.setter
    def refunded_value(self, refunded_value):
        """Sets the refunded_value of this Payment.


        :param refunded_value: The refunded_value of this Payment.  # noqa: E501
        :type: float
        """

        self._refunded_value = refunded_value

    @property
    def refund_id(self):
        """Gets the refund_id of this Payment.  # noqa: E501


        :return: The refund_id of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._refund_id

    @refund_id.setter
    def refund_id(self, refund_id):
        """Sets the refund_id of this Payment.


        :param refund_id: The refund_id of this Payment.  # noqa: E501
        :type: str
        """

        self._refund_id = refund_id

    @property
    def type(self):
        """Gets the type of this Payment.  # noqa: E501


        :return: The type of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Payment.


        :param type: The type of this Payment.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["credit", "debit"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def remaining_nominal_value(self):
        """Gets the remaining_nominal_value of this Payment.  # noqa: E501


        :return: The remaining_nominal_value of this Payment.  # noqa: E501
        :rtype: float
        """
        return self._remaining_nominal_value

    @remaining_nominal_value.setter
    def remaining_nominal_value(self, remaining_nominal_value):
        """Sets the remaining_nominal_value of this Payment.


        :param remaining_nominal_value: The remaining_nominal_value of this Payment.  # noqa: E501
        :type: float
        """
        if remaining_nominal_value is None:
            raise ValueError("Invalid value for `remaining_nominal_value`, must not be `None`")  # noqa: E501

        self._remaining_nominal_value = remaining_nominal_value

    @property
    def at_type(self):
        """Gets the at_type of this Payment.  # noqa: E501


        :return: The at_type of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._at_type

    @at_type.setter
    def at_type(self, at_type):
        """Sets the at_type of this Payment.


        :param at_type: The at_type of this Payment.  # noqa: E501
        :type: str
        """
        if at_type is None:
            raise ValueError("Invalid value for `at_type`, must not be `None`")  # noqa: E501

        self._at_type = at_type

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Payment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Payment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
