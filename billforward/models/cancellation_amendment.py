# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from billforward.models.amendment import Amendment  # noqa: F401,E501

class CancellationAmendment(Amendment):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source': 'str',
        'subscription_cancellation_id': 'str',
        'service_end': 'str',
        'cancellation_credit': 'str',
        'subscription_cancellation': 'SubscriptionCancellation'
    }
    if hasattr(Amendment, "swagger_types"):
        swagger_types.update(Amendment.swagger_types)

    attribute_map = {
        'source': 'source',
        'subscription_cancellation_id': 'subscriptionCancellationID',
        'service_end': 'serviceEnd',
        'cancellation_credit': 'cancellationCredit',
        'subscription_cancellation': 'subscriptionCancellation'
    }
    if hasattr(Amendment, "attribute_map"):
        attribute_map.update(Amendment.attribute_map)

    def __init__(self, source=None, subscription_cancellation_id=None, service_end=None, cancellation_credit=None, subscription_cancellation=None, *args, **kwargs):  # noqa: E501
        """CancellationAmendment - a model defined in Swagger"""  # noqa: E501
        self._source = None
        self._subscription_cancellation_id = None
        self._service_end = None
        self._cancellation_credit = None
        self._subscription_cancellation = None
        self.discriminator = None
        self.source = source
        if subscription_cancellation_id is not None:
            self.subscription_cancellation_id = subscription_cancellation_id
        self.service_end = service_end
        self.cancellation_credit = cancellation_credit
        if subscription_cancellation is not None:
            self.subscription_cancellation = subscription_cancellation
        Amendment.__init__(self, *args, **kwargs)

    @property
    def source(self):
        """Gets the source of this CancellationAmendment.  # noqa: E501


        :return: The source of this CancellationAmendment.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CancellationAmendment.


        :param source: The source of this CancellationAmendment.  # noqa: E501
        :type: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def subscription_cancellation_id(self):
        """Gets the subscription_cancellation_id of this CancellationAmendment.  # noqa: E501


        :return: The subscription_cancellation_id of this CancellationAmendment.  # noqa: E501
        :rtype: str
        """
        return self._subscription_cancellation_id

    @subscription_cancellation_id.setter
    def subscription_cancellation_id(self, subscription_cancellation_id):
        """Sets the subscription_cancellation_id of this CancellationAmendment.


        :param subscription_cancellation_id: The subscription_cancellation_id of this CancellationAmendment.  # noqa: E501
        :type: str
        """

        self._subscription_cancellation_id = subscription_cancellation_id

    @property
    def service_end(self):
        """Gets the service_end of this CancellationAmendment.  # noqa: E501


        :return: The service_end of this CancellationAmendment.  # noqa: E501
        :rtype: str
        """
        return self._service_end

    @service_end.setter
    def service_end(self, service_end):
        """Sets the service_end of this CancellationAmendment.


        :param service_end: The service_end of this CancellationAmendment.  # noqa: E501
        :type: str
        """
        if service_end is None:
            raise ValueError("Invalid value for `service_end`, must not be `None`")  # noqa: E501
        allowed_values = ["Immediate", "AtPeriodEnd"]  # noqa: E501
        if service_end not in allowed_values:
            raise ValueError(
                "Invalid value for `service_end` ({0}), must be one of {1}"  # noqa: E501
                .format(service_end, allowed_values)
            )

        self._service_end = service_end

    @property
    def cancellation_credit(self):
        """Gets the cancellation_credit of this CancellationAmendment.  # noqa: E501


        :return: The cancellation_credit of this CancellationAmendment.  # noqa: E501
        :rtype: str
        """
        return self._cancellation_credit

    @cancellation_credit.setter
    def cancellation_credit(self, cancellation_credit):
        """Sets the cancellation_credit of this CancellationAmendment.


        :param cancellation_credit: The cancellation_credit of this CancellationAmendment.  # noqa: E501
        :type: str
        """
        if cancellation_credit is None:
            raise ValueError("Invalid value for `cancellation_credit`, must not be `None`")  # noqa: E501
        allowed_values = ["Refund", "Credit", "None"]  # noqa: E501
        if cancellation_credit not in allowed_values:
            raise ValueError(
                "Invalid value for `cancellation_credit` ({0}), must be one of {1}"  # noqa: E501
                .format(cancellation_credit, allowed_values)
            )

        self._cancellation_credit = cancellation_credit

    @property
    def subscription_cancellation(self):
        """Gets the subscription_cancellation of this CancellationAmendment.  # noqa: E501


        :return: The subscription_cancellation of this CancellationAmendment.  # noqa: E501
        :rtype: SubscriptionCancellation
        """
        return self._subscription_cancellation

    @subscription_cancellation.setter
    def subscription_cancellation(self, subscription_cancellation):
        """Sets the subscription_cancellation of this CancellationAmendment.


        :param subscription_cancellation: The subscription_cancellation of this CancellationAmendment.  # noqa: E501
        :type: SubscriptionCancellation
        """

        self._subscription_cancellation = subscription_cancellation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CancellationAmendment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CancellationAmendment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
