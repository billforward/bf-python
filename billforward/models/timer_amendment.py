# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from billforward.models.amendment import Amendment  # noqa: F401,E501

class TimerAmendment(Amendment):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_id': 'str',
        'entity': 'str',
        'offset_duration': 'int',
        'offset_period': 'str',
        'offset_direction': 'str',
        'original_event_date': 'datetime',
        'timer_event': 'str'
    }
    if hasattr(Amendment, "swagger_types"):
        swagger_types.update(Amendment.swagger_types)

    attribute_map = {
        'entity_id': 'entityID',
        'entity': 'entity',
        'offset_duration': 'offsetDuration',
        'offset_period': 'offsetPeriod',
        'offset_direction': 'offsetDirection',
        'original_event_date': 'originalEventDate',
        'timer_event': 'timerEvent'
    }
    if hasattr(Amendment, "attribute_map"):
        attribute_map.update(Amendment.attribute_map)

    def __init__(self, entity_id=None, entity=None, offset_duration=None, offset_period=None, offset_direction=None, original_event_date=None, timer_event=None, *args, **kwargs):  # noqa: E501
        """TimerAmendment - a model defined in Swagger"""  # noqa: E501
        self._entity_id = None
        self._entity = None
        self._offset_duration = None
        self._offset_period = None
        self._offset_direction = None
        self._original_event_date = None
        self._timer_event = None
        self.discriminator = None
        if entity_id is not None:
            self.entity_id = entity_id
        if entity is not None:
            self.entity = entity
        if offset_duration is not None:
            self.offset_duration = offset_duration
        if offset_period is not None:
            self.offset_period = offset_period
        if offset_direction is not None:
            self.offset_direction = offset_direction
        if original_event_date is not None:
            self.original_event_date = original_event_date
        if timer_event is not None:
            self.timer_event = timer_event
        Amendment.__init__(self, *args, **kwargs)

    @property
    def entity_id(self):
        """Gets the entity_id of this TimerAmendment.  # noqa: E501


        :return: The entity_id of this TimerAmendment.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this TimerAmendment.


        :param entity_id: The entity_id of this TimerAmendment.  # noqa: E501
        :type: str
        """

        self._entity_id = entity_id

    @property
    def entity(self):
        """Gets the entity of this TimerAmendment.  # noqa: E501


        :return: The entity of this TimerAmendment.  # noqa: E501
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this TimerAmendment.


        :param entity: The entity of this TimerAmendment.  # noqa: E501
        :type: str
        """
        allowed_values = ["AvataxConfiguration", "Notification", "Organization", "Product", "User", "Subscription", "Profile", "ProductRatePlan", "Client", "Invoice", "PricingComponentValue", "Account", "PricingComponentValueChange", "PricingComponentTier", "PricingComponent", "PricingCalculation", "CouponDefinition", "CouponInstance", "CouponModifier", "CouponRule", "CouponBookDefinition", "CouponBook", "InvoiceLine", "Webhook", "SubscriptionCancellation", "NotificationSnapshot", "InvoicePayment", "InvoiceLinePayment", "Payment", "PaymentMethod", "BankAccount", "PaymentMethodSubscriptionLink", "DunningLine", "CybersourceToken", "Card", "Alias", "CouponInstanceExistingValue", "TaxLine", "TaxationStrategy", "TaxationLink", "Address", "AmendmentPriceNTime", "Authority", "UnitOfMeasure", "Amendment", "AuditLog", "Password", "Username", "FixedTermDefinition", "FixedTerm", "Refund", "CreditNote", "Receipt", "AmendmentCompoundConstituent", "APIConfiguration", "StripeToken", "BraintreeToken", "PaypalToken", "AuthorizeNetToken", "SpreedlyToken", "AmendmentDiscardAmendment", "CancellationAmendment", "CompoundAmendment", "CompoundAmendmentConstituent", "FixedTermExpiryAmendment", "InvoiceNextExecutionAttemptAmendment", "PricingComponentValueAmendment", "BraintreeMerchantAccount", "WebhookSubscription", "Migration", "SubscriptionCharge", "StripeACHToken", "OfflinePayment", "CreditNotePayment", "CardVaultPayment", "BraintreePayment", "CybersourcePayment", "PaypalPayment", "StripeACHPayment", "AuthorizeNetPayment", "PricingComponentValueMigrationChargeAmendmentMapping", "ComponentChange", "QuoteRequest", "Quote", "CouponCharge", "CouponInstanceInvoiceLink", "Coupon", "CouponDiscount", "CouponUniqueCodesRequest", "CouponUniqueCodesResponse", "GetCouponsResponse", "AddCouponCodeRequest", "AddCouponCodeResponse", "RemoveCouponFromSubscriptionRequest", "TokenizationPreAuth", "StripeTokenizationPreAuth", "BraintreeTokenizationPreAuth", "SpreedlyTokenizationPreAuth", "SagePayTokenizationPreAuth", "PayVisionTokenizationPreAuth", "TokenizationPreAuthRequest", "AuthCaptureRequest", "StripeACHBankAccountVerification", "PasswordReset", "PricingRequest", "AmendmentPriceRequest", "AddTaxationStrategyRequest", "AddPaymentMethodRequest", "APIRequest", "SagePayToken", "SagePayNotificationRequest", "SagePayNotificationResponse", "SagePayOutstandingTransaction", "SagePayEnabledCardType", "TrustCommerceToken", "SagePayTransaction", "PricingComponentValueResponse", "MigrationResponse", "TimeResponse", "EntityTime", "Email", "MarketplaceConfiguration", "BFPermission", "Role", "PermissionLink", "PayVisionToken", "XeroConfiguration", "XeroMapping", "QuickBooksConfiguration", "QuickBooksWebhookEvent", "PayVisionTransaction", "KashToken", "EmailProvider", "DataSynchronizationJob", "DataSynchronizationJobError", "DataSynchronizationConfiguration", "DataSynchronizationAppConfiguration", "AggregationChildrenResponse", "MetadataKeyValue", "Metadata", "AggregatingComponent", "PricingComponentMigrationValue", "RegistrationResponse", "InvoiceRecalculationAmendment", "IssueInvoiceAmendment", "EmailSubscription", "SubscriptionCheckoutDefinition", "InvoiceCheckoutDefinition", "RevenueAttribution", "AddChargeToAccountResponse", "APIResponse", "PricingComponentUnitCredit", "CurrencyConfiguration", "SubscriptionNotificationConfiguration", "InvoiceTemplateConfig", "ChartMogulConfiguration", "BraintreeUpdateResult", "SubscriptionPricingComponentValueBatchUpdate", "InvoiceRender", "CouponWrapperResponse", "APIQuoteResponseQuantity", "APIQuote", "Contract", "HaltAggregationResponse", "ContractPeriod", "Affiliate", "AffiliateSubscriptionRelationship", "AffiliateRatePlanRelationship", "GoCardlessToken", "SetRatePlanAffiliateRequest", "CommissionStructure", "UserDefinableSalesforceObject", "EpxToken", "EpxPayment", "EpxApiConfiguration", "ZoozToken", "ZoozCustomer", "ZoozPayment", "EmailTokenization", "SubscriptionPlan", "SubscriptionGroup", "LoginAttempt", "InvoiceTemplateConfiguration", "OrganizationProfile", "PaymentMethodResponse", "ShuttleLink", "EmailNotification", "ShuttleHostedPayment", "EBANXPaymentMethod"]  # noqa: E501
        if entity not in allowed_values:
            raise ValueError(
                "Invalid value for `entity` ({0}), must be one of {1}"  # noqa: E501
                .format(entity, allowed_values)
            )

        self._entity = entity

    @property
    def offset_duration(self):
        """Gets the offset_duration of this TimerAmendment.  # noqa: E501


        :return: The offset_duration of this TimerAmendment.  # noqa: E501
        :rtype: int
        """
        return self._offset_duration

    @offset_duration.setter
    def offset_duration(self, offset_duration):
        """Sets the offset_duration of this TimerAmendment.


        :param offset_duration: The offset_duration of this TimerAmendment.  # noqa: E501
        :type: int
        """

        self._offset_duration = offset_duration

    @property
    def offset_period(self):
        """Gets the offset_period of this TimerAmendment.  # noqa: E501


        :return: The offset_period of this TimerAmendment.  # noqa: E501
        :rtype: str
        """
        return self._offset_period

    @offset_period.setter
    def offset_period(self, offset_period):
        """Sets the offset_period of this TimerAmendment.


        :param offset_period: The offset_period of this TimerAmendment.  # noqa: E501
        :type: str
        """
        allowed_values = ["Minutes", "Hours", "Days"]  # noqa: E501
        if offset_period not in allowed_values:
            raise ValueError(
                "Invalid value for `offset_period` ({0}), must be one of {1}"  # noqa: E501
                .format(offset_period, allowed_values)
            )

        self._offset_period = offset_period

    @property
    def offset_direction(self):
        """Gets the offset_direction of this TimerAmendment.  # noqa: E501


        :return: The offset_direction of this TimerAmendment.  # noqa: E501
        :rtype: str
        """
        return self._offset_direction

    @offset_direction.setter
    def offset_direction(self, offset_direction):
        """Sets the offset_direction of this TimerAmendment.


        :param offset_direction: The offset_direction of this TimerAmendment.  # noqa: E501
        :type: str
        """
        allowed_values = ["Before", "After"]  # noqa: E501
        if offset_direction not in allowed_values:
            raise ValueError(
                "Invalid value for `offset_direction` ({0}), must be one of {1}"  # noqa: E501
                .format(offset_direction, allowed_values)
            )

        self._offset_direction = offset_direction

    @property
    def original_event_date(self):
        """Gets the original_event_date of this TimerAmendment.  # noqa: E501


        :return: The original_event_date of this TimerAmendment.  # noqa: E501
        :rtype: datetime
        """
        return self._original_event_date

    @original_event_date.setter
    def original_event_date(self, original_event_date):
        """Sets the original_event_date of this TimerAmendment.


        :param original_event_date: The original_event_date of this TimerAmendment.  # noqa: E501
        :type: datetime
        """

        self._original_event_date = original_event_date

    @property
    def timer_event(self):
        """Gets the timer_event of this TimerAmendment.  # noqa: E501


        :return: The timer_event of this TimerAmendment.  # noqa: E501
        :rtype: str
        """
        return self._timer_event

    @timer_event.setter
    def timer_event(self, timer_event):
        """Sets the timer_event of this TimerAmendment.


        :param timer_event: The timer_event of this TimerAmendment.  # noqa: E501
        :type: str
        """
        allowed_values = ["TrialExpiry", "SubscriptionExpiry", "PeriodEnd"]  # noqa: E501
        if timer_event not in allowed_values:
            raise ValueError(
                "Invalid value for `timer_event` ({0}), must be one of {1}"  # noqa: E501
                .format(timer_event, allowed_values)
            )

        self._timer_event = timer_event

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimerAmendment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimerAmendment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
