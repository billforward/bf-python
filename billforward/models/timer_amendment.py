# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class TimerAmendment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, changed_by=None, updated=None, type=None, id=None, organization_id=None, subscription_id=None, amendment_type=None, actioning_time=None, actioned_time=None, state=None, deleted=False, entity_id=None, entity=None, offset_direction=None, offset_period=None, offset_duration=None, original_event_date=None, timer_event=None):
        """
        TimerAmendment - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'changed_by': 'str',
            'updated': 'datetime',
            'type': 'str',
            'id': 'str',
            'organization_id': 'str',
            'subscription_id': 'str',
            'amendment_type': 'str',
            'actioning_time': 'datetime',
            'actioned_time': 'datetime',
            'state': 'str',
            'deleted': 'bool',
            'entity_id': 'str',
            'entity': 'str',
            'offset_direction': 'str',
            'offset_period': 'str',
            'offset_duration': 'int',
            'original_event_date': 'datetime',
            'timer_event': 'str'
        }

        self.attribute_map = {
            'created': 'created',
            'changed_by': 'changedBy',
            'updated': 'updated',
            'type': '@type',
            'id': 'id',
            'organization_id': 'organizationID',
            'subscription_id': 'subscriptionID',
            'amendment_type': 'amendmentType',
            'actioning_time': 'actioningTime',
            'actioned_time': 'actionedTime',
            'state': 'state',
            'deleted': 'deleted',
            'entity_id': 'entityID',
            'entity': 'entity',
            'offset_direction': 'offsetDirection',
            'offset_period': 'offsetPeriod',
            'offset_duration': 'offsetDuration',
            'original_event_date': 'originalEventDate',
            'timer_event': 'timerEvent'
        }

        self._created = created
        self._changed_by = changed_by
        self._updated = updated
        self._type = type
        self._id = id
        self._organization_id = organization_id
        self._subscription_id = subscription_id
        self._amendment_type = amendment_type
        self._actioning_time = actioning_time
        self._actioned_time = actioned_time
        self._state = state
        self._deleted = deleted
        self._entity_id = entity_id
        self._entity = entity
        self._offset_direction = offset_direction
        self._offset_period = offset_period
        self._offset_duration = offset_duration
        self._original_event_date = original_event_date
        self._timer_event = timer_event

    @property
    def created(self):
        """
        Gets the created of this TimerAmendment.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this TimerAmendment.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this TimerAmendment.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this TimerAmendment.
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """
        Gets the changed_by of this TimerAmendment.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :return: The changed_by of this TimerAmendment.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """
        Sets the changed_by of this TimerAmendment.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :param changed_by: The changed_by of this TimerAmendment.
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """
        Gets the updated of this TimerAmendment.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :return: The updated of this TimerAmendment.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this TimerAmendment.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :param updated: The updated of this TimerAmendment.
        :type: datetime
        """

        self._updated = updated

    @property
    def type(self):
        """
        Gets the type of this TimerAmendment.
        { \"description\" : \"\", \"default\" : \"\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The type of this TimerAmendment.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this TimerAmendment.
        { \"description\" : \"\", \"default\" : \"\", \"verbs\":[\"POST\",\"GET\"] }

        :param type: The type of this TimerAmendment.
        :type: str
        """
        allowed_values = ["InvoiceOutstandingChargesAmendment", "IssueInvoiceAmendment", "PricingComponentValueAmendment", "InvoiceRecalculationAmendment", "CancellationAmendment", "InvoiceNextExecutionAttemptAmendment", "FixedTermExpiryAmendment", "EndTrialAmendment", "ProductRatePlanMigrationAmendment", "AmendmentDiscardAmendment", "UpdateComponentValueAmendment", "ServiceEndAmendment", "ResumeSubscriptionAmendment", "CreateSubscriptionChargeAmendment", "TimerAmendment"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def id(self):
        """
        Gets the id of this TimerAmendment.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :return: The id of this TimerAmendment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this TimerAmendment.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :param id: The id of this TimerAmendment.
        :type: str
        """

        self._id = id

    @property
    def organization_id(self):
        """
        Gets the organization_id of this TimerAmendment.
        { \"description\" : \"\", \"verbs\":[\"\"] }

        :return: The organization_id of this TimerAmendment.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this TimerAmendment.
        { \"description\" : \"\", \"verbs\":[\"\"] }

        :param organization_id: The organization_id of this TimerAmendment.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def subscription_id(self):
        """
        Gets the subscription_id of this TimerAmendment.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The subscription_id of this TimerAmendment.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """
        Sets the subscription_id of this TimerAmendment.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param subscription_id: The subscription_id of this TimerAmendment.
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def amendment_type(self):
        """
        Gets the amendment_type of this TimerAmendment.
        { \"description\" : \"Type of amendment\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The amendment_type of this TimerAmendment.
        :rtype: str
        """
        return self._amendment_type

    @amendment_type.setter
    def amendment_type(self, amendment_type):
        """
        Sets the amendment_type of this TimerAmendment.
        { \"description\" : \"Type of amendment\", \"verbs\":[\"POST\",\"GET\"] }

        :param amendment_type: The amendment_type of this TimerAmendment.
        :type: str
        """
        allowed_values = ["InvoiceNextExecutionAttempt", "Cancellation", "PricingComponentValue", "AmendmentDiscard", "Compound", "FixedTermExpiry", "InvoiceRecalculation", "EndTrial", "InvoiceOutstandingCharges", "IssueInvoice", "ProductRatePlanMigration", "UpdateComponentValue", "ServiceEnd", "ResumeSubscription", "CreateSubscriptionCharge", "Timer"]
        if amendment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `amendment_type` ({0}), must be one of {1}"
                .format(amendment_type, allowed_values)
            )

        self._amendment_type = amendment_type

    @property
    def actioning_time(self):
        """
        Gets the actioning_time of this TimerAmendment.
        { \"description\" : \"When the amendment will run\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The actioning_time of this TimerAmendment.
        :rtype: datetime
        """
        return self._actioning_time

    @actioning_time.setter
    def actioning_time(self, actioning_time):
        """
        Sets the actioning_time of this TimerAmendment.
        { \"description\" : \"When the amendment will run\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param actioning_time: The actioning_time of this TimerAmendment.
        :type: datetime
        """

        self._actioning_time = actioning_time

    @property
    def actioned_time(self):
        """
        Gets the actioned_time of this TimerAmendment.
        { \"description\" : \"The time the amendment completed.\", \"verbs\":[\"GET\"] }

        :return: The actioned_time of this TimerAmendment.
        :rtype: datetime
        """
        return self._actioned_time

    @actioned_time.setter
    def actioned_time(self, actioned_time):
        """
        Sets the actioned_time of this TimerAmendment.
        { \"description\" : \"The time the amendment completed.\", \"verbs\":[\"GET\"] }

        :param actioned_time: The actioned_time of this TimerAmendment.
        :type: datetime
        """

        self._actioned_time = actioned_time

    @property
    def state(self):
        """
        Gets the state of this TimerAmendment.
        Whether the subscription-amendment is: pending (to be actioned in the future), succeeded (actioning completed), failed (actioning was attempted but no effect was made) or discarded (the amendment had been cancelled before being actioned). Default: Pending

        :return: The state of this TimerAmendment.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this TimerAmendment.
        Whether the subscription-amendment is: pending (to be actioned in the future), succeeded (actioning completed), failed (actioning was attempted but no effect was made) or discarded (the amendment had been cancelled before being actioned). Default: Pending

        :param state: The state of this TimerAmendment.
        :type: str
        """
        allowed_values = ["Pending", "Succeeded", "Failed", "Discarded"]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def deleted(self):
        """
        Gets the deleted of this TimerAmendment.
        { \"description\" : \"Is the amendment deleted.\", \"verbs\":[\"GET\"] }

        :return: The deleted of this TimerAmendment.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """
        Sets the deleted of this TimerAmendment.
        { \"description\" : \"Is the amendment deleted.\", \"verbs\":[\"GET\"] }

        :param deleted: The deleted of this TimerAmendment.
        :type: bool
        """

        self._deleted = deleted

    @property
    def entity_id(self):
        """
        Gets the entity_id of this TimerAmendment.


        :return: The entity_id of this TimerAmendment.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """
        Sets the entity_id of this TimerAmendment.


        :param entity_id: The entity_id of this TimerAmendment.
        :type: str
        """

        self._entity_id = entity_id

    @property
    def entity(self):
        """
        Gets the entity of this TimerAmendment.


        :return: The entity of this TimerAmendment.
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """
        Sets the entity of this TimerAmendment.


        :param entity: The entity of this TimerAmendment.
        :type: str
        """
        allowed_values = ["Notification", "Organization", "OrganizationGateway", "Product", "User", "Subscription", "Profile", "ProductRatePlan", "Client", "Invoice", "PricingComponentValue", "Account", "PricingComponentValueChange", "PricingComponentTier", "PricingComponent", "PricingCalculation", "CouponDefinition", "CouponInstance", "CouponModifier", "CouponRule", "CouponBookDefinition", "CouponBook", "InvoiceLine", "Webhook", "SubscriptionCancellation", "NotificationSnapshot", "InvoicePayment", "InvoiceLinePayment", "Payment", "PaymentMethod", "PaymentMethodSubscriptionLink", "DunningLine", "CybersourceToken", "Card", "Alias", "PaypalSimplePaymentReconciliation", "FreePaymentReconciliation", "LocustworldPaymentReconciliation", "CouponInstanceExistingValue", "TaxLine", "TaxationStrategy", "TaxationLink", "Address", "AmendmentPriceNTime", "Authority", "UnitOfMeasure", "SearchResult", "Amendment", "AuditLog", "Password", "Username", "FixedTermDefinition", "FixedTerm", "Refund", "CreditNote", "Receipt", "AmendmentCompoundConstituent", "APIConfiguration", "StripeToken", "BraintreeToken", "BalancedToken", "PaypalToken", "AuthorizeNetToken", "SpreedlyToken", "GatewayRevenue", "AmendmentDiscardAmendment", "CancellationAmendment", "CompoundAmendment", "CompoundAmendmentConstituent", "FixedTermExpiryAmendment", "InvoiceNextExecutionAttemptAmendment", "PricingComponentValueAmendment", "BraintreeMerchantAccount", "WebhookSubscription", "Migration", "CassResult", "CassPaymentResult", "CassProductRatePlanResult", "CassChurnResult", "CassUpgradeResult", "SubscriptionCharge", "CassPaymentPProductResult", "ProductPaymentsArgs", "StripeACHToken", "UsageAmount", "UsageSession", "Usage", "UsagePeriod", "Period", "OfflinePayment", "CreditNotePayment", "CardVaultPayment", "FreePayment", "BraintreePayment", "BalancedPayment", "CybersourcePayment", "PaypalPayment", "PaypalSimplePayment", "LocustWorldPayment", "StripeOnlyPayment", "ProductPaymentsResult", "StripeACHPayment", "AuthorizeNetPayment", "CompoundUsageSession", "CompoundUsage", "UsageRoundingStrategies", "BillforwardManagedPaymentsResult", "PricingComponentValueMigrationChargeAmendmentMapping", "SubscriptionLTVResult", "AccountLTVResult", "ProductRatePlanPaymentsResult", "DebtsResult", "AccountPaymentsResult", "ComponentChange", "QuoteRequest", "Quote", "CouponCharge", "CouponInstanceInvoiceLink", "Coupon", "CouponDiscount", "CouponUniqueCodesRequest", "CouponUniqueCodesResponse", "GetCouponsResponse", "AddCouponCodeRequest", "AddCouponCodeResponse", "RemoveCouponFromSubscriptionRequest", "TokenizationPreAuth", "StripeTokenizationPreAuth", "BraintreeTokenizationPreAuth", "SpreedlyTokenizationPreAuth", "SagePayTokenizationPreAuth", "PayVisionTokenizationPreAuth", "TokenizationPreAuthRequest", "AuthCaptureRequest", "StripeACHBankAccountVerification", "PasswordReset", "PricingRequest", "AddTaxationStrategyRequest", "AddPaymentMethodRequest", "APIRequest", "SagePayToken", "SagePayNotificationRequest", "SagePayNotificationResponse", "SagePayOutstandingTransaction", "SagePayEnabledCardType", "TrustCommerceToken", "SagePayTransaction", "PricingComponentValueResponse", "MigrationResponse", "TimeResponse", "EntityTime", "Email", "AggregationLink", "BFPermission", "Role", "PermissionLink", "PayVisionToken", "PayVisionTransaction", "KashToken", "EmailProvider", "DataSynchronizationJob", "DataSynchronizationJobError", "DataSynchronizationConfiguration", "DataSynchronizationAppConfiguration", "AggregationChildrenResponse", "MetadataKeyValue", "Metadata", "AggregatingComponent", "PricingComponentMigrationValue", "InvoiceRecalculationAmendment", "IssueInvoiceAmendment", "EmailSubscription", "RevenueAttribution"]
        if entity not in allowed_values:
            raise ValueError(
                "Invalid value for `entity` ({0}), must be one of {1}"
                .format(entity, allowed_values)
            )

        self._entity = entity

    @property
    def offset_direction(self):
        """
        Gets the offset_direction of this TimerAmendment.


        :return: The offset_direction of this TimerAmendment.
        :rtype: str
        """
        return self._offset_direction

    @offset_direction.setter
    def offset_direction(self, offset_direction):
        """
        Sets the offset_direction of this TimerAmendment.


        :param offset_direction: The offset_direction of this TimerAmendment.
        :type: str
        """
        allowed_values = ["Before", "After"]
        if offset_direction not in allowed_values:
            raise ValueError(
                "Invalid value for `offset_direction` ({0}), must be one of {1}"
                .format(offset_direction, allowed_values)
            )

        self._offset_direction = offset_direction

    @property
    def offset_period(self):
        """
        Gets the offset_period of this TimerAmendment.


        :return: The offset_period of this TimerAmendment.
        :rtype: str
        """
        return self._offset_period

    @offset_period.setter
    def offset_period(self, offset_period):
        """
        Sets the offset_period of this TimerAmendment.


        :param offset_period: The offset_period of this TimerAmendment.
        :type: str
        """
        allowed_values = ["Minutes", "Hours", "Days"]
        if offset_period not in allowed_values:
            raise ValueError(
                "Invalid value for `offset_period` ({0}), must be one of {1}"
                .format(offset_period, allowed_values)
            )

        self._offset_period = offset_period

    @property
    def offset_duration(self):
        """
        Gets the offset_duration of this TimerAmendment.


        :return: The offset_duration of this TimerAmendment.
        :rtype: int
        """
        return self._offset_duration

    @offset_duration.setter
    def offset_duration(self, offset_duration):
        """
        Sets the offset_duration of this TimerAmendment.


        :param offset_duration: The offset_duration of this TimerAmendment.
        :type: int
        """

        self._offset_duration = offset_duration

    @property
    def original_event_date(self):
        """
        Gets the original_event_date of this TimerAmendment.


        :return: The original_event_date of this TimerAmendment.
        :rtype: datetime
        """
        return self._original_event_date

    @original_event_date.setter
    def original_event_date(self, original_event_date):
        """
        Sets the original_event_date of this TimerAmendment.


        :param original_event_date: The original_event_date of this TimerAmendment.
        :type: datetime
        """

        self._original_event_date = original_event_date

    @property
    def timer_event(self):
        """
        Gets the timer_event of this TimerAmendment.


        :return: The timer_event of this TimerAmendment.
        :rtype: str
        """
        return self._timer_event

    @timer_event.setter
    def timer_event(self, timer_event):
        """
        Sets the timer_event of this TimerAmendment.


        :param timer_event: The timer_event of this TimerAmendment.
        :type: str
        """
        allowed_values = ["TrialExpiry", "SubscriptionExpiry", "PeriodEnd"]
        if timer_event not in allowed_values:
            raise ValueError(
                "Invalid value for `timer_event` ({0}), must be one of {1}"
                .format(timer_event, allowed_values)
            )

        self._timer_event = timer_event

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
