# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreditAccountRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'organization_id': 'str',
        'value': 'float',
        'expires': 'datetime',
        'currency': 'CreditNoteCurrency',
        'invoice_id': 'str',
        'description': 'str'
    }

    attribute_map = {
        'created': 'created',
        'organization_id': 'organizationID',
        'value': 'value',
        'expires': 'expires',
        'currency': 'currency',
        'invoice_id': 'invoiceID',
        'description': 'description'
    }

    def __init__(self, created=None, organization_id=None, value=None, expires=None, currency=None, invoice_id=None, description=None):  # noqa: E501
        """CreditAccountRequest - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._organization_id = None
        self._value = None
        self._expires = None
        self._currency = None
        self._invoice_id = None
        self._description = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if organization_id is not None:
            self.organization_id = organization_id
        if value is not None:
            self.value = value
        if expires is not None:
            self.expires = expires
        if currency is not None:
            self.currency = currency
        if invoice_id is not None:
            self.invoice_id = invoice_id
        if description is not None:
            self.description = description

    @property
    def created(self):
        """Gets the created of this CreditAccountRequest.  # noqa: E501


        :return: The created of this CreditAccountRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this CreditAccountRequest.


        :param created: The created of this CreditAccountRequest.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def organization_id(self):
        """Gets the organization_id of this CreditAccountRequest.  # noqa: E501


        :return: The organization_id of this CreditAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this CreditAccountRequest.


        :param organization_id: The organization_id of this CreditAccountRequest.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def value(self):
        """Gets the value of this CreditAccountRequest.  # noqa: E501


        :return: The value of this CreditAccountRequest.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CreditAccountRequest.


        :param value: The value of this CreditAccountRequest.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def expires(self):
        """Gets the expires of this CreditAccountRequest.  # noqa: E501


        :return: The expires of this CreditAccountRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this CreditAccountRequest.


        :param expires: The expires of this CreditAccountRequest.  # noqa: E501
        :type: datetime
        """

        self._expires = expires

    @property
    def currency(self):
        """Gets the currency of this CreditAccountRequest.  # noqa: E501


        :return: The currency of this CreditAccountRequest.  # noqa: E501
        :rtype: CreditNoteCurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CreditAccountRequest.


        :param currency: The currency of this CreditAccountRequest.  # noqa: E501
        :type: CreditNoteCurrency
        """

        self._currency = currency

    @property
    def invoice_id(self):
        """Gets the invoice_id of this CreditAccountRequest.  # noqa: E501


        :return: The invoice_id of this CreditAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this CreditAccountRequest.


        :param invoice_id: The invoice_id of this CreditAccountRequest.  # noqa: E501
        :type: str
        """

        self._invoice_id = invoice_id

    @property
    def description(self):
        """Gets the description of this CreditAccountRequest.  # noqa: E501


        :return: The description of this CreditAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreditAccountRequest.


        :param description: The description of this CreditAccountRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreditAccountRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreditAccountRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
