# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Coupon(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, changed_by=None, updated=None, name=None, coupon_code=None, coupons=None, uses=None, product=None, product_name=None, product_id=None, product_rate_plan=None, product_rate_plan_name=None, product_rate_plan_id=None, currency=None, parent_coupon_code_redeemable=False, organization_id=None, discounts=None, deleted=False, parent_coupon_code=None, applies_to=None, applies_to_id=None, remaining_uses=None, used=None, discount_value=None, valid_until=None):
        """
        Coupon - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'changed_by': 'str',
            'updated': 'datetime',
            'name': 'str',
            'coupon_code': 'str',
            'coupons': 'int',
            'uses': 'int',
            'product': 'str',
            'product_name': 'str',
            'product_id': 'str',
            'product_rate_plan': 'str',
            'product_rate_plan_name': 'str',
            'product_rate_plan_id': 'str',
            'currency': 'str',
            'parent_coupon_code_redeemable': 'bool',
            'organization_id': 'str',
            'discounts': 'list[CouponDiscount]',
            'deleted': 'bool',
            'parent_coupon_code': 'str',
            'applies_to': 'str',
            'applies_to_id': 'str',
            'remaining_uses': 'int',
            'used': 'int',
            'discount_value': 'float',
            'valid_until': 'datetime'
        }

        self.attribute_map = {
            'created': 'created',
            'changed_by': 'changedBy',
            'updated': 'updated',
            'name': 'name',
            'coupon_code': 'couponCode',
            'coupons': 'coupons',
            'uses': 'uses',
            'product': 'product',
            'product_name': 'productName',
            'product_id': 'productID',
            'product_rate_plan': 'productRatePlan',
            'product_rate_plan_name': 'productRatePlanName',
            'product_rate_plan_id': 'productRatePlanID',
            'currency': 'currency',
            'parent_coupon_code_redeemable': 'parentCouponCodeRedeemable',
            'organization_id': 'organizationID',
            'discounts': 'discounts',
            'deleted': 'deleted',
            'parent_coupon_code': 'parentCouponCode',
            'applies_to': 'appliesTo',
            'applies_to_id': 'appliesToID',
            'remaining_uses': 'remainingUses',
            'used': 'used',
            'discount_value': 'discountValue',
            'valid_until': 'validUntil'
        }

        self._created = created
        self._changed_by = changed_by
        self._updated = updated
        self._name = name
        self._coupon_code = coupon_code
        self._coupons = coupons
        self._uses = uses
        self._product = product
        self._product_name = product_name
        self._product_id = product_id
        self._product_rate_plan = product_rate_plan
        self._product_rate_plan_name = product_rate_plan_name
        self._product_rate_plan_id = product_rate_plan_id
        self._currency = currency
        self._parent_coupon_code_redeemable = parent_coupon_code_redeemable
        self._organization_id = organization_id
        self._discounts = discounts
        self._deleted = deleted
        self._parent_coupon_code = parent_coupon_code
        self._applies_to = applies_to
        self._applies_to_id = applies_to_id
        self._remaining_uses = remaining_uses
        self._used = used
        self._discount_value = discount_value
        self._valid_until = valid_until

    @property
    def created(self):
        """
        Gets the created of this Coupon.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this Coupon.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this Coupon.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this Coupon.
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """
        Gets the changed_by of this Coupon.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :return: The changed_by of this Coupon.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """
        Sets the changed_by of this Coupon.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :param changed_by: The changed_by of this Coupon.
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """
        Gets the updated of this Coupon.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :return: The updated of this Coupon.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this Coupon.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :param updated: The updated of this Coupon.
        :type: datetime
        """

        self._updated = updated

    @property
    def name(self):
        """
        Gets the name of this Coupon.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The name of this Coupon.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Coupon.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"GET\"] }

        :param name: The name of this Coupon.
        :type: str
        """

        self._name = name

    @property
    def coupon_code(self):
        """
        Gets the coupon_code of this Coupon.
        { \"description\" : \"Code used to identify this set of coupons. If unique codes are required this will be used as the prefix to generate individual coupon codes. When a unique code is returned the original couponCode is returned in the parentCouponCode property. For example a single coupon code SUMMER maybe be issued at an event to encourage sign-up, the same code can be redeemed by multiple accounts. In another example you may want to issue unique coupon codes per a customer, for example SUMMER-A4FC, SUMMER-BCQ4, each code can only be calimed once.\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The coupon_code of this Coupon.
        :rtype: str
        """
        return self._coupon_code

    @coupon_code.setter
    def coupon_code(self, coupon_code):
        """
        Sets the coupon_code of this Coupon.
        { \"description\" : \"Code used to identify this set of coupons. If unique codes are required this will be used as the prefix to generate individual coupon codes. When a unique code is returned the original couponCode is returned in the parentCouponCode property. For example a single coupon code SUMMER maybe be issued at an event to encourage sign-up, the same code can be redeemed by multiple accounts. In another example you may want to issue unique coupon codes per a customer, for example SUMMER-A4FC, SUMMER-BCQ4, each code can only be calimed once.\", \"verbs\":[\"POST\",\"GET\"] }

        :param coupon_code: The coupon_code of this Coupon.
        :type: str
        """

        self._coupon_code = coupon_code

    @property
    def coupons(self):
        """
        Gets the coupons of this Coupon.
        { \"default\" : \"&infin;\", \"description\" : \"Number of times the coupon can be claimed. In the case of generating unique coupon codes this is the maximum quantity that can be genereated. For example set this value to 10 if you want to limit the total number of subscriptions that will use this code to 10.\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The coupons of this Coupon.
        :rtype: int
        """
        return self._coupons

    @coupons.setter
    def coupons(self, coupons):
        """
        Sets the coupons of this Coupon.
        { \"default\" : \"&infin;\", \"description\" : \"Number of times the coupon can be claimed. In the case of generating unique coupon codes this is the maximum quantity that can be genereated. For example set this value to 10 if you want to limit the total number of subscriptions that will use this code to 10.\", \"verbs\":[\"POST\",\"GET\"] }

        :param coupons: The coupons of this Coupon.
        :type: int
        """

        self._coupons = coupons

    @property
    def uses(self):
        """
        Gets the uses of this Coupon.
        { \"default\" : \"&infin;\", \"description\" : \"This specifies how many times a discount will be added to a subscription once the coupon is added. For example if the uses is set to 3 it will discount 3 times, set this to a large number, for example 9999999, to give infinite applications, .\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The uses of this Coupon.
        :rtype: int
        """
        return self._uses

    @uses.setter
    def uses(self, uses):
        """
        Sets the uses of this Coupon.
        { \"default\" : \"&infin;\", \"description\" : \"This specifies how many times a discount will be added to a subscription once the coupon is added. For example if the uses is set to 3 it will discount 3 times, set this to a large number, for example 9999999, to give infinite applications, .\", \"verbs\":[\"POST\",\"GET\"] }

        :param uses: The uses of this Coupon.
        :type: int
        """

        self._uses = uses

    @property
    def product(self):
        """
        Gets the product of this Coupon.
        { \"description\" : \"Name or ID of the product this coupon applies to. Requires a specific rate-plan to be set.\", \"verbs\":[\"POST\"] }

        :return: The product of this Coupon.
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """
        Sets the product of this Coupon.
        { \"description\" : \"Name or ID of the product this coupon applies to. Requires a specific rate-plan to be set.\", \"verbs\":[\"POST\"] }

        :param product: The product of this Coupon.
        :type: str
        """

        self._product = product

    @property
    def product_name(self):
        """
        Gets the product_name of this Coupon.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :return: The product_name of this Coupon.
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """
        Sets the product_name of this Coupon.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :param product_name: The product_name of this Coupon.
        :type: str
        """

        self._product_name = product_name

    @property
    def product_id(self):
        """
        Gets the product_id of this Coupon.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :return: The product_id of this Coupon.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """
        Sets the product_id of this Coupon.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :param product_id: The product_id of this Coupon.
        :type: str
        """

        self._product_id = product_id

    @property
    def product_rate_plan(self):
        """
        Gets the product_rate_plan of this Coupon.
        { \"description\" : \"Name or ID of the rate-plan this coupon applies to. \", \"verbs\":[\"POST\"] }

        :return: The product_rate_plan of this Coupon.
        :rtype: str
        """
        return self._product_rate_plan

    @product_rate_plan.setter
    def product_rate_plan(self, product_rate_plan):
        """
        Sets the product_rate_plan of this Coupon.
        { \"description\" : \"Name or ID of the rate-plan this coupon applies to. \", \"verbs\":[\"POST\"] }

        :param product_rate_plan: The product_rate_plan of this Coupon.
        :type: str
        """

        self._product_rate_plan = product_rate_plan

    @property
    def product_rate_plan_name(self):
        """
        Gets the product_rate_plan_name of this Coupon.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :return: The product_rate_plan_name of this Coupon.
        :rtype: str
        """
        return self._product_rate_plan_name

    @product_rate_plan_name.setter
    def product_rate_plan_name(self, product_rate_plan_name):
        """
        Sets the product_rate_plan_name of this Coupon.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :param product_rate_plan_name: The product_rate_plan_name of this Coupon.
        :type: str
        """

        self._product_rate_plan_name = product_rate_plan_name

    @property
    def product_rate_plan_id(self):
        """
        Gets the product_rate_plan_id of this Coupon.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :return: The product_rate_plan_id of this Coupon.
        :rtype: str
        """
        return self._product_rate_plan_id

    @product_rate_plan_id.setter
    def product_rate_plan_id(self, product_rate_plan_id):
        """
        Sets the product_rate_plan_id of this Coupon.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :param product_rate_plan_id: The product_rate_plan_id of this Coupon.
        :type: str
        """

        self._product_rate_plan_id = product_rate_plan_id

    @property
    def currency(self):
        """
        Gets the currency of this Coupon.
        { \"description\" : \"If the coupon is not for a specific rate-plan, and can apply to any subscription, the currency should be provivded. Currency is specified by a three character ISO 4217 currency code.\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The currency of this Coupon.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """
        Sets the currency of this Coupon.
        { \"description\" : \"If the coupon is not for a specific rate-plan, and can apply to any subscription, the currency should be provivded. Currency is specified by a three character ISO 4217 currency code.\", \"verbs\":[\"POST\",\"GET\"] }

        :param currency: The currency of this Coupon.
        :type: str
        """

        self._currency = currency

    @property
    def parent_coupon_code_redeemable(self):
        """
        Gets the parent_coupon_code_redeemable of this Coupon.
        {  \"default\" : \"true\", \"description\" : \"If true the coupon without postfix can be added to a subscription, for example if parentCouponCodeRedeemable is true and the coupon was created with code SUMMER customers could claim using SUMMER. If parentCouponCodeRedeemable is false then only unique coupon codes can be claimed, for example SUMMER-AB4C, SUMMER-YZB4.\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The parent_coupon_code_redeemable of this Coupon.
        :rtype: bool
        """
        return self._parent_coupon_code_redeemable

    @parent_coupon_code_redeemable.setter
    def parent_coupon_code_redeemable(self, parent_coupon_code_redeemable):
        """
        Sets the parent_coupon_code_redeemable of this Coupon.
        {  \"default\" : \"true\", \"description\" : \"If true the coupon without postfix can be added to a subscription, for example if parentCouponCodeRedeemable is true and the coupon was created with code SUMMER customers could claim using SUMMER. If parentCouponCodeRedeemable is false then only unique coupon codes can be claimed, for example SUMMER-AB4C, SUMMER-YZB4.\", \"verbs\":[\"POST\",\"GET\"] }

        :param parent_coupon_code_redeemable: The parent_coupon_code_redeemable of this Coupon.
        :type: bool
        """

        self._parent_coupon_code_redeemable = parent_coupon_code_redeemable

    @property
    def organization_id(self):
        """
        Gets the organization_id of this Coupon.


        :return: The organization_id of this Coupon.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this Coupon.


        :param organization_id: The organization_id of this Coupon.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def discounts(self):
        """
        Gets the discounts of this Coupon.
        { \"description\" : \"For each discount item on the coupon, only one discount type should be set between cashDiscount, percentageDiscount and unitsFree. cashDiscount gives a fixed monetary discount, for example $10.00. percentageDiscount gives a percentage discount on the overall invoice cost. unitsFree discounts the pricing by the number of units specified for that component. All discounts are applied against the base cost or units. Discounts are not compound. Discounts will never exceed the value of a pricing component of the overall invoice - thus at most the discount will reduce the cost to zero. If no pricing component is specified the discount will apply to the total invoice cost.\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The discounts of this Coupon.
        :rtype: list[CouponDiscount]
        """
        return self._discounts

    @discounts.setter
    def discounts(self, discounts):
        """
        Sets the discounts of this Coupon.
        { \"description\" : \"For each discount item on the coupon, only one discount type should be set between cashDiscount, percentageDiscount and unitsFree. cashDiscount gives a fixed monetary discount, for example $10.00. percentageDiscount gives a percentage discount on the overall invoice cost. unitsFree discounts the pricing by the number of units specified for that component. All discounts are applied against the base cost or units. Discounts are not compound. Discounts will never exceed the value of a pricing component of the overall invoice - thus at most the discount will reduce the cost to zero. If no pricing component is specified the discount will apply to the total invoice cost.\", \"verbs\":[\"POST\",\"GET\"] }

        :param discounts: The discounts of this Coupon.
        :type: list[CouponDiscount]
        """

        self._discounts = discounts

    @property
    def deleted(self):
        """
        Gets the deleted of this Coupon.
        { \"description\" : \"If a coupon has been deleted, any subsequent attempts to add it to a subscription will fail. Note: This will not affect existing subscription using the coupon. Please see deleting a coupon for more details\", \"verbs\":[\"GET\"] }

        :return: The deleted of this Coupon.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """
        Sets the deleted of this Coupon.
        { \"description\" : \"If a coupon has been deleted, any subsequent attempts to add it to a subscription will fail. Note: This will not affect existing subscription using the coupon. Please see deleting a coupon for more details\", \"verbs\":[\"GET\"] }

        :param deleted: The deleted of this Coupon.
        :type: bool
        """

        self._deleted = deleted

    @property
    def parent_coupon_code(self):
        """
        Gets the parent_coupon_code of this Coupon.
        { \"description\" : \"For unique coupon codes this is the original coupon code, for example SUMMER\", \"verbs\":[\"GET\"] }

        :return: The parent_coupon_code of this Coupon.
        :rtype: str
        """
        return self._parent_coupon_code

    @parent_coupon_code.setter
    def parent_coupon_code(self, parent_coupon_code):
        """
        Sets the parent_coupon_code of this Coupon.
        { \"description\" : \"For unique coupon codes this is the original coupon code, for example SUMMER\", \"verbs\":[\"GET\"] }

        :param parent_coupon_code: The parent_coupon_code of this Coupon.
        :type: str
        """

        self._parent_coupon_code = parent_coupon_code

    @property
    def applies_to(self):
        """
        Gets the applies_to of this Coupon.
        { \"description\" : \"For unique coupon codes this is what the coupon applies to, usually subscription.\", \"verbs\":[\"GET\"] }

        :return: The applies_to of this Coupon.
        :rtype: str
        """
        return self._applies_to

    @applies_to.setter
    def applies_to(self, applies_to):
        """
        Sets the applies_to of this Coupon.
        { \"description\" : \"For unique coupon codes this is what the coupon applies to, usually subscription.\", \"verbs\":[\"GET\"] }

        :param applies_to: The applies_to of this Coupon.
        :type: str
        """
        allowed_values = ["none", "subscription", "account"]
        if applies_to not in allowed_values:
            raise ValueError(
                "Invalid value for `applies_to` ({0}), must be one of {1}"
                .format(applies_to, allowed_values)
            )

        self._applies_to = applies_to

    @property
    def applies_to_id(self):
        """
        Gets the applies_to_id of this Coupon.
        { \"description\" : \"For a coupon added to a subscription this is the the ID of the subscription. This can be used to remove the coupon from the target.\", \"verbs\":[\"GET\"] }

        :return: The applies_to_id of this Coupon.
        :rtype: str
        """
        return self._applies_to_id

    @applies_to_id.setter
    def applies_to_id(self, applies_to_id):
        """
        Sets the applies_to_id of this Coupon.
        { \"description\" : \"For a coupon added to a subscription this is the the ID of the subscription. This can be used to remove the coupon from the target.\", \"verbs\":[\"GET\"] }

        :param applies_to_id: The applies_to_id of this Coupon.
        :type: str
        """

        self._applies_to_id = applies_to_id

    @property
    def remaining_uses(self):
        """
        Gets the remaining_uses of this Coupon.
        {  \"description\" : \"\", \"verbs\":[\"GET\"] }

        :return: The remaining_uses of this Coupon.
        :rtype: int
        """
        return self._remaining_uses

    @remaining_uses.setter
    def remaining_uses(self, remaining_uses):
        """
        Sets the remaining_uses of this Coupon.
        {  \"description\" : \"\", \"verbs\":[\"GET\"] }

        :param remaining_uses: The remaining_uses of this Coupon.
        :type: int
        """

        self._remaining_uses = remaining_uses

    @property
    def used(self):
        """
        Gets the used of this Coupon.
        {  \"description\" : \"\", \"verbs\":[\"GET\"] }

        :return: The used of this Coupon.
        :rtype: int
        """
        return self._used

    @used.setter
    def used(self, used):
        """
        Sets the used of this Coupon.
        {  \"description\" : \"\", \"verbs\":[\"GET\"] }

        :param used: The used of this Coupon.
        :type: int
        """

        self._used = used

    @property
    def discount_value(self):
        """
        Gets the discount_value of this Coupon.


        :return: The discount_value of this Coupon.
        :rtype: float
        """
        return self._discount_value

    @discount_value.setter
    def discount_value(self, discount_value):
        """
        Sets the discount_value of this Coupon.


        :param discount_value: The discount_value of this Coupon.
        :type: float
        """

        self._discount_value = discount_value

    @property
    def valid_until(self):
        """
        Gets the valid_until of this Coupon.
        { \"description\" : \"If the coupon was removed from the subscription this is the date and time from when it no ceased to be applied.\", \"verbs\":[\"GET\"] }

        :return: The valid_until of this Coupon.
        :rtype: datetime
        """
        return self._valid_until

    @valid_until.setter
    def valid_until(self, valid_until):
        """
        Sets the valid_until of this Coupon.
        { \"description\" : \"If the coupon was removed from the subscription this is the date and time from when it no ceased to be applied.\", \"verbs\":[\"GET\"] }

        :param valid_until: The valid_until of this Coupon.
        :type: datetime
        """

        self._valid_until = valid_until

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
