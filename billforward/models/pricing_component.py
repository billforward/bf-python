# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PricingComponent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'changed_by': 'str',
        'updated': 'datetime',
        'dummy_field': 'str',
        'crm_id': 'str',
        'product_rate_plan_id': 'str',
        'product_rate_plan_version_id': 'str',
        'unit_of_measure_id': 'str',
        'organization_id': 'str',
        'name': 'str',
        'public_name': 'str',
        'description': 'str',
        'tax_code': 'str',
        'charge_type': 'str',
        'invoicing_type': 'str',
        'charge_model': 'str',
        'upgrade_mode': 'str',
        'downgrade_mode': 'str',
        'default_quantity': 'int',
        'min_quantity': 'int',
        'max_quantity': 'int',
        'valid_from': 'datetime',
        'valid_till': 'datetime',
        'unit_credit': 'int',
        'tiers': 'list[PricingComponentTier]',
        'unit_of_measure': 'UnitOfMeasure',
        'sorted_tiers': 'list[PricingComponentTier]',
        'version_id': 'str',
        'id': 'str',
        'type': 'str'
    }

    attribute_map = {
        'created': 'created',
        'changed_by': 'changedBy',
        'updated': 'updated',
        'dummy_field': 'dummyField',
        'crm_id': 'crmID',
        'product_rate_plan_id': 'productRatePlanID',
        'product_rate_plan_version_id': 'productRatePlanVersionID',
        'unit_of_measure_id': 'unitOfMeasureID',
        'organization_id': 'organizationID',
        'name': 'name',
        'public_name': 'publicName',
        'description': 'description',
        'tax_code': 'taxCode',
        'charge_type': 'chargeType',
        'invoicing_type': 'invoicingType',
        'charge_model': 'chargeModel',
        'upgrade_mode': 'upgradeMode',
        'downgrade_mode': 'downgradeMode',
        'default_quantity': 'defaultQuantity',
        'min_quantity': 'minQuantity',
        'max_quantity': 'maxQuantity',
        'valid_from': 'validFrom',
        'valid_till': 'validTill',
        'unit_credit': 'unitCredit',
        'tiers': 'tiers',
        'unit_of_measure': 'unitOfMeasure',
        'sorted_tiers': 'sortedTiers',
        'version_id': 'versionID',
        'id': 'id',
        'type': '@type'
    }

    discriminator_value_class_map = {
          'TieredPricingComponent': 'TieredPricingComponent',
'FlatPricingComponent': 'FlatPricingComponent',
'TieredVolumePricingComponent': 'TieredVolumePricingComponent'    }

    def __init__(self, created=None, changed_by=None, updated=None, dummy_field=None, crm_id=None, product_rate_plan_id=None, product_rate_plan_version_id=None, unit_of_measure_id=None, organization_id=None, name=None, public_name=None, description=None, tax_code=None, charge_type=None, invoicing_type=None, charge_model=None, upgrade_mode=None, downgrade_mode=None, default_quantity=None, min_quantity=None, max_quantity=None, valid_from=None, valid_till=None, unit_credit=None, tiers=None, unit_of_measure=None, sorted_tiers=None, version_id=None, id=None, type=None):  # noqa: E501
        """PricingComponent - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._changed_by = None
        self._updated = None
        self._dummy_field = None
        self._crm_id = None
        self._product_rate_plan_id = None
        self._product_rate_plan_version_id = None
        self._unit_of_measure_id = None
        self._organization_id = None
        self._name = None
        self._public_name = None
        self._description = None
        self._tax_code = None
        self._charge_type = None
        self._invoicing_type = None
        self._charge_model = None
        self._upgrade_mode = None
        self._downgrade_mode = None
        self._default_quantity = None
        self._min_quantity = None
        self._max_quantity = None
        self._valid_from = None
        self._valid_till = None
        self._unit_credit = None
        self._tiers = None
        self._unit_of_measure = None
        self._sorted_tiers = None
        self._version_id = None
        self._id = None
        self._type = None
        self.discriminator = '@type'
        if created is not None:
            self.created = created
        if changed_by is not None:
            self.changed_by = changed_by
        if updated is not None:
            self.updated = updated
        if dummy_field is not None:
            self.dummy_field = dummy_field
        if crm_id is not None:
            self.crm_id = crm_id
        self.product_rate_plan_id = product_rate_plan_id
        self.product_rate_plan_version_id = product_rate_plan_version_id
        self.unit_of_measure_id = unit_of_measure_id
        self.organization_id = organization_id
        self.name = name
        if public_name is not None:
            self.public_name = public_name
        if description is not None:
            self.description = description
        if tax_code is not None:
            self.tax_code = tax_code
        self.charge_type = charge_type
        if invoicing_type is not None:
            self.invoicing_type = invoicing_type
        if charge_model is not None:
            self.charge_model = charge_model
        if upgrade_mode is not None:
            self.upgrade_mode = upgrade_mode
        if downgrade_mode is not None:
            self.downgrade_mode = downgrade_mode
        if default_quantity is not None:
            self.default_quantity = default_quantity
        if min_quantity is not None:
            self.min_quantity = min_quantity
        if max_quantity is not None:
            self.max_quantity = max_quantity
        self.valid_from = valid_from
        if valid_till is not None:
            self.valid_till = valid_till
        if unit_credit is not None:
            self.unit_credit = unit_credit
        if tiers is not None:
            self.tiers = tiers
        if unit_of_measure is not None:
            self.unit_of_measure = unit_of_measure
        if sorted_tiers is not None:
            self.sorted_tiers = sorted_tiers
        if version_id is not None:
            self.version_id = version_id
        self.id = id
        self.type = type

    @property
    def created(self):
        """Gets the created of this PricingComponent.  # noqa: E501


        :return: The created of this PricingComponent.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this PricingComponent.


        :param created: The created of this PricingComponent.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """Gets the changed_by of this PricingComponent.  # noqa: E501


        :return: The changed_by of this PricingComponent.  # noqa: E501
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """Sets the changed_by of this PricingComponent.


        :param changed_by: The changed_by of this PricingComponent.  # noqa: E501
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """Gets the updated of this PricingComponent.  # noqa: E501


        :return: The updated of this PricingComponent.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this PricingComponent.


        :param updated: The updated of this PricingComponent.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def dummy_field(self):
        """Gets the dummy_field of this PricingComponent.  # noqa: E501


        :return: The dummy_field of this PricingComponent.  # noqa: E501
        :rtype: str
        """
        return self._dummy_field

    @dummy_field.setter
    def dummy_field(self, dummy_field):
        """Sets the dummy_field of this PricingComponent.


        :param dummy_field: The dummy_field of this PricingComponent.  # noqa: E501
        :type: str
        """

        self._dummy_field = dummy_field

    @property
    def crm_id(self):
        """Gets the crm_id of this PricingComponent.  # noqa: E501


        :return: The crm_id of this PricingComponent.  # noqa: E501
        :rtype: str
        """
        return self._crm_id

    @crm_id.setter
    def crm_id(self, crm_id):
        """Sets the crm_id of this PricingComponent.


        :param crm_id: The crm_id of this PricingComponent.  # noqa: E501
        :type: str
        """

        self._crm_id = crm_id

    @property
    def product_rate_plan_id(self):
        """Gets the product_rate_plan_id of this PricingComponent.  # noqa: E501


        :return: The product_rate_plan_id of this PricingComponent.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_id

    @product_rate_plan_id.setter
    def product_rate_plan_id(self, product_rate_plan_id):
        """Sets the product_rate_plan_id of this PricingComponent.


        :param product_rate_plan_id: The product_rate_plan_id of this PricingComponent.  # noqa: E501
        :type: str
        """
        if product_rate_plan_id is None:
            raise ValueError("Invalid value for `product_rate_plan_id`, must not be `None`")  # noqa: E501

        self._product_rate_plan_id = product_rate_plan_id

    @property
    def product_rate_plan_version_id(self):
        """Gets the product_rate_plan_version_id of this PricingComponent.  # noqa: E501


        :return: The product_rate_plan_version_id of this PricingComponent.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_version_id

    @product_rate_plan_version_id.setter
    def product_rate_plan_version_id(self, product_rate_plan_version_id):
        """Sets the product_rate_plan_version_id of this PricingComponent.


        :param product_rate_plan_version_id: The product_rate_plan_version_id of this PricingComponent.  # noqa: E501
        :type: str
        """
        if product_rate_plan_version_id is None:
            raise ValueError("Invalid value for `product_rate_plan_version_id`, must not be `None`")  # noqa: E501

        self._product_rate_plan_version_id = product_rate_plan_version_id

    @property
    def unit_of_measure_id(self):
        """Gets the unit_of_measure_id of this PricingComponent.  # noqa: E501


        :return: The unit_of_measure_id of this PricingComponent.  # noqa: E501
        :rtype: str
        """
        return self._unit_of_measure_id

    @unit_of_measure_id.setter
    def unit_of_measure_id(self, unit_of_measure_id):
        """Sets the unit_of_measure_id of this PricingComponent.


        :param unit_of_measure_id: The unit_of_measure_id of this PricingComponent.  # noqa: E501
        :type: str
        """
        if unit_of_measure_id is None:
            raise ValueError("Invalid value for `unit_of_measure_id`, must not be `None`")  # noqa: E501

        self._unit_of_measure_id = unit_of_measure_id

    @property
    def organization_id(self):
        """Gets the organization_id of this PricingComponent.  # noqa: E501


        :return: The organization_id of this PricingComponent.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this PricingComponent.


        :param organization_id: The organization_id of this PricingComponent.  # noqa: E501
        :type: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")  # noqa: E501

        self._organization_id = organization_id

    @property
    def name(self):
        """Gets the name of this PricingComponent.  # noqa: E501


        :return: The name of this PricingComponent.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PricingComponent.


        :param name: The name of this PricingComponent.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def public_name(self):
        """Gets the public_name of this PricingComponent.  # noqa: E501


        :return: The public_name of this PricingComponent.  # noqa: E501
        :rtype: str
        """
        return self._public_name

    @public_name.setter
    def public_name(self, public_name):
        """Sets the public_name of this PricingComponent.


        :param public_name: The public_name of this PricingComponent.  # noqa: E501
        :type: str
        """

        self._public_name = public_name

    @property
    def description(self):
        """Gets the description of this PricingComponent.  # noqa: E501


        :return: The description of this PricingComponent.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PricingComponent.


        :param description: The description of this PricingComponent.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def tax_code(self):
        """Gets the tax_code of this PricingComponent.  # noqa: E501


        :return: The tax_code of this PricingComponent.  # noqa: E501
        :rtype: str
        """
        return self._tax_code

    @tax_code.setter
    def tax_code(self, tax_code):
        """Sets the tax_code of this PricingComponent.


        :param tax_code: The tax_code of this PricingComponent.  # noqa: E501
        :type: str
        """

        self._tax_code = tax_code

    @property
    def charge_type(self):
        """Gets the charge_type of this PricingComponent.  # noqa: E501


        :return: The charge_type of this PricingComponent.  # noqa: E501
        :rtype: str
        """
        return self._charge_type

    @charge_type.setter
    def charge_type(self, charge_type):
        """Sets the charge_type of this PricingComponent.


        :param charge_type: The charge_type of this PricingComponent.  # noqa: E501
        :type: str
        """
        if charge_type is None:
            raise ValueError("Invalid value for `charge_type`, must not be `None`")  # noqa: E501
        allowed_values = ["setup", "subscription", "arrears", "usage"]  # noqa: E501
        if charge_type not in allowed_values:
            raise ValueError(
                "Invalid value for `charge_type` ({0}), must be one of {1}"  # noqa: E501
                .format(charge_type, allowed_values)
            )

        self._charge_type = charge_type

    @property
    def invoicing_type(self):
        """Gets the invoicing_type of this PricingComponent.  # noqa: E501


        :return: The invoicing_type of this PricingComponent.  # noqa: E501
        :rtype: str
        """
        return self._invoicing_type

    @invoicing_type.setter
    def invoicing_type(self, invoicing_type):
        """Sets the invoicing_type of this PricingComponent.


        :param invoicing_type: The invoicing_type of this PricingComponent.  # noqa: E501
        :type: str
        """
        allowed_values = ["Immediate", "Aggregated"]  # noqa: E501
        if invoicing_type not in allowed_values:
            raise ValueError(
                "Invalid value for `invoicing_type` ({0}), must be one of {1}"  # noqa: E501
                .format(invoicing_type, allowed_values)
            )

        self._invoicing_type = invoicing_type

    @property
    def charge_model(self):
        """Gets the charge_model of this PricingComponent.  # noqa: E501


        :return: The charge_model of this PricingComponent.  # noqa: E501
        :rtype: str
        """
        return self._charge_model

    @charge_model.setter
    def charge_model(self, charge_model):
        """Sets the charge_model of this PricingComponent.


        :param charge_model: The charge_model of this PricingComponent.  # noqa: E501
        :type: str
        """
        allowed_values = ["flat", "tiered", "tiered_volume"]  # noqa: E501
        if charge_model not in allowed_values:
            raise ValueError(
                "Invalid value for `charge_model` ({0}), must be one of {1}"  # noqa: E501
                .format(charge_model, allowed_values)
            )

        self._charge_model = charge_model

    @property
    def upgrade_mode(self):
        """Gets the upgrade_mode of this PricingComponent.  # noqa: E501


        :return: The upgrade_mode of this PricingComponent.  # noqa: E501
        :rtype: str
        """
        return self._upgrade_mode

    @upgrade_mode.setter
    def upgrade_mode(self, upgrade_mode):
        """Sets the upgrade_mode of this PricingComponent.


        :param upgrade_mode: The upgrade_mode of this PricingComponent.  # noqa: E501
        :type: str
        """
        allowed_values = ["immediate", "delayed"]  # noqa: E501
        if upgrade_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `upgrade_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(upgrade_mode, allowed_values)
            )

        self._upgrade_mode = upgrade_mode

    @property
    def downgrade_mode(self):
        """Gets the downgrade_mode of this PricingComponent.  # noqa: E501


        :return: The downgrade_mode of this PricingComponent.  # noqa: E501
        :rtype: str
        """
        return self._downgrade_mode

    @downgrade_mode.setter
    def downgrade_mode(self, downgrade_mode):
        """Sets the downgrade_mode of this PricingComponent.


        :param downgrade_mode: The downgrade_mode of this PricingComponent.  # noqa: E501
        :type: str
        """
        allowed_values = ["immediate", "delayed"]  # noqa: E501
        if downgrade_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `downgrade_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(downgrade_mode, allowed_values)
            )

        self._downgrade_mode = downgrade_mode

    @property
    def default_quantity(self):
        """Gets the default_quantity of this PricingComponent.  # noqa: E501


        :return: The default_quantity of this PricingComponent.  # noqa: E501
        :rtype: int
        """
        return self._default_quantity

    @default_quantity.setter
    def default_quantity(self, default_quantity):
        """Sets the default_quantity of this PricingComponent.


        :param default_quantity: The default_quantity of this PricingComponent.  # noqa: E501
        :type: int
        """

        self._default_quantity = default_quantity

    @property
    def min_quantity(self):
        """Gets the min_quantity of this PricingComponent.  # noqa: E501


        :return: The min_quantity of this PricingComponent.  # noqa: E501
        :rtype: int
        """
        return self._min_quantity

    @min_quantity.setter
    def min_quantity(self, min_quantity):
        """Sets the min_quantity of this PricingComponent.


        :param min_quantity: The min_quantity of this PricingComponent.  # noqa: E501
        :type: int
        """

        self._min_quantity = min_quantity

    @property
    def max_quantity(self):
        """Gets the max_quantity of this PricingComponent.  # noqa: E501


        :return: The max_quantity of this PricingComponent.  # noqa: E501
        :rtype: int
        """
        return self._max_quantity

    @max_quantity.setter
    def max_quantity(self, max_quantity):
        """Sets the max_quantity of this PricingComponent.


        :param max_quantity: The max_quantity of this PricingComponent.  # noqa: E501
        :type: int
        """

        self._max_quantity = max_quantity

    @property
    def valid_from(self):
        """Gets the valid_from of this PricingComponent.  # noqa: E501


        :return: The valid_from of this PricingComponent.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this PricingComponent.


        :param valid_from: The valid_from of this PricingComponent.  # noqa: E501
        :type: datetime
        """
        if valid_from is None:
            raise ValueError("Invalid value for `valid_from`, must not be `None`")  # noqa: E501

        self._valid_from = valid_from

    @property
    def valid_till(self):
        """Gets the valid_till of this PricingComponent.  # noqa: E501


        :return: The valid_till of this PricingComponent.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_till

    @valid_till.setter
    def valid_till(self, valid_till):
        """Sets the valid_till of this PricingComponent.


        :param valid_till: The valid_till of this PricingComponent.  # noqa: E501
        :type: datetime
        """

        self._valid_till = valid_till

    @property
    def unit_credit(self):
        """Gets the unit_credit of this PricingComponent.  # noqa: E501


        :return: The unit_credit of this PricingComponent.  # noqa: E501
        :rtype: int
        """
        return self._unit_credit

    @unit_credit.setter
    def unit_credit(self, unit_credit):
        """Sets the unit_credit of this PricingComponent.


        :param unit_credit: The unit_credit of this PricingComponent.  # noqa: E501
        :type: int
        """

        self._unit_credit = unit_credit

    @property
    def tiers(self):
        """Gets the tiers of this PricingComponent.  # noqa: E501


        :return: The tiers of this PricingComponent.  # noqa: E501
        :rtype: list[PricingComponentTier]
        """
        return self._tiers

    @tiers.setter
    def tiers(self, tiers):
        """Sets the tiers of this PricingComponent.


        :param tiers: The tiers of this PricingComponent.  # noqa: E501
        :type: list[PricingComponentTier]
        """

        self._tiers = tiers

    @property
    def unit_of_measure(self):
        """Gets the unit_of_measure of this PricingComponent.  # noqa: E501


        :return: The unit_of_measure of this PricingComponent.  # noqa: E501
        :rtype: UnitOfMeasure
        """
        return self._unit_of_measure

    @unit_of_measure.setter
    def unit_of_measure(self, unit_of_measure):
        """Sets the unit_of_measure of this PricingComponent.


        :param unit_of_measure: The unit_of_measure of this PricingComponent.  # noqa: E501
        :type: UnitOfMeasure
        """

        self._unit_of_measure = unit_of_measure

    @property
    def sorted_tiers(self):
        """Gets the sorted_tiers of this PricingComponent.  # noqa: E501


        :return: The sorted_tiers of this PricingComponent.  # noqa: E501
        :rtype: list[PricingComponentTier]
        """
        return self._sorted_tiers

    @sorted_tiers.setter
    def sorted_tiers(self, sorted_tiers):
        """Sets the sorted_tiers of this PricingComponent.


        :param sorted_tiers: The sorted_tiers of this PricingComponent.  # noqa: E501
        :type: list[PricingComponentTier]
        """

        self._sorted_tiers = sorted_tiers

    @property
    def version_id(self):
        """Gets the version_id of this PricingComponent.  # noqa: E501


        :return: The version_id of this PricingComponent.  # noqa: E501
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this PricingComponent.


        :param version_id: The version_id of this PricingComponent.  # noqa: E501
        :type: str
        """

        self._version_id = version_id

    @property
    def id(self):
        """Gets the id of this PricingComponent.  # noqa: E501


        :return: The id of this PricingComponent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PricingComponent.


        :param id: The id of this PricingComponent.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def type(self):
        """Gets the type of this PricingComponent.  # noqa: E501


        :return: The type of this PricingComponent.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PricingComponent.


        :param type: The type of this PricingComponent.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PricingComponent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PricingComponent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
