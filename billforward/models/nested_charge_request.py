# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NestedChargeRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'amount': 'float',
        'tax_amount': 'bool',
        'period_start': 'datetime',
        'period_end': 'datetime',
        'charge_type': 'str',
        'trial': 'bool',
        'product': 'str',
        'product_rate_plan': 'str',
        'pricing_component': 'str',
        'pricing_component_value': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'amount': 'amount',
        'tax_amount': 'taxAmount',
        'period_start': 'periodStart',
        'period_end': 'periodEnd',
        'charge_type': 'chargeType',
        'trial': 'trial',
        'product': 'product',
        'product_rate_plan': 'productRatePlan',
        'pricing_component': 'pricingComponent',
        'pricing_component_value': 'pricingComponentValue'
    }

    def __init__(self, id=None, name=None, description=None, amount=None, tax_amount=None, period_start=None, period_end=None, charge_type=None, trial=None, product=None, product_rate_plan=None, pricing_component=None, pricing_component_value=None):  # noqa: E501
        """NestedChargeRequest - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._amount = None
        self._tax_amount = None
        self._period_start = None
        self._period_end = None
        self._charge_type = None
        self._trial = None
        self._product = None
        self._product_rate_plan = None
        self._pricing_component = None
        self._pricing_component_value = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if amount is not None:
            self.amount = amount
        if tax_amount is not None:
            self.tax_amount = tax_amount
        if period_start is not None:
            self.period_start = period_start
        if period_end is not None:
            self.period_end = period_end
        if charge_type is not None:
            self.charge_type = charge_type
        if trial is not None:
            self.trial = trial
        if product is not None:
            self.product = product
        if product_rate_plan is not None:
            self.product_rate_plan = product_rate_plan
        if pricing_component is not None:
            self.pricing_component = pricing_component
        if pricing_component_value is not None:
            self.pricing_component_value = pricing_component_value

    @property
    def id(self):
        """Gets the id of this NestedChargeRequest.  # noqa: E501


        :return: The id of this NestedChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NestedChargeRequest.


        :param id: The id of this NestedChargeRequest.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this NestedChargeRequest.  # noqa: E501


        :return: The name of this NestedChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NestedChargeRequest.


        :param name: The name of this NestedChargeRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this NestedChargeRequest.  # noqa: E501


        :return: The description of this NestedChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NestedChargeRequest.


        :param description: The description of this NestedChargeRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def amount(self):
        """Gets the amount of this NestedChargeRequest.  # noqa: E501


        :return: The amount of this NestedChargeRequest.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this NestedChargeRequest.


        :param amount: The amount of this NestedChargeRequest.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def tax_amount(self):
        """Gets the tax_amount of this NestedChargeRequest.  # noqa: E501


        :return: The tax_amount of this NestedChargeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this NestedChargeRequest.


        :param tax_amount: The tax_amount of this NestedChargeRequest.  # noqa: E501
        :type: bool
        """

        self._tax_amount = tax_amount

    @property
    def period_start(self):
        """Gets the period_start of this NestedChargeRequest.  # noqa: E501


        :return: The period_start of this NestedChargeRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._period_start

    @period_start.setter
    def period_start(self, period_start):
        """Sets the period_start of this NestedChargeRequest.


        :param period_start: The period_start of this NestedChargeRequest.  # noqa: E501
        :type: datetime
        """

        self._period_start = period_start

    @property
    def period_end(self):
        """Gets the period_end of this NestedChargeRequest.  # noqa: E501


        :return: The period_end of this NestedChargeRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._period_end

    @period_end.setter
    def period_end(self, period_end):
        """Sets the period_end of this NestedChargeRequest.


        :param period_end: The period_end of this NestedChargeRequest.  # noqa: E501
        :type: datetime
        """

        self._period_end = period_end

    @property
    def charge_type(self):
        """Gets the charge_type of this NestedChargeRequest.  # noqa: E501


        :return: The charge_type of this NestedChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._charge_type

    @charge_type.setter
    def charge_type(self, charge_type):
        """Sets the charge_type of this NestedChargeRequest.


        :param charge_type: The charge_type of this NestedChargeRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Credit", "Debit"]  # noqa: E501
        if charge_type not in allowed_values:
            raise ValueError(
                "Invalid value for `charge_type` ({0}), must be one of {1}"  # noqa: E501
                .format(charge_type, allowed_values)
            )

        self._charge_type = charge_type

    @property
    def trial(self):
        """Gets the trial of this NestedChargeRequest.  # noqa: E501


        :return: The trial of this NestedChargeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._trial

    @trial.setter
    def trial(self, trial):
        """Sets the trial of this NestedChargeRequest.


        :param trial: The trial of this NestedChargeRequest.  # noqa: E501
        :type: bool
        """

        self._trial = trial

    @property
    def product(self):
        """Gets the product of this NestedChargeRequest.  # noqa: E501


        :return: The product of this NestedChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this NestedChargeRequest.


        :param product: The product of this NestedChargeRequest.  # noqa: E501
        :type: str
        """

        self._product = product

    @property
    def product_rate_plan(self):
        """Gets the product_rate_plan of this NestedChargeRequest.  # noqa: E501


        :return: The product_rate_plan of this NestedChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan

    @product_rate_plan.setter
    def product_rate_plan(self, product_rate_plan):
        """Sets the product_rate_plan of this NestedChargeRequest.


        :param product_rate_plan: The product_rate_plan of this NestedChargeRequest.  # noqa: E501
        :type: str
        """

        self._product_rate_plan = product_rate_plan

    @property
    def pricing_component(self):
        """Gets the pricing_component of this NestedChargeRequest.  # noqa: E501


        :return: The pricing_component of this NestedChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._pricing_component

    @pricing_component.setter
    def pricing_component(self, pricing_component):
        """Sets the pricing_component of this NestedChargeRequest.


        :param pricing_component: The pricing_component of this NestedChargeRequest.  # noqa: E501
        :type: str
        """

        self._pricing_component = pricing_component

    @property
    def pricing_component_value(self):
        """Gets the pricing_component_value of this NestedChargeRequest.  # noqa: E501


        :return: The pricing_component_value of this NestedChargeRequest.  # noqa: E501
        :rtype: int
        """
        return self._pricing_component_value

    @pricing_component_value.setter
    def pricing_component_value(self, pricing_component_value):
        """Sets the pricing_component_value of this NestedChargeRequest.


        :param pricing_component_value: The pricing_component_value of this NestedChargeRequest.  # noqa: E501
        :type: int
        """

        self._pricing_component_value = pricing_component_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NestedChargeRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NestedChargeRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
