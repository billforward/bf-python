# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PermissionActionEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'organization_id': 'str',
        'actions': 'list[str]'
    }

    attribute_map = {
        'created': 'created',
        'organization_id': 'organizationID',
        'actions': 'actions'
    }

    def __init__(self, created=None, organization_id=None, actions=None):  # noqa: E501
        """PermissionActionEntity - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._organization_id = None
        self._actions = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if organization_id is not None:
            self.organization_id = organization_id
        if actions is not None:
            self.actions = actions

    @property
    def created(self):
        """Gets the created of this PermissionActionEntity.  # noqa: E501


        :return: The created of this PermissionActionEntity.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this PermissionActionEntity.


        :param created: The created of this PermissionActionEntity.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def organization_id(self):
        """Gets the organization_id of this PermissionActionEntity.  # noqa: E501


        :return: The organization_id of this PermissionActionEntity.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this PermissionActionEntity.


        :param organization_id: The organization_id of this PermissionActionEntity.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def actions(self):
        """Gets the actions of this PermissionActionEntity.  # noqa: E501


        :return: The actions of this PermissionActionEntity.  # noqa: E501
        :rtype: list[str]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this PermissionActionEntity.


        :param actions: The actions of this PermissionActionEntity.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["All", "AddToInvoice", "AddToAccount", "AddToProductRatePlan", "AddToSubscription", "Advance", "Aggregate", "RemoveFromInvoice", "RemoveFromProductRatePlan", "RemoveFromSubscription", "Cancel", "Create", "Delete", "Edit", "Execute", "Freeze", "Import", "InvoiceCharges", "Issue", "MetadataCreate", "MetadataEdit", "MetadataDelete", "Migrate", "Read", "Recalculate", "Refund", "Reset", "Resume", "Revive", "Start", "Stop", "Tokenize", "Void"]  # noqa: E501
        if not set(actions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `actions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(actions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._actions = actions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PermissionActionEntity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PermissionActionEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
