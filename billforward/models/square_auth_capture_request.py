# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from billforward.models.auth_capture_request import AuthCaptureRequest  # noqa: F401,E501

class SquareAuthCaptureRequest(AuthCaptureRequest):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'card_nonce': 'str',
        'buyer_verification_token': 'str',
        'billing_address': 'Address',
        'location_id': 'str'
    }
    if hasattr(AuthCaptureRequest, "swagger_types"):
        swagger_types.update(AuthCaptureRequest.swagger_types)

    attribute_map = {
        'card_nonce': 'cardNonce',
        'buyer_verification_token': 'buyerVerificationToken',
        'billing_address': 'billingAddress',
        'location_id': 'locationId'
    }
    if hasattr(AuthCaptureRequest, "attribute_map"):
        attribute_map.update(AuthCaptureRequest.attribute_map)

    def __init__(self, card_nonce=None, buyer_verification_token=None, billing_address=None, location_id=None, *args, **kwargs):  # noqa: E501
        """SquareAuthCaptureRequest - a model defined in Swagger"""  # noqa: E501
        self._card_nonce = None
        self._buyer_verification_token = None
        self._billing_address = None
        self._location_id = None
        self.discriminator = None
        self.card_nonce = card_nonce
        if buyer_verification_token is not None:
            self.buyer_verification_token = buyer_verification_token
        if billing_address is not None:
            self.billing_address = billing_address
        self.location_id = location_id
        AuthCaptureRequest.__init__(self, *args, **kwargs)

    @property
    def card_nonce(self):
        """Gets the card_nonce of this SquareAuthCaptureRequest.  # noqa: E501


        :return: The card_nonce of this SquareAuthCaptureRequest.  # noqa: E501
        :rtype: str
        """
        return self._card_nonce

    @card_nonce.setter
    def card_nonce(self, card_nonce):
        """Sets the card_nonce of this SquareAuthCaptureRequest.


        :param card_nonce: The card_nonce of this SquareAuthCaptureRequest.  # noqa: E501
        :type: str
        """
        if card_nonce is None:
            raise ValueError("Invalid value for `card_nonce`, must not be `None`")  # noqa: E501

        self._card_nonce = card_nonce

    @property
    def buyer_verification_token(self):
        """Gets the buyer_verification_token of this SquareAuthCaptureRequest.  # noqa: E501


        :return: The buyer_verification_token of this SquareAuthCaptureRequest.  # noqa: E501
        :rtype: str
        """
        return self._buyer_verification_token

    @buyer_verification_token.setter
    def buyer_verification_token(self, buyer_verification_token):
        """Sets the buyer_verification_token of this SquareAuthCaptureRequest.


        :param buyer_verification_token: The buyer_verification_token of this SquareAuthCaptureRequest.  # noqa: E501
        :type: str
        """

        self._buyer_verification_token = buyer_verification_token

    @property
    def billing_address(self):
        """Gets the billing_address of this SquareAuthCaptureRequest.  # noqa: E501


        :return: The billing_address of this SquareAuthCaptureRequest.  # noqa: E501
        :rtype: Address
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this SquareAuthCaptureRequest.


        :param billing_address: The billing_address of this SquareAuthCaptureRequest.  # noqa: E501
        :type: Address
        """

        self._billing_address = billing_address

    @property
    def location_id(self):
        """Gets the location_id of this SquareAuthCaptureRequest.  # noqa: E501


        :return: The location_id of this SquareAuthCaptureRequest.  # noqa: E501
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this SquareAuthCaptureRequest.


        :param location_id: The location_id of this SquareAuthCaptureRequest.  # noqa: E501
        :type: str
        """
        if location_id is None:
            raise ValueError("Invalid value for `location_id`, must not be `None`")  # noqa: E501

        self._location_id = location_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SquareAuthCaptureRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SquareAuthCaptureRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
