# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SubscriptionCancellation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'changed_by': 'str',
        'updated': 'datetime',
        'id': 'str',
        'subscription_id': 'str',
        'organization_id': 'str',
        'source': 'str',
        'service_end': 'str',
        'revive': 'SubscriptionRevivePartialRequest',
        'cancellation_credit': 'str',
        'credit_note_description': 'str',
        'pre_cancellation_state': 'str',
        'state': 'str',
        'cancel_children': 'bool',
        'cancel_empty_parent': 'bool',
        'associated_refunds': 'list[Refund]',
        'discardable': 'bool'
    }

    attribute_map = {
        'created': 'created',
        'changed_by': 'changedBy',
        'updated': 'updated',
        'id': 'id',
        'subscription_id': 'subscriptionID',
        'organization_id': 'organizationID',
        'source': 'source',
        'service_end': 'serviceEnd',
        'revive': 'revive',
        'cancellation_credit': 'cancellationCredit',
        'credit_note_description': 'creditNoteDescription',
        'pre_cancellation_state': 'preCancellationState',
        'state': 'state',
        'cancel_children': 'cancelChildren',
        'cancel_empty_parent': 'cancelEmptyParent',
        'associated_refunds': 'associatedRefunds',
        'discardable': 'discardable'
    }

    def __init__(self, created=None, changed_by=None, updated=None, id=None, subscription_id=None, organization_id=None, source=None, service_end=None, revive=None, cancellation_credit=None, credit_note_description=None, pre_cancellation_state=None, state=None, cancel_children=None, cancel_empty_parent=None, associated_refunds=None, discardable=None):  # noqa: E501
        """SubscriptionCancellation - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._changed_by = None
        self._updated = None
        self._id = None
        self._subscription_id = None
        self._organization_id = None
        self._source = None
        self._service_end = None
        self._revive = None
        self._cancellation_credit = None
        self._credit_note_description = None
        self._pre_cancellation_state = None
        self._state = None
        self._cancel_children = None
        self._cancel_empty_parent = None
        self._associated_refunds = None
        self._discardable = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if changed_by is not None:
            self.changed_by = changed_by
        if updated is not None:
            self.updated = updated
        if id is not None:
            self.id = id
        self.subscription_id = subscription_id
        self.organization_id = organization_id
        if source is not None:
            self.source = source
        self.service_end = service_end
        if revive is not None:
            self.revive = revive
        self.cancellation_credit = cancellation_credit
        if credit_note_description is not None:
            self.credit_note_description = credit_note_description
        if pre_cancellation_state is not None:
            self.pre_cancellation_state = pre_cancellation_state
        self.state = state
        if cancel_children is not None:
            self.cancel_children = cancel_children
        if cancel_empty_parent is not None:
            self.cancel_empty_parent = cancel_empty_parent
        if associated_refunds is not None:
            self.associated_refunds = associated_refunds
        if discardable is not None:
            self.discardable = discardable

    @property
    def created(self):
        """Gets the created of this SubscriptionCancellation.  # noqa: E501


        :return: The created of this SubscriptionCancellation.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this SubscriptionCancellation.


        :param created: The created of this SubscriptionCancellation.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """Gets the changed_by of this SubscriptionCancellation.  # noqa: E501


        :return: The changed_by of this SubscriptionCancellation.  # noqa: E501
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """Sets the changed_by of this SubscriptionCancellation.


        :param changed_by: The changed_by of this SubscriptionCancellation.  # noqa: E501
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """Gets the updated of this SubscriptionCancellation.  # noqa: E501


        :return: The updated of this SubscriptionCancellation.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this SubscriptionCancellation.


        :param updated: The updated of this SubscriptionCancellation.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """Gets the id of this SubscriptionCancellation.  # noqa: E501


        :return: The id of this SubscriptionCancellation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubscriptionCancellation.


        :param id: The id of this SubscriptionCancellation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this SubscriptionCancellation.  # noqa: E501


        :return: The subscription_id of this SubscriptionCancellation.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this SubscriptionCancellation.


        :param subscription_id: The subscription_id of this SubscriptionCancellation.  # noqa: E501
        :type: str
        """
        if subscription_id is None:
            raise ValueError("Invalid value for `subscription_id`, must not be `None`")  # noqa: E501

        self._subscription_id = subscription_id

    @property
    def organization_id(self):
        """Gets the organization_id of this SubscriptionCancellation.  # noqa: E501


        :return: The organization_id of this SubscriptionCancellation.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this SubscriptionCancellation.


        :param organization_id: The organization_id of this SubscriptionCancellation.  # noqa: E501
        :type: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")  # noqa: E501

        self._organization_id = organization_id

    @property
    def source(self):
        """Gets the source of this SubscriptionCancellation.  # noqa: E501


        :return: The source of this SubscriptionCancellation.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this SubscriptionCancellation.


        :param source: The source of this SubscriptionCancellation.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def service_end(self):
        """Gets the service_end of this SubscriptionCancellation.  # noqa: E501


        :return: The service_end of this SubscriptionCancellation.  # noqa: E501
        :rtype: str
        """
        return self._service_end

    @service_end.setter
    def service_end(self, service_end):
        """Sets the service_end of this SubscriptionCancellation.


        :param service_end: The service_end of this SubscriptionCancellation.  # noqa: E501
        :type: str
        """
        if service_end is None:
            raise ValueError("Invalid value for `service_end`, must not be `None`")  # noqa: E501
        allowed_values = ["Immediate", "AtPeriodEnd"]  # noqa: E501
        if service_end not in allowed_values:
            raise ValueError(
                "Invalid value for `service_end` ({0}), must be one of {1}"  # noqa: E501
                .format(service_end, allowed_values)
            )

        self._service_end = service_end

    @property
    def revive(self):
        """Gets the revive of this SubscriptionCancellation.  # noqa: E501


        :return: The revive of this SubscriptionCancellation.  # noqa: E501
        :rtype: SubscriptionRevivePartialRequest
        """
        return self._revive

    @revive.setter
    def revive(self, revive):
        """Sets the revive of this SubscriptionCancellation.


        :param revive: The revive of this SubscriptionCancellation.  # noqa: E501
        :type: SubscriptionRevivePartialRequest
        """

        self._revive = revive

    @property
    def cancellation_credit(self):
        """Gets the cancellation_credit of this SubscriptionCancellation.  # noqa: E501


        :return: The cancellation_credit of this SubscriptionCancellation.  # noqa: E501
        :rtype: str
        """
        return self._cancellation_credit

    @cancellation_credit.setter
    def cancellation_credit(self, cancellation_credit):
        """Sets the cancellation_credit of this SubscriptionCancellation.


        :param cancellation_credit: The cancellation_credit of this SubscriptionCancellation.  # noqa: E501
        :type: str
        """
        if cancellation_credit is None:
            raise ValueError("Invalid value for `cancellation_credit`, must not be `None`")  # noqa: E501
        allowed_values = ["Refund", "Credit", "None"]  # noqa: E501
        if cancellation_credit not in allowed_values:
            raise ValueError(
                "Invalid value for `cancellation_credit` ({0}), must be one of {1}"  # noqa: E501
                .format(cancellation_credit, allowed_values)
            )

        self._cancellation_credit = cancellation_credit

    @property
    def credit_note_description(self):
        """Gets the credit_note_description of this SubscriptionCancellation.  # noqa: E501


        :return: The credit_note_description of this SubscriptionCancellation.  # noqa: E501
        :rtype: str
        """
        return self._credit_note_description

    @credit_note_description.setter
    def credit_note_description(self, credit_note_description):
        """Sets the credit_note_description of this SubscriptionCancellation.


        :param credit_note_description: The credit_note_description of this SubscriptionCancellation.  # noqa: E501
        :type: str
        """

        self._credit_note_description = credit_note_description

    @property
    def pre_cancellation_state(self):
        """Gets the pre_cancellation_state of this SubscriptionCancellation.  # noqa: E501


        :return: The pre_cancellation_state of this SubscriptionCancellation.  # noqa: E501
        :rtype: str
        """
        return self._pre_cancellation_state

    @pre_cancellation_state.setter
    def pre_cancellation_state(self, pre_cancellation_state):
        """Sets the pre_cancellation_state of this SubscriptionCancellation.


        :param pre_cancellation_state: The pre_cancellation_state of this SubscriptionCancellation.  # noqa: E501
        :type: str
        """
        allowed_values = ["Trial", "Provisioned", "Paid", "AwaitingPayment", "Cancelled", "Failed", "Expired"]  # noqa: E501
        if pre_cancellation_state not in allowed_values:
            raise ValueError(
                "Invalid value for `pre_cancellation_state` ({0}), must be one of {1}"  # noqa: E501
                .format(pre_cancellation_state, allowed_values)
            )

        self._pre_cancellation_state = pre_cancellation_state

    @property
    def state(self):
        """Gets the state of this SubscriptionCancellation.  # noqa: E501


        :return: The state of this SubscriptionCancellation.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SubscriptionCancellation.


        :param state: The state of this SubscriptionCancellation.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["Pending", "Completed", "Cancelled", "Voided"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def cancel_children(self):
        """Gets the cancel_children of this SubscriptionCancellation.  # noqa: E501


        :return: The cancel_children of this SubscriptionCancellation.  # noqa: E501
        :rtype: bool
        """
        return self._cancel_children

    @cancel_children.setter
    def cancel_children(self, cancel_children):
        """Sets the cancel_children of this SubscriptionCancellation.


        :param cancel_children: The cancel_children of this SubscriptionCancellation.  # noqa: E501
        :type: bool
        """

        self._cancel_children = cancel_children

    @property
    def cancel_empty_parent(self):
        """Gets the cancel_empty_parent of this SubscriptionCancellation.  # noqa: E501


        :return: The cancel_empty_parent of this SubscriptionCancellation.  # noqa: E501
        :rtype: bool
        """
        return self._cancel_empty_parent

    @cancel_empty_parent.setter
    def cancel_empty_parent(self, cancel_empty_parent):
        """Sets the cancel_empty_parent of this SubscriptionCancellation.


        :param cancel_empty_parent: The cancel_empty_parent of this SubscriptionCancellation.  # noqa: E501
        :type: bool
        """

        self._cancel_empty_parent = cancel_empty_parent

    @property
    def associated_refunds(self):
        """Gets the associated_refunds of this SubscriptionCancellation.  # noqa: E501


        :return: The associated_refunds of this SubscriptionCancellation.  # noqa: E501
        :rtype: list[Refund]
        """
        return self._associated_refunds

    @associated_refunds.setter
    def associated_refunds(self, associated_refunds):
        """Sets the associated_refunds of this SubscriptionCancellation.


        :param associated_refunds: The associated_refunds of this SubscriptionCancellation.  # noqa: E501
        :type: list[Refund]
        """

        self._associated_refunds = associated_refunds

    @property
    def discardable(self):
        """Gets the discardable of this SubscriptionCancellation.  # noqa: E501


        :return: The discardable of this SubscriptionCancellation.  # noqa: E501
        :rtype: bool
        """
        return self._discardable

    @discardable.setter
    def discardable(self, discardable):
        """Sets the discardable of this SubscriptionCancellation.


        :param discardable: The discardable of this SubscriptionCancellation.  # noqa: E501
        :type: bool
        """

        self._discardable = discardable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubscriptionCancellation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionCancellation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
