# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InvoiceChargeRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'organization_id': 'str',
        'subscription_id': 'str',
        'include_aggregated': 'bool',
        'include_invoiced_charges_only': 'bool',
        'invoice_state': 'str'
    }

    attribute_map = {
        'created': 'created',
        'organization_id': 'organizationID',
        'subscription_id': 'subscriptionID',
        'include_aggregated': 'includeAggregated',
        'include_invoiced_charges_only': 'includeInvoicedChargesOnly',
        'invoice_state': 'invoiceState'
    }

    def __init__(self, created=None, organization_id=None, subscription_id=None, include_aggregated=None, include_invoiced_charges_only=None, invoice_state=None):  # noqa: E501
        """InvoiceChargeRequest - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._organization_id = None
        self._subscription_id = None
        self._include_aggregated = None
        self._include_invoiced_charges_only = None
        self._invoice_state = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if organization_id is not None:
            self.organization_id = organization_id
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if include_aggregated is not None:
            self.include_aggregated = include_aggregated
        if include_invoiced_charges_only is not None:
            self.include_invoiced_charges_only = include_invoiced_charges_only
        if invoice_state is not None:
            self.invoice_state = invoice_state

    @property
    def created(self):
        """Gets the created of this InvoiceChargeRequest.  # noqa: E501


        :return: The created of this InvoiceChargeRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this InvoiceChargeRequest.


        :param created: The created of this InvoiceChargeRequest.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def organization_id(self):
        """Gets the organization_id of this InvoiceChargeRequest.  # noqa: E501


        :return: The organization_id of this InvoiceChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this InvoiceChargeRequest.


        :param organization_id: The organization_id of this InvoiceChargeRequest.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this InvoiceChargeRequest.  # noqa: E501


        :return: The subscription_id of this InvoiceChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this InvoiceChargeRequest.


        :param subscription_id: The subscription_id of this InvoiceChargeRequest.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def include_aggregated(self):
        """Gets the include_aggregated of this InvoiceChargeRequest.  # noqa: E501


        :return: The include_aggregated of this InvoiceChargeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._include_aggregated

    @include_aggregated.setter
    def include_aggregated(self, include_aggregated):
        """Sets the include_aggregated of this InvoiceChargeRequest.


        :param include_aggregated: The include_aggregated of this InvoiceChargeRequest.  # noqa: E501
        :type: bool
        """

        self._include_aggregated = include_aggregated

    @property
    def include_invoiced_charges_only(self):
        """Gets the include_invoiced_charges_only of this InvoiceChargeRequest.  # noqa: E501


        :return: The include_invoiced_charges_only of this InvoiceChargeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._include_invoiced_charges_only

    @include_invoiced_charges_only.setter
    def include_invoiced_charges_only(self, include_invoiced_charges_only):
        """Sets the include_invoiced_charges_only of this InvoiceChargeRequest.


        :param include_invoiced_charges_only: The include_invoiced_charges_only of this InvoiceChargeRequest.  # noqa: E501
        :type: bool
        """

        self._include_invoiced_charges_only = include_invoiced_charges_only

    @property
    def invoice_state(self):
        """Gets the invoice_state of this InvoiceChargeRequest.  # noqa: E501


        :return: The invoice_state of this InvoiceChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._invoice_state

    @invoice_state.setter
    def invoice_state(self, invoice_state):
        """Sets the invoice_state of this InvoiceChargeRequest.


        :param invoice_state: The invoice_state of this InvoiceChargeRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Paid", "Unpaid", "Pending", "Voided"]  # noqa: E501
        if invoice_state not in allowed_values:
            raise ValueError(
                "Invalid value for `invoice_state` ({0}), must be one of {1}"  # noqa: E501
                .format(invoice_state, allowed_values)
            )

        self._invoice_state = invoice_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvoiceChargeRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoiceChargeRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
