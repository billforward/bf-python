# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SquareConfigurationData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'business_name': 'str',
        'country': 'str',
        'language_code': 'str',
        'currency': 'CreditNoteCurrency',
        'main_location_id': 'str',
        'public_url': 'str'
    }

    attribute_map = {
        'business_name': 'businessName',
        'country': 'country',
        'language_code': 'languageCode',
        'currency': 'currency',
        'main_location_id': 'mainLocationId',
        'public_url': 'publicUrl'
    }

    def __init__(self, business_name=None, country=None, language_code=None, currency=None, main_location_id=None, public_url=None):  # noqa: E501
        """SquareConfigurationData - a model defined in Swagger"""  # noqa: E501
        self._business_name = None
        self._country = None
        self._language_code = None
        self._currency = None
        self._main_location_id = None
        self._public_url = None
        self.discriminator = None
        if business_name is not None:
            self.business_name = business_name
        if country is not None:
            self.country = country
        if language_code is not None:
            self.language_code = language_code
        if currency is not None:
            self.currency = currency
        if main_location_id is not None:
            self.main_location_id = main_location_id
        if public_url is not None:
            self.public_url = public_url

    @property
    def business_name(self):
        """Gets the business_name of this SquareConfigurationData.  # noqa: E501


        :return: The business_name of this SquareConfigurationData.  # noqa: E501
        :rtype: str
        """
        return self._business_name

    @business_name.setter
    def business_name(self, business_name):
        """Sets the business_name of this SquareConfigurationData.


        :param business_name: The business_name of this SquareConfigurationData.  # noqa: E501
        :type: str
        """

        self._business_name = business_name

    @property
    def country(self):
        """Gets the country of this SquareConfigurationData.  # noqa: E501


        :return: The country of this SquareConfigurationData.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this SquareConfigurationData.


        :param country: The country of this SquareConfigurationData.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def language_code(self):
        """Gets the language_code of this SquareConfigurationData.  # noqa: E501


        :return: The language_code of this SquareConfigurationData.  # noqa: E501
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this SquareConfigurationData.


        :param language_code: The language_code of this SquareConfigurationData.  # noqa: E501
        :type: str
        """

        self._language_code = language_code

    @property
    def currency(self):
        """Gets the currency of this SquareConfigurationData.  # noqa: E501


        :return: The currency of this SquareConfigurationData.  # noqa: E501
        :rtype: CreditNoteCurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this SquareConfigurationData.


        :param currency: The currency of this SquareConfigurationData.  # noqa: E501
        :type: CreditNoteCurrency
        """

        self._currency = currency

    @property
    def main_location_id(self):
        """Gets the main_location_id of this SquareConfigurationData.  # noqa: E501


        :return: The main_location_id of this SquareConfigurationData.  # noqa: E501
        :rtype: str
        """
        return self._main_location_id

    @main_location_id.setter
    def main_location_id(self, main_location_id):
        """Sets the main_location_id of this SquareConfigurationData.


        :param main_location_id: The main_location_id of this SquareConfigurationData.  # noqa: E501
        :type: str
        """

        self._main_location_id = main_location_id

    @property
    def public_url(self):
        """Gets the public_url of this SquareConfigurationData.  # noqa: E501


        :return: The public_url of this SquareConfigurationData.  # noqa: E501
        :rtype: str
        """
        return self._public_url

    @public_url.setter
    def public_url(self, public_url):
        """Sets the public_url of this SquareConfigurationData.


        :param public_url: The public_url of this SquareConfigurationData.  # noqa: E501
        :type: str
        """

        self._public_url = public_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SquareConfigurationData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SquareConfigurationData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
