# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ProductRatePlan(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, changed_by=None, updated=None, metadata=None, id=None, crm_id=None, product_id=None, currency=None, tax_status=None, failed_payment_behaviour=None, duration=None, duration_period=None, trial=None, trial_period=None, product_type=None, pro_rata_mode=None, create_zero_valued_invoices=False, name=None, public_name=None, valid_from=None, valid_till=None, status=None, migration_behaviour=None, invoice_issue_type=None, issue_duration=None, issue_period=None, taxation=None, fixed_term_definitions=None, product=None, pricing_components=None, aggregating_components=None, payment_terms=None):
        """
        ProductRatePlan - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'changed_by': 'str',
            'updated': 'datetime',
            'metadata': 'DynamicMetadata',
            'id': 'str',
            'crm_id': 'str',
            'product_id': 'str',
            'currency': 'str',
            'tax_status': 'str',
            'failed_payment_behaviour': 'str',
            'duration': 'int',
            'duration_period': 'str',
            'trial': 'int',
            'trial_period': 'str',
            'product_type': 'str',
            'pro_rata_mode': 'str',
            'create_zero_valued_invoices': 'bool',
            'name': 'str',
            'public_name': 'str',
            'valid_from': 'datetime',
            'valid_till': 'datetime',
            'status': 'str',
            'migration_behaviour': 'str',
            'invoice_issue_type': 'str',
            'issue_duration': 'int',
            'issue_period': 'str',
            'taxation': 'list[MutableBillingEntity]',
            'fixed_term_definitions': 'list[MutableBillingEntity]',
            'product': 'Product',
            'pricing_components': 'list[PricingComponent]',
            'aggregating_components': 'list[AggregatingComponent]',
            'payment_terms': 'int'
        }

        self.attribute_map = {
            'created': 'created',
            'changed_by': 'changedBy',
            'updated': 'updated',
            'metadata': 'metadata',
            'id': 'id',
            'crm_id': 'crmID',
            'product_id': 'productID',
            'currency': 'currency',
            'tax_status': 'taxStatus',
            'failed_payment_behaviour': 'failedPaymentBehaviour',
            'duration': 'duration',
            'duration_period': 'durationPeriod',
            'trial': 'trial',
            'trial_period': 'trialPeriod',
            'product_type': 'productType',
            'pro_rata_mode': 'proRataMode',
            'create_zero_valued_invoices': 'createZeroValuedInvoices',
            'name': 'name',
            'public_name': 'publicName',
            'valid_from': 'validFrom',
            'valid_till': 'validTill',
            'status': 'status',
            'migration_behaviour': 'migrationBehaviour',
            'invoice_issue_type': 'invoiceIssueType',
            'issue_duration': 'issueDuration',
            'issue_period': 'issuePeriod',
            'taxation': 'taxation',
            'fixed_term_definitions': 'fixedTermDefinitions',
            'product': 'product',
            'pricing_components': 'pricingComponents',
            'aggregating_components': 'aggregatingComponents',
            'payment_terms': 'paymentTerms'
        }

        self._created = created
        self._changed_by = changed_by
        self._updated = updated
        self._metadata = metadata
        self._id = id
        self._crm_id = crm_id
        self._product_id = product_id
        self._currency = currency
        self._tax_status = tax_status
        self._failed_payment_behaviour = failed_payment_behaviour
        self._duration = duration
        self._duration_period = duration_period
        self._trial = trial
        self._trial_period = trial_period
        self._product_type = product_type
        self._pro_rata_mode = pro_rata_mode
        self._create_zero_valued_invoices = create_zero_valued_invoices
        self._name = name
        self._public_name = public_name
        self._valid_from = valid_from
        self._valid_till = valid_till
        self._status = status
        self._migration_behaviour = migration_behaviour
        self._invoice_issue_type = invoice_issue_type
        self._issue_duration = issue_duration
        self._issue_period = issue_period
        self._taxation = taxation
        self._fixed_term_definitions = fixed_term_definitions
        self._product = product
        self._pricing_components = pricing_components
        self._aggregating_components = aggregating_components
        self._payment_terms = payment_terms

    @property
    def created(self):
        """
        Gets the created of this ProductRatePlan.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this ProductRatePlan.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this ProductRatePlan.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this ProductRatePlan.
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """
        Gets the changed_by of this ProductRatePlan.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :return: The changed_by of this ProductRatePlan.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """
        Sets the changed_by of this ProductRatePlan.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :param changed_by: The changed_by of this ProductRatePlan.
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """
        Gets the updated of this ProductRatePlan.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :return: The updated of this ProductRatePlan.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this ProductRatePlan.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :param updated: The updated of this ProductRatePlan.
        :type: datetime
        """

        self._updated = updated

    @property
    def metadata(self):
        """
        Gets the metadata of this ProductRatePlan.
        { \"description\" : \"Add metadata.\", \"verbs\":[\"POST\"] }

        :return: The metadata of this ProductRatePlan.
        :rtype: DynamicMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """
        Sets the metadata of this ProductRatePlan.
        { \"description\" : \"Add metadata.\", \"verbs\":[\"POST\"] }

        :param metadata: The metadata of this ProductRatePlan.
        :type: DynamicMetadata
        """

        self._metadata = metadata

    @property
    def id(self):
        """
        Gets the id of this ProductRatePlan.
        {\"description\":\"ID uniquely identifying this rate plan.\",\"verbs\":[\"GET\"]}

        :return: The id of this ProductRatePlan.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ProductRatePlan.
        {\"description\":\"ID uniquely identifying this rate plan.\",\"verbs\":[\"GET\"]}

        :param id: The id of this ProductRatePlan.
        :type: str
        """

        self._id = id

    @property
    def crm_id(self):
        """
        Gets the crm_id of this ProductRatePlan.
        {\"description\":\"Customer-relationship-management ID of the rate plan.\",\"verbs\":[\"GET\",\"PUT\",\"POST\"]}

        :return: The crm_id of this ProductRatePlan.
        :rtype: str
        """
        return self._crm_id

    @crm_id.setter
    def crm_id(self, crm_id):
        """
        Sets the crm_id of this ProductRatePlan.
        {\"description\":\"Customer-relationship-management ID of the rate plan.\",\"verbs\":[\"GET\",\"PUT\",\"POST\"]}

        :param crm_id: The crm_id of this ProductRatePlan.
        :type: str
        """

        self._crm_id = crm_id

    @property
    def product_id(self):
        """
        Gets the product_id of this ProductRatePlan.
        {\"description\":\"ID of the product to which this rate plan belongs. A product is essentially a collection of rate plans, and describes the service conferred to a customer upon subscription to any of said product's rate plans. The product serves also as a template from which its rate plans can infer default attributes.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The product_id of this ProductRatePlan.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """
        Sets the product_id of this ProductRatePlan.
        {\"description\":\"ID of the product to which this rate plan belongs. A product is essentially a collection of rate plans, and describes the service conferred to a customer upon subscription to any of said product's rate plans. The product serves also as a template from which its rate plans can infer default attributes.\",\"verbs\":[\"POST\",\"GET\"]}

        :param product_id: The product_id of this ProductRatePlan.
        :type: str
        """

        self._product_id = product_id

    @property
    def currency(self):
        """
        Gets the currency of this ProductRatePlan.
        {\"description\":\"The currency of the product-rate-plan &mdash; as specified by a three-character ISO 4217 currency code (i.e. USD).\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The currency of this ProductRatePlan.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """
        Sets the currency of this ProductRatePlan.
        {\"description\":\"The currency of the product-rate-plan &mdash; as specified by a three-character ISO 4217 currency code (i.e. USD).\",\"verbs\":[\"POST\",\"GET\"]}

        :param currency: The currency of this ProductRatePlan.
        :type: str
        """

        self._currency = currency

    @property
    def tax_status(self):
        """
        Gets the tax_status of this ProductRatePlan.
        {\"default\":\"inclusive\",\"description\":\"The tax status of the product-rate-plan &mdash; either inclusive or exclusive.<br><span class=\\\"label label-default\\\">exclusive</span>pricing indicates that the cost of the Pricing Components do not include tax; when BillForward generates an Invoice, the tax will be calculated with this price as a base. <br>Tax-<span class=\\\"label label-default\\\">inclusive</span>pricing indicates that the Pricing components include Tax. BillForward will still calculate tax on each invoice. Tax will be calculated from the sales price.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :return: The tax_status of this ProductRatePlan.
        :rtype: str
        """
        return self._tax_status

    @tax_status.setter
    def tax_status(self, tax_status):
        """
        Sets the tax_status of this ProductRatePlan.
        {\"default\":\"inclusive\",\"description\":\"The tax status of the product-rate-plan &mdash; either inclusive or exclusive.<br><span class=\\\"label label-default\\\">exclusive</span>pricing indicates that the cost of the Pricing Components do not include tax; when BillForward generates an Invoice, the tax will be calculated with this price as a base. <br>Tax-<span class=\\\"label label-default\\\">inclusive</span>pricing indicates that the Pricing components include Tax. BillForward will still calculate tax on each invoice. Tax will be calculated from the sales price.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :param tax_status: The tax_status of this ProductRatePlan.
        :type: str
        """
        allowed_values = ["inclusive", "exclusive"]
        if tax_status not in allowed_values:
            raise ValueError(
                "Invalid value for `tax_status` ({0}), must be one of {1}"
                .format(tax_status, allowed_values)
            )

        self._tax_status = tax_status

    @property
    def failed_payment_behaviour(self):
        """
        Gets the failed_payment_behaviour of this ProductRatePlan.
        {\"default\":\"None\",\"description\":\"The action that should be taken, should an invoice for some subscription to this rate plan remain unpaid despite the dunning period's being exceeded.<br><span class=\\\"label label-default\\\">CancelSubscription</span> &mdash; Demotes the subscription to the `Failed` state as soon as the dunning period is exceeded.<br><span class=\\\"label label-default\\\">None</span> &mdash; The subscription is allowed to continue in the `AwaitingPayment` state indefinitely even if the dunning period is exceeded.For slow payment cycles &mdash; or when manual invoice remediation is common &mdash; <span class=\\\"label label-default\\\">None</span> is recommended.<br>In a heavily-automated SaaS environment, automatic cancellation via <span class=\\\"label label-default\\\">CancelSubscription</span> is recommended.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :return: The failed_payment_behaviour of this ProductRatePlan.
        :rtype: str
        """
        return self._failed_payment_behaviour

    @failed_payment_behaviour.setter
    def failed_payment_behaviour(self, failed_payment_behaviour):
        """
        Sets the failed_payment_behaviour of this ProductRatePlan.
        {\"default\":\"None\",\"description\":\"The action that should be taken, should an invoice for some subscription to this rate plan remain unpaid despite the dunning period's being exceeded.<br><span class=\\\"label label-default\\\">CancelSubscription</span> &mdash; Demotes the subscription to the `Failed` state as soon as the dunning period is exceeded.<br><span class=\\\"label label-default\\\">None</span> &mdash; The subscription is allowed to continue in the `AwaitingPayment` state indefinitely even if the dunning period is exceeded.For slow payment cycles &mdash; or when manual invoice remediation is common &mdash; <span class=\\\"label label-default\\\">None</span> is recommended.<br>In a heavily-automated SaaS environment, automatic cancellation via <span class=\\\"label label-default\\\">CancelSubscription</span> is recommended.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :param failed_payment_behaviour: The failed_payment_behaviour of this ProductRatePlan.
        :type: str
        """
        allowed_values = ["CancelSubscription", "None"]
        if failed_payment_behaviour not in allowed_values:
            raise ValueError(
                "Invalid value for `failed_payment_behaviour` ({0}), must be one of {1}"
                .format(failed_payment_behaviour, allowed_values)
            )

        self._failed_payment_behaviour = failed_payment_behaviour

    @property
    def duration(self):
        """
        Gets the duration of this ProductRatePlan.
        {\"description\":\"Number of length-measures which constitute the rate plan's period. If left unspecified: the rate plan will use the same `duration` number as the Product to which it belongs.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The duration of this ProductRatePlan.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """
        Sets the duration of this ProductRatePlan.
        {\"description\":\"Number of length-measures which constitute the rate plan's period. If left unspecified: the rate plan will use the same `duration` number as the Product to which it belongs.\",\"verbs\":[\"POST\",\"GET\"]}

        :param duration: The duration of this ProductRatePlan.
        :type: int
        """

        self._duration = duration

    @property
    def duration_period(self):
        """
        Gets the duration_period of this ProductRatePlan.
        {\"description\":\"Measure describing the magnitude of the rate plan's period. If left unspecified: the rate plan will use the same `durationPeriod` magnitude as the Product to which it belongs.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The duration_period of this ProductRatePlan.
        :rtype: str
        """
        return self._duration_period

    @duration_period.setter
    def duration_period(self, duration_period):
        """
        Sets the duration_period of this ProductRatePlan.
        {\"description\":\"Measure describing the magnitude of the rate plan's period. If left unspecified: the rate plan will use the same `durationPeriod` magnitude as the Product to which it belongs.\",\"verbs\":[\"POST\",\"GET\"]}

        :param duration_period: The duration_period of this ProductRatePlan.
        :type: str
        """
        allowed_values = ["minutes", "days", "months", "years"]
        if duration_period not in allowed_values:
            raise ValueError(
                "Invalid value for `duration_period` ({0}), must be one of {1}"
                .format(duration_period, allowed_values)
            )

        self._duration_period = duration_period

    @property
    def trial(self):
        """
        Gets the trial of this ProductRatePlan.
        {\"default\":0,\"description\":\"Number of trial-length-measures which constitute the rate plan's trial period. If left unspecified: the rate plan will use the same `trial` number as the Product to which it belongs.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :return: The trial of this ProductRatePlan.
        :rtype: int
        """
        return self._trial

    @trial.setter
    def trial(self, trial):
        """
        Sets the trial of this ProductRatePlan.
        {\"default\":0,\"description\":\"Number of trial-length-measures which constitute the rate plan's trial period. If left unspecified: the rate plan will use the same `trial` number as the Product to which it belongs.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :param trial: The trial of this ProductRatePlan.
        :type: int
        """

        self._trial = trial

    @property
    def trial_period(self):
        """
        Gets the trial_period of this ProductRatePlan.
        {\"default\":\"none\",\"description\":\"Measure describing the magnitude of the rate plan's trial period. If left unspecified: the rate plan will use the same `trialPeriod` magnitude as the Product to which it belongs.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :return: The trial_period of this ProductRatePlan.
        :rtype: str
        """
        return self._trial_period

    @trial_period.setter
    def trial_period(self, trial_period):
        """
        Sets the trial_period of this ProductRatePlan.
        {\"default\":\"none\",\"description\":\"Measure describing the magnitude of the rate plan's trial period. If left unspecified: the rate plan will use the same `trialPeriod` magnitude as the Product to which it belongs.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :param trial_period: The trial_period of this ProductRatePlan.
        :type: str
        """
        allowed_values = ["none", "minutes", "days", "months"]
        if trial_period not in allowed_values:
            raise ValueError(
                "Invalid value for `trial_period` ({0}), must be one of {1}"
                .format(trial_period, allowed_values)
            )

        self._trial_period = trial_period

    @property
    def product_type(self):
        """
        Gets the product_type of this ProductRatePlan.
        {\"default\":\"recurring\",\"description\":\"The frequency of the rate plan &mdash; either recurring or non-recurring. If left unspecified: the rate plan will use the same `productType` frequency as the Product to which it belongs.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :return: The product_type of this ProductRatePlan.
        :rtype: str
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """
        Sets the product_type of this ProductRatePlan.
        {\"default\":\"recurring\",\"description\":\"The frequency of the rate plan &mdash; either recurring or non-recurring. If left unspecified: the rate plan will use the same `productType` frequency as the Product to which it belongs.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :param product_type: The product_type of this ProductRatePlan.
        :type: str
        """
        allowed_values = ["nonrecurring", "recurring"]
        if product_type not in allowed_values:
            raise ValueError(
                "Invalid value for `product_type` ({0}), must be one of {1}"
                .format(product_type, allowed_values)
            )

        self._product_type = product_type

    @property
    def pro_rata_mode(self):
        """
        Gets the pro_rata_mode of this ProductRatePlan.
        {\"default\":\"WithCoupon\",\"description\":\"The pro-rata mode for the rate plan. <br><span class=\\\"label label-default\\\">None</span> &mdash; The pro-rata cost for upgrades will be ignored.<br><span class=\\\"label label-default\\\">WithCoupon</span> &mdash; The pro-rata cost for upgrades will be calculated based on the time remaining for the subscription. Discounts from any attached coupons will be deducted from the pro-rated cost.<br><span class=\\\"label label-default\\\">WithoutCoupon</span> &mdash; The pro-rata cost for upgrades will be calculated based on the time remaining for the subscription. Discounts from any attached coupons will not be deducted from the pro-rated cost. \",\"verbs\":[]}

        :return: The pro_rata_mode of this ProductRatePlan.
        :rtype: str
        """
        return self._pro_rata_mode

    @pro_rata_mode.setter
    def pro_rata_mode(self, pro_rata_mode):
        """
        Sets the pro_rata_mode of this ProductRatePlan.
        {\"default\":\"WithCoupon\",\"description\":\"The pro-rata mode for the rate plan. <br><span class=\\\"label label-default\\\">None</span> &mdash; The pro-rata cost for upgrades will be ignored.<br><span class=\\\"label label-default\\\">WithCoupon</span> &mdash; The pro-rata cost for upgrades will be calculated based on the time remaining for the subscription. Discounts from any attached coupons will be deducted from the pro-rated cost.<br><span class=\\\"label label-default\\\">WithoutCoupon</span> &mdash; The pro-rata cost for upgrades will be calculated based on the time remaining for the subscription. Discounts from any attached coupons will not be deducted from the pro-rated cost. \",\"verbs\":[]}

        :param pro_rata_mode: The pro_rata_mode of this ProductRatePlan.
        :type: str
        """
        allowed_values = ["None", "WithCoupon", "WithoutCoupon", "Full"]
        if pro_rata_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `pro_rata_mode` ({0}), must be one of {1}"
                .format(pro_rata_mode, allowed_values)
            )

        self._pro_rata_mode = pro_rata_mode

    @property
    def create_zero_valued_invoices(self):
        """
        Gets the create_zero_valued_invoices of this ProductRatePlan.
        {\"default\":\"true\",\"description\":\"Whether invoices are created if they have a zero valued cost before any discounts are applied.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The create_zero_valued_invoices of this ProductRatePlan.
        :rtype: bool
        """
        return self._create_zero_valued_invoices

    @create_zero_valued_invoices.setter
    def create_zero_valued_invoices(self, create_zero_valued_invoices):
        """
        Sets the create_zero_valued_invoices of this ProductRatePlan.
        {\"default\":\"true\",\"description\":\"Whether invoices are created if they have a zero valued cost before any discounts are applied.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param create_zero_valued_invoices: The create_zero_valued_invoices of this ProductRatePlan.
        :type: bool
        """

        self._create_zero_valued_invoices = create_zero_valued_invoices

    @property
    def name(self):
        """
        Gets the name of this ProductRatePlan.
        {\"description\":\"A friendly name &mdash; for your benefit &mdash; used to identify this rate plan within some product in BillForward. The name should reflect the fact that this rate plan provides to the customer a price tiering system within which a subscription to its Product can be made. <br>The rate plan's name could describe the nature of its price tiering (e.g. \\\"Default pricing\\\", \\\"Student pricing\\\").<br>Remember also that rate plans can override the timing prescribed by their product. If your rate plan is defined by its overriding the default timing of its product, then that can be reflected in that rate plan's name. (e.g. \\\"Student pricing - Annual\\\").\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :return: The name of this ProductRatePlan.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ProductRatePlan.
        {\"description\":\"A friendly name &mdash; for your benefit &mdash; used to identify this rate plan within some product in BillForward. The name should reflect the fact that this rate plan provides to the customer a price tiering system within which a subscription to its Product can be made. <br>The rate plan's name could describe the nature of its price tiering (e.g. \\\"Default pricing\\\", \\\"Student pricing\\\").<br>Remember also that rate plans can override the timing prescribed by their product. If your rate plan is defined by its overriding the default timing of its product, then that can be reflected in that rate plan's name. (e.g. \\\"Student pricing - Annual\\\").\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :param name: The name of this ProductRatePlan.
        :type: str
        """

        self._name = name

    @property
    def public_name(self):
        """
        Gets the public_name of this ProductRatePlan.
        {\"description\":\"A friendly non-unique name used to identify this product-rate-plan\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :return: The public_name of this ProductRatePlan.
        :rtype: str
        """
        return self._public_name

    @public_name.setter
    def public_name(self, public_name):
        """
        Sets the public_name of this ProductRatePlan.
        {\"description\":\"A friendly non-unique name used to identify this product-rate-plan\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :param public_name: The public_name of this ProductRatePlan.
        :type: str
        """

        self._public_name = public_name

    @property
    def valid_from(self):
        """
        Gets the valid_from of this ProductRatePlan.
        {\"description\":\"The UTC DateTime specifying when the rate plan is valid from.\",\"verbs\":[\"GET\"]}

        :return: The valid_from of this ProductRatePlan.
        :rtype: datetime
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """
        Sets the valid_from of this ProductRatePlan.
        {\"description\":\"The UTC DateTime specifying when the rate plan is valid from.\",\"verbs\":[\"GET\"]}

        :param valid_from: The valid_from of this ProductRatePlan.
        :type: datetime
        """

        self._valid_from = valid_from

    @property
    def valid_till(self):
        """
        Gets the valid_till of this ProductRatePlan.
        {\"description\":\"The UTC DateTime specifying when the product-rate-plan is valid till.\",\"verbs\":[\"GET\"]}

        :return: The valid_till of this ProductRatePlan.
        :rtype: datetime
        """
        return self._valid_till

    @valid_till.setter
    def valid_till(self, valid_till):
        """
        Sets the valid_till of this ProductRatePlan.
        {\"description\":\"The UTC DateTime specifying when the product-rate-plan is valid till.\",\"verbs\":[\"GET\"]}

        :param valid_till: The valid_till of this ProductRatePlan.
        :type: datetime
        """

        self._valid_till = valid_till

    @property
    def status(self):
        """
        Gets the status of this ProductRatePlan.
        {\"description\":\"The current status of the rate plan.\",\"verbs\":[]}

        :return: The status of this ProductRatePlan.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ProductRatePlan.
        {\"description\":\"The current status of the rate plan.\",\"verbs\":[]}

        :param status: The status of this ProductRatePlan.
        :type: str
        """

        self._status = status

    @property
    def migration_behaviour(self):
        """
        Gets the migration_behaviour of this ProductRatePlan.
        {\"default\":\"CreditAccount\",\"description\":\"The action that should be taken, should the pro-rata calculation result in a negative value.<br><span class=\\\"label label-default\\\">NoCharge</span> &mdash; Don't return to the customer any money.<br><span class=\\\"label label-default\\\">CreditAccount</span> &mdash; Credit the customer's account with the amount.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :return: The migration_behaviour of this ProductRatePlan.
        :rtype: str
        """
        return self._migration_behaviour

    @migration_behaviour.setter
    def migration_behaviour(self, migration_behaviour):
        """
        Sets the migration_behaviour of this ProductRatePlan.
        {\"default\":\"CreditAccount\",\"description\":\"The action that should be taken, should the pro-rata calculation result in a negative value.<br><span class=\\\"label label-default\\\">NoCharge</span> &mdash; Don't return to the customer any money.<br><span class=\\\"label label-default\\\">CreditAccount</span> &mdash; Credit the customer's account with the amount.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :param migration_behaviour: The migration_behaviour of this ProductRatePlan.
        :type: str
        """
        allowed_values = ["NoCharge", "CreditAccount"]
        if migration_behaviour not in allowed_values:
            raise ValueError(
                "Invalid value for `migration_behaviour` ({0}), must be one of {1}"
                .format(migration_behaviour, allowed_values)
            )

        self._migration_behaviour = migration_behaviour

    @property
    def invoice_issue_type(self):
        """
        Gets the invoice_issue_type of this ProductRatePlan.
        {\"default\":\"<span class=\\\"label label-default\\\">Immediate</span>\",\"description\":\"The strategy for how invoices for this plan will be issued.<br><span class=\\\"label label-default\\\">Immediate</span> &mdash; All generated invoices move immediately to the 'Unpaid' state &mdash; beginning the payment pursuit process.<br><span class=\\\"label label-default\\\">Delayed</span> &mdash; All generated invoices begin in the 'Pending' state. An 'Issue Invoice' amendment is scheduled (based on the rate plan's `issueDuration` and `issuePeriod`) that will move the invoice to the 'Unpaid' state (beginning the payment pursuit process) in accordance with the rate plan's issuance schedule.<br><span class=\\\"label label-default\\\">Manual</span> &mdash; All generated invoices sit in the 'Pending' state &mdash; they will not be issued to the customer unless explicit action is taken. This gives you an opportunity to review or recalculate the invoice.\"verbs\":[\"POST\",\"GET\"]}

        :return: The invoice_issue_type of this ProductRatePlan.
        :rtype: str
        """
        return self._invoice_issue_type

    @invoice_issue_type.setter
    def invoice_issue_type(self, invoice_issue_type):
        """
        Sets the invoice_issue_type of this ProductRatePlan.
        {\"default\":\"<span class=\\\"label label-default\\\">Immediate</span>\",\"description\":\"The strategy for how invoices for this plan will be issued.<br><span class=\\\"label label-default\\\">Immediate</span> &mdash; All generated invoices move immediately to the 'Unpaid' state &mdash; beginning the payment pursuit process.<br><span class=\\\"label label-default\\\">Delayed</span> &mdash; All generated invoices begin in the 'Pending' state. An 'Issue Invoice' amendment is scheduled (based on the rate plan's `issueDuration` and `issuePeriod`) that will move the invoice to the 'Unpaid' state (beginning the payment pursuit process) in accordance with the rate plan's issuance schedule.<br><span class=\\\"label label-default\\\">Manual</span> &mdash; All generated invoices sit in the 'Pending' state &mdash; they will not be issued to the customer unless explicit action is taken. This gives you an opportunity to review or recalculate the invoice.\"verbs\":[\"POST\",\"GET\"]}

        :param invoice_issue_type: The invoice_issue_type of this ProductRatePlan.
        :type: str
        """
        allowed_values = ["Immediate", "Delayed", "Manual"]
        if invoice_issue_type not in allowed_values:
            raise ValueError(
                "Invalid value for `invoice_issue_type` ({0}), must be one of {1}"
                .format(invoice_issue_type, allowed_values)
            )

        self._invoice_issue_type = invoice_issue_type

    @property
    def issue_duration(self):
        """
        Gets the issue_duration of this ProductRatePlan.
        {\"description\":\"Number of issue-length-measures between issuance of invoices for this rate plan.\"\"verbs\":[\"POST\",\"GET\"]}

        :return: The issue_duration of this ProductRatePlan.
        :rtype: int
        """
        return self._issue_duration

    @issue_duration.setter
    def issue_duration(self, issue_duration):
        """
        Sets the issue_duration of this ProductRatePlan.
        {\"description\":\"Number of issue-length-measures between issuance of invoices for this rate plan.\"\"verbs\":[\"POST\",\"GET\"]}

        :param issue_duration: The issue_duration of this ProductRatePlan.
        :type: int
        """

        self._issue_duration = issue_duration

    @property
    def issue_period(self):
        """
        Gets the issue_period of this ProductRatePlan.
        {\"description\":\"Measure describing the magnitude of the invoice issuance period.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The issue_period of this ProductRatePlan.
        :rtype: str
        """
        return self._issue_period

    @issue_period.setter
    def issue_period(self, issue_period):
        """
        Sets the issue_period of this ProductRatePlan.
        {\"description\":\"Measure describing the magnitude of the invoice issuance period.\",\"verbs\":[\"POST\",\"GET\"]}

        :param issue_period: The issue_period of this ProductRatePlan.
        :type: str
        """
        allowed_values = ["minutes", "days", "months", "years"]
        if issue_period not in allowed_values:
            raise ValueError(
                "Invalid value for `issue_period` ({0}), must be one of {1}"
                .format(issue_period, allowed_values)
            )

        self._issue_period = issue_period

    @property
    def taxation(self):
        """
        Gets the taxation of this ProductRatePlan.
        {\"description\":\"A list linking taxation strategies to the rate plan.\",\"verbs\":[\"POST\",\"GET\",\"PUT\"]}

        :return: The taxation of this ProductRatePlan.
        :rtype: list[MutableBillingEntity]
        """
        return self._taxation

    @taxation.setter
    def taxation(self, taxation):
        """
        Sets the taxation of this ProductRatePlan.
        {\"description\":\"A list linking taxation strategies to the rate plan.\",\"verbs\":[\"POST\",\"GET\",\"PUT\"]}

        :param taxation: The taxation of this ProductRatePlan.
        :type: list[MutableBillingEntity]
        """

        self._taxation = taxation

    @property
    def fixed_term_definitions(self):
        """
        Gets the fixed_term_definitions of this ProductRatePlan.
        {\"description\":\"A list linking \\\"Fixed-Term Definitions\\\" to the rate plan.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :return: The fixed_term_definitions of this ProductRatePlan.
        :rtype: list[MutableBillingEntity]
        """
        return self._fixed_term_definitions

    @fixed_term_definitions.setter
    def fixed_term_definitions(self, fixed_term_definitions):
        """
        Sets the fixed_term_definitions of this ProductRatePlan.
        {\"description\":\"A list linking \\\"Fixed-Term Definitions\\\" to the rate plan.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :param fixed_term_definitions: The fixed_term_definitions of this ProductRatePlan.
        :type: list[MutableBillingEntity]
        """

        self._fixed_term_definitions = fixed_term_definitions

    @property
    def product(self):
        """
        Gets the product of this ProductRatePlan.
        {\"description\":\"The product to which this rate plan belongs. A product is essentially a collection of rate plans, and describes the service conferred to a customer upon subscription to any of said product's rate plans. The product serves also as a template from which its rate plans can infer default attributes.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The product of this ProductRatePlan.
        :rtype: Product
        """
        return self._product

    @product.setter
    def product(self, product):
        """
        Sets the product of this ProductRatePlan.
        {\"description\":\"The product to which this rate plan belongs. A product is essentially a collection of rate plans, and describes the service conferred to a customer upon subscription to any of said product's rate plans. The product serves also as a template from which its rate plans can infer default attributes.\",\"verbs\":[\"POST\",\"GET\"]}

        :param product: The product of this ProductRatePlan.
        :type: Product
        """

        self._product = product

    @property
    def pricing_components(self):
        """
        Gets the pricing_components of this ProductRatePlan.
        {\"description\":\"The pricing-components which describe the price tiering system of this rate plan. A product rate plan may have 1 or more pricing components. Each pricing component represents a different charge associated with the subscription. Pricing components are versioned.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :return: The pricing_components of this ProductRatePlan.
        :rtype: list[PricingComponent]
        """
        return self._pricing_components

    @pricing_components.setter
    def pricing_components(self, pricing_components):
        """
        Sets the pricing_components of this ProductRatePlan.
        {\"description\":\"The pricing-components which describe the price tiering system of this rate plan. A product rate plan may have 1 or more pricing components. Each pricing component represents a different charge associated with the subscription. Pricing components are versioned.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :param pricing_components: The pricing_components of this ProductRatePlan.
        :type: list[PricingComponent]
        """

        self._pricing_components = pricing_components

    @property
    def aggregating_components(self):
        """
        Gets the aggregating_components of this ProductRatePlan.
        {\"default\":\"(empty list)\",\"description\":\"List of AggregatingComponents &mdash; these describe pricing components whose prices should be recalculated upon invoice aggregation. For example: two subscriptions' individual consumptions may be neither of them large enough to achieve bulk-buy discounts. When aggregated, though, the same two subscriptions' consumption may add up to a quantity which does merit a bulk buy discount within your tiering system.\",\"verbs\":[\"POST\"]}

        :return: The aggregating_components of this ProductRatePlan.
        :rtype: list[AggregatingComponent]
        """
        return self._aggregating_components

    @aggregating_components.setter
    def aggregating_components(self, aggregating_components):
        """
        Sets the aggregating_components of this ProductRatePlan.
        {\"default\":\"(empty list)\",\"description\":\"List of AggregatingComponents &mdash; these describe pricing components whose prices should be recalculated upon invoice aggregation. For example: two subscriptions' individual consumptions may be neither of them large enough to achieve bulk-buy discounts. When aggregated, though, the same two subscriptions' consumption may add up to a quantity which does merit a bulk buy discount within your tiering system.\",\"verbs\":[\"POST\"]}

        :param aggregating_components: The aggregating_components of this ProductRatePlan.
        :type: list[AggregatingComponent]
        """

        self._aggregating_components = aggregating_components

    @property
    def payment_terms(self):
        """
        Gets the payment_terms of this ProductRatePlan.


        :return: The payment_terms of this ProductRatePlan.
        :rtype: int
        """
        return self._payment_terms

    @payment_terms.setter
    def payment_terms(self, payment_terms):
        """
        Sets the payment_terms of this ProductRatePlan.


        :param payment_terms: The payment_terms of this ProductRatePlan.
        :type: int
        """

        self._payment_terms = payment_terms

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
