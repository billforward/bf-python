# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from billforward.models.subscription_charge import SubscriptionCharge  # noqa: F401,E501

class PricingComponentCharge(SubscriptionCharge):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pricing_component_name': 'str',
        'public_pricing_component_name': 'str',
        'pricing_component_id': 'str',
        'product_name': 'str',
        'public_product_name': 'str',
        'product_id': 'str',
        'product_rate_plan_name': 'str',
        'public_product_rate_plan_name': 'str',
        'product_rate_plan_id': 'str',
        'unit_of_measure_id': 'str',
        'unit_of_measure_name': 'str',
        'pricing_component_value': 'int',
        'existing_pricing_component_value': 'int',
        'pricing_component_type': 'str',
        'creation_type': 'str',
        'proration': 'float',
        'quantity_label': 'str'
    }
    if hasattr(SubscriptionCharge, "swagger_types"):
        swagger_types.update(SubscriptionCharge.swagger_types)

    attribute_map = {
        'pricing_component_name': 'pricingComponentName',
        'public_pricing_component_name': 'publicPricingComponentName',
        'pricing_component_id': 'pricingComponentID',
        'product_name': 'productName',
        'public_product_name': 'publicProductName',
        'product_id': 'productID',
        'product_rate_plan_name': 'productRatePlanName',
        'public_product_rate_plan_name': 'publicProductRatePlanName',
        'product_rate_plan_id': 'productRatePlanID',
        'unit_of_measure_id': 'unitOfMeasureID',
        'unit_of_measure_name': 'unitOfMeasureName',
        'pricing_component_value': 'pricingComponentValue',
        'existing_pricing_component_value': 'existingPricingComponentValue',
        'pricing_component_type': 'pricingComponentType',
        'creation_type': 'creationType',
        'proration': 'proration',
        'quantity_label': 'quantityLabel'
    }
    if hasattr(SubscriptionCharge, "attribute_map"):
        attribute_map.update(SubscriptionCharge.attribute_map)

    def __init__(self, pricing_component_name=None, public_pricing_component_name=None, pricing_component_id=None, product_name=None, public_product_name=None, product_id=None, product_rate_plan_name=None, public_product_rate_plan_name=None, product_rate_plan_id=None, unit_of_measure_id=None, unit_of_measure_name=None, pricing_component_value=None, existing_pricing_component_value=None, pricing_component_type=None, creation_type=None, proration=None, quantity_label=None, *args, **kwargs):  # noqa: E501
        """PricingComponentCharge - a model defined in Swagger"""  # noqa: E501
        self._pricing_component_name = None
        self._public_pricing_component_name = None
        self._pricing_component_id = None
        self._product_name = None
        self._public_product_name = None
        self._product_id = None
        self._product_rate_plan_name = None
        self._public_product_rate_plan_name = None
        self._product_rate_plan_id = None
        self._unit_of_measure_id = None
        self._unit_of_measure_name = None
        self._pricing_component_value = None
        self._existing_pricing_component_value = None
        self._pricing_component_type = None
        self._creation_type = None
        self._proration = None
        self._quantity_label = None
        self.discriminator = None
        self.pricing_component_name = pricing_component_name
        if public_pricing_component_name is not None:
            self.public_pricing_component_name = public_pricing_component_name
        self.pricing_component_id = pricing_component_id
        self.product_name = product_name
        if public_product_name is not None:
            self.public_product_name = public_product_name
        self.product_id = product_id
        self.product_rate_plan_name = product_rate_plan_name
        if public_product_rate_plan_name is not None:
            self.public_product_rate_plan_name = public_product_rate_plan_name
        self.product_rate_plan_id = product_rate_plan_id
        self.unit_of_measure_id = unit_of_measure_id
        self.unit_of_measure_name = unit_of_measure_name
        self.pricing_component_value = pricing_component_value
        self.existing_pricing_component_value = existing_pricing_component_value
        if pricing_component_type is not None:
            self.pricing_component_type = pricing_component_type
        if creation_type is not None:
            self.creation_type = creation_type
        if proration is not None:
            self.proration = proration
        if quantity_label is not None:
            self.quantity_label = quantity_label
        SubscriptionCharge.__init__(self, *args, **kwargs)

    @property
    def pricing_component_name(self):
        """Gets the pricing_component_name of this PricingComponentCharge.  # noqa: E501


        :return: The pricing_component_name of this PricingComponentCharge.  # noqa: E501
        :rtype: str
        """
        return self._pricing_component_name

    @pricing_component_name.setter
    def pricing_component_name(self, pricing_component_name):
        """Sets the pricing_component_name of this PricingComponentCharge.


        :param pricing_component_name: The pricing_component_name of this PricingComponentCharge.  # noqa: E501
        :type: str
        """
        if pricing_component_name is None:
            raise ValueError("Invalid value for `pricing_component_name`, must not be `None`")  # noqa: E501

        self._pricing_component_name = pricing_component_name

    @property
    def public_pricing_component_name(self):
        """Gets the public_pricing_component_name of this PricingComponentCharge.  # noqa: E501


        :return: The public_pricing_component_name of this PricingComponentCharge.  # noqa: E501
        :rtype: str
        """
        return self._public_pricing_component_name

    @public_pricing_component_name.setter
    def public_pricing_component_name(self, public_pricing_component_name):
        """Sets the public_pricing_component_name of this PricingComponentCharge.


        :param public_pricing_component_name: The public_pricing_component_name of this PricingComponentCharge.  # noqa: E501
        :type: str
        """

        self._public_pricing_component_name = public_pricing_component_name

    @property
    def pricing_component_id(self):
        """Gets the pricing_component_id of this PricingComponentCharge.  # noqa: E501


        :return: The pricing_component_id of this PricingComponentCharge.  # noqa: E501
        :rtype: str
        """
        return self._pricing_component_id

    @pricing_component_id.setter
    def pricing_component_id(self, pricing_component_id):
        """Sets the pricing_component_id of this PricingComponentCharge.


        :param pricing_component_id: The pricing_component_id of this PricingComponentCharge.  # noqa: E501
        :type: str
        """
        if pricing_component_id is None:
            raise ValueError("Invalid value for `pricing_component_id`, must not be `None`")  # noqa: E501

        self._pricing_component_id = pricing_component_id

    @property
    def product_name(self):
        """Gets the product_name of this PricingComponentCharge.  # noqa: E501


        :return: The product_name of this PricingComponentCharge.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this PricingComponentCharge.


        :param product_name: The product_name of this PricingComponentCharge.  # noqa: E501
        :type: str
        """
        if product_name is None:
            raise ValueError("Invalid value for `product_name`, must not be `None`")  # noqa: E501

        self._product_name = product_name

    @property
    def public_product_name(self):
        """Gets the public_product_name of this PricingComponentCharge.  # noqa: E501


        :return: The public_product_name of this PricingComponentCharge.  # noqa: E501
        :rtype: str
        """
        return self._public_product_name

    @public_product_name.setter
    def public_product_name(self, public_product_name):
        """Sets the public_product_name of this PricingComponentCharge.


        :param public_product_name: The public_product_name of this PricingComponentCharge.  # noqa: E501
        :type: str
        """

        self._public_product_name = public_product_name

    @property
    def product_id(self):
        """Gets the product_id of this PricingComponentCharge.  # noqa: E501


        :return: The product_id of this PricingComponentCharge.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this PricingComponentCharge.


        :param product_id: The product_id of this PricingComponentCharge.  # noqa: E501
        :type: str
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")  # noqa: E501

        self._product_id = product_id

    @property
    def product_rate_plan_name(self):
        """Gets the product_rate_plan_name of this PricingComponentCharge.  # noqa: E501


        :return: The product_rate_plan_name of this PricingComponentCharge.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_name

    @product_rate_plan_name.setter
    def product_rate_plan_name(self, product_rate_plan_name):
        """Sets the product_rate_plan_name of this PricingComponentCharge.


        :param product_rate_plan_name: The product_rate_plan_name of this PricingComponentCharge.  # noqa: E501
        :type: str
        """
        if product_rate_plan_name is None:
            raise ValueError("Invalid value for `product_rate_plan_name`, must not be `None`")  # noqa: E501

        self._product_rate_plan_name = product_rate_plan_name

    @property
    def public_product_rate_plan_name(self):
        """Gets the public_product_rate_plan_name of this PricingComponentCharge.  # noqa: E501


        :return: The public_product_rate_plan_name of this PricingComponentCharge.  # noqa: E501
        :rtype: str
        """
        return self._public_product_rate_plan_name

    @public_product_rate_plan_name.setter
    def public_product_rate_plan_name(self, public_product_rate_plan_name):
        """Sets the public_product_rate_plan_name of this PricingComponentCharge.


        :param public_product_rate_plan_name: The public_product_rate_plan_name of this PricingComponentCharge.  # noqa: E501
        :type: str
        """

        self._public_product_rate_plan_name = public_product_rate_plan_name

    @property
    def product_rate_plan_id(self):
        """Gets the product_rate_plan_id of this PricingComponentCharge.  # noqa: E501


        :return: The product_rate_plan_id of this PricingComponentCharge.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_id

    @product_rate_plan_id.setter
    def product_rate_plan_id(self, product_rate_plan_id):
        """Sets the product_rate_plan_id of this PricingComponentCharge.


        :param product_rate_plan_id: The product_rate_plan_id of this PricingComponentCharge.  # noqa: E501
        :type: str
        """
        if product_rate_plan_id is None:
            raise ValueError("Invalid value for `product_rate_plan_id`, must not be `None`")  # noqa: E501

        self._product_rate_plan_id = product_rate_plan_id

    @property
    def unit_of_measure_id(self):
        """Gets the unit_of_measure_id of this PricingComponentCharge.  # noqa: E501


        :return: The unit_of_measure_id of this PricingComponentCharge.  # noqa: E501
        :rtype: str
        """
        return self._unit_of_measure_id

    @unit_of_measure_id.setter
    def unit_of_measure_id(self, unit_of_measure_id):
        """Sets the unit_of_measure_id of this PricingComponentCharge.


        :param unit_of_measure_id: The unit_of_measure_id of this PricingComponentCharge.  # noqa: E501
        :type: str
        """
        if unit_of_measure_id is None:
            raise ValueError("Invalid value for `unit_of_measure_id`, must not be `None`")  # noqa: E501

        self._unit_of_measure_id = unit_of_measure_id

    @property
    def unit_of_measure_name(self):
        """Gets the unit_of_measure_name of this PricingComponentCharge.  # noqa: E501


        :return: The unit_of_measure_name of this PricingComponentCharge.  # noqa: E501
        :rtype: str
        """
        return self._unit_of_measure_name

    @unit_of_measure_name.setter
    def unit_of_measure_name(self, unit_of_measure_name):
        """Sets the unit_of_measure_name of this PricingComponentCharge.


        :param unit_of_measure_name: The unit_of_measure_name of this PricingComponentCharge.  # noqa: E501
        :type: str
        """
        if unit_of_measure_name is None:
            raise ValueError("Invalid value for `unit_of_measure_name`, must not be `None`")  # noqa: E501

        self._unit_of_measure_name = unit_of_measure_name

    @property
    def pricing_component_value(self):
        """Gets the pricing_component_value of this PricingComponentCharge.  # noqa: E501


        :return: The pricing_component_value of this PricingComponentCharge.  # noqa: E501
        :rtype: int
        """
        return self._pricing_component_value

    @pricing_component_value.setter
    def pricing_component_value(self, pricing_component_value):
        """Sets the pricing_component_value of this PricingComponentCharge.


        :param pricing_component_value: The pricing_component_value of this PricingComponentCharge.  # noqa: E501
        :type: int
        """
        if pricing_component_value is None:
            raise ValueError("Invalid value for `pricing_component_value`, must not be `None`")  # noqa: E501

        self._pricing_component_value = pricing_component_value

    @property
    def existing_pricing_component_value(self):
        """Gets the existing_pricing_component_value of this PricingComponentCharge.  # noqa: E501


        :return: The existing_pricing_component_value of this PricingComponentCharge.  # noqa: E501
        :rtype: int
        """
        return self._existing_pricing_component_value

    @existing_pricing_component_value.setter
    def existing_pricing_component_value(self, existing_pricing_component_value):
        """Sets the existing_pricing_component_value of this PricingComponentCharge.


        :param existing_pricing_component_value: The existing_pricing_component_value of this PricingComponentCharge.  # noqa: E501
        :type: int
        """
        if existing_pricing_component_value is None:
            raise ValueError("Invalid value for `existing_pricing_component_value`, must not be `None`")  # noqa: E501

        self._existing_pricing_component_value = existing_pricing_component_value

    @property
    def pricing_component_type(self):
        """Gets the pricing_component_type of this PricingComponentCharge.  # noqa: E501


        :return: The pricing_component_type of this PricingComponentCharge.  # noqa: E501
        :rtype: str
        """
        return self._pricing_component_type

    @pricing_component_type.setter
    def pricing_component_type(self, pricing_component_type):
        """Sets the pricing_component_type of this PricingComponentCharge.


        :param pricing_component_type: The pricing_component_type of this PricingComponentCharge.  # noqa: E501
        :type: str
        """
        allowed_values = ["setup", "subscription", "arrears", "usage"]  # noqa: E501
        if pricing_component_type not in allowed_values:
            raise ValueError(
                "Invalid value for `pricing_component_type` ({0}), must be one of {1}"  # noqa: E501
                .format(pricing_component_type, allowed_values)
            )

        self._pricing_component_type = pricing_component_type

    @property
    def creation_type(self):
        """Gets the creation_type of this PricingComponentCharge.  # noqa: E501


        :return: The creation_type of this PricingComponentCharge.  # noqa: E501
        :rtype: str
        """
        return self._creation_type

    @creation_type.setter
    def creation_type(self, creation_type):
        """Sets the creation_type of this PricingComponentCharge.


        :param creation_type: The creation_type of this PricingComponentCharge.  # noqa: E501
        :type: str
        """
        allowed_values = ["Adhoc", "Subscription", "Upgrade", "ComponentAggregation"]  # noqa: E501
        if creation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `creation_type` ({0}), must be one of {1}"  # noqa: E501
                .format(creation_type, allowed_values)
            )

        self._creation_type = creation_type

    @property
    def proration(self):
        """Gets the proration of this PricingComponentCharge.  # noqa: E501


        :return: The proration of this PricingComponentCharge.  # noqa: E501
        :rtype: float
        """
        return self._proration

    @proration.setter
    def proration(self, proration):
        """Sets the proration of this PricingComponentCharge.


        :param proration: The proration of this PricingComponentCharge.  # noqa: E501
        :type: float
        """

        self._proration = proration

    @property
    def quantity_label(self):
        """Gets the quantity_label of this PricingComponentCharge.  # noqa: E501


        :return: The quantity_label of this PricingComponentCharge.  # noqa: E501
        :rtype: str
        """
        return self._quantity_label

    @quantity_label.setter
    def quantity_label(self, quantity_label):
        """Sets the quantity_label of this PricingComponentCharge.


        :param quantity_label: The quantity_label of this PricingComponentCharge.  # noqa: E501
        :type: str
        """

        self._quantity_label = quantity_label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PricingComponentCharge, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PricingComponentCharge):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
