# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ZoozCaptureRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'organization_id': 'str',
        'account_id': 'str',
        'default_payment_method': 'bool',
        'card_token': 'str'
    }

    attribute_map = {
        'created': 'created',
        'organization_id': 'organizationID',
        'account_id': 'accountID',
        'default_payment_method': 'defaultPaymentMethod',
        'card_token': 'cardToken'
    }

    def __init__(self, created=None, organization_id=None, account_id=None, default_payment_method=None, card_token=None):  # noqa: E501
        """ZoozCaptureRequest - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._organization_id = None
        self._account_id = None
        self._default_payment_method = None
        self._card_token = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if organization_id is not None:
            self.organization_id = organization_id
        if account_id is not None:
            self.account_id = account_id
        if default_payment_method is not None:
            self.default_payment_method = default_payment_method
        if card_token is not None:
            self.card_token = card_token

    @property
    def created(self):
        """Gets the created of this ZoozCaptureRequest.  # noqa: E501


        :return: The created of this ZoozCaptureRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ZoozCaptureRequest.


        :param created: The created of this ZoozCaptureRequest.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def organization_id(self):
        """Gets the organization_id of this ZoozCaptureRequest.  # noqa: E501


        :return: The organization_id of this ZoozCaptureRequest.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this ZoozCaptureRequest.


        :param organization_id: The organization_id of this ZoozCaptureRequest.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def account_id(self):
        """Gets the account_id of this ZoozCaptureRequest.  # noqa: E501


        :return: The account_id of this ZoozCaptureRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ZoozCaptureRequest.


        :param account_id: The account_id of this ZoozCaptureRequest.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def default_payment_method(self):
        """Gets the default_payment_method of this ZoozCaptureRequest.  # noqa: E501


        :return: The default_payment_method of this ZoozCaptureRequest.  # noqa: E501
        :rtype: bool
        """
        return self._default_payment_method

    @default_payment_method.setter
    def default_payment_method(self, default_payment_method):
        """Sets the default_payment_method of this ZoozCaptureRequest.


        :param default_payment_method: The default_payment_method of this ZoozCaptureRequest.  # noqa: E501
        :type: bool
        """

        self._default_payment_method = default_payment_method

    @property
    def card_token(self):
        """Gets the card_token of this ZoozCaptureRequest.  # noqa: E501


        :return: The card_token of this ZoozCaptureRequest.  # noqa: E501
        :rtype: str
        """
        return self._card_token

    @card_token.setter
    def card_token(self, card_token):
        """Sets the card_token of this ZoozCaptureRequest.


        :param card_token: The card_token of this ZoozCaptureRequest.  # noqa: E501
        :type: str
        """

        self._card_token = card_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ZoozCaptureRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ZoozCaptureRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
