# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CouponInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'changed_by': 'str',
        'updated': 'datetime',
        'id': 'str',
        'crm_id': 'str',
        'organization_id': 'str',
        'book_id': 'str',
        'coupon_definition_id': 'str',
        'target_id': 'str',
        'target': 'str',
        'coupon_code': 'str',
        'issued_by': 'str',
        'periods_valid_for': 'int',
        'total_periods': 'int',
        'date_initialised': 'datetime',
        'valid_till': 'datetime',
        'remaining_uses': 'int',
        'instance_discount_value': 'float',
        'max_remaining_uses': 'int',
        'coupon_instance_existing_values': 'list[CouponInstanceExistingValue]',
        'final_period': 'int',
        'current_period': 'int'
    }

    attribute_map = {
        'created': 'created',
        'changed_by': 'changedBy',
        'updated': 'updated',
        'id': 'id',
        'crm_id': 'crmID',
        'organization_id': 'organizationID',
        'book_id': 'bookID',
        'coupon_definition_id': 'couponDefinitionID',
        'target_id': 'targetID',
        'target': 'target',
        'coupon_code': 'couponCode',
        'issued_by': 'issuedBy',
        'periods_valid_for': 'periodsValidFor',
        'total_periods': 'totalPeriods',
        'date_initialised': 'dateInitialised',
        'valid_till': 'validTill',
        'remaining_uses': 'remainingUses',
        'instance_discount_value': 'instanceDiscountValue',
        'max_remaining_uses': 'maxRemainingUses',
        'coupon_instance_existing_values': 'couponInstanceExistingValues',
        'final_period': 'finalPeriod',
        'current_period': 'currentPeriod'
    }

    def __init__(self, created=None, changed_by=None, updated=None, id=None, crm_id=None, organization_id=None, book_id=None, coupon_definition_id=None, target_id=None, target=None, coupon_code=None, issued_by=None, periods_valid_for=None, total_periods=None, date_initialised=None, valid_till=None, remaining_uses=None, instance_discount_value=None, max_remaining_uses=None, coupon_instance_existing_values=None, final_period=None, current_period=None):  # noqa: E501
        """CouponInstance - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._changed_by = None
        self._updated = None
        self._id = None
        self._crm_id = None
        self._organization_id = None
        self._book_id = None
        self._coupon_definition_id = None
        self._target_id = None
        self._target = None
        self._coupon_code = None
        self._issued_by = None
        self._periods_valid_for = None
        self._total_periods = None
        self._date_initialised = None
        self._valid_till = None
        self._remaining_uses = None
        self._instance_discount_value = None
        self._max_remaining_uses = None
        self._coupon_instance_existing_values = None
        self._final_period = None
        self._current_period = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if changed_by is not None:
            self.changed_by = changed_by
        if updated is not None:
            self.updated = updated
        if id is not None:
            self.id = id
        if crm_id is not None:
            self.crm_id = crm_id
        self.organization_id = organization_id
        self.book_id = book_id
        self.coupon_definition_id = coupon_definition_id
        if target_id is not None:
            self.target_id = target_id
        self.target = target
        if coupon_code is not None:
            self.coupon_code = coupon_code
        if issued_by is not None:
            self.issued_by = issued_by
        if periods_valid_for is not None:
            self.periods_valid_for = periods_valid_for
        if total_periods is not None:
            self.total_periods = total_periods
        self.date_initialised = date_initialised
        if valid_till is not None:
            self.valid_till = valid_till
        if remaining_uses is not None:
            self.remaining_uses = remaining_uses
        if instance_discount_value is not None:
            self.instance_discount_value = instance_discount_value
        if max_remaining_uses is not None:
            self.max_remaining_uses = max_remaining_uses
        if coupon_instance_existing_values is not None:
            self.coupon_instance_existing_values = coupon_instance_existing_values
        if final_period is not None:
            self.final_period = final_period
        if current_period is not None:
            self.current_period = current_period

    @property
    def created(self):
        """Gets the created of this CouponInstance.  # noqa: E501


        :return: The created of this CouponInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this CouponInstance.


        :param created: The created of this CouponInstance.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """Gets the changed_by of this CouponInstance.  # noqa: E501


        :return: The changed_by of this CouponInstance.  # noqa: E501
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """Sets the changed_by of this CouponInstance.


        :param changed_by: The changed_by of this CouponInstance.  # noqa: E501
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """Gets the updated of this CouponInstance.  # noqa: E501


        :return: The updated of this CouponInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this CouponInstance.


        :param updated: The updated of this CouponInstance.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """Gets the id of this CouponInstance.  # noqa: E501


        :return: The id of this CouponInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CouponInstance.


        :param id: The id of this CouponInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def crm_id(self):
        """Gets the crm_id of this CouponInstance.  # noqa: E501


        :return: The crm_id of this CouponInstance.  # noqa: E501
        :rtype: str
        """
        return self._crm_id

    @crm_id.setter
    def crm_id(self, crm_id):
        """Sets the crm_id of this CouponInstance.


        :param crm_id: The crm_id of this CouponInstance.  # noqa: E501
        :type: str
        """

        self._crm_id = crm_id

    @property
    def organization_id(self):
        """Gets the organization_id of this CouponInstance.  # noqa: E501


        :return: The organization_id of this CouponInstance.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this CouponInstance.


        :param organization_id: The organization_id of this CouponInstance.  # noqa: E501
        :type: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")  # noqa: E501

        self._organization_id = organization_id

    @property
    def book_id(self):
        """Gets the book_id of this CouponInstance.  # noqa: E501


        :return: The book_id of this CouponInstance.  # noqa: E501
        :rtype: str
        """
        return self._book_id

    @book_id.setter
    def book_id(self, book_id):
        """Sets the book_id of this CouponInstance.


        :param book_id: The book_id of this CouponInstance.  # noqa: E501
        :type: str
        """
        if book_id is None:
            raise ValueError("Invalid value for `book_id`, must not be `None`")  # noqa: E501

        self._book_id = book_id

    @property
    def coupon_definition_id(self):
        """Gets the coupon_definition_id of this CouponInstance.  # noqa: E501


        :return: The coupon_definition_id of this CouponInstance.  # noqa: E501
        :rtype: str
        """
        return self._coupon_definition_id

    @coupon_definition_id.setter
    def coupon_definition_id(self, coupon_definition_id):
        """Sets the coupon_definition_id of this CouponInstance.


        :param coupon_definition_id: The coupon_definition_id of this CouponInstance.  # noqa: E501
        :type: str
        """
        if coupon_definition_id is None:
            raise ValueError("Invalid value for `coupon_definition_id`, must not be `None`")  # noqa: E501

        self._coupon_definition_id = coupon_definition_id

    @property
    def target_id(self):
        """Gets the target_id of this CouponInstance.  # noqa: E501


        :return: The target_id of this CouponInstance.  # noqa: E501
        :rtype: str
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """Sets the target_id of this CouponInstance.


        :param target_id: The target_id of this CouponInstance.  # noqa: E501
        :type: str
        """

        self._target_id = target_id

    @property
    def target(self):
        """Gets the target of this CouponInstance.  # noqa: E501


        :return: The target of this CouponInstance.  # noqa: E501
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this CouponInstance.


        :param target: The target of this CouponInstance.  # noqa: E501
        :type: str
        """
        if target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")  # noqa: E501
        allowed_values = ["none", "subscription", "account"]  # noqa: E501
        if target not in allowed_values:
            raise ValueError(
                "Invalid value for `target` ({0}), must be one of {1}"  # noqa: E501
                .format(target, allowed_values)
            )

        self._target = target

    @property
    def coupon_code(self):
        """Gets the coupon_code of this CouponInstance.  # noqa: E501


        :return: The coupon_code of this CouponInstance.  # noqa: E501
        :rtype: str
        """
        return self._coupon_code

    @coupon_code.setter
    def coupon_code(self, coupon_code):
        """Sets the coupon_code of this CouponInstance.


        :param coupon_code: The coupon_code of this CouponInstance.  # noqa: E501
        :type: str
        """

        self._coupon_code = coupon_code

    @property
    def issued_by(self):
        """Gets the issued_by of this CouponInstance.  # noqa: E501


        :return: The issued_by of this CouponInstance.  # noqa: E501
        :rtype: str
        """
        return self._issued_by

    @issued_by.setter
    def issued_by(self, issued_by):
        """Sets the issued_by of this CouponInstance.


        :param issued_by: The issued_by of this CouponInstance.  # noqa: E501
        :type: str
        """

        self._issued_by = issued_by

    @property
    def periods_valid_for(self):
        """Gets the periods_valid_for of this CouponInstance.  # noqa: E501


        :return: The periods_valid_for of this CouponInstance.  # noqa: E501
        :rtype: int
        """
        return self._periods_valid_for

    @periods_valid_for.setter
    def periods_valid_for(self, periods_valid_for):
        """Sets the periods_valid_for of this CouponInstance.


        :param periods_valid_for: The periods_valid_for of this CouponInstance.  # noqa: E501
        :type: int
        """

        self._periods_valid_for = periods_valid_for

    @property
    def total_periods(self):
        """Gets the total_periods of this CouponInstance.  # noqa: E501


        :return: The total_periods of this CouponInstance.  # noqa: E501
        :rtype: int
        """
        return self._total_periods

    @total_periods.setter
    def total_periods(self, total_periods):
        """Sets the total_periods of this CouponInstance.


        :param total_periods: The total_periods of this CouponInstance.  # noqa: E501
        :type: int
        """

        self._total_periods = total_periods

    @property
    def date_initialised(self):
        """Gets the date_initialised of this CouponInstance.  # noqa: E501


        :return: The date_initialised of this CouponInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._date_initialised

    @date_initialised.setter
    def date_initialised(self, date_initialised):
        """Sets the date_initialised of this CouponInstance.


        :param date_initialised: The date_initialised of this CouponInstance.  # noqa: E501
        :type: datetime
        """
        if date_initialised is None:
            raise ValueError("Invalid value for `date_initialised`, must not be `None`")  # noqa: E501

        self._date_initialised = date_initialised

    @property
    def valid_till(self):
        """Gets the valid_till of this CouponInstance.  # noqa: E501


        :return: The valid_till of this CouponInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_till

    @valid_till.setter
    def valid_till(self, valid_till):
        """Sets the valid_till of this CouponInstance.


        :param valid_till: The valid_till of this CouponInstance.  # noqa: E501
        :type: datetime
        """

        self._valid_till = valid_till

    @property
    def remaining_uses(self):
        """Gets the remaining_uses of this CouponInstance.  # noqa: E501


        :return: The remaining_uses of this CouponInstance.  # noqa: E501
        :rtype: int
        """
        return self._remaining_uses

    @remaining_uses.setter
    def remaining_uses(self, remaining_uses):
        """Sets the remaining_uses of this CouponInstance.


        :param remaining_uses: The remaining_uses of this CouponInstance.  # noqa: E501
        :type: int
        """

        self._remaining_uses = remaining_uses

    @property
    def instance_discount_value(self):
        """Gets the instance_discount_value of this CouponInstance.  # noqa: E501


        :return: The instance_discount_value of this CouponInstance.  # noqa: E501
        :rtype: float
        """
        return self._instance_discount_value

    @instance_discount_value.setter
    def instance_discount_value(self, instance_discount_value):
        """Sets the instance_discount_value of this CouponInstance.


        :param instance_discount_value: The instance_discount_value of this CouponInstance.  # noqa: E501
        :type: float
        """

        self._instance_discount_value = instance_discount_value

    @property
    def max_remaining_uses(self):
        """Gets the max_remaining_uses of this CouponInstance.  # noqa: E501


        :return: The max_remaining_uses of this CouponInstance.  # noqa: E501
        :rtype: int
        """
        return self._max_remaining_uses

    @max_remaining_uses.setter
    def max_remaining_uses(self, max_remaining_uses):
        """Sets the max_remaining_uses of this CouponInstance.


        :param max_remaining_uses: The max_remaining_uses of this CouponInstance.  # noqa: E501
        :type: int
        """

        self._max_remaining_uses = max_remaining_uses

    @property
    def coupon_instance_existing_values(self):
        """Gets the coupon_instance_existing_values of this CouponInstance.  # noqa: E501


        :return: The coupon_instance_existing_values of this CouponInstance.  # noqa: E501
        :rtype: list[CouponInstanceExistingValue]
        """
        return self._coupon_instance_existing_values

    @coupon_instance_existing_values.setter
    def coupon_instance_existing_values(self, coupon_instance_existing_values):
        """Sets the coupon_instance_existing_values of this CouponInstance.


        :param coupon_instance_existing_values: The coupon_instance_existing_values of this CouponInstance.  # noqa: E501
        :type: list[CouponInstanceExistingValue]
        """

        self._coupon_instance_existing_values = coupon_instance_existing_values

    @property
    def final_period(self):
        """Gets the final_period of this CouponInstance.  # noqa: E501


        :return: The final_period of this CouponInstance.  # noqa: E501
        :rtype: int
        """
        return self._final_period

    @final_period.setter
    def final_period(self, final_period):
        """Sets the final_period of this CouponInstance.


        :param final_period: The final_period of this CouponInstance.  # noqa: E501
        :type: int
        """

        self._final_period = final_period

    @property
    def current_period(self):
        """Gets the current_period of this CouponInstance.  # noqa: E501


        :return: The current_period of this CouponInstance.  # noqa: E501
        :rtype: int
        """
        return self._current_period

    @current_period.setter
    def current_period(self, current_period):
        """Sets the current_period of this CouponInstance.


        :param current_period: The current_period of this CouponInstance.  # noqa: E501
        :type: int
        """

        self._current_period = current_period

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CouponInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CouponInstance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
