# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AddChargeRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'id': 'str',
        'organization_id': 'str',
        'name': 'str',
        'description': 'str',
        'currency': 'CreditNoteCurrency',
        'amount': 'float',
        'tax_amount': 'bool',
        'period_start': 'datetime',
        'period_end': 'datetime',
        'invoicing_type': 'str',
        'charge_type': 'str',
        'trial': 'bool',
        'remaining_credit_behaviour': 'str',
        'pricing_component': 'str',
        'pricing_component_value': 'int',
        'dry_run': 'bool',
        'invoice_state': 'str',
        'void_on_failure': 'bool'
    }

    attribute_map = {
        'created': 'created',
        'id': 'id',
        'organization_id': 'organizationID',
        'name': 'name',
        'description': 'description',
        'currency': 'currency',
        'amount': 'amount',
        'tax_amount': 'taxAmount',
        'period_start': 'periodStart',
        'period_end': 'periodEnd',
        'invoicing_type': 'invoicingType',
        'charge_type': 'chargeType',
        'trial': 'trial',
        'remaining_credit_behaviour': 'remainingCreditBehaviour',
        'pricing_component': 'pricingComponent',
        'pricing_component_value': 'pricingComponentValue',
        'dry_run': 'dryRun',
        'invoice_state': 'invoiceState',
        'void_on_failure': 'voidOnFailure'
    }

    def __init__(self, created=None, id=None, organization_id=None, name=None, description=None, currency=None, amount=None, tax_amount=None, period_start=None, period_end=None, invoicing_type=None, charge_type=None, trial=None, remaining_credit_behaviour=None, pricing_component=None, pricing_component_value=None, dry_run=None, invoice_state=None, void_on_failure=None):  # noqa: E501
        """AddChargeRequest - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._id = None
        self._organization_id = None
        self._name = None
        self._description = None
        self._currency = None
        self._amount = None
        self._tax_amount = None
        self._period_start = None
        self._period_end = None
        self._invoicing_type = None
        self._charge_type = None
        self._trial = None
        self._remaining_credit_behaviour = None
        self._pricing_component = None
        self._pricing_component_value = None
        self._dry_run = None
        self._invoice_state = None
        self._void_on_failure = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if id is not None:
            self.id = id
        if organization_id is not None:
            self.organization_id = organization_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if currency is not None:
            self.currency = currency
        if amount is not None:
            self.amount = amount
        if tax_amount is not None:
            self.tax_amount = tax_amount
        if period_start is not None:
            self.period_start = period_start
        if period_end is not None:
            self.period_end = period_end
        if invoicing_type is not None:
            self.invoicing_type = invoicing_type
        if charge_type is not None:
            self.charge_type = charge_type
        if trial is not None:
            self.trial = trial
        self.remaining_credit_behaviour = remaining_credit_behaviour
        if pricing_component is not None:
            self.pricing_component = pricing_component
        if pricing_component_value is not None:
            self.pricing_component_value = pricing_component_value
        if dry_run is not None:
            self.dry_run = dry_run
        if invoice_state is not None:
            self.invoice_state = invoice_state
        if void_on_failure is not None:
            self.void_on_failure = void_on_failure

    @property
    def created(self):
        """Gets the created of this AddChargeRequest.  # noqa: E501


        :return: The created of this AddChargeRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this AddChargeRequest.


        :param created: The created of this AddChargeRequest.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def id(self):
        """Gets the id of this AddChargeRequest.  # noqa: E501


        :return: The id of this AddChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AddChargeRequest.


        :param id: The id of this AddChargeRequest.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def organization_id(self):
        """Gets the organization_id of this AddChargeRequest.  # noqa: E501


        :return: The organization_id of this AddChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this AddChargeRequest.


        :param organization_id: The organization_id of this AddChargeRequest.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def name(self):
        """Gets the name of this AddChargeRequest.  # noqa: E501


        :return: The name of this AddChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AddChargeRequest.


        :param name: The name of this AddChargeRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this AddChargeRequest.  # noqa: E501


        :return: The description of this AddChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AddChargeRequest.


        :param description: The description of this AddChargeRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def currency(self):
        """Gets the currency of this AddChargeRequest.  # noqa: E501


        :return: The currency of this AddChargeRequest.  # noqa: E501
        :rtype: CreditNoteCurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AddChargeRequest.


        :param currency: The currency of this AddChargeRequest.  # noqa: E501
        :type: CreditNoteCurrency
        """

        self._currency = currency

    @property
    def amount(self):
        """Gets the amount of this AddChargeRequest.  # noqa: E501


        :return: The amount of this AddChargeRequest.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this AddChargeRequest.


        :param amount: The amount of this AddChargeRequest.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def tax_amount(self):
        """Gets the tax_amount of this AddChargeRequest.  # noqa: E501


        :return: The tax_amount of this AddChargeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this AddChargeRequest.


        :param tax_amount: The tax_amount of this AddChargeRequest.  # noqa: E501
        :type: bool
        """

        self._tax_amount = tax_amount

    @property
    def period_start(self):
        """Gets the period_start of this AddChargeRequest.  # noqa: E501


        :return: The period_start of this AddChargeRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._period_start

    @period_start.setter
    def period_start(self, period_start):
        """Sets the period_start of this AddChargeRequest.


        :param period_start: The period_start of this AddChargeRequest.  # noqa: E501
        :type: datetime
        """

        self._period_start = period_start

    @property
    def period_end(self):
        """Gets the period_end of this AddChargeRequest.  # noqa: E501


        :return: The period_end of this AddChargeRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._period_end

    @period_end.setter
    def period_end(self, period_end):
        """Sets the period_end of this AddChargeRequest.


        :param period_end: The period_end of this AddChargeRequest.  # noqa: E501
        :type: datetime
        """

        self._period_end = period_end

    @property
    def invoicing_type(self):
        """Gets the invoicing_type of this AddChargeRequest.  # noqa: E501


        :return: The invoicing_type of this AddChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._invoicing_type

    @invoicing_type.setter
    def invoicing_type(self, invoicing_type):
        """Sets the invoicing_type of this AddChargeRequest.


        :param invoicing_type: The invoicing_type of this AddChargeRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Immediate", "Aggregated"]  # noqa: E501
        if invoicing_type not in allowed_values:
            raise ValueError(
                "Invalid value for `invoicing_type` ({0}), must be one of {1}"  # noqa: E501
                .format(invoicing_type, allowed_values)
            )

        self._invoicing_type = invoicing_type

    @property
    def charge_type(self):
        """Gets the charge_type of this AddChargeRequest.  # noqa: E501


        :return: The charge_type of this AddChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._charge_type

    @charge_type.setter
    def charge_type(self, charge_type):
        """Sets the charge_type of this AddChargeRequest.


        :param charge_type: The charge_type of this AddChargeRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Credit", "Debit"]  # noqa: E501
        if charge_type not in allowed_values:
            raise ValueError(
                "Invalid value for `charge_type` ({0}), must be one of {1}"  # noqa: E501
                .format(charge_type, allowed_values)
            )

        self._charge_type = charge_type

    @property
    def trial(self):
        """Gets the trial of this AddChargeRequest.  # noqa: E501


        :return: The trial of this AddChargeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._trial

    @trial.setter
    def trial(self, trial):
        """Sets the trial of this AddChargeRequest.


        :param trial: The trial of this AddChargeRequest.  # noqa: E501
        :type: bool
        """

        self._trial = trial

    @property
    def remaining_credit_behaviour(self):
        """Gets the remaining_credit_behaviour of this AddChargeRequest.  # noqa: E501


        :return: The remaining_credit_behaviour of this AddChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._remaining_credit_behaviour

    @remaining_credit_behaviour.setter
    def remaining_credit_behaviour(self, remaining_credit_behaviour):
        """Sets the remaining_credit_behaviour of this AddChargeRequest.


        :param remaining_credit_behaviour: The remaining_credit_behaviour of this AddChargeRequest.  # noqa: E501
        :type: str
        """
        if remaining_credit_behaviour is None:
            raise ValueError("Invalid value for `remaining_credit_behaviour`, must not be `None`")  # noqa: E501
        allowed_values = ["Rollover", "Discard"]  # noqa: E501
        if remaining_credit_behaviour not in allowed_values:
            raise ValueError(
                "Invalid value for `remaining_credit_behaviour` ({0}), must be one of {1}"  # noqa: E501
                .format(remaining_credit_behaviour, allowed_values)
            )

        self._remaining_credit_behaviour = remaining_credit_behaviour

    @property
    def pricing_component(self):
        """Gets the pricing_component of this AddChargeRequest.  # noqa: E501


        :return: The pricing_component of this AddChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._pricing_component

    @pricing_component.setter
    def pricing_component(self, pricing_component):
        """Sets the pricing_component of this AddChargeRequest.


        :param pricing_component: The pricing_component of this AddChargeRequest.  # noqa: E501
        :type: str
        """

        self._pricing_component = pricing_component

    @property
    def pricing_component_value(self):
        """Gets the pricing_component_value of this AddChargeRequest.  # noqa: E501


        :return: The pricing_component_value of this AddChargeRequest.  # noqa: E501
        :rtype: int
        """
        return self._pricing_component_value

    @pricing_component_value.setter
    def pricing_component_value(self, pricing_component_value):
        """Sets the pricing_component_value of this AddChargeRequest.


        :param pricing_component_value: The pricing_component_value of this AddChargeRequest.  # noqa: E501
        :type: int
        """

        self._pricing_component_value = pricing_component_value

    @property
    def dry_run(self):
        """Gets the dry_run of this AddChargeRequest.  # noqa: E501


        :return: The dry_run of this AddChargeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """Sets the dry_run of this AddChargeRequest.


        :param dry_run: The dry_run of this AddChargeRequest.  # noqa: E501
        :type: bool
        """

        self._dry_run = dry_run

    @property
    def invoice_state(self):
        """Gets the invoice_state of this AddChargeRequest.  # noqa: E501


        :return: The invoice_state of this AddChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._invoice_state

    @invoice_state.setter
    def invoice_state(self, invoice_state):
        """Sets the invoice_state of this AddChargeRequest.


        :param invoice_state: The invoice_state of this AddChargeRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Paid", "Unpaid", "Pending", "Voided"]  # noqa: E501
        if invoice_state not in allowed_values:
            raise ValueError(
                "Invalid value for `invoice_state` ({0}), must be one of {1}"  # noqa: E501
                .format(invoice_state, allowed_values)
            )

        self._invoice_state = invoice_state

    @property
    def void_on_failure(self):
        """Gets the void_on_failure of this AddChargeRequest.  # noqa: E501


        :return: The void_on_failure of this AddChargeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._void_on_failure

    @void_on_failure.setter
    def void_on_failure(self, void_on_failure):
        """Sets the void_on_failure of this AddChargeRequest.


        :param void_on_failure: The void_on_failure of this AddChargeRequest.  # noqa: E501
        :type: bool
        """

        self._void_on_failure = void_on_failure

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddChargeRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddChargeRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
