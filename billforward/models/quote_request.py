# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class QuoteRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product': 'str',
        'product_rate_plan': 'str',
        'product_id': 'str',
        'product_name': 'str',
        'product_rate_plan_name': 'str',
        'account_id': 'str',
        'organization_id': 'str',
        'subscription_id': 'str',
        'quote_for': 'str',
        'prorated': 'bool',
        'free': 'bool',
        'include_applied_coupons': 'bool',
        'period_start': 'datetime',
        'period_end': 'datetime',
        'remaining_credit_behaviour': 'str',
        'quantities': 'list[QuoteRequestValue]',
        'coupon_codes': 'list[str]',
        'store_quote': 'bool',
        'pricing_behaviour': 'str',
        'purchase_order': 'str',
        'type': 'str',
        'pricing_components': 'list[QuoteRequestValue]'
    }

    attribute_map = {
        'product': 'product',
        'product_rate_plan': 'productRatePlan',
        'product_id': 'productID',
        'product_name': 'productName',
        'product_rate_plan_name': 'productRatePlanName',
        'account_id': 'accountID',
        'organization_id': 'organizationID',
        'subscription_id': 'subscriptionID',
        'quote_for': 'quoteFor',
        'prorated': 'prorated',
        'free': 'free',
        'include_applied_coupons': 'includeAppliedCoupons',
        'period_start': 'periodStart',
        'period_end': 'periodEnd',
        'remaining_credit_behaviour': 'remainingCreditBehaviour',
        'quantities': 'quantities',
        'coupon_codes': 'couponCodes',
        'store_quote': 'storeQuote',
        'pricing_behaviour': 'pricingBehaviour',
        'purchase_order': 'purchaseOrder',
        'type': 'type',
        'pricing_components': 'pricingComponents'
    }

    def __init__(self, product=None, product_rate_plan=None, product_id=None, product_name=None, product_rate_plan_name=None, account_id=None, organization_id=None, subscription_id=None, quote_for=None, prorated=None, free=None, include_applied_coupons=None, period_start=None, period_end=None, remaining_credit_behaviour=None, quantities=None, coupon_codes=None, store_quote=None, pricing_behaviour=None, purchase_order=None, type=None, pricing_components=None):  # noqa: E501
        """QuoteRequest - a model defined in Swagger"""  # noqa: E501
        self._product = None
        self._product_rate_plan = None
        self._product_id = None
        self._product_name = None
        self._product_rate_plan_name = None
        self._account_id = None
        self._organization_id = None
        self._subscription_id = None
        self._quote_for = None
        self._prorated = None
        self._free = None
        self._include_applied_coupons = None
        self._period_start = None
        self._period_end = None
        self._remaining_credit_behaviour = None
        self._quantities = None
        self._coupon_codes = None
        self._store_quote = None
        self._pricing_behaviour = None
        self._purchase_order = None
        self._type = None
        self._pricing_components = None
        self.discriminator = None
        if product is not None:
            self.product = product
        if product_rate_plan is not None:
            self.product_rate_plan = product_rate_plan
        if product_id is not None:
            self.product_id = product_id
        if product_name is not None:
            self.product_name = product_name
        if product_rate_plan_name is not None:
            self.product_rate_plan_name = product_rate_plan_name
        if account_id is not None:
            self.account_id = account_id
        if organization_id is not None:
            self.organization_id = organization_id
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if quote_for is not None:
            self.quote_for = quote_for
        if prorated is not None:
            self.prorated = prorated
        if free is not None:
            self.free = free
        if include_applied_coupons is not None:
            self.include_applied_coupons = include_applied_coupons
        if period_start is not None:
            self.period_start = period_start
        self.period_end = period_end
        self.remaining_credit_behaviour = remaining_credit_behaviour
        if quantities is not None:
            self.quantities = quantities
        if coupon_codes is not None:
            self.coupon_codes = coupon_codes
        if store_quote is not None:
            self.store_quote = store_quote
        self.pricing_behaviour = pricing_behaviour
        if purchase_order is not None:
            self.purchase_order = purchase_order
        if type is not None:
            self.type = type
        if pricing_components is not None:
            self.pricing_components = pricing_components

    @property
    def product(self):
        """Gets the product of this QuoteRequest.  # noqa: E501


        :return: The product of this QuoteRequest.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this QuoteRequest.


        :param product: The product of this QuoteRequest.  # noqa: E501
        :type: str
        """

        self._product = product

    @property
    def product_rate_plan(self):
        """Gets the product_rate_plan of this QuoteRequest.  # noqa: E501


        :return: The product_rate_plan of this QuoteRequest.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan

    @product_rate_plan.setter
    def product_rate_plan(self, product_rate_plan):
        """Sets the product_rate_plan of this QuoteRequest.


        :param product_rate_plan: The product_rate_plan of this QuoteRequest.  # noqa: E501
        :type: str
        """

        self._product_rate_plan = product_rate_plan

    @property
    def product_id(self):
        """Gets the product_id of this QuoteRequest.  # noqa: E501


        :return: The product_id of this QuoteRequest.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this QuoteRequest.


        :param product_id: The product_id of this QuoteRequest.  # noqa: E501
        :type: str
        """

        self._product_id = product_id

    @property
    def product_name(self):
        """Gets the product_name of this QuoteRequest.  # noqa: E501


        :return: The product_name of this QuoteRequest.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this QuoteRequest.


        :param product_name: The product_name of this QuoteRequest.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def product_rate_plan_name(self):
        """Gets the product_rate_plan_name of this QuoteRequest.  # noqa: E501


        :return: The product_rate_plan_name of this QuoteRequest.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_name

    @product_rate_plan_name.setter
    def product_rate_plan_name(self, product_rate_plan_name):
        """Sets the product_rate_plan_name of this QuoteRequest.


        :param product_rate_plan_name: The product_rate_plan_name of this QuoteRequest.  # noqa: E501
        :type: str
        """

        self._product_rate_plan_name = product_rate_plan_name

    @property
    def account_id(self):
        """Gets the account_id of this QuoteRequest.  # noqa: E501


        :return: The account_id of this QuoteRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this QuoteRequest.


        :param account_id: The account_id of this QuoteRequest.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def organization_id(self):
        """Gets the organization_id of this QuoteRequest.  # noqa: E501


        :return: The organization_id of this QuoteRequest.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this QuoteRequest.


        :param organization_id: The organization_id of this QuoteRequest.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this QuoteRequest.  # noqa: E501


        :return: The subscription_id of this QuoteRequest.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this QuoteRequest.


        :param subscription_id: The subscription_id of this QuoteRequest.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def quote_for(self):
        """Gets the quote_for of this QuoteRequest.  # noqa: E501


        :return: The quote_for of this QuoteRequest.  # noqa: E501
        :rtype: str
        """
        return self._quote_for

    @quote_for.setter
    def quote_for(self, quote_for):
        """Sets the quote_for of this QuoteRequest.


        :param quote_for: The quote_for of this QuoteRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["InitialPeriod", "RecurringPeriod", "Upgrade", "Migration"]  # noqa: E501
        if quote_for not in allowed_values:
            raise ValueError(
                "Invalid value for `quote_for` ({0}), must be one of {1}"  # noqa: E501
                .format(quote_for, allowed_values)
            )

        self._quote_for = quote_for

    @property
    def prorated(self):
        """Gets the prorated of this QuoteRequest.  # noqa: E501


        :return: The prorated of this QuoteRequest.  # noqa: E501
        :rtype: bool
        """
        return self._prorated

    @prorated.setter
    def prorated(self, prorated):
        """Sets the prorated of this QuoteRequest.


        :param prorated: The prorated of this QuoteRequest.  # noqa: E501
        :type: bool
        """

        self._prorated = prorated

    @property
    def free(self):
        """Gets the free of this QuoteRequest.  # noqa: E501


        :return: The free of this QuoteRequest.  # noqa: E501
        :rtype: bool
        """
        return self._free

    @free.setter
    def free(self, free):
        """Sets the free of this QuoteRequest.


        :param free: The free of this QuoteRequest.  # noqa: E501
        :type: bool
        """

        self._free = free

    @property
    def include_applied_coupons(self):
        """Gets the include_applied_coupons of this QuoteRequest.  # noqa: E501


        :return: The include_applied_coupons of this QuoteRequest.  # noqa: E501
        :rtype: bool
        """
        return self._include_applied_coupons

    @include_applied_coupons.setter
    def include_applied_coupons(self, include_applied_coupons):
        """Sets the include_applied_coupons of this QuoteRequest.


        :param include_applied_coupons: The include_applied_coupons of this QuoteRequest.  # noqa: E501
        :type: bool
        """

        self._include_applied_coupons = include_applied_coupons

    @property
    def period_start(self):
        """Gets the period_start of this QuoteRequest.  # noqa: E501


        :return: The period_start of this QuoteRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._period_start

    @period_start.setter
    def period_start(self, period_start):
        """Sets the period_start of this QuoteRequest.


        :param period_start: The period_start of this QuoteRequest.  # noqa: E501
        :type: datetime
        """

        self._period_start = period_start

    @property
    def period_end(self):
        """Gets the period_end of this QuoteRequest.  # noqa: E501


        :return: The period_end of this QuoteRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._period_end

    @period_end.setter
    def period_end(self, period_end):
        """Sets the period_end of this QuoteRequest.


        :param period_end: The period_end of this QuoteRequest.  # noqa: E501
        :type: datetime
        """
        if period_end is None:
            raise ValueError("Invalid value for `period_end`, must not be `None`")  # noqa: E501

        self._period_end = period_end

    @property
    def remaining_credit_behaviour(self):
        """Gets the remaining_credit_behaviour of this QuoteRequest.  # noqa: E501


        :return: The remaining_credit_behaviour of this QuoteRequest.  # noqa: E501
        :rtype: str
        """
        return self._remaining_credit_behaviour

    @remaining_credit_behaviour.setter
    def remaining_credit_behaviour(self, remaining_credit_behaviour):
        """Sets the remaining_credit_behaviour of this QuoteRequest.


        :param remaining_credit_behaviour: The remaining_credit_behaviour of this QuoteRequest.  # noqa: E501
        :type: str
        """
        if remaining_credit_behaviour is None:
            raise ValueError("Invalid value for `remaining_credit_behaviour`, must not be `None`")  # noqa: E501
        allowed_values = ["Rollover", "Discard"]  # noqa: E501
        if remaining_credit_behaviour not in allowed_values:
            raise ValueError(
                "Invalid value for `remaining_credit_behaviour` ({0}), must be one of {1}"  # noqa: E501
                .format(remaining_credit_behaviour, allowed_values)
            )

        self._remaining_credit_behaviour = remaining_credit_behaviour

    @property
    def quantities(self):
        """Gets the quantities of this QuoteRequest.  # noqa: E501


        :return: The quantities of this QuoteRequest.  # noqa: E501
        :rtype: list[QuoteRequestValue]
        """
        return self._quantities

    @quantities.setter
    def quantities(self, quantities):
        """Sets the quantities of this QuoteRequest.


        :param quantities: The quantities of this QuoteRequest.  # noqa: E501
        :type: list[QuoteRequestValue]
        """

        self._quantities = quantities

    @property
    def coupon_codes(self):
        """Gets the coupon_codes of this QuoteRequest.  # noqa: E501


        :return: The coupon_codes of this QuoteRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._coupon_codes

    @coupon_codes.setter
    def coupon_codes(self, coupon_codes):
        """Sets the coupon_codes of this QuoteRequest.


        :param coupon_codes: The coupon_codes of this QuoteRequest.  # noqa: E501
        :type: list[str]
        """

        self._coupon_codes = coupon_codes

    @property
    def store_quote(self):
        """Gets the store_quote of this QuoteRequest.  # noqa: E501


        :return: The store_quote of this QuoteRequest.  # noqa: E501
        :rtype: bool
        """
        return self._store_quote

    @store_quote.setter
    def store_quote(self, store_quote):
        """Sets the store_quote of this QuoteRequest.


        :param store_quote: The store_quote of this QuoteRequest.  # noqa: E501
        :type: bool
        """

        self._store_quote = store_quote

    @property
    def pricing_behaviour(self):
        """Gets the pricing_behaviour of this QuoteRequest.  # noqa: E501


        :return: The pricing_behaviour of this QuoteRequest.  # noqa: E501
        :rtype: str
        """
        return self._pricing_behaviour

    @pricing_behaviour.setter
    def pricing_behaviour(self, pricing_behaviour):
        """Sets the pricing_behaviour of this QuoteRequest.


        :param pricing_behaviour: The pricing_behaviour of this QuoteRequest.  # noqa: E501
        :type: str
        """
        if pricing_behaviour is None:
            raise ValueError("Invalid value for `pricing_behaviour`, must not be `None`")  # noqa: E501
        allowed_values = ["None", "Full", "Difference", "DifferenceProRated", "ProRated"]  # noqa: E501
        if pricing_behaviour not in allowed_values:
            raise ValueError(
                "Invalid value for `pricing_behaviour` ({0}), must be one of {1}"  # noqa: E501
                .format(pricing_behaviour, allowed_values)
            )

        self._pricing_behaviour = pricing_behaviour

    @property
    def purchase_order(self):
        """Gets the purchase_order of this QuoteRequest.  # noqa: E501


        :return: The purchase_order of this QuoteRequest.  # noqa: E501
        :rtype: str
        """
        return self._purchase_order

    @purchase_order.setter
    def purchase_order(self, purchase_order):
        """Sets the purchase_order of this QuoteRequest.


        :param purchase_order: The purchase_order of this QuoteRequest.  # noqa: E501
        :type: str
        """

        self._purchase_order = purchase_order

    @property
    def type(self):
        """Gets the type of this QuoteRequest.  # noqa: E501


        :return: The type of this QuoteRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this QuoteRequest.


        :param type: The type of this QuoteRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["InitialPeriod", "RecurringPeriod", "Upgrade", "Migration"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def pricing_components(self):
        """Gets the pricing_components of this QuoteRequest.  # noqa: E501


        :return: The pricing_components of this QuoteRequest.  # noqa: E501
        :rtype: list[QuoteRequestValue]
        """
        return self._pricing_components

    @pricing_components.setter
    def pricing_components(self, pricing_components):
        """Sets the pricing_components of this QuoteRequest.


        :param pricing_components: The pricing_components of this QuoteRequest.  # noqa: E501
        :type: list[QuoteRequestValue]
        """

        self._pricing_components = pricing_components

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuoteRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuoteRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
