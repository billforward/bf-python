# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExecutionResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'invoice_id': 'str',
        'invoice_type': 'str',
        'currency': 'CreditNoteCurrency',
        'outstanding_amount': 'float',
        'executions': 'list[ExecutionReceiptResponse]'
    }

    attribute_map = {
        'invoice_id': 'invoiceID',
        'invoice_type': 'invoiceType',
        'currency': 'currency',
        'outstanding_amount': 'outstandingAmount',
        'executions': 'executions'
    }

    def __init__(self, invoice_id=None, invoice_type=None, currency=None, outstanding_amount=None, executions=None):  # noqa: E501
        """ExecutionResponse - a model defined in Swagger"""  # noqa: E501
        self._invoice_id = None
        self._invoice_type = None
        self._currency = None
        self._outstanding_amount = None
        self._executions = None
        self.discriminator = None
        if invoice_id is not None:
            self.invoice_id = invoice_id
        if invoice_type is not None:
            self.invoice_type = invoice_type
        if currency is not None:
            self.currency = currency
        if outstanding_amount is not None:
            self.outstanding_amount = outstanding_amount
        if executions is not None:
            self.executions = executions

    @property
    def invoice_id(self):
        """Gets the invoice_id of this ExecutionResponse.  # noqa: E501


        :return: The invoice_id of this ExecutionResponse.  # noqa: E501
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this ExecutionResponse.


        :param invoice_id: The invoice_id of this ExecutionResponse.  # noqa: E501
        :type: str
        """

        self._invoice_id = invoice_id

    @property
    def invoice_type(self):
        """Gets the invoice_type of this ExecutionResponse.  # noqa: E501


        :return: The invoice_type of this ExecutionResponse.  # noqa: E501
        :rtype: str
        """
        return self._invoice_type

    @invoice_type.setter
    def invoice_type(self, invoice_type):
        """Sets the invoice_type of this ExecutionResponse.


        :param invoice_type: The invoice_type of this ExecutionResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["Subscription", "Trial", "Charge", "FinalArrears", "Amendment", "Aggregated", "AffiliateCommission"]  # noqa: E501
        if invoice_type not in allowed_values:
            raise ValueError(
                "Invalid value for `invoice_type` ({0}), must be one of {1}"  # noqa: E501
                .format(invoice_type, allowed_values)
            )

        self._invoice_type = invoice_type

    @property
    def currency(self):
        """Gets the currency of this ExecutionResponse.  # noqa: E501


        :return: The currency of this ExecutionResponse.  # noqa: E501
        :rtype: CreditNoteCurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ExecutionResponse.


        :param currency: The currency of this ExecutionResponse.  # noqa: E501
        :type: CreditNoteCurrency
        """

        self._currency = currency

    @property
    def outstanding_amount(self):
        """Gets the outstanding_amount of this ExecutionResponse.  # noqa: E501


        :return: The outstanding_amount of this ExecutionResponse.  # noqa: E501
        :rtype: float
        """
        return self._outstanding_amount

    @outstanding_amount.setter
    def outstanding_amount(self, outstanding_amount):
        """Sets the outstanding_amount of this ExecutionResponse.


        :param outstanding_amount: The outstanding_amount of this ExecutionResponse.  # noqa: E501
        :type: float
        """

        self._outstanding_amount = outstanding_amount

    @property
    def executions(self):
        """Gets the executions of this ExecutionResponse.  # noqa: E501


        :return: The executions of this ExecutionResponse.  # noqa: E501
        :rtype: list[ExecutionReceiptResponse]
        """
        return self._executions

    @executions.setter
    def executions(self, executions):
        """Sets the executions of this ExecutionResponse.


        :param executions: The executions of this ExecutionResponse.  # noqa: E501
        :type: list[ExecutionReceiptResponse]
        """

        self._executions = executions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExecutionResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExecutionResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
