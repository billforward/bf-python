# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CouponDiscountEstimate(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, unaltered_value=None, discount_value=None, affected_specifier_count=None, discount_start_value=None, discount_end_value=None, unit_discounts=None):
        """
        CouponDiscountEstimate - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'unaltered_value': 'float',
            'discount_value': 'float',
            'affected_specifier_count': 'int',
            'discount_start_value': 'int',
            'discount_end_value': 'int',
            'unit_discounts': 'list[UnitDiscount]'
        }

        self.attribute_map = {
            'unaltered_value': 'unalteredValue',
            'discount_value': 'discountValue',
            'affected_specifier_count': 'affectedSpecifierCount',
            'discount_start_value': 'discountStartValue',
            'discount_end_value': 'discountEndValue',
            'unit_discounts': 'unitDiscounts'
        }

        self._unaltered_value = unaltered_value
        self._discount_value = discount_value
        self._affected_specifier_count = affected_specifier_count
        self._discount_start_value = discount_start_value
        self._discount_end_value = discount_end_value
        self._unit_discounts = unit_discounts

    @property
    def unaltered_value(self):
        """
        Gets the unaltered_value of this CouponDiscountEstimate.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The unaltered_value of this CouponDiscountEstimate.
        :rtype: float
        """
        return self._unaltered_value

    @unaltered_value.setter
    def unaltered_value(self, unaltered_value):
        """
        Sets the unaltered_value of this CouponDiscountEstimate.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param unaltered_value: The unaltered_value of this CouponDiscountEstimate.
        :type: float
        """

        self._unaltered_value = unaltered_value

    @property
    def discount_value(self):
        """
        Gets the discount_value of this CouponDiscountEstimate.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The discount_value of this CouponDiscountEstimate.
        :rtype: float
        """
        return self._discount_value

    @discount_value.setter
    def discount_value(self, discount_value):
        """
        Sets the discount_value of this CouponDiscountEstimate.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param discount_value: The discount_value of this CouponDiscountEstimate.
        :type: float
        """

        self._discount_value = discount_value

    @property
    def affected_specifier_count(self):
        """
        Gets the affected_specifier_count of this CouponDiscountEstimate.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The affected_specifier_count of this CouponDiscountEstimate.
        :rtype: int
        """
        return self._affected_specifier_count

    @affected_specifier_count.setter
    def affected_specifier_count(self, affected_specifier_count):
        """
        Sets the affected_specifier_count of this CouponDiscountEstimate.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param affected_specifier_count: The affected_specifier_count of this CouponDiscountEstimate.
        :type: int
        """

        self._affected_specifier_count = affected_specifier_count

    @property
    def discount_start_value(self):
        """
        Gets the discount_start_value of this CouponDiscountEstimate.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The discount_start_value of this CouponDiscountEstimate.
        :rtype: int
        """
        return self._discount_start_value

    @discount_start_value.setter
    def discount_start_value(self, discount_start_value):
        """
        Sets the discount_start_value of this CouponDiscountEstimate.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param discount_start_value: The discount_start_value of this CouponDiscountEstimate.
        :type: int
        """

        self._discount_start_value = discount_start_value

    @property
    def discount_end_value(self):
        """
        Gets the discount_end_value of this CouponDiscountEstimate.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The discount_end_value of this CouponDiscountEstimate.
        :rtype: int
        """
        return self._discount_end_value

    @discount_end_value.setter
    def discount_end_value(self, discount_end_value):
        """
        Sets the discount_end_value of this CouponDiscountEstimate.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param discount_end_value: The discount_end_value of this CouponDiscountEstimate.
        :type: int
        """

        self._discount_end_value = discount_end_value

    @property
    def unit_discounts(self):
        """
        Gets the unit_discounts of this CouponDiscountEstimate.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The unit_discounts of this CouponDiscountEstimate.
        :rtype: list[UnitDiscount]
        """
        return self._unit_discounts

    @unit_discounts.setter
    def unit_discounts(self, unit_discounts):
        """
        Sets the unit_discounts of this CouponDiscountEstimate.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param unit_discounts: The unit_discounts of this CouponDiscountEstimate.
        :type: list[UnitDiscount]
        """

        self._unit_discounts = unit_discounts

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
