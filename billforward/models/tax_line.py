# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TaxLine(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'changed_by': 'str',
        'id': 'str',
        'invoice_id': 'str',
        'organization_id': 'str',
        'taxation_strategy_id': 'str',
        'name': 'str',
        'percentage': 'float',
        'amount': 'float',
        'linked_charge_id': 'str'
    }

    attribute_map = {
        'created': 'created',
        'changed_by': 'changedBy',
        'id': 'id',
        'invoice_id': 'invoiceID',
        'organization_id': 'organizationID',
        'taxation_strategy_id': 'taxationStrategyID',
        'name': 'name',
        'percentage': 'percentage',
        'amount': 'amount',
        'linked_charge_id': 'linkedChargeID'
    }

    def __init__(self, created=None, changed_by=None, id=None, invoice_id=None, organization_id=None, taxation_strategy_id=None, name=None, percentage=None, amount=None, linked_charge_id=None):  # noqa: E501
        """TaxLine - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._changed_by = None
        self._id = None
        self._invoice_id = None
        self._organization_id = None
        self._taxation_strategy_id = None
        self._name = None
        self._percentage = None
        self._amount = None
        self._linked_charge_id = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if changed_by is not None:
            self.changed_by = changed_by
        if id is not None:
            self.id = id
        self.invoice_id = invoice_id
        self.organization_id = organization_id
        if taxation_strategy_id is not None:
            self.taxation_strategy_id = taxation_strategy_id
        self.name = name
        self.percentage = percentage
        self.amount = amount
        if linked_charge_id is not None:
            self.linked_charge_id = linked_charge_id

    @property
    def created(self):
        """Gets the created of this TaxLine.  # noqa: E501


        :return: The created of this TaxLine.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this TaxLine.


        :param created: The created of this TaxLine.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """Gets the changed_by of this TaxLine.  # noqa: E501


        :return: The changed_by of this TaxLine.  # noqa: E501
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """Sets the changed_by of this TaxLine.


        :param changed_by: The changed_by of this TaxLine.  # noqa: E501
        :type: str
        """

        self._changed_by = changed_by

    @property
    def id(self):
        """Gets the id of this TaxLine.  # noqa: E501


        :return: The id of this TaxLine.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaxLine.


        :param id: The id of this TaxLine.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def invoice_id(self):
        """Gets the invoice_id of this TaxLine.  # noqa: E501


        :return: The invoice_id of this TaxLine.  # noqa: E501
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this TaxLine.


        :param invoice_id: The invoice_id of this TaxLine.  # noqa: E501
        :type: str
        """
        if invoice_id is None:
            raise ValueError("Invalid value for `invoice_id`, must not be `None`")  # noqa: E501

        self._invoice_id = invoice_id

    @property
    def organization_id(self):
        """Gets the organization_id of this TaxLine.  # noqa: E501


        :return: The organization_id of this TaxLine.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this TaxLine.


        :param organization_id: The organization_id of this TaxLine.  # noqa: E501
        :type: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")  # noqa: E501

        self._organization_id = organization_id

    @property
    def taxation_strategy_id(self):
        """Gets the taxation_strategy_id of this TaxLine.  # noqa: E501


        :return: The taxation_strategy_id of this TaxLine.  # noqa: E501
        :rtype: str
        """
        return self._taxation_strategy_id

    @taxation_strategy_id.setter
    def taxation_strategy_id(self, taxation_strategy_id):
        """Sets the taxation_strategy_id of this TaxLine.


        :param taxation_strategy_id: The taxation_strategy_id of this TaxLine.  # noqa: E501
        :type: str
        """

        self._taxation_strategy_id = taxation_strategy_id

    @property
    def name(self):
        """Gets the name of this TaxLine.  # noqa: E501


        :return: The name of this TaxLine.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaxLine.


        :param name: The name of this TaxLine.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def percentage(self):
        """Gets the percentage of this TaxLine.  # noqa: E501


        :return: The percentage of this TaxLine.  # noqa: E501
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this TaxLine.


        :param percentage: The percentage of this TaxLine.  # noqa: E501
        :type: float
        """
        if percentage is None:
            raise ValueError("Invalid value for `percentage`, must not be `None`")  # noqa: E501

        self._percentage = percentage

    @property
    def amount(self):
        """Gets the amount of this TaxLine.  # noqa: E501


        :return: The amount of this TaxLine.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this TaxLine.


        :param amount: The amount of this TaxLine.  # noqa: E501
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def linked_charge_id(self):
        """Gets the linked_charge_id of this TaxLine.  # noqa: E501


        :return: The linked_charge_id of this TaxLine.  # noqa: E501
        :rtype: str
        """
        return self._linked_charge_id

    @linked_charge_id.setter
    def linked_charge_id(self, linked_charge_id):
        """Sets the linked_charge_id of this TaxLine.


        :param linked_charge_id: The linked_charge_id of this TaxLine.  # noqa: E501
        :type: str
        """

        self._linked_charge_id = linked_charge_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaxLine, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaxLine):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
