# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'changed_by': 'str',
        'updated': 'datetime',
        'id': 'str',
        'organization_id': 'str',
        'password': 'list[Password]',
        'username': 'list[Username]',
        'open_id_identifier': 'str',
        'password_reset_code': 'str',
        'password_reset_attempts': 'int',
        'password_reset_valid_till': 'datetime',
        'last_successful_login': 'datetime',
        'successful_logins': 'int',
        'bf_admin': 'bool',
        'enabled': 'bool',
        'timezone': 'UserTimezone',
        'flexcheck_user': 'bool',
        'two_fa': 'bool',
        'email': 'str',
        'main_username': 'Username',
        'active_usernames': 'list[str]'
    }

    attribute_map = {
        'created': 'created',
        'changed_by': 'changedBy',
        'updated': 'updated',
        'id': 'id',
        'organization_id': 'organizationID',
        'password': 'password',
        'username': 'username',
        'open_id_identifier': 'openIDIdentifier',
        'password_reset_code': 'passwordResetCode',
        'password_reset_attempts': 'passwordResetAttempts',
        'password_reset_valid_till': 'passwordResetValidTill',
        'last_successful_login': 'lastSuccessfulLogin',
        'successful_logins': 'successfulLogins',
        'bf_admin': 'bfAdmin',
        'enabled': 'enabled',
        'timezone': 'timezone',
        'flexcheck_user': 'flexcheckUser',
        'two_fa': 'twoFA',
        'email': 'email',
        'main_username': 'mainUsername',
        'active_usernames': 'activeUsernames'
    }

    def __init__(self, created=None, changed_by=None, updated=None, id=None, organization_id=None, password=None, username=None, open_id_identifier=None, password_reset_code=None, password_reset_attempts=None, password_reset_valid_till=None, last_successful_login=None, successful_logins=None, bf_admin=None, enabled=None, timezone=None, flexcheck_user=None, two_fa=None, email=None, main_username=None, active_usernames=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._changed_by = None
        self._updated = None
        self._id = None
        self._organization_id = None
        self._password = None
        self._username = None
        self._open_id_identifier = None
        self._password_reset_code = None
        self._password_reset_attempts = None
        self._password_reset_valid_till = None
        self._last_successful_login = None
        self._successful_logins = None
        self._bf_admin = None
        self._enabled = None
        self._timezone = None
        self._flexcheck_user = None
        self._two_fa = None
        self._email = None
        self._main_username = None
        self._active_usernames = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if changed_by is not None:
            self.changed_by = changed_by
        if updated is not None:
            self.updated = updated
        if id is not None:
            self.id = id
        self.organization_id = organization_id
        if password is not None:
            self.password = password
        if username is not None:
            self.username = username
        if open_id_identifier is not None:
            self.open_id_identifier = open_id_identifier
        if password_reset_code is not None:
            self.password_reset_code = password_reset_code
        if password_reset_attempts is not None:
            self.password_reset_attempts = password_reset_attempts
        if password_reset_valid_till is not None:
            self.password_reset_valid_till = password_reset_valid_till
        if last_successful_login is not None:
            self.last_successful_login = last_successful_login
        if successful_logins is not None:
            self.successful_logins = successful_logins
        if bf_admin is not None:
            self.bf_admin = bf_admin
        self.enabled = enabled
        self.timezone = timezone
        self.flexcheck_user = flexcheck_user
        if two_fa is not None:
            self.two_fa = two_fa
        if email is not None:
            self.email = email
        if main_username is not None:
            self.main_username = main_username
        if active_usernames is not None:
            self.active_usernames = active_usernames

    @property
    def created(self):
        """Gets the created of this User.  # noqa: E501


        :return: The created of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this User.


        :param created: The created of this User.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """Gets the changed_by of this User.  # noqa: E501


        :return: The changed_by of this User.  # noqa: E501
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """Sets the changed_by of this User.


        :param changed_by: The changed_by of this User.  # noqa: E501
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """Gets the updated of this User.  # noqa: E501


        :return: The updated of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this User.


        :param updated: The updated of this User.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """Gets the id of this User.  # noqa: E501


        :return: The id of this User.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def organization_id(self):
        """Gets the organization_id of this User.  # noqa: E501


        :return: The organization_id of this User.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this User.


        :param organization_id: The organization_id of this User.  # noqa: E501
        :type: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")  # noqa: E501

        self._organization_id = organization_id

    @property
    def password(self):
        """Gets the password of this User.  # noqa: E501


        :return: The password of this User.  # noqa: E501
        :rtype: list[Password]
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this User.


        :param password: The password of this User.  # noqa: E501
        :type: list[Password]
        """

        self._password = password

    @property
    def username(self):
        """Gets the username of this User.  # noqa: E501


        :return: The username of this User.  # noqa: E501
        :rtype: list[Username]
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.


        :param username: The username of this User.  # noqa: E501
        :type: list[Username]
        """

        self._username = username

    @property
    def open_id_identifier(self):
        """Gets the open_id_identifier of this User.  # noqa: E501


        :return: The open_id_identifier of this User.  # noqa: E501
        :rtype: str
        """
        return self._open_id_identifier

    @open_id_identifier.setter
    def open_id_identifier(self, open_id_identifier):
        """Sets the open_id_identifier of this User.


        :param open_id_identifier: The open_id_identifier of this User.  # noqa: E501
        :type: str
        """

        self._open_id_identifier = open_id_identifier

    @property
    def password_reset_code(self):
        """Gets the password_reset_code of this User.  # noqa: E501


        :return: The password_reset_code of this User.  # noqa: E501
        :rtype: str
        """
        return self._password_reset_code

    @password_reset_code.setter
    def password_reset_code(self, password_reset_code):
        """Sets the password_reset_code of this User.


        :param password_reset_code: The password_reset_code of this User.  # noqa: E501
        :type: str
        """

        self._password_reset_code = password_reset_code

    @property
    def password_reset_attempts(self):
        """Gets the password_reset_attempts of this User.  # noqa: E501


        :return: The password_reset_attempts of this User.  # noqa: E501
        :rtype: int
        """
        return self._password_reset_attempts

    @password_reset_attempts.setter
    def password_reset_attempts(self, password_reset_attempts):
        """Sets the password_reset_attempts of this User.


        :param password_reset_attempts: The password_reset_attempts of this User.  # noqa: E501
        :type: int
        """

        self._password_reset_attempts = password_reset_attempts

    @property
    def password_reset_valid_till(self):
        """Gets the password_reset_valid_till of this User.  # noqa: E501


        :return: The password_reset_valid_till of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._password_reset_valid_till

    @password_reset_valid_till.setter
    def password_reset_valid_till(self, password_reset_valid_till):
        """Sets the password_reset_valid_till of this User.


        :param password_reset_valid_till: The password_reset_valid_till of this User.  # noqa: E501
        :type: datetime
        """

        self._password_reset_valid_till = password_reset_valid_till

    @property
    def last_successful_login(self):
        """Gets the last_successful_login of this User.  # noqa: E501


        :return: The last_successful_login of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._last_successful_login

    @last_successful_login.setter
    def last_successful_login(self, last_successful_login):
        """Sets the last_successful_login of this User.


        :param last_successful_login: The last_successful_login of this User.  # noqa: E501
        :type: datetime
        """

        self._last_successful_login = last_successful_login

    @property
    def successful_logins(self):
        """Gets the successful_logins of this User.  # noqa: E501


        :return: The successful_logins of this User.  # noqa: E501
        :rtype: int
        """
        return self._successful_logins

    @successful_logins.setter
    def successful_logins(self, successful_logins):
        """Sets the successful_logins of this User.


        :param successful_logins: The successful_logins of this User.  # noqa: E501
        :type: int
        """

        self._successful_logins = successful_logins

    @property
    def bf_admin(self):
        """Gets the bf_admin of this User.  # noqa: E501


        :return: The bf_admin of this User.  # noqa: E501
        :rtype: bool
        """
        return self._bf_admin

    @bf_admin.setter
    def bf_admin(self, bf_admin):
        """Sets the bf_admin of this User.


        :param bf_admin: The bf_admin of this User.  # noqa: E501
        :type: bool
        """

        self._bf_admin = bf_admin

    @property
    def enabled(self):
        """Gets the enabled of this User.  # noqa: E501


        :return: The enabled of this User.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this User.


        :param enabled: The enabled of this User.  # noqa: E501
        :type: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    @property
    def timezone(self):
        """Gets the timezone of this User.  # noqa: E501


        :return: The timezone of this User.  # noqa: E501
        :rtype: UserTimezone
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this User.


        :param timezone: The timezone of this User.  # noqa: E501
        :type: UserTimezone
        """
        if timezone is None:
            raise ValueError("Invalid value for `timezone`, must not be `None`")  # noqa: E501

        self._timezone = timezone

    @property
    def flexcheck_user(self):
        """Gets the flexcheck_user of this User.  # noqa: E501


        :return: The flexcheck_user of this User.  # noqa: E501
        :rtype: bool
        """
        return self._flexcheck_user

    @flexcheck_user.setter
    def flexcheck_user(self, flexcheck_user):
        """Sets the flexcheck_user of this User.


        :param flexcheck_user: The flexcheck_user of this User.  # noqa: E501
        :type: bool
        """
        if flexcheck_user is None:
            raise ValueError("Invalid value for `flexcheck_user`, must not be `None`")  # noqa: E501

        self._flexcheck_user = flexcheck_user

    @property
    def two_fa(self):
        """Gets the two_fa of this User.  # noqa: E501


        :return: The two_fa of this User.  # noqa: E501
        :rtype: bool
        """
        return self._two_fa

    @two_fa.setter
    def two_fa(self, two_fa):
        """Sets the two_fa of this User.


        :param two_fa: The two_fa of this User.  # noqa: E501
        :type: bool
        """

        self._two_fa = two_fa

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501


        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def main_username(self):
        """Gets the main_username of this User.  # noqa: E501


        :return: The main_username of this User.  # noqa: E501
        :rtype: Username
        """
        return self._main_username

    @main_username.setter
    def main_username(self, main_username):
        """Sets the main_username of this User.


        :param main_username: The main_username of this User.  # noqa: E501
        :type: Username
        """

        self._main_username = main_username

    @property
    def active_usernames(self):
        """Gets the active_usernames of this User.  # noqa: E501


        :return: The active_usernames of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._active_usernames

    @active_usernames.setter
    def active_usernames(self, active_usernames):
        """Sets the active_usernames of this User.


        :param active_usernames: The active_usernames of this User.  # noqa: E501
        :type: list[str]
        """

        self._active_usernames = active_usernames

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
