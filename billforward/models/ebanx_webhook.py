# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EBANXWebhook(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'operation': 'str',
        'organisation_id': 'str',
        'notification_type': 'str',
        'hash_codes': 'list[str]'
    }

    attribute_map = {
        'operation': 'operation',
        'organisation_id': 'organisationId',
        'notification_type': 'notification_type',
        'hash_codes': 'hash_codes'
    }

    def __init__(self, operation=None, organisation_id=None, notification_type=None, hash_codes=None):  # noqa: E501
        """EBANXWebhook - a model defined in Swagger"""  # noqa: E501
        self._operation = None
        self._organisation_id = None
        self._notification_type = None
        self._hash_codes = None
        self.discriminator = None
        if operation is not None:
            self.operation = operation
        if organisation_id is not None:
            self.organisation_id = organisation_id
        if notification_type is not None:
            self.notification_type = notification_type
        if hash_codes is not None:
            self.hash_codes = hash_codes

    @property
    def operation(self):
        """Gets the operation of this EBANXWebhook.  # noqa: E501


        :return: The operation of this EBANXWebhook.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this EBANXWebhook.


        :param operation: The operation of this EBANXWebhook.  # noqa: E501
        :type: str
        """
        allowed_values = ["payment_status_change"]  # noqa: E501
        if operation not in allowed_values:
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"  # noqa: E501
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def organisation_id(self):
        """Gets the organisation_id of this EBANXWebhook.  # noqa: E501


        :return: The organisation_id of this EBANXWebhook.  # noqa: E501
        :rtype: str
        """
        return self._organisation_id

    @organisation_id.setter
    def organisation_id(self, organisation_id):
        """Sets the organisation_id of this EBANXWebhook.


        :param organisation_id: The organisation_id of this EBANXWebhook.  # noqa: E501
        :type: str
        """

        self._organisation_id = organisation_id

    @property
    def notification_type(self):
        """Gets the notification_type of this EBANXWebhook.  # noqa: E501


        :return: The notification_type of this EBANXWebhook.  # noqa: E501
        :rtype: str
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type):
        """Sets the notification_type of this EBANXWebhook.


        :param notification_type: The notification_type of this EBANXWebhook.  # noqa: E501
        :type: str
        """
        allowed_values = ["update", "chargeback", "refund", "chargeback_credit"]  # noqa: E501
        if notification_type not in allowed_values:
            raise ValueError(
                "Invalid value for `notification_type` ({0}), must be one of {1}"  # noqa: E501
                .format(notification_type, allowed_values)
            )

        self._notification_type = notification_type

    @property
    def hash_codes(self):
        """Gets the hash_codes of this EBANXWebhook.  # noqa: E501


        :return: The hash_codes of this EBANXWebhook.  # noqa: E501
        :rtype: list[str]
        """
        return self._hash_codes

    @hash_codes.setter
    def hash_codes(self, hash_codes):
        """Sets the hash_codes of this EBANXWebhook.


        :param hash_codes: The hash_codes of this EBANXWebhook.  # noqa: E501
        :type: list[str]
        """

        self._hash_codes = hash_codes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EBANXWebhook, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EBANXWebhook):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
