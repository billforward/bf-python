# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreditNote(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'changed_by': 'str',
        'updated': 'datetime',
        'id': 'str',
        'account_id': 'str',
        'invoice_id': 'str',
        'subscription_id': 'str',
        'organization_id': 'str',
        'linked_credit_note_id': 'str',
        'type': 'str',
        'currency': 'CreditNoteCurrency',
        'description': 'str',
        'value': 'float',
        'nominal_value': 'float',
        'actual_value': 'float',
        'remaining_value': 'float',
        'expires': 'datetime',
        'created_by': 'str'
    }

    attribute_map = {
        'created': 'created',
        'changed_by': 'changedBy',
        'updated': 'updated',
        'id': 'id',
        'account_id': 'accountID',
        'invoice_id': 'invoiceID',
        'subscription_id': 'subscriptionID',
        'organization_id': 'organizationID',
        'linked_credit_note_id': 'linkedCreditNoteID',
        'type': 'type',
        'currency': 'currency',
        'description': 'description',
        'value': 'value',
        'nominal_value': 'nominalValue',
        'actual_value': 'actualValue',
        'remaining_value': 'remainingValue',
        'expires': 'expires',
        'created_by': 'createdBy'
    }

    def __init__(self, created=None, changed_by=None, updated=None, id=None, account_id=None, invoice_id=None, subscription_id=None, organization_id=None, linked_credit_note_id=None, type=None, currency=None, description=None, value=None, nominal_value=None, actual_value=None, remaining_value=None, expires=None, created_by=None):  # noqa: E501
        """CreditNote - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._changed_by = None
        self._updated = None
        self._id = None
        self._account_id = None
        self._invoice_id = None
        self._subscription_id = None
        self._organization_id = None
        self._linked_credit_note_id = None
        self._type = None
        self._currency = None
        self._description = None
        self._value = None
        self._nominal_value = None
        self._actual_value = None
        self._remaining_value = None
        self._expires = None
        self._created_by = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if changed_by is not None:
            self.changed_by = changed_by
        if updated is not None:
            self.updated = updated
        if id is not None:
            self.id = id
        if account_id is not None:
            self.account_id = account_id
        if invoice_id is not None:
            self.invoice_id = invoice_id
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if organization_id is not None:
            self.organization_id = organization_id
        if linked_credit_note_id is not None:
            self.linked_credit_note_id = linked_credit_note_id
        self.type = type
        self.currency = currency
        if description is not None:
            self.description = description
        if value is not None:
            self.value = value
        if nominal_value is not None:
            self.nominal_value = nominal_value
        if actual_value is not None:
            self.actual_value = actual_value
        self.remaining_value = remaining_value
        if expires is not None:
            self.expires = expires
        if created_by is not None:
            self.created_by = created_by

    @property
    def created(self):
        """Gets the created of this CreditNote.  # noqa: E501


        :return: The created of this CreditNote.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this CreditNote.


        :param created: The created of this CreditNote.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """Gets the changed_by of this CreditNote.  # noqa: E501


        :return: The changed_by of this CreditNote.  # noqa: E501
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """Sets the changed_by of this CreditNote.


        :param changed_by: The changed_by of this CreditNote.  # noqa: E501
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """Gets the updated of this CreditNote.  # noqa: E501


        :return: The updated of this CreditNote.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this CreditNote.


        :param updated: The updated of this CreditNote.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """Gets the id of this CreditNote.  # noqa: E501


        :return: The id of this CreditNote.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreditNote.


        :param id: The id of this CreditNote.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def account_id(self):
        """Gets the account_id of this CreditNote.  # noqa: E501


        :return: The account_id of this CreditNote.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CreditNote.


        :param account_id: The account_id of this CreditNote.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def invoice_id(self):
        """Gets the invoice_id of this CreditNote.  # noqa: E501


        :return: The invoice_id of this CreditNote.  # noqa: E501
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this CreditNote.


        :param invoice_id: The invoice_id of this CreditNote.  # noqa: E501
        :type: str
        """

        self._invoice_id = invoice_id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this CreditNote.  # noqa: E501


        :return: The subscription_id of this CreditNote.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this CreditNote.


        :param subscription_id: The subscription_id of this CreditNote.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def organization_id(self):
        """Gets the organization_id of this CreditNote.  # noqa: E501


        :return: The organization_id of this CreditNote.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this CreditNote.


        :param organization_id: The organization_id of this CreditNote.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def linked_credit_note_id(self):
        """Gets the linked_credit_note_id of this CreditNote.  # noqa: E501


        :return: The linked_credit_note_id of this CreditNote.  # noqa: E501
        :rtype: str
        """
        return self._linked_credit_note_id

    @linked_credit_note_id.setter
    def linked_credit_note_id(self, linked_credit_note_id):
        """Sets the linked_credit_note_id of this CreditNote.


        :param linked_credit_note_id: The linked_credit_note_id of this CreditNote.  # noqa: E501
        :type: str
        """

        self._linked_credit_note_id = linked_credit_note_id

    @property
    def type(self):
        """Gets the type of this CreditNote.  # noqa: E501


        :return: The type of this CreditNote.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreditNote.


        :param type: The type of this CreditNote.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["invoice", "manual"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def currency(self):
        """Gets the currency of this CreditNote.  # noqa: E501


        :return: The currency of this CreditNote.  # noqa: E501
        :rtype: CreditNoteCurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CreditNote.


        :param currency: The currency of this CreditNote.  # noqa: E501
        :type: CreditNoteCurrency
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def description(self):
        """Gets the description of this CreditNote.  # noqa: E501


        :return: The description of this CreditNote.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreditNote.


        :param description: The description of this CreditNote.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def value(self):
        """Gets the value of this CreditNote.  # noqa: E501


        :return: The value of this CreditNote.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CreditNote.


        :param value: The value of this CreditNote.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def nominal_value(self):
        """Gets the nominal_value of this CreditNote.  # noqa: E501


        :return: The nominal_value of this CreditNote.  # noqa: E501
        :rtype: float
        """
        return self._nominal_value

    @nominal_value.setter
    def nominal_value(self, nominal_value):
        """Sets the nominal_value of this CreditNote.


        :param nominal_value: The nominal_value of this CreditNote.  # noqa: E501
        :type: float
        """

        self._nominal_value = nominal_value

    @property
    def actual_value(self):
        """Gets the actual_value of this CreditNote.  # noqa: E501


        :return: The actual_value of this CreditNote.  # noqa: E501
        :rtype: float
        """
        return self._actual_value

    @actual_value.setter
    def actual_value(self, actual_value):
        """Sets the actual_value of this CreditNote.


        :param actual_value: The actual_value of this CreditNote.  # noqa: E501
        :type: float
        """

        self._actual_value = actual_value

    @property
    def remaining_value(self):
        """Gets the remaining_value of this CreditNote.  # noqa: E501


        :return: The remaining_value of this CreditNote.  # noqa: E501
        :rtype: float
        """
        return self._remaining_value

    @remaining_value.setter
    def remaining_value(self, remaining_value):
        """Sets the remaining_value of this CreditNote.


        :param remaining_value: The remaining_value of this CreditNote.  # noqa: E501
        :type: float
        """
        if remaining_value is None:
            raise ValueError("Invalid value for `remaining_value`, must not be `None`")  # noqa: E501

        self._remaining_value = remaining_value

    @property
    def expires(self):
        """Gets the expires of this CreditNote.  # noqa: E501


        :return: The expires of this CreditNote.  # noqa: E501
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this CreditNote.


        :param expires: The expires of this CreditNote.  # noqa: E501
        :type: datetime
        """

        self._expires = expires

    @property
    def created_by(self):
        """Gets the created_by of this CreditNote.  # noqa: E501


        :return: The created_by of this CreditNote.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this CreditNote.


        :param created_by: The created_by of this CreditNote.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreditNote, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreditNote):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
