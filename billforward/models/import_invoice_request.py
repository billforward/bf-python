# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ImportInvoiceRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'subscription_id': 'str',
        'organization_id': 'str',
        'cost': 'float',
        'discount': 'float',
        'refunded': 'float',
        'paid': 'float',
        'payment_received': 'datetime',
        'period_start': 'datetime',
        'period_end': 'datetime',
        'state': 'str',
        'payment_type': 'str',
        'payment_name': 'str',
        'payment_description': 'str',
        'payment_reference': 'str',
        'invoice_lines': 'list[ImportInvoiceLine]',
        'dry_run': 'bool',
        'due': 'datetime',
        'purchase_order': 'str'
    }

    attribute_map = {
        'created': 'created',
        'subscription_id': 'subscriptionID',
        'organization_id': 'organizationID',
        'cost': 'cost',
        'discount': 'discount',
        'refunded': 'refunded',
        'paid': 'paid',
        'payment_received': 'paymentReceived',
        'period_start': 'periodStart',
        'period_end': 'periodEnd',
        'state': 'state',
        'payment_type': 'paymentType',
        'payment_name': 'paymentName',
        'payment_description': 'paymentDescription',
        'payment_reference': 'paymentReference',
        'invoice_lines': 'invoiceLines',
        'dry_run': 'dryRun',
        'due': 'due',
        'purchase_order': 'purchaseOrder'
    }

    def __init__(self, created=None, subscription_id=None, organization_id=None, cost=None, discount=None, refunded=None, paid=None, payment_received=None, period_start=None, period_end=None, state=None, payment_type=None, payment_name=None, payment_description=None, payment_reference=None, invoice_lines=None, dry_run=None, due=None, purchase_order=None):  # noqa: E501
        """ImportInvoiceRequest - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._subscription_id = None
        self._organization_id = None
        self._cost = None
        self._discount = None
        self._refunded = None
        self._paid = None
        self._payment_received = None
        self._period_start = None
        self._period_end = None
        self._state = None
        self._payment_type = None
        self._payment_name = None
        self._payment_description = None
        self._payment_reference = None
        self._invoice_lines = None
        self._dry_run = None
        self._due = None
        self._purchase_order = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if organization_id is not None:
            self.organization_id = organization_id
        if cost is not None:
            self.cost = cost
        if discount is not None:
            self.discount = discount
        if refunded is not None:
            self.refunded = refunded
        if paid is not None:
            self.paid = paid
        if payment_received is not None:
            self.payment_received = payment_received
        if period_start is not None:
            self.period_start = period_start
        if period_end is not None:
            self.period_end = period_end
        if state is not None:
            self.state = state
        if payment_type is not None:
            self.payment_type = payment_type
        if payment_name is not None:
            self.payment_name = payment_name
        if payment_description is not None:
            self.payment_description = payment_description
        if payment_reference is not None:
            self.payment_reference = payment_reference
        if invoice_lines is not None:
            self.invoice_lines = invoice_lines
        if dry_run is not None:
            self.dry_run = dry_run
        if due is not None:
            self.due = due
        if purchase_order is not None:
            self.purchase_order = purchase_order

    @property
    def created(self):
        """Gets the created of this ImportInvoiceRequest.  # noqa: E501


        :return: The created of this ImportInvoiceRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ImportInvoiceRequest.


        :param created: The created of this ImportInvoiceRequest.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def subscription_id(self):
        """Gets the subscription_id of this ImportInvoiceRequest.  # noqa: E501


        :return: The subscription_id of this ImportInvoiceRequest.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this ImportInvoiceRequest.


        :param subscription_id: The subscription_id of this ImportInvoiceRequest.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def organization_id(self):
        """Gets the organization_id of this ImportInvoiceRequest.  # noqa: E501


        :return: The organization_id of this ImportInvoiceRequest.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this ImportInvoiceRequest.


        :param organization_id: The organization_id of this ImportInvoiceRequest.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def cost(self):
        """Gets the cost of this ImportInvoiceRequest.  # noqa: E501


        :return: The cost of this ImportInvoiceRequest.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this ImportInvoiceRequest.


        :param cost: The cost of this ImportInvoiceRequest.  # noqa: E501
        :type: float
        """

        self._cost = cost

    @property
    def discount(self):
        """Gets the discount of this ImportInvoiceRequest.  # noqa: E501


        :return: The discount of this ImportInvoiceRequest.  # noqa: E501
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this ImportInvoiceRequest.


        :param discount: The discount of this ImportInvoiceRequest.  # noqa: E501
        :type: float
        """

        self._discount = discount

    @property
    def refunded(self):
        """Gets the refunded of this ImportInvoiceRequest.  # noqa: E501


        :return: The refunded of this ImportInvoiceRequest.  # noqa: E501
        :rtype: float
        """
        return self._refunded

    @refunded.setter
    def refunded(self, refunded):
        """Sets the refunded of this ImportInvoiceRequest.


        :param refunded: The refunded of this ImportInvoiceRequest.  # noqa: E501
        :type: float
        """

        self._refunded = refunded

    @property
    def paid(self):
        """Gets the paid of this ImportInvoiceRequest.  # noqa: E501


        :return: The paid of this ImportInvoiceRequest.  # noqa: E501
        :rtype: float
        """
        return self._paid

    @paid.setter
    def paid(self, paid):
        """Sets the paid of this ImportInvoiceRequest.


        :param paid: The paid of this ImportInvoiceRequest.  # noqa: E501
        :type: float
        """

        self._paid = paid

    @property
    def payment_received(self):
        """Gets the payment_received of this ImportInvoiceRequest.  # noqa: E501


        :return: The payment_received of this ImportInvoiceRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._payment_received

    @payment_received.setter
    def payment_received(self, payment_received):
        """Sets the payment_received of this ImportInvoiceRequest.


        :param payment_received: The payment_received of this ImportInvoiceRequest.  # noqa: E501
        :type: datetime
        """

        self._payment_received = payment_received

    @property
    def period_start(self):
        """Gets the period_start of this ImportInvoiceRequest.  # noqa: E501


        :return: The period_start of this ImportInvoiceRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._period_start

    @period_start.setter
    def period_start(self, period_start):
        """Sets the period_start of this ImportInvoiceRequest.


        :param period_start: The period_start of this ImportInvoiceRequest.  # noqa: E501
        :type: datetime
        """

        self._period_start = period_start

    @property
    def period_end(self):
        """Gets the period_end of this ImportInvoiceRequest.  # noqa: E501


        :return: The period_end of this ImportInvoiceRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._period_end

    @period_end.setter
    def period_end(self, period_end):
        """Sets the period_end of this ImportInvoiceRequest.


        :param period_end: The period_end of this ImportInvoiceRequest.  # noqa: E501
        :type: datetime
        """

        self._period_end = period_end

    @property
    def state(self):
        """Gets the state of this ImportInvoiceRequest.  # noqa: E501


        :return: The state of this ImportInvoiceRequest.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ImportInvoiceRequest.


        :param state: The state of this ImportInvoiceRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Paid", "Unpaid", "Pending", "Voided"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def payment_type(self):
        """Gets the payment_type of this ImportInvoiceRequest.  # noqa: E501


        :return: The payment_type of this ImportInvoiceRequest.  # noqa: E501
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this ImportInvoiceRequest.


        :param payment_type: The payment_type of this ImportInvoiceRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["WireTransfer", "Check", "Cash", "Other", "Prepayment"]  # noqa: E501
        if payment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_type` ({0}), must be one of {1}"  # noqa: E501
                .format(payment_type, allowed_values)
            )

        self._payment_type = payment_type

    @property
    def payment_name(self):
        """Gets the payment_name of this ImportInvoiceRequest.  # noqa: E501


        :return: The payment_name of this ImportInvoiceRequest.  # noqa: E501
        :rtype: str
        """
        return self._payment_name

    @payment_name.setter
    def payment_name(self, payment_name):
        """Sets the payment_name of this ImportInvoiceRequest.


        :param payment_name: The payment_name of this ImportInvoiceRequest.  # noqa: E501
        :type: str
        """

        self._payment_name = payment_name

    @property
    def payment_description(self):
        """Gets the payment_description of this ImportInvoiceRequest.  # noqa: E501


        :return: The payment_description of this ImportInvoiceRequest.  # noqa: E501
        :rtype: str
        """
        return self._payment_description

    @payment_description.setter
    def payment_description(self, payment_description):
        """Sets the payment_description of this ImportInvoiceRequest.


        :param payment_description: The payment_description of this ImportInvoiceRequest.  # noqa: E501
        :type: str
        """

        self._payment_description = payment_description

    @property
    def payment_reference(self):
        """Gets the payment_reference of this ImportInvoiceRequest.  # noqa: E501


        :return: The payment_reference of this ImportInvoiceRequest.  # noqa: E501
        :rtype: str
        """
        return self._payment_reference

    @payment_reference.setter
    def payment_reference(self, payment_reference):
        """Sets the payment_reference of this ImportInvoiceRequest.


        :param payment_reference: The payment_reference of this ImportInvoiceRequest.  # noqa: E501
        :type: str
        """

        self._payment_reference = payment_reference

    @property
    def invoice_lines(self):
        """Gets the invoice_lines of this ImportInvoiceRequest.  # noqa: E501


        :return: The invoice_lines of this ImportInvoiceRequest.  # noqa: E501
        :rtype: list[ImportInvoiceLine]
        """
        return self._invoice_lines

    @invoice_lines.setter
    def invoice_lines(self, invoice_lines):
        """Sets the invoice_lines of this ImportInvoiceRequest.


        :param invoice_lines: The invoice_lines of this ImportInvoiceRequest.  # noqa: E501
        :type: list[ImportInvoiceLine]
        """

        self._invoice_lines = invoice_lines

    @property
    def dry_run(self):
        """Gets the dry_run of this ImportInvoiceRequest.  # noqa: E501


        :return: The dry_run of this ImportInvoiceRequest.  # noqa: E501
        :rtype: bool
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """Sets the dry_run of this ImportInvoiceRequest.


        :param dry_run: The dry_run of this ImportInvoiceRequest.  # noqa: E501
        :type: bool
        """

        self._dry_run = dry_run

    @property
    def due(self):
        """Gets the due of this ImportInvoiceRequest.  # noqa: E501


        :return: The due of this ImportInvoiceRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._due

    @due.setter
    def due(self, due):
        """Sets the due of this ImportInvoiceRequest.


        :param due: The due of this ImportInvoiceRequest.  # noqa: E501
        :type: datetime
        """

        self._due = due

    @property
    def purchase_order(self):
        """Gets the purchase_order of this ImportInvoiceRequest.  # noqa: E501


        :return: The purchase_order of this ImportInvoiceRequest.  # noqa: E501
        :rtype: str
        """
        return self._purchase_order

    @purchase_order.setter
    def purchase_order(self, purchase_order):
        """Sets the purchase_order of this ImportInvoiceRequest.


        :param purchase_order: The purchase_order of this ImportInvoiceRequest.  # noqa: E501
        :type: str
        """

        self._purchase_order = purchase_order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportInvoiceRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportInvoiceRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
