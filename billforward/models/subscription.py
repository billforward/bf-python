# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Subscription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'changed_by': 'str',
        'updated': 'datetime',
        'metadata': 'dict(str, object)',
        'id': 'str',
        'version_id': 'str',
        'crm_id': 'str',
        'account_id': 'str',
        'organization_id': 'str',
        'product_id': 'str',
        'product_rate_plan_id': 'str',
        'parent_id': 'str',
        'name': 'str',
        'description': 'str',
        'type': 'str',
        'version': 'str',
        'state': 'str',
        'active': 'bool',
        'current_period_start': 'datetime',
        'current_period_end': 'datetime',
        'contract_start': 'datetime',
        'subscription_end': 'datetime',
        'current_period_end_explicit': 'datetime',
        'initial_period_start': 'datetime',
        'successful_periods': 'int',
        'total_periods': 'int',
        'total_version_periods': 'int',
        'trial_end': 'datetime',
        'dunning': 'bool',
        'locked': 'str',
        'managed_by': 'str',
        'version_start': 'datetime',
        'version_end': 'datetime',
        'version_number': 'int',
        'credit_enabled': 'bool',
        'aggregate_all_subscriptions_on_account': 'bool',
        'failed_payment_behaviour': 'str',
        'pricing_component_values': 'list[PricingComponentValue]',
        'payment_method_subscription_links': 'list[PaymentMethodSubscriptionLink]',
        'fixed_terms': 'list[FixedTerm]',
        'contracts': 'list[Contract]',
        'square_subscription': 'SquareSubscription',
        'execution_info': 'ExecutionResponse',
        'current_time': 'datetime',
        'time_offset': 'int',
        'revive': 'SubscriptionRevivePartialRequest',
        'payment_terms': 'int',
        'purchase_order': 'str',
        'affiliate_subscription_relationship': 'list[AffiliateSubscriptionRelationship]',
        'fixed_term': 'bool'
    }

    attribute_map = {
        'created': 'created',
        'changed_by': 'changedBy',
        'updated': 'updated',
        'metadata': 'metadata',
        'id': 'id',
        'version_id': 'versionID',
        'crm_id': 'crmID',
        'account_id': 'accountID',
        'organization_id': 'organizationID',
        'product_id': 'productID',
        'product_rate_plan_id': 'productRatePlanID',
        'parent_id': 'parentID',
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'version': 'version',
        'state': 'state',
        'active': 'active',
        'current_period_start': 'currentPeriodStart',
        'current_period_end': 'currentPeriodEnd',
        'contract_start': 'contractStart',
        'subscription_end': 'subscriptionEnd',
        'current_period_end_explicit': 'currentPeriodEndExplicit',
        'initial_period_start': 'initialPeriodStart',
        'successful_periods': 'successfulPeriods',
        'total_periods': 'totalPeriods',
        'total_version_periods': 'totalVersionPeriods',
        'trial_end': 'trialEnd',
        'dunning': 'dunning',
        'locked': 'locked',
        'managed_by': 'managedBy',
        'version_start': 'versionStart',
        'version_end': 'versionEnd',
        'version_number': 'versionNumber',
        'credit_enabled': 'creditEnabled',
        'aggregate_all_subscriptions_on_account': 'aggregateAllSubscriptionsOnAccount',
        'failed_payment_behaviour': 'failedPaymentBehaviour',
        'pricing_component_values': 'pricingComponentValues',
        'payment_method_subscription_links': 'paymentMethodSubscriptionLinks',
        'fixed_terms': 'fixedTerms',
        'contracts': 'contracts',
        'square_subscription': 'squareSubscription',
        'execution_info': 'executionInfo',
        'current_time': 'currentTime',
        'time_offset': 'timeOffset',
        'revive': 'revive',
        'payment_terms': 'paymentTerms',
        'purchase_order': 'purchaseOrder',
        'affiliate_subscription_relationship': 'affiliateSubscriptionRelationship',
        'fixed_term': 'fixedTerm'
    }

    def __init__(self, created=None, changed_by=None, updated=None, metadata=None, id=None, version_id=None, crm_id=None, account_id=None, organization_id=None, product_id=None, product_rate_plan_id=None, parent_id=None, name=None, description=None, type=None, version=None, state=None, active=None, current_period_start=None, current_period_end=None, contract_start=None, subscription_end=None, current_period_end_explicit=None, initial_period_start=None, successful_periods=None, total_periods=None, total_version_periods=None, trial_end=None, dunning=None, locked=None, managed_by=None, version_start=None, version_end=None, version_number=None, credit_enabled=None, aggregate_all_subscriptions_on_account=None, failed_payment_behaviour=None, pricing_component_values=None, payment_method_subscription_links=None, fixed_terms=None, contracts=None, square_subscription=None, execution_info=None, current_time=None, time_offset=None, revive=None, payment_terms=None, purchase_order=None, affiliate_subscription_relationship=None, fixed_term=None):  # noqa: E501
        """Subscription - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._changed_by = None
        self._updated = None
        self._metadata = None
        self._id = None
        self._version_id = None
        self._crm_id = None
        self._account_id = None
        self._organization_id = None
        self._product_id = None
        self._product_rate_plan_id = None
        self._parent_id = None
        self._name = None
        self._description = None
        self._type = None
        self._version = None
        self._state = None
        self._active = None
        self._current_period_start = None
        self._current_period_end = None
        self._contract_start = None
        self._subscription_end = None
        self._current_period_end_explicit = None
        self._initial_period_start = None
        self._successful_periods = None
        self._total_periods = None
        self._total_version_periods = None
        self._trial_end = None
        self._dunning = None
        self._locked = None
        self._managed_by = None
        self._version_start = None
        self._version_end = None
        self._version_number = None
        self._credit_enabled = None
        self._aggregate_all_subscriptions_on_account = None
        self._failed_payment_behaviour = None
        self._pricing_component_values = None
        self._payment_method_subscription_links = None
        self._fixed_terms = None
        self._contracts = None
        self._square_subscription = None
        self._execution_info = None
        self._current_time = None
        self._time_offset = None
        self._revive = None
        self._payment_terms = None
        self._purchase_order = None
        self._affiliate_subscription_relationship = None
        self._fixed_term = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if changed_by is not None:
            self.changed_by = changed_by
        if updated is not None:
            self.updated = updated
        if metadata is not None:
            self.metadata = metadata
        self.id = id
        if version_id is not None:
            self.version_id = version_id
        if crm_id is not None:
            self.crm_id = crm_id
        self.account_id = account_id
        self.organization_id = organization_id
        if product_id is not None:
            self.product_id = product_id
        if product_rate_plan_id is not None:
            self.product_rate_plan_id = product_rate_plan_id
        if parent_id is not None:
            self.parent_id = parent_id
        self.name = name
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if version is not None:
            self.version = version
        self.state = state
        if active is not None:
            self.active = active
        if current_period_start is not None:
            self.current_period_start = current_period_start
        if current_period_end is not None:
            self.current_period_end = current_period_end
        if contract_start is not None:
            self.contract_start = contract_start
        if subscription_end is not None:
            self.subscription_end = subscription_end
        if current_period_end_explicit is not None:
            self.current_period_end_explicit = current_period_end_explicit
        if initial_period_start is not None:
            self.initial_period_start = initial_period_start
        if successful_periods is not None:
            self.successful_periods = successful_periods
        if total_periods is not None:
            self.total_periods = total_periods
        if total_version_periods is not None:
            self.total_version_periods = total_version_periods
        if trial_end is not None:
            self.trial_end = trial_end
        if dunning is not None:
            self.dunning = dunning
        if locked is not None:
            self.locked = locked
        if managed_by is not None:
            self.managed_by = managed_by
        self.version_start = version_start
        if version_end is not None:
            self.version_end = version_end
        self.version_number = version_number
        if credit_enabled is not None:
            self.credit_enabled = credit_enabled
        if aggregate_all_subscriptions_on_account is not None:
            self.aggregate_all_subscriptions_on_account = aggregate_all_subscriptions_on_account
        if failed_payment_behaviour is not None:
            self.failed_payment_behaviour = failed_payment_behaviour
        if pricing_component_values is not None:
            self.pricing_component_values = pricing_component_values
        if payment_method_subscription_links is not None:
            self.payment_method_subscription_links = payment_method_subscription_links
        if fixed_terms is not None:
            self.fixed_terms = fixed_terms
        if contracts is not None:
            self.contracts = contracts
        if square_subscription is not None:
            self.square_subscription = square_subscription
        if execution_info is not None:
            self.execution_info = execution_info
        if current_time is not None:
            self.current_time = current_time
        if time_offset is not None:
            self.time_offset = time_offset
        if revive is not None:
            self.revive = revive
        if payment_terms is not None:
            self.payment_terms = payment_terms
        if purchase_order is not None:
            self.purchase_order = purchase_order
        if affiliate_subscription_relationship is not None:
            self.affiliate_subscription_relationship = affiliate_subscription_relationship
        if fixed_term is not None:
            self.fixed_term = fixed_term

    @property
    def created(self):
        """Gets the created of this Subscription.  # noqa: E501


        :return: The created of this Subscription.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Subscription.


        :param created: The created of this Subscription.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """Gets the changed_by of this Subscription.  # noqa: E501


        :return: The changed_by of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """Sets the changed_by of this Subscription.


        :param changed_by: The changed_by of this Subscription.  # noqa: E501
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """Gets the updated of this Subscription.  # noqa: E501


        :return: The updated of this Subscription.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Subscription.


        :param updated: The updated of this Subscription.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def metadata(self):
        """Gets the metadata of this Subscription.  # noqa: E501


        :return: The metadata of this Subscription.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Subscription.


        :param metadata: The metadata of this Subscription.  # noqa: E501
        :type: dict(str, object)
        """

        self._metadata = metadata

    @property
    def id(self):
        """Gets the id of this Subscription.  # noqa: E501


        :return: The id of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Subscription.


        :param id: The id of this Subscription.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def version_id(self):
        """Gets the version_id of this Subscription.  # noqa: E501


        :return: The version_id of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this Subscription.


        :param version_id: The version_id of this Subscription.  # noqa: E501
        :type: str
        """

        self._version_id = version_id

    @property
    def crm_id(self):
        """Gets the crm_id of this Subscription.  # noqa: E501


        :return: The crm_id of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._crm_id

    @crm_id.setter
    def crm_id(self, crm_id):
        """Sets the crm_id of this Subscription.


        :param crm_id: The crm_id of this Subscription.  # noqa: E501
        :type: str
        """

        self._crm_id = crm_id

    @property
    def account_id(self):
        """Gets the account_id of this Subscription.  # noqa: E501


        :return: The account_id of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Subscription.


        :param account_id: The account_id of this Subscription.  # noqa: E501
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def organization_id(self):
        """Gets the organization_id of this Subscription.  # noqa: E501


        :return: The organization_id of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this Subscription.


        :param organization_id: The organization_id of this Subscription.  # noqa: E501
        :type: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")  # noqa: E501

        self._organization_id = organization_id

    @property
    def product_id(self):
        """Gets the product_id of this Subscription.  # noqa: E501


        :return: The product_id of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this Subscription.


        :param product_id: The product_id of this Subscription.  # noqa: E501
        :type: str
        """

        self._product_id = product_id

    @property
    def product_rate_plan_id(self):
        """Gets the product_rate_plan_id of this Subscription.  # noqa: E501


        :return: The product_rate_plan_id of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_id

    @product_rate_plan_id.setter
    def product_rate_plan_id(self, product_rate_plan_id):
        """Sets the product_rate_plan_id of this Subscription.


        :param product_rate_plan_id: The product_rate_plan_id of this Subscription.  # noqa: E501
        :type: str
        """

        self._product_rate_plan_id = product_rate_plan_id

    @property
    def parent_id(self):
        """Gets the parent_id of this Subscription.  # noqa: E501


        :return: The parent_id of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this Subscription.


        :param parent_id: The parent_id of this Subscription.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def name(self):
        """Gets the name of this Subscription.  # noqa: E501


        :return: The name of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Subscription.


        :param name: The name of this Subscription.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Subscription.  # noqa: E501


        :return: The description of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Subscription.


        :param description: The description of this Subscription.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this Subscription.  # noqa: E501


        :return: The type of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Subscription.


        :param type: The type of this Subscription.  # noqa: E501
        :type: str
        """
        allowed_values = ["Subscription", "Trial", "FixedTerm"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def version(self):
        """Gets the version of this Subscription.  # noqa: E501


        :return: The version of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Subscription.


        :param version: The version of this Subscription.  # noqa: E501
        :type: str
        """
        allowed_values = ["V1", "V2"]  # noqa: E501
        if version not in allowed_values:
            raise ValueError(
                "Invalid value for `version` ({0}), must be one of {1}"  # noqa: E501
                .format(version, allowed_values)
            )

        self._version = version

    @property
    def state(self):
        """Gets the state of this Subscription.  # noqa: E501


        :return: The state of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Subscription.


        :param state: The state of this Subscription.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["Trial", "Provisioned", "Paid", "AwaitingPayment", "Cancelled", "Failed", "Expired"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def active(self):
        """Gets the active of this Subscription.  # noqa: E501


        :return: The active of this Subscription.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Subscription.


        :param active: The active of this Subscription.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def current_period_start(self):
        """Gets the current_period_start of this Subscription.  # noqa: E501


        :return: The current_period_start of this Subscription.  # noqa: E501
        :rtype: datetime
        """
        return self._current_period_start

    @current_period_start.setter
    def current_period_start(self, current_period_start):
        """Sets the current_period_start of this Subscription.


        :param current_period_start: The current_period_start of this Subscription.  # noqa: E501
        :type: datetime
        """

        self._current_period_start = current_period_start

    @property
    def current_period_end(self):
        """Gets the current_period_end of this Subscription.  # noqa: E501


        :return: The current_period_end of this Subscription.  # noqa: E501
        :rtype: datetime
        """
        return self._current_period_end

    @current_period_end.setter
    def current_period_end(self, current_period_end):
        """Sets the current_period_end of this Subscription.


        :param current_period_end: The current_period_end of this Subscription.  # noqa: E501
        :type: datetime
        """

        self._current_period_end = current_period_end

    @property
    def contract_start(self):
        """Gets the contract_start of this Subscription.  # noqa: E501


        :return: The contract_start of this Subscription.  # noqa: E501
        :rtype: datetime
        """
        return self._contract_start

    @contract_start.setter
    def contract_start(self, contract_start):
        """Sets the contract_start of this Subscription.


        :param contract_start: The contract_start of this Subscription.  # noqa: E501
        :type: datetime
        """

        self._contract_start = contract_start

    @property
    def subscription_end(self):
        """Gets the subscription_end of this Subscription.  # noqa: E501


        :return: The subscription_end of this Subscription.  # noqa: E501
        :rtype: datetime
        """
        return self._subscription_end

    @subscription_end.setter
    def subscription_end(self, subscription_end):
        """Sets the subscription_end of this Subscription.


        :param subscription_end: The subscription_end of this Subscription.  # noqa: E501
        :type: datetime
        """

        self._subscription_end = subscription_end

    @property
    def current_period_end_explicit(self):
        """Gets the current_period_end_explicit of this Subscription.  # noqa: E501


        :return: The current_period_end_explicit of this Subscription.  # noqa: E501
        :rtype: datetime
        """
        return self._current_period_end_explicit

    @current_period_end_explicit.setter
    def current_period_end_explicit(self, current_period_end_explicit):
        """Sets the current_period_end_explicit of this Subscription.


        :param current_period_end_explicit: The current_period_end_explicit of this Subscription.  # noqa: E501
        :type: datetime
        """

        self._current_period_end_explicit = current_period_end_explicit

    @property
    def initial_period_start(self):
        """Gets the initial_period_start of this Subscription.  # noqa: E501


        :return: The initial_period_start of this Subscription.  # noqa: E501
        :rtype: datetime
        """
        return self._initial_period_start

    @initial_period_start.setter
    def initial_period_start(self, initial_period_start):
        """Sets the initial_period_start of this Subscription.


        :param initial_period_start: The initial_period_start of this Subscription.  # noqa: E501
        :type: datetime
        """

        self._initial_period_start = initial_period_start

    @property
    def successful_periods(self):
        """Gets the successful_periods of this Subscription.  # noqa: E501


        :return: The successful_periods of this Subscription.  # noqa: E501
        :rtype: int
        """
        return self._successful_periods

    @successful_periods.setter
    def successful_periods(self, successful_periods):
        """Sets the successful_periods of this Subscription.


        :param successful_periods: The successful_periods of this Subscription.  # noqa: E501
        :type: int
        """

        self._successful_periods = successful_periods

    @property
    def total_periods(self):
        """Gets the total_periods of this Subscription.  # noqa: E501


        :return: The total_periods of this Subscription.  # noqa: E501
        :rtype: int
        """
        return self._total_periods

    @total_periods.setter
    def total_periods(self, total_periods):
        """Sets the total_periods of this Subscription.


        :param total_periods: The total_periods of this Subscription.  # noqa: E501
        :type: int
        """

        self._total_periods = total_periods

    @property
    def total_version_periods(self):
        """Gets the total_version_periods of this Subscription.  # noqa: E501


        :return: The total_version_periods of this Subscription.  # noqa: E501
        :rtype: int
        """
        return self._total_version_periods

    @total_version_periods.setter
    def total_version_periods(self, total_version_periods):
        """Sets the total_version_periods of this Subscription.


        :param total_version_periods: The total_version_periods of this Subscription.  # noqa: E501
        :type: int
        """

        self._total_version_periods = total_version_periods

    @property
    def trial_end(self):
        """Gets the trial_end of this Subscription.  # noqa: E501


        :return: The trial_end of this Subscription.  # noqa: E501
        :rtype: datetime
        """
        return self._trial_end

    @trial_end.setter
    def trial_end(self, trial_end):
        """Sets the trial_end of this Subscription.


        :param trial_end: The trial_end of this Subscription.  # noqa: E501
        :type: datetime
        """

        self._trial_end = trial_end

    @property
    def dunning(self):
        """Gets the dunning of this Subscription.  # noqa: E501


        :return: The dunning of this Subscription.  # noqa: E501
        :rtype: bool
        """
        return self._dunning

    @dunning.setter
    def dunning(self, dunning):
        """Sets the dunning of this Subscription.


        :param dunning: The dunning of this Subscription.  # noqa: E501
        :type: bool
        """

        self._dunning = dunning

    @property
    def locked(self):
        """Gets the locked of this Subscription.  # noqa: E501


        :return: The locked of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this Subscription.


        :param locked: The locked of this Subscription.  # noqa: E501
        :type: str
        """

        self._locked = locked

    @property
    def managed_by(self):
        """Gets the managed_by of this Subscription.  # noqa: E501


        :return: The managed_by of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._managed_by

    @managed_by.setter
    def managed_by(self, managed_by):
        """Sets the managed_by of this Subscription.


        :param managed_by: The managed_by of this Subscription.  # noqa: E501
        :type: str
        """
        allowed_values = ["BillForward", "Stripe"]  # noqa: E501
        if managed_by not in allowed_values:
            raise ValueError(
                "Invalid value for `managed_by` ({0}), must be one of {1}"  # noqa: E501
                .format(managed_by, allowed_values)
            )

        self._managed_by = managed_by

    @property
    def version_start(self):
        """Gets the version_start of this Subscription.  # noqa: E501


        :return: The version_start of this Subscription.  # noqa: E501
        :rtype: datetime
        """
        return self._version_start

    @version_start.setter
    def version_start(self, version_start):
        """Sets the version_start of this Subscription.


        :param version_start: The version_start of this Subscription.  # noqa: E501
        :type: datetime
        """
        if version_start is None:
            raise ValueError("Invalid value for `version_start`, must not be `None`")  # noqa: E501

        self._version_start = version_start

    @property
    def version_end(self):
        """Gets the version_end of this Subscription.  # noqa: E501


        :return: The version_end of this Subscription.  # noqa: E501
        :rtype: datetime
        """
        return self._version_end

    @version_end.setter
    def version_end(self, version_end):
        """Sets the version_end of this Subscription.


        :param version_end: The version_end of this Subscription.  # noqa: E501
        :type: datetime
        """

        self._version_end = version_end

    @property
    def version_number(self):
        """Gets the version_number of this Subscription.  # noqa: E501


        :return: The version_number of this Subscription.  # noqa: E501
        :rtype: int
        """
        return self._version_number

    @version_number.setter
    def version_number(self, version_number):
        """Sets the version_number of this Subscription.


        :param version_number: The version_number of this Subscription.  # noqa: E501
        :type: int
        """
        if version_number is None:
            raise ValueError("Invalid value for `version_number`, must not be `None`")  # noqa: E501

        self._version_number = version_number

    @property
    def credit_enabled(self):
        """Gets the credit_enabled of this Subscription.  # noqa: E501


        :return: The credit_enabled of this Subscription.  # noqa: E501
        :rtype: bool
        """
        return self._credit_enabled

    @credit_enabled.setter
    def credit_enabled(self, credit_enabled):
        """Sets the credit_enabled of this Subscription.


        :param credit_enabled: The credit_enabled of this Subscription.  # noqa: E501
        :type: bool
        """

        self._credit_enabled = credit_enabled

    @property
    def aggregate_all_subscriptions_on_account(self):
        """Gets the aggregate_all_subscriptions_on_account of this Subscription.  # noqa: E501


        :return: The aggregate_all_subscriptions_on_account of this Subscription.  # noqa: E501
        :rtype: bool
        """
        return self._aggregate_all_subscriptions_on_account

    @aggregate_all_subscriptions_on_account.setter
    def aggregate_all_subscriptions_on_account(self, aggregate_all_subscriptions_on_account):
        """Sets the aggregate_all_subscriptions_on_account of this Subscription.


        :param aggregate_all_subscriptions_on_account: The aggregate_all_subscriptions_on_account of this Subscription.  # noqa: E501
        :type: bool
        """

        self._aggregate_all_subscriptions_on_account = aggregate_all_subscriptions_on_account

    @property
    def failed_payment_behaviour(self):
        """Gets the failed_payment_behaviour of this Subscription.  # noqa: E501


        :return: The failed_payment_behaviour of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._failed_payment_behaviour

    @failed_payment_behaviour.setter
    def failed_payment_behaviour(self, failed_payment_behaviour):
        """Sets the failed_payment_behaviour of this Subscription.


        :param failed_payment_behaviour: The failed_payment_behaviour of this Subscription.  # noqa: E501
        :type: str
        """
        allowed_values = ["CancelSubscription", "None"]  # noqa: E501
        if failed_payment_behaviour not in allowed_values:
            raise ValueError(
                "Invalid value for `failed_payment_behaviour` ({0}), must be one of {1}"  # noqa: E501
                .format(failed_payment_behaviour, allowed_values)
            )

        self._failed_payment_behaviour = failed_payment_behaviour

    @property
    def pricing_component_values(self):
        """Gets the pricing_component_values of this Subscription.  # noqa: E501


        :return: The pricing_component_values of this Subscription.  # noqa: E501
        :rtype: list[PricingComponentValue]
        """
        return self._pricing_component_values

    @pricing_component_values.setter
    def pricing_component_values(self, pricing_component_values):
        """Sets the pricing_component_values of this Subscription.


        :param pricing_component_values: The pricing_component_values of this Subscription.  # noqa: E501
        :type: list[PricingComponentValue]
        """

        self._pricing_component_values = pricing_component_values

    @property
    def payment_method_subscription_links(self):
        """Gets the payment_method_subscription_links of this Subscription.  # noqa: E501


        :return: The payment_method_subscription_links of this Subscription.  # noqa: E501
        :rtype: list[PaymentMethodSubscriptionLink]
        """
        return self._payment_method_subscription_links

    @payment_method_subscription_links.setter
    def payment_method_subscription_links(self, payment_method_subscription_links):
        """Sets the payment_method_subscription_links of this Subscription.


        :param payment_method_subscription_links: The payment_method_subscription_links of this Subscription.  # noqa: E501
        :type: list[PaymentMethodSubscriptionLink]
        """

        self._payment_method_subscription_links = payment_method_subscription_links

    @property
    def fixed_terms(self):
        """Gets the fixed_terms of this Subscription.  # noqa: E501


        :return: The fixed_terms of this Subscription.  # noqa: E501
        :rtype: list[FixedTerm]
        """
        return self._fixed_terms

    @fixed_terms.setter
    def fixed_terms(self, fixed_terms):
        """Sets the fixed_terms of this Subscription.


        :param fixed_terms: The fixed_terms of this Subscription.  # noqa: E501
        :type: list[FixedTerm]
        """

        self._fixed_terms = fixed_terms

    @property
    def contracts(self):
        """Gets the contracts of this Subscription.  # noqa: E501


        :return: The contracts of this Subscription.  # noqa: E501
        :rtype: list[Contract]
        """
        return self._contracts

    @contracts.setter
    def contracts(self, contracts):
        """Sets the contracts of this Subscription.


        :param contracts: The contracts of this Subscription.  # noqa: E501
        :type: list[Contract]
        """

        self._contracts = contracts

    @property
    def square_subscription(self):
        """Gets the square_subscription of this Subscription.  # noqa: E501


        :return: The square_subscription of this Subscription.  # noqa: E501
        :rtype: SquareSubscription
        """
        return self._square_subscription

    @square_subscription.setter
    def square_subscription(self, square_subscription):
        """Sets the square_subscription of this Subscription.


        :param square_subscription: The square_subscription of this Subscription.  # noqa: E501
        :type: SquareSubscription
        """

        self._square_subscription = square_subscription

    @property
    def execution_info(self):
        """Gets the execution_info of this Subscription.  # noqa: E501


        :return: The execution_info of this Subscription.  # noqa: E501
        :rtype: ExecutionResponse
        """
        return self._execution_info

    @execution_info.setter
    def execution_info(self, execution_info):
        """Sets the execution_info of this Subscription.


        :param execution_info: The execution_info of this Subscription.  # noqa: E501
        :type: ExecutionResponse
        """

        self._execution_info = execution_info

    @property
    def current_time(self):
        """Gets the current_time of this Subscription.  # noqa: E501


        :return: The current_time of this Subscription.  # noqa: E501
        :rtype: datetime
        """
        return self._current_time

    @current_time.setter
    def current_time(self, current_time):
        """Sets the current_time of this Subscription.


        :param current_time: The current_time of this Subscription.  # noqa: E501
        :type: datetime
        """

        self._current_time = current_time

    @property
    def time_offset(self):
        """Gets the time_offset of this Subscription.  # noqa: E501


        :return: The time_offset of this Subscription.  # noqa: E501
        :rtype: int
        """
        return self._time_offset

    @time_offset.setter
    def time_offset(self, time_offset):
        """Sets the time_offset of this Subscription.


        :param time_offset: The time_offset of this Subscription.  # noqa: E501
        :type: int
        """

        self._time_offset = time_offset

    @property
    def revive(self):
        """Gets the revive of this Subscription.  # noqa: E501


        :return: The revive of this Subscription.  # noqa: E501
        :rtype: SubscriptionRevivePartialRequest
        """
        return self._revive

    @revive.setter
    def revive(self, revive):
        """Sets the revive of this Subscription.


        :param revive: The revive of this Subscription.  # noqa: E501
        :type: SubscriptionRevivePartialRequest
        """

        self._revive = revive

    @property
    def payment_terms(self):
        """Gets the payment_terms of this Subscription.  # noqa: E501


        :return: The payment_terms of this Subscription.  # noqa: E501
        :rtype: int
        """
        return self._payment_terms

    @payment_terms.setter
    def payment_terms(self, payment_terms):
        """Sets the payment_terms of this Subscription.


        :param payment_terms: The payment_terms of this Subscription.  # noqa: E501
        :type: int
        """

        self._payment_terms = payment_terms

    @property
    def purchase_order(self):
        """Gets the purchase_order of this Subscription.  # noqa: E501


        :return: The purchase_order of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._purchase_order

    @purchase_order.setter
    def purchase_order(self, purchase_order):
        """Sets the purchase_order of this Subscription.


        :param purchase_order: The purchase_order of this Subscription.  # noqa: E501
        :type: str
        """

        self._purchase_order = purchase_order

    @property
    def affiliate_subscription_relationship(self):
        """Gets the affiliate_subscription_relationship of this Subscription.  # noqa: E501


        :return: The affiliate_subscription_relationship of this Subscription.  # noqa: E501
        :rtype: list[AffiliateSubscriptionRelationship]
        """
        return self._affiliate_subscription_relationship

    @affiliate_subscription_relationship.setter
    def affiliate_subscription_relationship(self, affiliate_subscription_relationship):
        """Sets the affiliate_subscription_relationship of this Subscription.


        :param affiliate_subscription_relationship: The affiliate_subscription_relationship of this Subscription.  # noqa: E501
        :type: list[AffiliateSubscriptionRelationship]
        """

        self._affiliate_subscription_relationship = affiliate_subscription_relationship

    @property
    def fixed_term(self):
        """Gets the fixed_term of this Subscription.  # noqa: E501


        :return: The fixed_term of this Subscription.  # noqa: E501
        :rtype: bool
        """
        return self._fixed_term

    @fixed_term.setter
    def fixed_term(self, fixed_term):
        """Sets the fixed_term of this Subscription.


        :param fixed_term: The fixed_term of this Subscription.  # noqa: E501
        :type: bool
        """

        self._fixed_term = fixed_term

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Subscription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Subscription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
