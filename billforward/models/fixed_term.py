# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FixedTerm(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'changed_by': 'str',
        'updated': 'datetime',
        'id': 'str',
        'subscription_id': 'str',
        'subscription_version_id': 'str',
        'organization_id': 'str',
        'fixed_term_definition_id': 'str',
        'fixed_term_definition': 'FixedTermDefinition',
        'expiry_behaviour': 'str',
        'periods': 'int',
        'next_product_rate_plan_id': 'str',
        'deleted': 'bool'
    }

    attribute_map = {
        'created': 'created',
        'changed_by': 'changedBy',
        'updated': 'updated',
        'id': 'id',
        'subscription_id': 'subscriptionID',
        'subscription_version_id': 'subscriptionVersionID',
        'organization_id': 'organizationID',
        'fixed_term_definition_id': 'fixedTermDefinitionID',
        'fixed_term_definition': 'fixedTermDefinition',
        'expiry_behaviour': 'expiryBehaviour',
        'periods': 'periods',
        'next_product_rate_plan_id': 'nextProductRatePlanID',
        'deleted': 'deleted'
    }

    def __init__(self, created=None, changed_by=None, updated=None, id=None, subscription_id=None, subscription_version_id=None, organization_id=None, fixed_term_definition_id=None, fixed_term_definition=None, expiry_behaviour=None, periods=None, next_product_rate_plan_id=None, deleted=None):  # noqa: E501
        """FixedTerm - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._changed_by = None
        self._updated = None
        self._id = None
        self._subscription_id = None
        self._subscription_version_id = None
        self._organization_id = None
        self._fixed_term_definition_id = None
        self._fixed_term_definition = None
        self._expiry_behaviour = None
        self._periods = None
        self._next_product_rate_plan_id = None
        self._deleted = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if changed_by is not None:
            self.changed_by = changed_by
        if updated is not None:
            self.updated = updated
        if id is not None:
            self.id = id
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if subscription_version_id is not None:
            self.subscription_version_id = subscription_version_id
        if organization_id is not None:
            self.organization_id = organization_id
        if fixed_term_definition_id is not None:
            self.fixed_term_definition_id = fixed_term_definition_id
        if fixed_term_definition is not None:
            self.fixed_term_definition = fixed_term_definition
        self.expiry_behaviour = expiry_behaviour
        if periods is not None:
            self.periods = periods
        if next_product_rate_plan_id is not None:
            self.next_product_rate_plan_id = next_product_rate_plan_id
        if deleted is not None:
            self.deleted = deleted

    @property
    def created(self):
        """Gets the created of this FixedTerm.  # noqa: E501


        :return: The created of this FixedTerm.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this FixedTerm.


        :param created: The created of this FixedTerm.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """Gets the changed_by of this FixedTerm.  # noqa: E501


        :return: The changed_by of this FixedTerm.  # noqa: E501
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """Sets the changed_by of this FixedTerm.


        :param changed_by: The changed_by of this FixedTerm.  # noqa: E501
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """Gets the updated of this FixedTerm.  # noqa: E501


        :return: The updated of this FixedTerm.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this FixedTerm.


        :param updated: The updated of this FixedTerm.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """Gets the id of this FixedTerm.  # noqa: E501


        :return: The id of this FixedTerm.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FixedTerm.


        :param id: The id of this FixedTerm.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this FixedTerm.  # noqa: E501


        :return: The subscription_id of this FixedTerm.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this FixedTerm.


        :param subscription_id: The subscription_id of this FixedTerm.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def subscription_version_id(self):
        """Gets the subscription_version_id of this FixedTerm.  # noqa: E501


        :return: The subscription_version_id of this FixedTerm.  # noqa: E501
        :rtype: str
        """
        return self._subscription_version_id

    @subscription_version_id.setter
    def subscription_version_id(self, subscription_version_id):
        """Sets the subscription_version_id of this FixedTerm.


        :param subscription_version_id: The subscription_version_id of this FixedTerm.  # noqa: E501
        :type: str
        """

        self._subscription_version_id = subscription_version_id

    @property
    def organization_id(self):
        """Gets the organization_id of this FixedTerm.  # noqa: E501


        :return: The organization_id of this FixedTerm.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this FixedTerm.


        :param organization_id: The organization_id of this FixedTerm.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def fixed_term_definition_id(self):
        """Gets the fixed_term_definition_id of this FixedTerm.  # noqa: E501


        :return: The fixed_term_definition_id of this FixedTerm.  # noqa: E501
        :rtype: str
        """
        return self._fixed_term_definition_id

    @fixed_term_definition_id.setter
    def fixed_term_definition_id(self, fixed_term_definition_id):
        """Sets the fixed_term_definition_id of this FixedTerm.


        :param fixed_term_definition_id: The fixed_term_definition_id of this FixedTerm.  # noqa: E501
        :type: str
        """

        self._fixed_term_definition_id = fixed_term_definition_id

    @property
    def fixed_term_definition(self):
        """Gets the fixed_term_definition of this FixedTerm.  # noqa: E501


        :return: The fixed_term_definition of this FixedTerm.  # noqa: E501
        :rtype: FixedTermDefinition
        """
        return self._fixed_term_definition

    @fixed_term_definition.setter
    def fixed_term_definition(self, fixed_term_definition):
        """Sets the fixed_term_definition of this FixedTerm.


        :param fixed_term_definition: The fixed_term_definition of this FixedTerm.  # noqa: E501
        :type: FixedTermDefinition
        """

        self._fixed_term_definition = fixed_term_definition

    @property
    def expiry_behaviour(self):
        """Gets the expiry_behaviour of this FixedTerm.  # noqa: E501


        :return: The expiry_behaviour of this FixedTerm.  # noqa: E501
        :rtype: str
        """
        return self._expiry_behaviour

    @expiry_behaviour.setter
    def expiry_behaviour(self, expiry_behaviour):
        """Sets the expiry_behaviour of this FixedTerm.


        :param expiry_behaviour: The expiry_behaviour of this FixedTerm.  # noqa: E501
        :type: str
        """
        if expiry_behaviour is None:
            raise ValueError("Invalid value for `expiry_behaviour`, must not be `None`")  # noqa: E501
        allowed_values = ["ExpireSubscription", "EvergreenSubscription", "RecurLatestPricing", "ChangePlan"]  # noqa: E501
        if expiry_behaviour not in allowed_values:
            raise ValueError(
                "Invalid value for `expiry_behaviour` ({0}), must be one of {1}"  # noqa: E501
                .format(expiry_behaviour, allowed_values)
            )

        self._expiry_behaviour = expiry_behaviour

    @property
    def periods(self):
        """Gets the periods of this FixedTerm.  # noqa: E501


        :return: The periods of this FixedTerm.  # noqa: E501
        :rtype: int
        """
        return self._periods

    @periods.setter
    def periods(self, periods):
        """Sets the periods of this FixedTerm.


        :param periods: The periods of this FixedTerm.  # noqa: E501
        :type: int
        """

        self._periods = periods

    @property
    def next_product_rate_plan_id(self):
        """Gets the next_product_rate_plan_id of this FixedTerm.  # noqa: E501


        :return: The next_product_rate_plan_id of this FixedTerm.  # noqa: E501
        :rtype: str
        """
        return self._next_product_rate_plan_id

    @next_product_rate_plan_id.setter
    def next_product_rate_plan_id(self, next_product_rate_plan_id):
        """Sets the next_product_rate_plan_id of this FixedTerm.


        :param next_product_rate_plan_id: The next_product_rate_plan_id of this FixedTerm.  # noqa: E501
        :type: str
        """

        self._next_product_rate_plan_id = next_product_rate_plan_id

    @property
    def deleted(self):
        """Gets the deleted of this FixedTerm.  # noqa: E501


        :return: The deleted of this FixedTerm.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this FixedTerm.


        :param deleted: The deleted of this FixedTerm.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FixedTerm, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FixedTerm):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
