# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class FixedTerm(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, changed_by=None, updated=None, id=None, subscription_id=None, organization_id=None, fixed_term_definition_id=None, fixed_term_definition=None, expiry_behaviour=None, state=None, product_rate_plan_as_of_time=None, compound_uplift=None, start_time=None, expiry_time=None, periods=None, fixed_term_number=None, deleted=False):
        """
        FixedTerm - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'changed_by': 'str',
            'updated': 'datetime',
            'id': 'str',
            'subscription_id': 'str',
            'organization_id': 'str',
            'fixed_term_definition_id': 'str',
            'fixed_term_definition': 'MutableBillingEntity',
            'expiry_behaviour': 'str',
            'state': 'str',
            'product_rate_plan_as_of_time': 'datetime',
            'compound_uplift': 'float',
            'start_time': 'datetime',
            'expiry_time': 'datetime',
            'periods': 'int',
            'fixed_term_number': 'int',
            'deleted': 'bool'
        }

        self.attribute_map = {
            'created': 'created',
            'changed_by': 'changedBy',
            'updated': 'updated',
            'id': 'id',
            'subscription_id': 'subscriptionID',
            'organization_id': 'organizationID',
            'fixed_term_definition_id': 'fixedTermDefinitionID',
            'fixed_term_definition': 'fixedTermDefinition',
            'expiry_behaviour': 'expiryBehaviour',
            'state': 'state',
            'product_rate_plan_as_of_time': 'productRatePlanAsOfTime',
            'compound_uplift': 'compoundUplift',
            'start_time': 'startTime',
            'expiry_time': 'expiryTime',
            'periods': 'periods',
            'fixed_term_number': 'fixedTermNumber',
            'deleted': 'deleted'
        }

        self._created = created
        self._changed_by = changed_by
        self._updated = updated
        self._id = id
        self._subscription_id = subscription_id
        self._organization_id = organization_id
        self._fixed_term_definition_id = fixed_term_definition_id
        self._fixed_term_definition = fixed_term_definition
        self._expiry_behaviour = expiry_behaviour
        self._state = state
        self._product_rate_plan_as_of_time = product_rate_plan_as_of_time
        self._compound_uplift = compound_uplift
        self._start_time = start_time
        self._expiry_time = expiry_time
        self._periods = periods
        self._fixed_term_number = fixed_term_number
        self._deleted = deleted

    @property
    def created(self):
        """
        Gets the created of this FixedTerm.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this FixedTerm.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this FixedTerm.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this FixedTerm.
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """
        Gets the changed_by of this FixedTerm.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :return: The changed_by of this FixedTerm.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """
        Sets the changed_by of this FixedTerm.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :param changed_by: The changed_by of this FixedTerm.
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """
        Gets the updated of this FixedTerm.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :return: The updated of this FixedTerm.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this FixedTerm.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :param updated: The updated of this FixedTerm.
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """
        Gets the id of this FixedTerm.
        id

        :return: The id of this FixedTerm.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this FixedTerm.
        id

        :param id: The id of this FixedTerm.
        :type: str
        """

        self._id = id

    @property
    def subscription_id(self):
        """
        Gets the subscription_id of this FixedTerm.
        { \"description\" : \"subscriptionID\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The subscription_id of this FixedTerm.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """
        Sets the subscription_id of this FixedTerm.
        { \"description\" : \"subscriptionID\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param subscription_id: The subscription_id of this FixedTerm.
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def organization_id(self):
        """
        Gets the organization_id of this FixedTerm.
        { \"description\" : \"The ID of the organization associated with the amendment.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The organization_id of this FixedTerm.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this FixedTerm.
        { \"description\" : \"The ID of the organization associated with the amendment.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param organization_id: The organization_id of this FixedTerm.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def fixed_term_definition_id(self):
        """
        Gets the fixed_term_definition_id of this FixedTerm.
        { \"description\" : \"fixedTermDefinitionID\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The fixed_term_definition_id of this FixedTerm.
        :rtype: str
        """
        return self._fixed_term_definition_id

    @fixed_term_definition_id.setter
    def fixed_term_definition_id(self, fixed_term_definition_id):
        """
        Sets the fixed_term_definition_id of this FixedTerm.
        { \"description\" : \"fixedTermDefinitionID\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param fixed_term_definition_id: The fixed_term_definition_id of this FixedTerm.
        :type: str
        """

        self._fixed_term_definition_id = fixed_term_definition_id

    @property
    def fixed_term_definition(self):
        """
        Gets the fixed_term_definition of this FixedTerm.


        :return: The fixed_term_definition of this FixedTerm.
        :rtype: MutableBillingEntity
        """
        return self._fixed_term_definition

    @fixed_term_definition.setter
    def fixed_term_definition(self, fixed_term_definition):
        """
        Sets the fixed_term_definition of this FixedTerm.


        :param fixed_term_definition: The fixed_term_definition of this FixedTerm.
        :type: MutableBillingEntity
        """

        self._fixed_term_definition = fixed_term_definition

    @property
    def expiry_behaviour(self):
        """
        Gets the expiry_behaviour of this FixedTerm.
        fixedTermExpiryBehaviour

        :return: The expiry_behaviour of this FixedTerm.
        :rtype: str
        """
        return self._expiry_behaviour

    @expiry_behaviour.setter
    def expiry_behaviour(self, expiry_behaviour):
        """
        Sets the expiry_behaviour of this FixedTerm.
        fixedTermExpiryBehaviour

        :param expiry_behaviour: The expiry_behaviour of this FixedTerm.
        :type: str
        """
        allowed_values = ["ExpireSubscription", "EvergreenSubscription", "RecurUplift", "RecurLatestPricing"]
        if expiry_behaviour not in allowed_values:
            raise ValueError(
                "Invalid value for `expiry_behaviour` ({0}), must be one of {1}"
                .format(expiry_behaviour, allowed_values)
            )

        self._expiry_behaviour = expiry_behaviour

    @property
    def state(self):
        """
        Gets the state of this FixedTerm.
        state

        :return: The state of this FixedTerm.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this FixedTerm.
        state

        :param state: The state of this FixedTerm.
        :type: str
        """
        allowed_values = ["NeedsAmendments", "Active", "Expired"]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def product_rate_plan_as_of_time(self):
        """
        Gets the product_rate_plan_as_of_time of this FixedTerm.
        productRatePlanAsOfTime

        :return: The product_rate_plan_as_of_time of this FixedTerm.
        :rtype: datetime
        """
        return self._product_rate_plan_as_of_time

    @product_rate_plan_as_of_time.setter
    def product_rate_plan_as_of_time(self, product_rate_plan_as_of_time):
        """
        Sets the product_rate_plan_as_of_time of this FixedTerm.
        productRatePlanAsOfTime

        :param product_rate_plan_as_of_time: The product_rate_plan_as_of_time of this FixedTerm.
        :type: datetime
        """

        self._product_rate_plan_as_of_time = product_rate_plan_as_of_time

    @property
    def compound_uplift(self):
        """
        Gets the compound_uplift of this FixedTerm.
        { \"description\" : \"compoundUplift\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }The proportional INCREASE in price applied every time the fixed terms recur. e.g. 0.03 is a 3% increase. -0.5 is a 50% decrease. 3 is a 300% increase

        :return: The compound_uplift of this FixedTerm.
        :rtype: float
        """
        return self._compound_uplift

    @compound_uplift.setter
    def compound_uplift(self, compound_uplift):
        """
        Sets the compound_uplift of this FixedTerm.
        { \"description\" : \"compoundUplift\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }The proportional INCREASE in price applied every time the fixed terms recur. e.g. 0.03 is a 3% increase. -0.5 is a 50% decrease. 3 is a 300% increase

        :param compound_uplift: The compound_uplift of this FixedTerm.
        :type: float
        """

        self._compound_uplift = compound_uplift

    @property
    def start_time(self):
        """
        Gets the start_time of this FixedTerm.
        start_time

        :return: The start_time of this FixedTerm.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this FixedTerm.
        start_time

        :param start_time: The start_time of this FixedTerm.
        :type: datetime
        """

        self._start_time = start_time

    @property
    def expiry_time(self):
        """
        Gets the expiry_time of this FixedTerm.
        expiry_time

        :return: The expiry_time of this FixedTerm.
        :rtype: datetime
        """
        return self._expiry_time

    @expiry_time.setter
    def expiry_time(self, expiry_time):
        """
        Sets the expiry_time of this FixedTerm.
        expiry_time

        :param expiry_time: The expiry_time of this FixedTerm.
        :type: datetime
        """

        self._expiry_time = expiry_time

    @property
    def periods(self):
        """
        Gets the periods of this FixedTerm.
        { \"description\" : \"The number of billing periods that this fixed term lasts for.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The periods of this FixedTerm.
        :rtype: int
        """
        return self._periods

    @periods.setter
    def periods(self, periods):
        """
        Sets the periods of this FixedTerm.
        { \"description\" : \"The number of billing periods that this fixed term lasts for.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param periods: The periods of this FixedTerm.
        :type: int
        """

        self._periods = periods

    @property
    def fixed_term_number(self):
        """
        Gets the fixed_term_number of this FixedTerm.
        { \"description\" : \"The number of sequential fixed terms previous to this one for the subscription (i.e. zero indexed 'fixedTermCount').\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The fixed_term_number of this FixedTerm.
        :rtype: int
        """
        return self._fixed_term_number

    @fixed_term_number.setter
    def fixed_term_number(self, fixed_term_number):
        """
        Sets the fixed_term_number of this FixedTerm.
        { \"description\" : \"The number of sequential fixed terms previous to this one for the subscription (i.e. zero indexed 'fixedTermCount').\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param fixed_term_number: The fixed_term_number of this FixedTerm.
        :type: int
        """

        self._fixed_term_number = fixed_term_number

    @property
    def deleted(self):
        """
        Gets the deleted of this FixedTerm.
        { \"description\" : \"Is the fixedTerm deleted.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The deleted of this FixedTerm.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """
        Sets the deleted of this FixedTerm.
        { \"description\" : \"Is the fixedTerm deleted.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param deleted: The deleted of this FixedTerm.
        :type: bool
        """

        self._deleted = deleted

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
