# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Organization(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, changed_by=None, updated=None, id=None, customer_code=None, name=None, deleted=False, webhooks=None, alias=None, clients=None, dunning_lines=None, taxation_strategies=None, organization_gateways=None, api_configurations=None):
        """
        Organization - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'changed_by': 'str',
            'updated': 'datetime',
            'id': 'str',
            'customer_code': 'str',
            'name': 'str',
            'deleted': 'bool',
            'webhooks': 'list[MutableBillingEntity]',
            'alias': 'list[Alias]',
            'clients': 'list[Client]',
            'dunning_lines': 'list[DunningLine]',
            'taxation_strategies': 'list[MutableBillingEntity]',
            'organization_gateways': 'list[MutableBillingEntity]',
            'api_configurations': 'list[MutableBillingEntity]'
        }

        self.attribute_map = {
            'created': 'created',
            'changed_by': 'changedBy',
            'updated': 'updated',
            'id': 'id',
            'customer_code': 'customerCode',
            'name': 'name',
            'deleted': 'deleted',
            'webhooks': 'webhooks',
            'alias': 'alias',
            'clients': 'clients',
            'dunning_lines': 'dunningLines',
            'taxation_strategies': 'taxationStrategies',
            'organization_gateways': 'organizationGateways',
            'api_configurations': 'apiConfigurations'
        }

        self._created = created
        self._changed_by = changed_by
        self._updated = updated
        self._id = id
        self._customer_code = customer_code
        self._name = name
        self._deleted = deleted
        self._webhooks = webhooks
        self._alias = alias
        self._clients = clients
        self._dunning_lines = dunning_lines
        self._taxation_strategies = taxation_strategies
        self._organization_gateways = organization_gateways
        self._api_configurations = api_configurations

    @property
    def created(self):
        """
        Gets the created of this Organization.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this Organization.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this Organization.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this Organization.
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """
        Gets the changed_by of this Organization.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :return: The changed_by of this Organization.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """
        Sets the changed_by of this Organization.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :param changed_by: The changed_by of this Organization.
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """
        Gets the updated of this Organization.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :return: The updated of this Organization.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this Organization.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :param updated: The updated of this Organization.
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """
        Gets the id of this Organization.
        { \"description\" : \"ID of the organization.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The id of this Organization.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Organization.
        { \"description\" : \"ID of the organization.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param id: The id of this Organization.
        :type: str
        """

        self._id = id

    @property
    def customer_code(self):
        """
        Gets the customer_code of this Organization.
        { \"description\" : \"A shortcode for the organization. This is used as a short reference code for use when referring to the organization, by default this is set to the organizations name.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The customer_code of this Organization.
        :rtype: str
        """
        return self._customer_code

    @customer_code.setter
    def customer_code(self, customer_code):
        """
        Sets the customer_code of this Organization.
        { \"description\" : \"A shortcode for the organization. This is used as a short reference code for use when referring to the organization, by default this is set to the organizations name.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param customer_code: The customer_code of this Organization.
        :type: str
        """

        self._customer_code = customer_code

    @property
    def name(self):
        """
        Gets the name of this Organization.
        { \"description\" : \"The name of the organization.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The name of this Organization.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Organization.
        { \"description\" : \"The name of the organization.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param name: The name of this Organization.
        :type: str
        """

        self._name = name

    @property
    def deleted(self):
        """
        Gets the deleted of this Organization.
        { \"description\" : \"Indicates if an organization has been retired. If an organization has been retired it can still be retrieved using the appropriate flag on API requests.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The deleted of this Organization.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """
        Sets the deleted of this Organization.
        { \"description\" : \"Indicates if an organization has been retired. If an organization has been retired it can still be retrieved using the appropriate flag on API requests.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param deleted: The deleted of this Organization.
        :type: bool
        """

        self._deleted = deleted

    @property
    def webhooks(self):
        """
        Gets the webhooks of this Organization.
        { \"description\" : \"The WebHooks associated with the organization. These are the end-points where notifications are sent. WebHooks are added, updated and removed from the organization. Thus to add a WebHook, the webhook must be defined on this property of the organization and then the organization updated. To update a WebHook the same procedure must be followed, first retrieving the organization followed by updating the appropriate WebHook, finally the organization is updated.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The webhooks of this Organization.
        :rtype: list[MutableBillingEntity]
        """
        return self._webhooks

    @webhooks.setter
    def webhooks(self, webhooks):
        """
        Sets the webhooks of this Organization.
        { \"description\" : \"The WebHooks associated with the organization. These are the end-points where notifications are sent. WebHooks are added, updated and removed from the organization. Thus to add a WebHook, the webhook must be defined on this property of the organization and then the organization updated. To update a WebHook the same procedure must be followed, first retrieving the organization followed by updating the appropriate WebHook, finally the organization is updated.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param webhooks: The webhooks of this Organization.
        :type: list[MutableBillingEntity]
        """

        self._webhooks = webhooks

    @property
    def alias(self):
        """
        Gets the alias of this Organization.


        :return: The alias of this Organization.
        :rtype: list[Alias]
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """
        Sets the alias of this Organization.


        :param alias: The alias of this Organization.
        :type: list[Alias]
        """

        self._alias = alias

    @property
    def clients(self):
        """
        Gets the clients of this Organization.
        { \"description\" : \"The OAuth2 clients associated with the organization. In most cases an organization would not have any clients associated with their account. In the case of an APP developer, a clients would exist per an application they have developed. To further understand clients please see the client, OAuth2 API and APP development documentation.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The clients of this Organization.
        :rtype: list[Client]
        """
        return self._clients

    @clients.setter
    def clients(self, clients):
        """
        Sets the clients of this Organization.
        { \"description\" : \"The OAuth2 clients associated with the organization. In most cases an organization would not have any clients associated with their account. In the case of an APP developer, a clients would exist per an application they have developed. To further understand clients please see the client, OAuth2 API and APP development documentation.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param clients: The clients of this Organization.
        :type: list[Client]
        """

        self._clients = clients

    @property
    def dunning_lines(self):
        """
        Gets the dunning_lines of this Organization.
        { \"description\" : \"The dunning-lines associated with the organization. Dunning lines are used as re-try logic for invoices to attempt to reconcile the payment.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The dunning_lines of this Organization.
        :rtype: list[DunningLine]
        """
        return self._dunning_lines

    @dunning_lines.setter
    def dunning_lines(self, dunning_lines):
        """
        Sets the dunning_lines of this Organization.
        { \"description\" : \"The dunning-lines associated with the organization. Dunning lines are used as re-try logic for invoices to attempt to reconcile the payment.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param dunning_lines: The dunning_lines of this Organization.
        :type: list[DunningLine]
        """

        self._dunning_lines = dunning_lines

    @property
    def taxation_strategies(self):
        """
        Gets the taxation_strategies of this Organization.
        { \"description\" : \"The taxation-strategies associated with the organization. Taxation-strategies may be linked to product-rate-plans to specify how their tax should be calculated.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The taxation_strategies of this Organization.
        :rtype: list[MutableBillingEntity]
        """
        return self._taxation_strategies

    @taxation_strategies.setter
    def taxation_strategies(self, taxation_strategies):
        """
        Sets the taxation_strategies of this Organization.
        { \"description\" : \"The taxation-strategies associated with the organization. Taxation-strategies may be linked to product-rate-plans to specify how their tax should be calculated.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param taxation_strategies: The taxation_strategies of this Organization.
        :type: list[MutableBillingEntity]
        """

        self._taxation_strategies = taxation_strategies

    @property
    def organization_gateways(self):
        """
        Gets the organization_gateways of this Organization.
        { \"description\" : \"The card-vault gateways associated with the organization.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The organization_gateways of this Organization.
        :rtype: list[MutableBillingEntity]
        """
        return self._organization_gateways

    @organization_gateways.setter
    def organization_gateways(self, organization_gateways):
        """
        Sets the organization_gateways of this Organization.
        { \"description\" : \"The card-vault gateways associated with the organization.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param organization_gateways: The organization_gateways of this Organization.
        :type: list[MutableBillingEntity]
        """

        self._organization_gateways = organization_gateways

    @property
    def api_configurations(self):
        """
        Gets the api_configurations of this Organization.
        { \"description\" : \"Stores the organizations 3rd party API keys which may be used by the system for payment gateway integration etc.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The api_configurations of this Organization.
        :rtype: list[MutableBillingEntity]
        """
        return self._api_configurations

    @api_configurations.setter
    def api_configurations(self, api_configurations):
        """
        Sets the api_configurations of this Organization.
        { \"description\" : \"Stores the organizations 3rd party API keys which may be used by the system for payment gateway integration etc.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param api_configurations: The api_configurations of this Organization.
        :type: list[MutableBillingEntity]
        """

        self._api_configurations = api_configurations

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
