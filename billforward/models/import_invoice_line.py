# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ImportInvoiceLine(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'calculation': 'str',
        'pricing_component': 'str',
        'organization_id': 'str',
        'cost': 'float',
        'tax': 'float',
        'period_start': 'datetime',
        'period_end': 'datetime'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'calculation': 'calculation',
        'pricing_component': 'pricingComponent',
        'organization_id': 'organizationID',
        'cost': 'cost',
        'tax': 'tax',
        'period_start': 'periodStart',
        'period_end': 'periodEnd'
    }

    def __init__(self, name=None, description=None, calculation=None, pricing_component=None, organization_id=None, cost=None, tax=None, period_start=None, period_end=None):  # noqa: E501
        """ImportInvoiceLine - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._calculation = None
        self._pricing_component = None
        self._organization_id = None
        self._cost = None
        self._tax = None
        self._period_start = None
        self._period_end = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if calculation is not None:
            self.calculation = calculation
        if pricing_component is not None:
            self.pricing_component = pricing_component
        if organization_id is not None:
            self.organization_id = organization_id
        if cost is not None:
            self.cost = cost
        if tax is not None:
            self.tax = tax
        if period_start is not None:
            self.period_start = period_start
        if period_end is not None:
            self.period_end = period_end

    @property
    def name(self):
        """Gets the name of this ImportInvoiceLine.  # noqa: E501


        :return: The name of this ImportInvoiceLine.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImportInvoiceLine.


        :param name: The name of this ImportInvoiceLine.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ImportInvoiceLine.  # noqa: E501


        :return: The description of this ImportInvoiceLine.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ImportInvoiceLine.


        :param description: The description of this ImportInvoiceLine.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def calculation(self):
        """Gets the calculation of this ImportInvoiceLine.  # noqa: E501


        :return: The calculation of this ImportInvoiceLine.  # noqa: E501
        :rtype: str
        """
        return self._calculation

    @calculation.setter
    def calculation(self, calculation):
        """Sets the calculation of this ImportInvoiceLine.


        :param calculation: The calculation of this ImportInvoiceLine.  # noqa: E501
        :type: str
        """

        self._calculation = calculation

    @property
    def pricing_component(self):
        """Gets the pricing_component of this ImportInvoiceLine.  # noqa: E501


        :return: The pricing_component of this ImportInvoiceLine.  # noqa: E501
        :rtype: str
        """
        return self._pricing_component

    @pricing_component.setter
    def pricing_component(self, pricing_component):
        """Sets the pricing_component of this ImportInvoiceLine.


        :param pricing_component: The pricing_component of this ImportInvoiceLine.  # noqa: E501
        :type: str
        """

        self._pricing_component = pricing_component

    @property
    def organization_id(self):
        """Gets the organization_id of this ImportInvoiceLine.  # noqa: E501


        :return: The organization_id of this ImportInvoiceLine.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this ImportInvoiceLine.


        :param organization_id: The organization_id of this ImportInvoiceLine.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def cost(self):
        """Gets the cost of this ImportInvoiceLine.  # noqa: E501


        :return: The cost of this ImportInvoiceLine.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this ImportInvoiceLine.


        :param cost: The cost of this ImportInvoiceLine.  # noqa: E501
        :type: float
        """

        self._cost = cost

    @property
    def tax(self):
        """Gets the tax of this ImportInvoiceLine.  # noqa: E501


        :return: The tax of this ImportInvoiceLine.  # noqa: E501
        :rtype: float
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this ImportInvoiceLine.


        :param tax: The tax of this ImportInvoiceLine.  # noqa: E501
        :type: float
        """

        self._tax = tax

    @property
    def period_start(self):
        """Gets the period_start of this ImportInvoiceLine.  # noqa: E501


        :return: The period_start of this ImportInvoiceLine.  # noqa: E501
        :rtype: datetime
        """
        return self._period_start

    @period_start.setter
    def period_start(self, period_start):
        """Sets the period_start of this ImportInvoiceLine.


        :param period_start: The period_start of this ImportInvoiceLine.  # noqa: E501
        :type: datetime
        """

        self._period_start = period_start

    @property
    def period_end(self):
        """Gets the period_end of this ImportInvoiceLine.  # noqa: E501


        :return: The period_end of this ImportInvoiceLine.  # noqa: E501
        :rtype: datetime
        """
        return self._period_end

    @period_end.setter
    def period_end(self, period_end):
        """Sets the period_end of this ImportInvoiceLine.


        :param period_end: The period_end of this ImportInvoiceLine.  # noqa: E501
        :type: datetime
        """

        self._period_end = period_end

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportInvoiceLine, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportInvoiceLine):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
