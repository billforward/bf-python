# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AddChargeResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'request': 'AddChargeRequest',
        'charges': 'list[SubscriptionCharge]',
        'invoice': 'Invoice',
        'organization_id': 'str'
    }

    attribute_map = {
        'created': 'created',
        'request': 'request',
        'charges': 'charges',
        'invoice': 'invoice',
        'organization_id': 'organizationID'
    }

    def __init__(self, created=None, request=None, charges=None, invoice=None, organization_id=None):  # noqa: E501
        """AddChargeResponse - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._request = None
        self._charges = None
        self._invoice = None
        self._organization_id = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if request is not None:
            self.request = request
        if charges is not None:
            self.charges = charges
        if invoice is not None:
            self.invoice = invoice
        if organization_id is not None:
            self.organization_id = organization_id

    @property
    def created(self):
        """Gets the created of this AddChargeResponse.  # noqa: E501


        :return: The created of this AddChargeResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this AddChargeResponse.


        :param created: The created of this AddChargeResponse.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def request(self):
        """Gets the request of this AddChargeResponse.  # noqa: E501


        :return: The request of this AddChargeResponse.  # noqa: E501
        :rtype: AddChargeRequest
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this AddChargeResponse.


        :param request: The request of this AddChargeResponse.  # noqa: E501
        :type: AddChargeRequest
        """

        self._request = request

    @property
    def charges(self):
        """Gets the charges of this AddChargeResponse.  # noqa: E501


        :return: The charges of this AddChargeResponse.  # noqa: E501
        :rtype: list[SubscriptionCharge]
        """
        return self._charges

    @charges.setter
    def charges(self, charges):
        """Sets the charges of this AddChargeResponse.


        :param charges: The charges of this AddChargeResponse.  # noqa: E501
        :type: list[SubscriptionCharge]
        """

        self._charges = charges

    @property
    def invoice(self):
        """Gets the invoice of this AddChargeResponse.  # noqa: E501


        :return: The invoice of this AddChargeResponse.  # noqa: E501
        :rtype: Invoice
        """
        return self._invoice

    @invoice.setter
    def invoice(self, invoice):
        """Sets the invoice of this AddChargeResponse.


        :param invoice: The invoice of this AddChargeResponse.  # noqa: E501
        :type: Invoice
        """

        self._invoice = invoice

    @property
    def organization_id(self):
        """Gets the organization_id of this AddChargeResponse.  # noqa: E501


        :return: The organization_id of this AddChargeResponse.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this AddChargeResponse.


        :param organization_id: The organization_id of this AddChargeResponse.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddChargeResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddChargeResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
