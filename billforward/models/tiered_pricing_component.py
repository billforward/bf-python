# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class TieredPricingComponent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, changed_by=None, updated=None, type=None, version_id=None, crm_id=None, id=None, product_rate_plan_id=None, unit_of_measure_id=None, organization_id=None, name=None, public_name=None, description=None, charge_type=None, invoicing_type=None, charge_model=None, upgrade_mode=None, downgrade_mode=None, default_quantity=None, min_quantity=None, max_quantity=None, valid_from=None, valid_till=None, tiers=None, unit_of_measure=None):
        """
        TieredPricingComponent - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'changed_by': 'str',
            'updated': 'datetime',
            'type': 'str',
            'version_id': 'str',
            'crm_id': 'str',
            'id': 'str',
            'product_rate_plan_id': 'str',
            'unit_of_measure_id': 'str',
            'organization_id': 'str',
            'name': 'str',
            'public_name': 'str',
            'description': 'str',
            'charge_type': 'str',
            'invoicing_type': 'str',
            'charge_model': 'str',
            'upgrade_mode': 'str',
            'downgrade_mode': 'str',
            'default_quantity': 'int',
            'min_quantity': 'int',
            'max_quantity': 'int',
            'valid_from': 'datetime',
            'valid_till': 'datetime',
            'tiers': 'list[PricingComponentTier]',
            'unit_of_measure': 'UnitOfMeasure'
        }

        self.attribute_map = {
            'created': 'created',
            'changed_by': 'changedBy',
            'updated': 'updated',
            'type': '@type',
            'version_id': 'versionID',
            'crm_id': 'crmID',
            'id': 'id',
            'product_rate_plan_id': 'productRatePlanID',
            'unit_of_measure_id': 'unitOfMeasureID',
            'organization_id': 'organizationID',
            'name': 'name',
            'public_name': 'publicName',
            'description': 'description',
            'charge_type': 'chargeType',
            'invoicing_type': 'invoicingType',
            'charge_model': 'chargeModel',
            'upgrade_mode': 'upgradeMode',
            'downgrade_mode': 'downgradeMode',
            'default_quantity': 'defaultQuantity',
            'min_quantity': 'minQuantity',
            'max_quantity': 'maxQuantity',
            'valid_from': 'validFrom',
            'valid_till': 'validTill',
            'tiers': 'tiers',
            'unit_of_measure': 'unitOfMeasure'
        }

        self._created = created
        self._changed_by = changed_by
        self._updated = updated
        self._type = type
        self._version_id = version_id
        self._crm_id = crm_id
        self._id = id
        self._product_rate_plan_id = product_rate_plan_id
        self._unit_of_measure_id = unit_of_measure_id
        self._organization_id = organization_id
        self._name = name
        self._public_name = public_name
        self._description = description
        self._charge_type = charge_type
        self._invoicing_type = invoicing_type
        self._charge_model = charge_model
        self._upgrade_mode = upgrade_mode
        self._downgrade_mode = downgrade_mode
        self._default_quantity = default_quantity
        self._min_quantity = min_quantity
        self._max_quantity = max_quantity
        self._valid_from = valid_from
        self._valid_till = valid_till
        self._tiers = tiers
        self._unit_of_measure = unit_of_measure

    @property
    def created(self):
        """
        Gets the created of this TieredPricingComponent.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this TieredPricingComponent.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this TieredPricingComponent.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this TieredPricingComponent.
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """
        Gets the changed_by of this TieredPricingComponent.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :return: The changed_by of this TieredPricingComponent.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """
        Sets the changed_by of this TieredPricingComponent.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :param changed_by: The changed_by of this TieredPricingComponent.
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """
        Gets the updated of this TieredPricingComponent.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :return: The updated of this TieredPricingComponent.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this TieredPricingComponent.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :param updated: The updated of this TieredPricingComponent.
        :type: datetime
        """

        self._updated = updated

    @property
    def type(self):
        """
        Gets the type of this TieredPricingComponent.
        { \"description\" : \"\", \"default\" : \"\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The type of this TieredPricingComponent.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this TieredPricingComponent.
        { \"description\" : \"\", \"default\" : \"\", \"verbs\":[\"POST\",\"GET\"] }

        :param type: The type of this TieredPricingComponent.
        :type: str
        """
        allowed_values = ["tieredPricingComponent", "flatPricingComponent", "tieredVolumePricingComponent"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def version_id(self):
        """
        Gets the version_id of this TieredPricingComponent.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :return: The version_id of this TieredPricingComponent.
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """
        Sets the version_id of this TieredPricingComponent.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :param version_id: The version_id of this TieredPricingComponent.
        :type: str
        """

        self._version_id = version_id

    @property
    def crm_id(self):
        """
        Gets the crm_id of this TieredPricingComponent.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The crm_id of this TieredPricingComponent.
        :rtype: str
        """
        return self._crm_id

    @crm_id.setter
    def crm_id(self, crm_id):
        """
        Sets the crm_id of this TieredPricingComponent.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param crm_id: The crm_id of this TieredPricingComponent.
        :type: str
        """

        self._crm_id = crm_id

    @property
    def id(self):
        """
        Gets the id of this TieredPricingComponent.
        { \"description\" : \"\", \"verbs\":[\"GET\"] } When associating a pricing component with a product rate plan, this ID should be used.

        :return: The id of this TieredPricingComponent.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this TieredPricingComponent.
        { \"description\" : \"\", \"verbs\":[\"GET\"] } When associating a pricing component with a product rate plan, this ID should be used.

        :param id: The id of this TieredPricingComponent.
        :type: str
        """

        self._id = id

    @property
    def product_rate_plan_id(self):
        """
        Gets the product_rate_plan_id of this TieredPricingComponent.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The product_rate_plan_id of this TieredPricingComponent.
        :rtype: str
        """
        return self._product_rate_plan_id

    @product_rate_plan_id.setter
    def product_rate_plan_id(self, product_rate_plan_id):
        """
        Sets the product_rate_plan_id of this TieredPricingComponent.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param product_rate_plan_id: The product_rate_plan_id of this TieredPricingComponent.
        :type: str
        """

        self._product_rate_plan_id = product_rate_plan_id

    @property
    def unit_of_measure_id(self):
        """
        Gets the unit_of_measure_id of this TieredPricingComponent.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The unit_of_measure_id of this TieredPricingComponent.
        :rtype: str
        """
        return self._unit_of_measure_id

    @unit_of_measure_id.setter
    def unit_of_measure_id(self, unit_of_measure_id):
        """
        Sets the unit_of_measure_id of this TieredPricingComponent.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param unit_of_measure_id: The unit_of_measure_id of this TieredPricingComponent.
        :type: str
        """

        self._unit_of_measure_id = unit_of_measure_id

    @property
    def organization_id(self):
        """
        Gets the organization_id of this TieredPricingComponent.
        { \"description\" : \"\", \"verbs\":[] }

        :return: The organization_id of this TieredPricingComponent.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this TieredPricingComponent.
        { \"description\" : \"\", \"verbs\":[] }

        :param organization_id: The organization_id of this TieredPricingComponent.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def name(self):
        """
        Gets the name of this TieredPricingComponent.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The name of this TieredPricingComponent.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this TieredPricingComponent.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param name: The name of this TieredPricingComponent.
        :type: str
        """

        self._name = name

    @property
    def public_name(self):
        """
        Gets the public_name of this TieredPricingComponent.
        {\"description\":\"A friendly non-unique name used to identify this pricing-component\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :return: The public_name of this TieredPricingComponent.
        :rtype: str
        """
        return self._public_name

    @public_name.setter
    def public_name(self, public_name):
        """
        Sets the public_name of this TieredPricingComponent.
        {\"description\":\"A friendly non-unique name used to identify this pricing-component\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :param public_name: The public_name of this TieredPricingComponent.
        :type: str
        """

        self._public_name = public_name

    @property
    def description(self):
        """
        Gets the description of this TieredPricingComponent.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The description of this TieredPricingComponent.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this TieredPricingComponent.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param description: The description of this TieredPricingComponent.
        :type: str
        """

        self._description = description

    @property
    def charge_type(self):
        """
        Gets the charge_type of this TieredPricingComponent.
        { \"description\" : \"The charge type of the pricing-component.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The charge_type of this TieredPricingComponent.
        :rtype: str
        """
        return self._charge_type

    @charge_type.setter
    def charge_type(self, charge_type):
        """
        Sets the charge_type of this TieredPricingComponent.
        { \"description\" : \"The charge type of the pricing-component.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param charge_type: The charge_type of this TieredPricingComponent.
        :type: str
        """
        allowed_values = ["setup", "subscription", "arrears", "usage"]
        if charge_type not in allowed_values:
            raise ValueError(
                "Invalid value for `charge_type` ({0}), must be one of {1}"
                .format(charge_type, allowed_values)
            )

        self._charge_type = charge_type

    @property
    def invoicing_type(self):
        """
        Gets the invoicing_type of this TieredPricingComponent.
        { \"default\" : \"Aggregated\",  \"description\" : \"For <span class=\\\"label label-default\\\">setup</span> pricing components <span class=\\\"label label-default\\\">Immediate</span> invoicing will result in an invoice being issued on subscription being set to the AwaitingPayment state, irrespective of the subscription start date. <span class=\\\"label label-default\\\">Aggregated</span> invoicing will add a charge to the first invoice of the subscription.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The invoicing_type of this TieredPricingComponent.
        :rtype: str
        """
        return self._invoicing_type

    @invoicing_type.setter
    def invoicing_type(self, invoicing_type):
        """
        Sets the invoicing_type of this TieredPricingComponent.
        { \"default\" : \"Aggregated\",  \"description\" : \"For <span class=\\\"label label-default\\\">setup</span> pricing components <span class=\\\"label label-default\\\">Immediate</span> invoicing will result in an invoice being issued on subscription being set to the AwaitingPayment state, irrespective of the subscription start date. <span class=\\\"label label-default\\\">Aggregated</span> invoicing will add a charge to the first invoice of the subscription.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param invoicing_type: The invoicing_type of this TieredPricingComponent.
        :type: str
        """
        allowed_values = ["Immediate", "Aggregated"]
        if invoicing_type not in allowed_values:
            raise ValueError(
                "Invalid value for `invoicing_type` ({0}), must be one of {1}"
                .format(invoicing_type, allowed_values)
            )

        self._invoicing_type = invoicing_type

    @property
    def charge_model(self):
        """
        Gets the charge_model of this TieredPricingComponent.
        { \"description\" : \"The charge model of the pricing-component.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The charge_model of this TieredPricingComponent.
        :rtype: str
        """
        return self._charge_model

    @charge_model.setter
    def charge_model(self, charge_model):
        """
        Sets the charge_model of this TieredPricingComponent.
        { \"description\" : \"The charge model of the pricing-component.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param charge_model: The charge_model of this TieredPricingComponent.
        :type: str
        """
        allowed_values = ["flat", "tiered", "tiered_volume"]
        if charge_model not in allowed_values:
            raise ValueError(
                "Invalid value for `charge_model` ({0}), must be one of {1}"
                .format(charge_model, allowed_values)
            )

        self._charge_model = charge_model

    @property
    def upgrade_mode(self):
        """
        Gets the upgrade_mode of this TieredPricingComponent.
        {\"default\":\"<span class=\\\"label label-default\\\">immediate</span>\",\"description\":\"Default behaviour when a value is upgraded using this pricing component, this behaviour can be overridden when changing the value.<br><span class=\\\"label label-default\\\">immediate</span> &mdash; Upgrade will apply at the time the request is made.<br><span class=\\\"label label-default\\\">delayed</span> &mdash; Upgrade will apply at the end of the current billing cycle.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The upgrade_mode of this TieredPricingComponent.
        :rtype: str
        """
        return self._upgrade_mode

    @upgrade_mode.setter
    def upgrade_mode(self, upgrade_mode):
        """
        Sets the upgrade_mode of this TieredPricingComponent.
        {\"default\":\"<span class=\\\"label label-default\\\">immediate</span>\",\"description\":\"Default behaviour when a value is upgraded using this pricing component, this behaviour can be overridden when changing the value.<br><span class=\\\"label label-default\\\">immediate</span> &mdash; Upgrade will apply at the time the request is made.<br><span class=\\\"label label-default\\\">delayed</span> &mdash; Upgrade will apply at the end of the current billing cycle.\",\"verbs\":[\"POST\",\"GET\"]}

        :param upgrade_mode: The upgrade_mode of this TieredPricingComponent.
        :type: str
        """
        allowed_values = ["immediate", "delayed"]
        if upgrade_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `upgrade_mode` ({0}), must be one of {1}"
                .format(upgrade_mode, allowed_values)
            )

        self._upgrade_mode = upgrade_mode

    @property
    def downgrade_mode(self):
        """
        Gets the downgrade_mode of this TieredPricingComponent.
        {\"default\":\"<span class=\\\"label label-default\\\">delayed</span>\",\"description\":\"Default behaviour when a value is downgraded using this pricing component, this behaviour can be overridden when changing the value.<br><span class=\\\"label label-default\\\">immediate</span> &mdash; Downgrade will apply at the time the request is made.<br><span class=\\\"label label-default\\\">delayed</span> &mdash; Downgrade will apply at the end of the current billing cycle.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The downgrade_mode of this TieredPricingComponent.
        :rtype: str
        """
        return self._downgrade_mode

    @downgrade_mode.setter
    def downgrade_mode(self, downgrade_mode):
        """
        Sets the downgrade_mode of this TieredPricingComponent.
        {\"default\":\"<span class=\\\"label label-default\\\">delayed</span>\",\"description\":\"Default behaviour when a value is downgraded using this pricing component, this behaviour can be overridden when changing the value.<br><span class=\\\"label label-default\\\">immediate</span> &mdash; Downgrade will apply at the time the request is made.<br><span class=\\\"label label-default\\\">delayed</span> &mdash; Downgrade will apply at the end of the current billing cycle.\",\"verbs\":[\"POST\",\"GET\"]}

        :param downgrade_mode: The downgrade_mode of this TieredPricingComponent.
        :type: str
        """
        allowed_values = ["immediate", "delayed"]
        if downgrade_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `downgrade_mode` ({0}), must be one of {1}"
                .format(downgrade_mode, allowed_values)
            )

        self._downgrade_mode = downgrade_mode

    @property
    def default_quantity(self):
        """
        Gets the default_quantity of this TieredPricingComponent.
        { \"description\" : \"The default quantity of the pricing-component. If no value is supplied on a subscription this value will be used. This is useful for setting an expected purchase level of for introducing new pricing components to existing subscriptions and not having to back-fill values\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The default_quantity of this TieredPricingComponent.
        :rtype: int
        """
        return self._default_quantity

    @default_quantity.setter
    def default_quantity(self, default_quantity):
        """
        Sets the default_quantity of this TieredPricingComponent.
        { \"description\" : \"The default quantity of the pricing-component. If no value is supplied on a subscription this value will be used. This is useful for setting an expected purchase level of for introducing new pricing components to existing subscriptions and not having to back-fill values\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param default_quantity: The default_quantity of this TieredPricingComponent.
        :type: int
        """

        self._default_quantity = default_quantity

    @property
    def min_quantity(self):
        """
        Gets the min_quantity of this TieredPricingComponent.
        { \"default\" : \"0\", \"description\" : \"The minimum quantity of the pricing-component.\", \"verbs\":[] }

        :return: The min_quantity of this TieredPricingComponent.
        :rtype: int
        """
        return self._min_quantity

    @min_quantity.setter
    def min_quantity(self, min_quantity):
        """
        Sets the min_quantity of this TieredPricingComponent.
        { \"default\" : \"0\", \"description\" : \"The minimum quantity of the pricing-component.\", \"verbs\":[] }

        :param min_quantity: The min_quantity of this TieredPricingComponent.
        :type: int
        """

        self._min_quantity = min_quantity

    @property
    def max_quantity(self):
        """
        Gets the max_quantity of this TieredPricingComponent.
        { \"description\" : \"The maximum quantity of the pricing-component.\", \"verbs\":[] }

        :return: The max_quantity of this TieredPricingComponent.
        :rtype: int
        """
        return self._max_quantity

    @max_quantity.setter
    def max_quantity(self, max_quantity):
        """
        Sets the max_quantity of this TieredPricingComponent.
        { \"description\" : \"The maximum quantity of the pricing-component.\", \"verbs\":[] }

        :param max_quantity: The max_quantity of this TieredPricingComponent.
        :type: int
        """

        self._max_quantity = max_quantity

    @property
    def valid_from(self):
        """
        Gets the valid_from of this TieredPricingComponent.
        { \"default\" : \"current time\", \"description\" : \"The DateTime specifying when the pricing-component is valid from.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The valid_from of this TieredPricingComponent.
        :rtype: datetime
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """
        Sets the valid_from of this TieredPricingComponent.
        { \"default\" : \"current time\", \"description\" : \"The DateTime specifying when the pricing-component is valid from.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param valid_from: The valid_from of this TieredPricingComponent.
        :type: datetime
        """

        self._valid_from = valid_from

    @property
    def valid_till(self):
        """
        Gets the valid_till of this TieredPricingComponent.
        {  \"default\" : \"null\", \"description\" : \"The UTC DateTime specifying when the pricing-component is valid till.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The valid_till of this TieredPricingComponent.
        :rtype: datetime
        """
        return self._valid_till

    @valid_till.setter
    def valid_till(self, valid_till):
        """
        Sets the valid_till of this TieredPricingComponent.
        {  \"default\" : \"null\", \"description\" : \"The UTC DateTime specifying when the pricing-component is valid till.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param valid_till: The valid_till of this TieredPricingComponent.
        :type: datetime
        """

        self._valid_till = valid_till

    @property
    def tiers(self):
        """
        Gets the tiers of this TieredPricingComponent.
        {  \"default\" : \"[]\", \"description\" : \"The pricing-component-tiers associated with the pricing-component.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The tiers of this TieredPricingComponent.
        :rtype: list[PricingComponentTier]
        """
        return self._tiers

    @tiers.setter
    def tiers(self, tiers):
        """
        Sets the tiers of this TieredPricingComponent.
        {  \"default\" : \"[]\", \"description\" : \"The pricing-component-tiers associated with the pricing-component.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param tiers: The tiers of this TieredPricingComponent.
        :type: list[PricingComponentTier]
        """

        self._tiers = tiers

    @property
    def unit_of_measure(self):
        """
        Gets the unit_of_measure of this TieredPricingComponent.
        { \"description\" : \"The unit-of-measure associated with the pricing-component.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The unit_of_measure of this TieredPricingComponent.
        :rtype: UnitOfMeasure
        """
        return self._unit_of_measure

    @unit_of_measure.setter
    def unit_of_measure(self, unit_of_measure):
        """
        Sets the unit_of_measure of this TieredPricingComponent.
        { \"description\" : \"The unit-of-measure associated with the pricing-component.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param unit_of_measure: The unit_of_measure of this TieredPricingComponent.
        :type: UnitOfMeasure
        """

        self._unit_of_measure = unit_of_measure

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
