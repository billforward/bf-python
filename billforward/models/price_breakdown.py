# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PriceBreakdown(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_cost': 'float',
        'total_cost_excluding_tax': 'float',
        'tax': 'float',
        'proration': 'float',
        'price_lines': 'list[PriceLine]',
        'calculation_details': 'str'
    }

    attribute_map = {
        'total_cost': 'totalCost',
        'total_cost_excluding_tax': 'totalCostExcludingTax',
        'tax': 'tax',
        'proration': 'proration',
        'price_lines': 'priceLines',
        'calculation_details': 'calculationDetails'
    }

    def __init__(self, total_cost=None, total_cost_excluding_tax=None, tax=None, proration=None, price_lines=None, calculation_details=None):  # noqa: E501
        """PriceBreakdown - a model defined in Swagger"""  # noqa: E501
        self._total_cost = None
        self._total_cost_excluding_tax = None
        self._tax = None
        self._proration = None
        self._price_lines = None
        self._calculation_details = None
        self.discriminator = None
        if total_cost is not None:
            self.total_cost = total_cost
        if total_cost_excluding_tax is not None:
            self.total_cost_excluding_tax = total_cost_excluding_tax
        if tax is not None:
            self.tax = tax
        if proration is not None:
            self.proration = proration
        if price_lines is not None:
            self.price_lines = price_lines
        if calculation_details is not None:
            self.calculation_details = calculation_details

    @property
    def total_cost(self):
        """Gets the total_cost of this PriceBreakdown.  # noqa: E501


        :return: The total_cost of this PriceBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._total_cost

    @total_cost.setter
    def total_cost(self, total_cost):
        """Sets the total_cost of this PriceBreakdown.


        :param total_cost: The total_cost of this PriceBreakdown.  # noqa: E501
        :type: float
        """

        self._total_cost = total_cost

    @property
    def total_cost_excluding_tax(self):
        """Gets the total_cost_excluding_tax of this PriceBreakdown.  # noqa: E501


        :return: The total_cost_excluding_tax of this PriceBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._total_cost_excluding_tax

    @total_cost_excluding_tax.setter
    def total_cost_excluding_tax(self, total_cost_excluding_tax):
        """Sets the total_cost_excluding_tax of this PriceBreakdown.


        :param total_cost_excluding_tax: The total_cost_excluding_tax of this PriceBreakdown.  # noqa: E501
        :type: float
        """

        self._total_cost_excluding_tax = total_cost_excluding_tax

    @property
    def tax(self):
        """Gets the tax of this PriceBreakdown.  # noqa: E501


        :return: The tax of this PriceBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this PriceBreakdown.


        :param tax: The tax of this PriceBreakdown.  # noqa: E501
        :type: float
        """

        self._tax = tax

    @property
    def proration(self):
        """Gets the proration of this PriceBreakdown.  # noqa: E501


        :return: The proration of this PriceBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._proration

    @proration.setter
    def proration(self, proration):
        """Sets the proration of this PriceBreakdown.


        :param proration: The proration of this PriceBreakdown.  # noqa: E501
        :type: float
        """

        self._proration = proration

    @property
    def price_lines(self):
        """Gets the price_lines of this PriceBreakdown.  # noqa: E501


        :return: The price_lines of this PriceBreakdown.  # noqa: E501
        :rtype: list[PriceLine]
        """
        return self._price_lines

    @price_lines.setter
    def price_lines(self, price_lines):
        """Sets the price_lines of this PriceBreakdown.


        :param price_lines: The price_lines of this PriceBreakdown.  # noqa: E501
        :type: list[PriceLine]
        """

        self._price_lines = price_lines

    @property
    def calculation_details(self):
        """Gets the calculation_details of this PriceBreakdown.  # noqa: E501


        :return: The calculation_details of this PriceBreakdown.  # noqa: E501
        :rtype: str
        """
        return self._calculation_details

    @calculation_details.setter
    def calculation_details(self, calculation_details):
        """Sets the calculation_details of this PriceBreakdown.


        :param calculation_details: The calculation_details of this PriceBreakdown.  # noqa: E501
        :type: str
        """

        self._calculation_details = calculation_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PriceBreakdown, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PriceBreakdown):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
