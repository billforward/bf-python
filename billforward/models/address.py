# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Address(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, changed_by=None, updated=None, id=None, profile_id=None, organization_id=None, address_line1=None, address_line2=None, address_line3=None, city=None, province=None, country=None, postcode=None, landline=None, primary_address=False, deleted=False):
        """
        Address - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'changed_by': 'str',
            'updated': 'datetime',
            'id': 'str',
            'profile_id': 'str',
            'organization_id': 'str',
            'address_line1': 'str',
            'address_line2': 'str',
            'address_line3': 'str',
            'city': 'str',
            'province': 'str',
            'country': 'str',
            'postcode': 'str',
            'landline': 'str',
            'primary_address': 'bool',
            'deleted': 'bool'
        }

        self.attribute_map = {
            'created': 'created',
            'changed_by': 'changedBy',
            'updated': 'updated',
            'id': 'id',
            'profile_id': 'profileID',
            'organization_id': 'organizationID',
            'address_line1': 'addressLine1',
            'address_line2': 'addressLine2',
            'address_line3': 'addressLine3',
            'city': 'city',
            'province': 'province',
            'country': 'country',
            'postcode': 'postcode',
            'landline': 'landline',
            'primary_address': 'primaryAddress',
            'deleted': 'deleted'
        }

        self._created = created
        self._changed_by = changed_by
        self._updated = updated
        self._id = id
        self._profile_id = profile_id
        self._organization_id = organization_id
        self._address_line1 = address_line1
        self._address_line2 = address_line2
        self._address_line3 = address_line3
        self._city = city
        self._province = province
        self._country = country
        self._postcode = postcode
        self._landline = landline
        self._primary_address = primary_address
        self._deleted = deleted

    @property
    def created(self):
        """
        Gets the created of this Address.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this Address.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this Address.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this Address.
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """
        Gets the changed_by of this Address.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :return: The changed_by of this Address.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """
        Sets the changed_by of this Address.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :param changed_by: The changed_by of this Address.
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """
        Gets the updated of this Address.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :return: The updated of this Address.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this Address.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :param updated: The updated of this Address.
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """
        Gets the id of this Address.
        { \"description\" : \"\", \"verbs\":[\"PUT\",\"GET\"] }

        :return: The id of this Address.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Address.
        { \"description\" : \"\", \"verbs\":[\"PUT\",\"GET\"] }

        :param id: The id of this Address.
        :type: str
        """

        self._id = id

    @property
    def profile_id(self):
        """
        Gets the profile_id of this Address.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :return: The profile_id of this Address.
        :rtype: str
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """
        Sets the profile_id of this Address.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :param profile_id: The profile_id of this Address.
        :type: str
        """

        self._profile_id = profile_id

    @property
    def organization_id(self):
        """
        Gets the organization_id of this Address.
        { \"description\" : \"\", \"verbs\":[] }

        :return: The organization_id of this Address.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this Address.
        { \"description\" : \"\", \"verbs\":[] }

        :param organization_id: The organization_id of this Address.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def address_line1(self):
        """
        Gets the address_line1 of this Address.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The address_line1 of this Address.
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """
        Sets the address_line1 of this Address.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param address_line1: The address_line1 of this Address.
        :type: str
        """

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """
        Gets the address_line2 of this Address.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The address_line2 of this Address.
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """
        Sets the address_line2 of this Address.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param address_line2: The address_line2 of this Address.
        :type: str
        """

        self._address_line2 = address_line2

    @property
    def address_line3(self):
        """
        Gets the address_line3 of this Address.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The address_line3 of this Address.
        :rtype: str
        """
        return self._address_line3

    @address_line3.setter
    def address_line3(self, address_line3):
        """
        Sets the address_line3 of this Address.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param address_line3: The address_line3 of this Address.
        :type: str
        """

        self._address_line3 = address_line3

    @property
    def city(self):
        """
        Gets the city of this Address.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The city of this Address.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this Address.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param city: The city of this Address.
        :type: str
        """

        self._city = city

    @property
    def province(self):
        """
        Gets the province of this Address.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The province of this Address.
        :rtype: str
        """
        return self._province

    @province.setter
    def province(self, province):
        """
        Sets the province of this Address.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param province: The province of this Address.
        :type: str
        """

        self._province = province

    @property
    def country(self):
        """
        Gets the country of this Address.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The country of this Address.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this Address.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param country: The country of this Address.
        :type: str
        """

        self._country = country

    @property
    def postcode(self):
        """
        Gets the postcode of this Address.
        { \"description\" : \"ZIP code or postcode.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The postcode of this Address.
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """
        Sets the postcode of this Address.
        { \"description\" : \"ZIP code or postcode.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param postcode: The postcode of this Address.
        :type: str
        """

        self._postcode = postcode

    @property
    def landline(self):
        """
        Gets the landline of this Address.
        { \"description\" : \"Phone number\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The landline of this Address.
        :rtype: str
        """
        return self._landline

    @landline.setter
    def landline(self, landline):
        """
        Sets the landline of this Address.
        { \"description\" : \"Phone number\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param landline: The landline of this Address.
        :type: str
        """

        self._landline = landline

    @property
    def primary_address(self):
        """
        Gets the primary_address of this Address.
        { \"description\" : \"Is this the primary, default, address for the associated profile?\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The primary_address of this Address.
        :rtype: bool
        """
        return self._primary_address

    @primary_address.setter
    def primary_address(self, primary_address):
        """
        Sets the primary_address of this Address.
        { \"description\" : \"Is this the primary, default, address for the associated profile?\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param primary_address: The primary_address of this Address.
        :type: bool
        """

        self._primary_address = primary_address

    @property
    def deleted(self):
        """
        Gets the deleted of this Address.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :return: The deleted of this Address.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """
        Sets the deleted of this Address.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :param deleted: The deleted of this Address.
        :type: bool
        """

        self._deleted = deleted

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
