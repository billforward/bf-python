# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Address(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'changed_by': 'str',
        'updated': 'datetime',
        'id': 'str',
        'profile_id': 'str',
        'organization_id': 'str',
        'address_line1': 'str',
        'address_line2': 'str',
        'address_line3': 'str',
        'city': 'str',
        'province': 'str',
        'country': 'str',
        'postcode': 'str',
        'landline': 'str',
        'primary_address': 'bool',
        'primary_shipping_address': 'bool',
        'deleted': 'bool',
        'validated': 'bool'
    }

    attribute_map = {
        'created': 'created',
        'changed_by': 'changedBy',
        'updated': 'updated',
        'id': 'id',
        'profile_id': 'profileID',
        'organization_id': 'organizationID',
        'address_line1': 'addressLine1',
        'address_line2': 'addressLine2',
        'address_line3': 'addressLine3',
        'city': 'city',
        'province': 'province',
        'country': 'country',
        'postcode': 'postcode',
        'landline': 'landline',
        'primary_address': 'primaryAddress',
        'primary_shipping_address': 'primaryShippingAddress',
        'deleted': 'deleted',
        'validated': 'validated'
    }

    def __init__(self, created=None, changed_by=None, updated=None, id=None, profile_id=None, organization_id=None, address_line1=None, address_line2=None, address_line3=None, city=None, province=None, country=None, postcode=None, landline=None, primary_address=None, primary_shipping_address=None, deleted=None, validated=None):  # noqa: E501
        """Address - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._changed_by = None
        self._updated = None
        self._id = None
        self._profile_id = None
        self._organization_id = None
        self._address_line1 = None
        self._address_line2 = None
        self._address_line3 = None
        self._city = None
        self._province = None
        self._country = None
        self._postcode = None
        self._landline = None
        self._primary_address = None
        self._primary_shipping_address = None
        self._deleted = None
        self._validated = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if changed_by is not None:
            self.changed_by = changed_by
        if updated is not None:
            self.updated = updated
        if id is not None:
            self.id = id
        if profile_id is not None:
            self.profile_id = profile_id
        if organization_id is not None:
            self.organization_id = organization_id
        if address_line1 is not None:
            self.address_line1 = address_line1
        if address_line2 is not None:
            self.address_line2 = address_line2
        if address_line3 is not None:
            self.address_line3 = address_line3
        if city is not None:
            self.city = city
        if province is not None:
            self.province = province
        if country is not None:
            self.country = country
        if postcode is not None:
            self.postcode = postcode
        if landline is not None:
            self.landline = landline
        if primary_address is not None:
            self.primary_address = primary_address
        if primary_shipping_address is not None:
            self.primary_shipping_address = primary_shipping_address
        if deleted is not None:
            self.deleted = deleted
        if validated is not None:
            self.validated = validated

    @property
    def created(self):
        """Gets the created of this Address.  # noqa: E501


        :return: The created of this Address.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Address.


        :param created: The created of this Address.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """Gets the changed_by of this Address.  # noqa: E501


        :return: The changed_by of this Address.  # noqa: E501
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """Sets the changed_by of this Address.


        :param changed_by: The changed_by of this Address.  # noqa: E501
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """Gets the updated of this Address.  # noqa: E501


        :return: The updated of this Address.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Address.


        :param updated: The updated of this Address.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """Gets the id of this Address.  # noqa: E501


        :return: The id of this Address.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Address.


        :param id: The id of this Address.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def profile_id(self):
        """Gets the profile_id of this Address.  # noqa: E501


        :return: The profile_id of this Address.  # noqa: E501
        :rtype: str
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this Address.


        :param profile_id: The profile_id of this Address.  # noqa: E501
        :type: str
        """

        self._profile_id = profile_id

    @property
    def organization_id(self):
        """Gets the organization_id of this Address.  # noqa: E501


        :return: The organization_id of this Address.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this Address.


        :param organization_id: The organization_id of this Address.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def address_line1(self):
        """Gets the address_line1 of this Address.  # noqa: E501


        :return: The address_line1 of this Address.  # noqa: E501
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this Address.


        :param address_line1: The address_line1 of this Address.  # noqa: E501
        :type: str
        """

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this Address.  # noqa: E501


        :return: The address_line2 of this Address.  # noqa: E501
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this Address.


        :param address_line2: The address_line2 of this Address.  # noqa: E501
        :type: str
        """

        self._address_line2 = address_line2

    @property
    def address_line3(self):
        """Gets the address_line3 of this Address.  # noqa: E501


        :return: The address_line3 of this Address.  # noqa: E501
        :rtype: str
        """
        return self._address_line3

    @address_line3.setter
    def address_line3(self, address_line3):
        """Sets the address_line3 of this Address.


        :param address_line3: The address_line3 of this Address.  # noqa: E501
        :type: str
        """

        self._address_line3 = address_line3

    @property
    def city(self):
        """Gets the city of this Address.  # noqa: E501


        :return: The city of this Address.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address.


        :param city: The city of this Address.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def province(self):
        """Gets the province of this Address.  # noqa: E501


        :return: The province of this Address.  # noqa: E501
        :rtype: str
        """
        return self._province

    @province.setter
    def province(self, province):
        """Sets the province of this Address.


        :param province: The province of this Address.  # noqa: E501
        :type: str
        """

        self._province = province

    @property
    def country(self):
        """Gets the country of this Address.  # noqa: E501


        :return: The country of this Address.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Address.


        :param country: The country of this Address.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def postcode(self):
        """Gets the postcode of this Address.  # noqa: E501


        :return: The postcode of this Address.  # noqa: E501
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this Address.


        :param postcode: The postcode of this Address.  # noqa: E501
        :type: str
        """

        self._postcode = postcode

    @property
    def landline(self):
        """Gets the landline of this Address.  # noqa: E501


        :return: The landline of this Address.  # noqa: E501
        :rtype: str
        """
        return self._landline

    @landline.setter
    def landline(self, landline):
        """Sets the landline of this Address.


        :param landline: The landline of this Address.  # noqa: E501
        :type: str
        """

        self._landline = landline

    @property
    def primary_address(self):
        """Gets the primary_address of this Address.  # noqa: E501


        :return: The primary_address of this Address.  # noqa: E501
        :rtype: bool
        """
        return self._primary_address

    @primary_address.setter
    def primary_address(self, primary_address):
        """Sets the primary_address of this Address.


        :param primary_address: The primary_address of this Address.  # noqa: E501
        :type: bool
        """

        self._primary_address = primary_address

    @property
    def primary_shipping_address(self):
        """Gets the primary_shipping_address of this Address.  # noqa: E501


        :return: The primary_shipping_address of this Address.  # noqa: E501
        :rtype: bool
        """
        return self._primary_shipping_address

    @primary_shipping_address.setter
    def primary_shipping_address(self, primary_shipping_address):
        """Sets the primary_shipping_address of this Address.


        :param primary_shipping_address: The primary_shipping_address of this Address.  # noqa: E501
        :type: bool
        """

        self._primary_shipping_address = primary_shipping_address

    @property
    def deleted(self):
        """Gets the deleted of this Address.  # noqa: E501


        :return: The deleted of this Address.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Address.


        :param deleted: The deleted of this Address.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def validated(self):
        """Gets the validated of this Address.  # noqa: E501


        :return: The validated of this Address.  # noqa: E501
        :rtype: bool
        """
        return self._validated

    @validated.setter
    def validated(self, validated):
        """Sets the validated of this Address.


        :param validated: The validated of this Address.  # noqa: E501
        :type: bool
        """

        self._validated = validated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Address, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Address):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
