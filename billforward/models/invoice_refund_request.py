# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InvoiceRefundRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'organization_id': 'str',
        'reason': 'str',
        'amount': 'float',
        'virtual_refund_gateway_types': 'list[str]'
    }

    attribute_map = {
        'organization_id': 'organizationID',
        'reason': 'reason',
        'amount': 'amount',
        'virtual_refund_gateway_types': 'virtualRefundGatewayTypes'
    }

    def __init__(self, organization_id=None, reason=None, amount=None, virtual_refund_gateway_types=None):  # noqa: E501
        """InvoiceRefundRequest - a model defined in Swagger"""  # noqa: E501
        self._organization_id = None
        self._reason = None
        self._amount = None
        self._virtual_refund_gateway_types = None
        self.discriminator = None
        if organization_id is not None:
            self.organization_id = organization_id
        if reason is not None:
            self.reason = reason
        if amount is not None:
            self.amount = amount
        if virtual_refund_gateway_types is not None:
            self.virtual_refund_gateway_types = virtual_refund_gateway_types

    @property
    def organization_id(self):
        """Gets the organization_id of this InvoiceRefundRequest.  # noqa: E501


        :return: The organization_id of this InvoiceRefundRequest.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this InvoiceRefundRequest.


        :param organization_id: The organization_id of this InvoiceRefundRequest.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def reason(self):
        """Gets the reason of this InvoiceRefundRequest.  # noqa: E501


        :return: The reason of this InvoiceRefundRequest.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this InvoiceRefundRequest.


        :param reason: The reason of this InvoiceRefundRequest.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def amount(self):
        """Gets the amount of this InvoiceRefundRequest.  # noqa: E501


        :return: The amount of this InvoiceRefundRequest.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InvoiceRefundRequest.


        :param amount: The amount of this InvoiceRefundRequest.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def virtual_refund_gateway_types(self):
        """Gets the virtual_refund_gateway_types of this InvoiceRefundRequest.  # noqa: E501


        :return: The virtual_refund_gateway_types of this InvoiceRefundRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._virtual_refund_gateway_types

    @virtual_refund_gateway_types.setter
    def virtual_refund_gateway_types(self, virtual_refund_gateway_types):
        """Sets the virtual_refund_gateway_types of this InvoiceRefundRequest.


        :param virtual_refund_gateway_types: The virtual_refund_gateway_types of this InvoiceRefundRequest.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["VOID", "cybersource_token", "card_vault", "paypal_simple", "locustworld", "free", "coupon", "credit_note", "stripe", "braintree", "zooz", "balanced", "paypal", "billforward_test", "offline", "trial", "stripeACH", "goCardless", "authorizeNet", "spreedly", "sagePay", "trustCommerce", "payvision", "kash", "epx", "shuttle", "square", "billforwardRandomizer", "cardConnect", "ebanx"]  # noqa: E501
        if not set(virtual_refund_gateway_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `virtual_refund_gateway_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(virtual_refund_gateway_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._virtual_refund_gateway_types = virtual_refund_gateway_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvoiceRefundRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoiceRefundRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
