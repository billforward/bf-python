# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TaxationStrategy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'changed_by': 'str',
        'updated': 'datetime',
        'id': 'str',
        'version_id': 'str',
        'organization_id': 'str',
        'country': 'str',
        'province': 'str',
        'currency': 'CreditNoteCurrency',
        'name': 'str',
        'percentage': 'float',
        'applied_at': 'str',
        'deleted': 'bool',
        'default_taxation_strategy': 'bool',
        'valid_from': 'datetime',
        'valid_till': 'datetime'
    }

    attribute_map = {
        'created': 'created',
        'changed_by': 'changedBy',
        'updated': 'updated',
        'id': 'id',
        'version_id': 'versionID',
        'organization_id': 'organizationID',
        'country': 'country',
        'province': 'province',
        'currency': 'currency',
        'name': 'name',
        'percentage': 'percentage',
        'applied_at': 'appliedAt',
        'deleted': 'deleted',
        'default_taxation_strategy': 'defaultTaxationStrategy',
        'valid_from': 'validFrom',
        'valid_till': 'validTill'
    }

    def __init__(self, created=None, changed_by=None, updated=None, id=None, version_id=None, organization_id=None, country=None, province=None, currency=None, name=None, percentage=None, applied_at=None, deleted=None, default_taxation_strategy=None, valid_from=None, valid_till=None):  # noqa: E501
        """TaxationStrategy - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._changed_by = None
        self._updated = None
        self._id = None
        self._version_id = None
        self._organization_id = None
        self._country = None
        self._province = None
        self._currency = None
        self._name = None
        self._percentage = None
        self._applied_at = None
        self._deleted = None
        self._default_taxation_strategy = None
        self._valid_from = None
        self._valid_till = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if changed_by is not None:
            self.changed_by = changed_by
        if updated is not None:
            self.updated = updated
        self.id = id
        if version_id is not None:
            self.version_id = version_id
        if organization_id is not None:
            self.organization_id = organization_id
        self.country = country
        if province is not None:
            self.province = province
        self.currency = currency
        self.name = name
        self.percentage = percentage
        if applied_at is not None:
            self.applied_at = applied_at
        self.deleted = deleted
        if default_taxation_strategy is not None:
            self.default_taxation_strategy = default_taxation_strategy
        self.valid_from = valid_from
        if valid_till is not None:
            self.valid_till = valid_till

    @property
    def created(self):
        """Gets the created of this TaxationStrategy.  # noqa: E501


        :return: The created of this TaxationStrategy.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this TaxationStrategy.


        :param created: The created of this TaxationStrategy.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """Gets the changed_by of this TaxationStrategy.  # noqa: E501


        :return: The changed_by of this TaxationStrategy.  # noqa: E501
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """Sets the changed_by of this TaxationStrategy.


        :param changed_by: The changed_by of this TaxationStrategy.  # noqa: E501
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """Gets the updated of this TaxationStrategy.  # noqa: E501


        :return: The updated of this TaxationStrategy.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this TaxationStrategy.


        :param updated: The updated of this TaxationStrategy.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """Gets the id of this TaxationStrategy.  # noqa: E501


        :return: The id of this TaxationStrategy.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaxationStrategy.


        :param id: The id of this TaxationStrategy.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def version_id(self):
        """Gets the version_id of this TaxationStrategy.  # noqa: E501


        :return: The version_id of this TaxationStrategy.  # noqa: E501
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this TaxationStrategy.


        :param version_id: The version_id of this TaxationStrategy.  # noqa: E501
        :type: str
        """

        self._version_id = version_id

    @property
    def organization_id(self):
        """Gets the organization_id of this TaxationStrategy.  # noqa: E501


        :return: The organization_id of this TaxationStrategy.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this TaxationStrategy.


        :param organization_id: The organization_id of this TaxationStrategy.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def country(self):
        """Gets the country of this TaxationStrategy.  # noqa: E501


        :return: The country of this TaxationStrategy.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this TaxationStrategy.


        :param country: The country of this TaxationStrategy.  # noqa: E501
        :type: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")  # noqa: E501
        allowed_values = ["UK", "USA", "Canada", "Mexico", "Brazil", "Argentina", "China", "France", "Germany", "Ireland", "Nigeria", "Bangladesh", "India", "Afghanistan", "AD", "AE", "AF", "AG", "AI", "AL", "AM", "AO", "AR", "AS", "AT", "AU", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"]  # noqa: E501
        if country not in allowed_values:
            raise ValueError(
                "Invalid value for `country` ({0}), must be one of {1}"  # noqa: E501
                .format(country, allowed_values)
            )

        self._country = country

    @property
    def province(self):
        """Gets the province of this TaxationStrategy.  # noqa: E501


        :return: The province of this TaxationStrategy.  # noqa: E501
        :rtype: str
        """
        return self._province

    @province.setter
    def province(self, province):
        """Sets the province of this TaxationStrategy.


        :param province: The province of this TaxationStrategy.  # noqa: E501
        :type: str
        """

        self._province = province

    @property
    def currency(self):
        """Gets the currency of this TaxationStrategy.  # noqa: E501


        :return: The currency of this TaxationStrategy.  # noqa: E501
        :rtype: CreditNoteCurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this TaxationStrategy.


        :param currency: The currency of this TaxationStrategy.  # noqa: E501
        :type: CreditNoteCurrency
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def name(self):
        """Gets the name of this TaxationStrategy.  # noqa: E501


        :return: The name of this TaxationStrategy.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaxationStrategy.


        :param name: The name of this TaxationStrategy.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def percentage(self):
        """Gets the percentage of this TaxationStrategy.  # noqa: E501


        :return: The percentage of this TaxationStrategy.  # noqa: E501
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this TaxationStrategy.


        :param percentage: The percentage of this TaxationStrategy.  # noqa: E501
        :type: float
        """
        if percentage is None:
            raise ValueError("Invalid value for `percentage`, must not be `None`")  # noqa: E501

        self._percentage = percentage

    @property
    def applied_at(self):
        """Gets the applied_at of this TaxationStrategy.  # noqa: E501


        :return: The applied_at of this TaxationStrategy.  # noqa: E501
        :rtype: str
        """
        return self._applied_at

    @applied_at.setter
    def applied_at(self, applied_at):
        """Sets the applied_at of this TaxationStrategy.


        :param applied_at: The applied_at of this TaxationStrategy.  # noqa: E501
        :type: str
        """
        allowed_values = ["checkout", "immediate"]  # noqa: E501
        if applied_at not in allowed_values:
            raise ValueError(
                "Invalid value for `applied_at` ({0}), must be one of {1}"  # noqa: E501
                .format(applied_at, allowed_values)
            )

        self._applied_at = applied_at

    @property
    def deleted(self):
        """Gets the deleted of this TaxationStrategy.  # noqa: E501


        :return: The deleted of this TaxationStrategy.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this TaxationStrategy.


        :param deleted: The deleted of this TaxationStrategy.  # noqa: E501
        :type: bool
        """
        if deleted is None:
            raise ValueError("Invalid value for `deleted`, must not be `None`")  # noqa: E501

        self._deleted = deleted

    @property
    def default_taxation_strategy(self):
        """Gets the default_taxation_strategy of this TaxationStrategy.  # noqa: E501


        :return: The default_taxation_strategy of this TaxationStrategy.  # noqa: E501
        :rtype: bool
        """
        return self._default_taxation_strategy

    @default_taxation_strategy.setter
    def default_taxation_strategy(self, default_taxation_strategy):
        """Sets the default_taxation_strategy of this TaxationStrategy.


        :param default_taxation_strategy: The default_taxation_strategy of this TaxationStrategy.  # noqa: E501
        :type: bool
        """

        self._default_taxation_strategy = default_taxation_strategy

    @property
    def valid_from(self):
        """Gets the valid_from of this TaxationStrategy.  # noqa: E501


        :return: The valid_from of this TaxationStrategy.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this TaxationStrategy.


        :param valid_from: The valid_from of this TaxationStrategy.  # noqa: E501
        :type: datetime
        """
        if valid_from is None:
            raise ValueError("Invalid value for `valid_from`, must not be `None`")  # noqa: E501

        self._valid_from = valid_from

    @property
    def valid_till(self):
        """Gets the valid_till of this TaxationStrategy.  # noqa: E501


        :return: The valid_till of this TaxationStrategy.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_till

    @valid_till.setter
    def valid_till(self, valid_till):
        """Sets the valid_till of this TaxationStrategy.


        :param valid_till: The valid_till of this TaxationStrategy.  # noqa: E501
        :type: datetime
        """

        self._valid_till = valid_till

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaxationStrategy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaxationStrategy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
