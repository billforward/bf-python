# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InvoiceLines(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'changed_by': 'str',
        'updated': 'datetime',
        'id': 'str',
        'invoice_id': 'str',
        'unit_of_measure_id': 'str',
        'subscription_id': 'str',
        'product_rate_plan_id': 'str',
        'public_product_rate_plan_name': 'str',
        'product_rate_plan_name': 'str',
        'product_id': 'str',
        'public_product_name': 'str',
        'product_name': 'str',
        'percentage_of_original': 'float',
        'organization_id': 'str',
        'name': 'str',
        'description': 'str',
        'calculation': 'str',
        'group_name': 'str',
        'cost': 'float',
        'tax': 'float',
        'component_value': 'int',
        'quantity_label': 'str',
        'pricing_component_id': 'str',
        'public_pricing_component_name': 'str',
        'pricing_component_name': 'str',
        'subscription_charge_id': 'str',
        'child_invoice_id': 'str',
        'type': 'str',
        'pricing_component_type': 'str',
        'charge_type': 'str',
        'period_start': 'datetime',
        'period_end': 'datetime',
        'linked_charge_id': 'str',
        'discount': 'float'
    }

    attribute_map = {
        'created': 'created',
        'changed_by': 'changedBy',
        'updated': 'updated',
        'id': 'id',
        'invoice_id': 'invoiceID',
        'unit_of_measure_id': 'unitOfMeasureID',
        'subscription_id': 'subscriptionID',
        'product_rate_plan_id': 'productRatePlanID',
        'public_product_rate_plan_name': 'publicProductRatePlanName',
        'product_rate_plan_name': 'productRatePlanName',
        'product_id': 'productID',
        'public_product_name': 'publicProductName',
        'product_name': 'productName',
        'percentage_of_original': 'percentageOfOriginal',
        'organization_id': 'organizationID',
        'name': 'name',
        'description': 'description',
        'calculation': 'calculation',
        'group_name': 'groupName',
        'cost': 'cost',
        'tax': 'tax',
        'component_value': 'componentValue',
        'quantity_label': 'quantityLabel',
        'pricing_component_id': 'pricingComponentID',
        'public_pricing_component_name': 'publicPricingComponentName',
        'pricing_component_name': 'pricingComponentName',
        'subscription_charge_id': 'subscriptionChargeID',
        'child_invoice_id': 'childInvoiceID',
        'type': 'type',
        'pricing_component_type': 'pricingComponentType',
        'charge_type': 'chargeType',
        'period_start': 'periodStart',
        'period_end': 'periodEnd',
        'linked_charge_id': 'linkedChargeID',
        'discount': 'discount'
    }

    def __init__(self, created=None, changed_by=None, updated=None, id=None, invoice_id=None, unit_of_measure_id=None, subscription_id=None, product_rate_plan_id=None, public_product_rate_plan_name=None, product_rate_plan_name=None, product_id=None, public_product_name=None, product_name=None, percentage_of_original=None, organization_id=None, name=None, description=None, calculation=None, group_name=None, cost=None, tax=None, component_value=None, quantity_label=None, pricing_component_id=None, public_pricing_component_name=None, pricing_component_name=None, subscription_charge_id=None, child_invoice_id=None, type=None, pricing_component_type=None, charge_type=None, period_start=None, period_end=None, linked_charge_id=None, discount=None):  # noqa: E501
        """InvoiceLines - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._changed_by = None
        self._updated = None
        self._id = None
        self._invoice_id = None
        self._unit_of_measure_id = None
        self._subscription_id = None
        self._product_rate_plan_id = None
        self._public_product_rate_plan_name = None
        self._product_rate_plan_name = None
        self._product_id = None
        self._public_product_name = None
        self._product_name = None
        self._percentage_of_original = None
        self._organization_id = None
        self._name = None
        self._description = None
        self._calculation = None
        self._group_name = None
        self._cost = None
        self._tax = None
        self._component_value = None
        self._quantity_label = None
        self._pricing_component_id = None
        self._public_pricing_component_name = None
        self._pricing_component_name = None
        self._subscription_charge_id = None
        self._child_invoice_id = None
        self._type = None
        self._pricing_component_type = None
        self._charge_type = None
        self._period_start = None
        self._period_end = None
        self._linked_charge_id = None
        self._discount = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if changed_by is not None:
            self.changed_by = changed_by
        if updated is not None:
            self.updated = updated
        if id is not None:
            self.id = id
        self.invoice_id = invoice_id
        if unit_of_measure_id is not None:
            self.unit_of_measure_id = unit_of_measure_id
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if product_rate_plan_id is not None:
            self.product_rate_plan_id = product_rate_plan_id
        if public_product_rate_plan_name is not None:
            self.public_product_rate_plan_name = public_product_rate_plan_name
        if product_rate_plan_name is not None:
            self.product_rate_plan_name = product_rate_plan_name
        if product_id is not None:
            self.product_id = product_id
        if public_product_name is not None:
            self.public_product_name = public_product_name
        if product_name is not None:
            self.product_name = product_name
        if percentage_of_original is not None:
            self.percentage_of_original = percentage_of_original
        self.organization_id = organization_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        self.calculation = calculation
        if group_name is not None:
            self.group_name = group_name
        self.cost = cost
        self.tax = tax
        if component_value is not None:
            self.component_value = component_value
        if quantity_label is not None:
            self.quantity_label = quantity_label
        if pricing_component_id is not None:
            self.pricing_component_id = pricing_component_id
        if public_pricing_component_name is not None:
            self.public_pricing_component_name = public_pricing_component_name
        if pricing_component_name is not None:
            self.pricing_component_name = pricing_component_name
        if subscription_charge_id is not None:
            self.subscription_charge_id = subscription_charge_id
        if child_invoice_id is not None:
            self.child_invoice_id = child_invoice_id
        if type is not None:
            self.type = type
        self.pricing_component_type = pricing_component_type
        self.charge_type = charge_type
        self.period_start = period_start
        self.period_end = period_end
        if linked_charge_id is not None:
            self.linked_charge_id = linked_charge_id
        if discount is not None:
            self.discount = discount

    @property
    def created(self):
        """Gets the created of this InvoiceLines.  # noqa: E501


        :return: The created of this InvoiceLines.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this InvoiceLines.


        :param created: The created of this InvoiceLines.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """Gets the changed_by of this InvoiceLines.  # noqa: E501


        :return: The changed_by of this InvoiceLines.  # noqa: E501
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """Sets the changed_by of this InvoiceLines.


        :param changed_by: The changed_by of this InvoiceLines.  # noqa: E501
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """Gets the updated of this InvoiceLines.  # noqa: E501


        :return: The updated of this InvoiceLines.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this InvoiceLines.


        :param updated: The updated of this InvoiceLines.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """Gets the id of this InvoiceLines.  # noqa: E501


        :return: The id of this InvoiceLines.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InvoiceLines.


        :param id: The id of this InvoiceLines.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def invoice_id(self):
        """Gets the invoice_id of this InvoiceLines.  # noqa: E501


        :return: The invoice_id of this InvoiceLines.  # noqa: E501
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this InvoiceLines.


        :param invoice_id: The invoice_id of this InvoiceLines.  # noqa: E501
        :type: str
        """
        if invoice_id is None:
            raise ValueError("Invalid value for `invoice_id`, must not be `None`")  # noqa: E501

        self._invoice_id = invoice_id

    @property
    def unit_of_measure_id(self):
        """Gets the unit_of_measure_id of this InvoiceLines.  # noqa: E501


        :return: The unit_of_measure_id of this InvoiceLines.  # noqa: E501
        :rtype: str
        """
        return self._unit_of_measure_id

    @unit_of_measure_id.setter
    def unit_of_measure_id(self, unit_of_measure_id):
        """Sets the unit_of_measure_id of this InvoiceLines.


        :param unit_of_measure_id: The unit_of_measure_id of this InvoiceLines.  # noqa: E501
        :type: str
        """

        self._unit_of_measure_id = unit_of_measure_id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this InvoiceLines.  # noqa: E501


        :return: The subscription_id of this InvoiceLines.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this InvoiceLines.


        :param subscription_id: The subscription_id of this InvoiceLines.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def product_rate_plan_id(self):
        """Gets the product_rate_plan_id of this InvoiceLines.  # noqa: E501


        :return: The product_rate_plan_id of this InvoiceLines.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_id

    @product_rate_plan_id.setter
    def product_rate_plan_id(self, product_rate_plan_id):
        """Sets the product_rate_plan_id of this InvoiceLines.


        :param product_rate_plan_id: The product_rate_plan_id of this InvoiceLines.  # noqa: E501
        :type: str
        """

        self._product_rate_plan_id = product_rate_plan_id

    @property
    def public_product_rate_plan_name(self):
        """Gets the public_product_rate_plan_name of this InvoiceLines.  # noqa: E501


        :return: The public_product_rate_plan_name of this InvoiceLines.  # noqa: E501
        :rtype: str
        """
        return self._public_product_rate_plan_name

    @public_product_rate_plan_name.setter
    def public_product_rate_plan_name(self, public_product_rate_plan_name):
        """Sets the public_product_rate_plan_name of this InvoiceLines.


        :param public_product_rate_plan_name: The public_product_rate_plan_name of this InvoiceLines.  # noqa: E501
        :type: str
        """

        self._public_product_rate_plan_name = public_product_rate_plan_name

    @property
    def product_rate_plan_name(self):
        """Gets the product_rate_plan_name of this InvoiceLines.  # noqa: E501


        :return: The product_rate_plan_name of this InvoiceLines.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_name

    @product_rate_plan_name.setter
    def product_rate_plan_name(self, product_rate_plan_name):
        """Sets the product_rate_plan_name of this InvoiceLines.


        :param product_rate_plan_name: The product_rate_plan_name of this InvoiceLines.  # noqa: E501
        :type: str
        """

        self._product_rate_plan_name = product_rate_plan_name

    @property
    def product_id(self):
        """Gets the product_id of this InvoiceLines.  # noqa: E501


        :return: The product_id of this InvoiceLines.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this InvoiceLines.


        :param product_id: The product_id of this InvoiceLines.  # noqa: E501
        :type: str
        """

        self._product_id = product_id

    @property
    def public_product_name(self):
        """Gets the public_product_name of this InvoiceLines.  # noqa: E501


        :return: The public_product_name of this InvoiceLines.  # noqa: E501
        :rtype: str
        """
        return self._public_product_name

    @public_product_name.setter
    def public_product_name(self, public_product_name):
        """Sets the public_product_name of this InvoiceLines.


        :param public_product_name: The public_product_name of this InvoiceLines.  # noqa: E501
        :type: str
        """

        self._public_product_name = public_product_name

    @property
    def product_name(self):
        """Gets the product_name of this InvoiceLines.  # noqa: E501


        :return: The product_name of this InvoiceLines.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this InvoiceLines.


        :param product_name: The product_name of this InvoiceLines.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def percentage_of_original(self):
        """Gets the percentage_of_original of this InvoiceLines.  # noqa: E501


        :return: The percentage_of_original of this InvoiceLines.  # noqa: E501
        :rtype: float
        """
        return self._percentage_of_original

    @percentage_of_original.setter
    def percentage_of_original(self, percentage_of_original):
        """Sets the percentage_of_original of this InvoiceLines.


        :param percentage_of_original: The percentage_of_original of this InvoiceLines.  # noqa: E501
        :type: float
        """

        self._percentage_of_original = percentage_of_original

    @property
    def organization_id(self):
        """Gets the organization_id of this InvoiceLines.  # noqa: E501


        :return: The organization_id of this InvoiceLines.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this InvoiceLines.


        :param organization_id: The organization_id of this InvoiceLines.  # noqa: E501
        :type: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")  # noqa: E501

        self._organization_id = organization_id

    @property
    def name(self):
        """Gets the name of this InvoiceLines.  # noqa: E501


        :return: The name of this InvoiceLines.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InvoiceLines.


        :param name: The name of this InvoiceLines.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this InvoiceLines.  # noqa: E501


        :return: The description of this InvoiceLines.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InvoiceLines.


        :param description: The description of this InvoiceLines.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def calculation(self):
        """Gets the calculation of this InvoiceLines.  # noqa: E501


        :return: The calculation of this InvoiceLines.  # noqa: E501
        :rtype: str
        """
        return self._calculation

    @calculation.setter
    def calculation(self, calculation):
        """Sets the calculation of this InvoiceLines.


        :param calculation: The calculation of this InvoiceLines.  # noqa: E501
        :type: str
        """
        if calculation is None:
            raise ValueError("Invalid value for `calculation`, must not be `None`")  # noqa: E501

        self._calculation = calculation

    @property
    def group_name(self):
        """Gets the group_name of this InvoiceLines.  # noqa: E501


        :return: The group_name of this InvoiceLines.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this InvoiceLines.


        :param group_name: The group_name of this InvoiceLines.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def cost(self):
        """Gets the cost of this InvoiceLines.  # noqa: E501


        :return: The cost of this InvoiceLines.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this InvoiceLines.


        :param cost: The cost of this InvoiceLines.  # noqa: E501
        :type: float
        """
        if cost is None:
            raise ValueError("Invalid value for `cost`, must not be `None`")  # noqa: E501

        self._cost = cost

    @property
    def tax(self):
        """Gets the tax of this InvoiceLines.  # noqa: E501


        :return: The tax of this InvoiceLines.  # noqa: E501
        :rtype: float
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this InvoiceLines.


        :param tax: The tax of this InvoiceLines.  # noqa: E501
        :type: float
        """
        if tax is None:
            raise ValueError("Invalid value for `tax`, must not be `None`")  # noqa: E501

        self._tax = tax

    @property
    def component_value(self):
        """Gets the component_value of this InvoiceLines.  # noqa: E501


        :return: The component_value of this InvoiceLines.  # noqa: E501
        :rtype: int
        """
        return self._component_value

    @component_value.setter
    def component_value(self, component_value):
        """Sets the component_value of this InvoiceLines.


        :param component_value: The component_value of this InvoiceLines.  # noqa: E501
        :type: int
        """

        self._component_value = component_value

    @property
    def quantity_label(self):
        """Gets the quantity_label of this InvoiceLines.  # noqa: E501


        :return: The quantity_label of this InvoiceLines.  # noqa: E501
        :rtype: str
        """
        return self._quantity_label

    @quantity_label.setter
    def quantity_label(self, quantity_label):
        """Sets the quantity_label of this InvoiceLines.


        :param quantity_label: The quantity_label of this InvoiceLines.  # noqa: E501
        :type: str
        """

        self._quantity_label = quantity_label

    @property
    def pricing_component_id(self):
        """Gets the pricing_component_id of this InvoiceLines.  # noqa: E501


        :return: The pricing_component_id of this InvoiceLines.  # noqa: E501
        :rtype: str
        """
        return self._pricing_component_id

    @pricing_component_id.setter
    def pricing_component_id(self, pricing_component_id):
        """Sets the pricing_component_id of this InvoiceLines.


        :param pricing_component_id: The pricing_component_id of this InvoiceLines.  # noqa: E501
        :type: str
        """

        self._pricing_component_id = pricing_component_id

    @property
    def public_pricing_component_name(self):
        """Gets the public_pricing_component_name of this InvoiceLines.  # noqa: E501


        :return: The public_pricing_component_name of this InvoiceLines.  # noqa: E501
        :rtype: str
        """
        return self._public_pricing_component_name

    @public_pricing_component_name.setter
    def public_pricing_component_name(self, public_pricing_component_name):
        """Sets the public_pricing_component_name of this InvoiceLines.


        :param public_pricing_component_name: The public_pricing_component_name of this InvoiceLines.  # noqa: E501
        :type: str
        """

        self._public_pricing_component_name = public_pricing_component_name

    @property
    def pricing_component_name(self):
        """Gets the pricing_component_name of this InvoiceLines.  # noqa: E501


        :return: The pricing_component_name of this InvoiceLines.  # noqa: E501
        :rtype: str
        """
        return self._pricing_component_name

    @pricing_component_name.setter
    def pricing_component_name(self, pricing_component_name):
        """Sets the pricing_component_name of this InvoiceLines.


        :param pricing_component_name: The pricing_component_name of this InvoiceLines.  # noqa: E501
        :type: str
        """

        self._pricing_component_name = pricing_component_name

    @property
    def subscription_charge_id(self):
        """Gets the subscription_charge_id of this InvoiceLines.  # noqa: E501


        :return: The subscription_charge_id of this InvoiceLines.  # noqa: E501
        :rtype: str
        """
        return self._subscription_charge_id

    @subscription_charge_id.setter
    def subscription_charge_id(self, subscription_charge_id):
        """Sets the subscription_charge_id of this InvoiceLines.


        :param subscription_charge_id: The subscription_charge_id of this InvoiceLines.  # noqa: E501
        :type: str
        """

        self._subscription_charge_id = subscription_charge_id

    @property
    def child_invoice_id(self):
        """Gets the child_invoice_id of this InvoiceLines.  # noqa: E501


        :return: The child_invoice_id of this InvoiceLines.  # noqa: E501
        :rtype: str
        """
        return self._child_invoice_id

    @child_invoice_id.setter
    def child_invoice_id(self, child_invoice_id):
        """Sets the child_invoice_id of this InvoiceLines.


        :param child_invoice_id: The child_invoice_id of this InvoiceLines.  # noqa: E501
        :type: str
        """

        self._child_invoice_id = child_invoice_id

    @property
    def type(self):
        """Gets the type of this InvoiceLines.  # noqa: E501


        :return: The type of this InvoiceLines.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InvoiceLines.


        :param type: The type of this InvoiceLines.  # noqa: E501
        :type: str
        """
        allowed_values = ["PricingComponent", "Coupon", "Migration", "AggregatedInvoice", "Prepayment", "Manual", "AffiliateCommission"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def pricing_component_type(self):
        """Gets the pricing_component_type of this InvoiceLines.  # noqa: E501


        :return: The pricing_component_type of this InvoiceLines.  # noqa: E501
        :rtype: str
        """
        return self._pricing_component_type

    @pricing_component_type.setter
    def pricing_component_type(self, pricing_component_type):
        """Sets the pricing_component_type of this InvoiceLines.


        :param pricing_component_type: The pricing_component_type of this InvoiceLines.  # noqa: E501
        :type: str
        """
        if pricing_component_type is None:
            raise ValueError("Invalid value for `pricing_component_type`, must not be `None`")  # noqa: E501
        allowed_values = ["setup", "subscription", "arrears", "usage"]  # noqa: E501
        if pricing_component_type not in allowed_values:
            raise ValueError(
                "Invalid value for `pricing_component_type` ({0}), must be one of {1}"  # noqa: E501
                .format(pricing_component_type, allowed_values)
            )

        self._pricing_component_type = pricing_component_type

    @property
    def charge_type(self):
        """Gets the charge_type of this InvoiceLines.  # noqa: E501


        :return: The charge_type of this InvoiceLines.  # noqa: E501
        :rtype: str
        """
        return self._charge_type

    @charge_type.setter
    def charge_type(self, charge_type):
        """Sets the charge_type of this InvoiceLines.


        :param charge_type: The charge_type of this InvoiceLines.  # noqa: E501
        :type: str
        """
        if charge_type is None:
            raise ValueError("Invalid value for `charge_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Credit", "Debit"]  # noqa: E501
        if charge_type not in allowed_values:
            raise ValueError(
                "Invalid value for `charge_type` ({0}), must be one of {1}"  # noqa: E501
                .format(charge_type, allowed_values)
            )

        self._charge_type = charge_type

    @property
    def period_start(self):
        """Gets the period_start of this InvoiceLines.  # noqa: E501


        :return: The period_start of this InvoiceLines.  # noqa: E501
        :rtype: datetime
        """
        return self._period_start

    @period_start.setter
    def period_start(self, period_start):
        """Sets the period_start of this InvoiceLines.


        :param period_start: The period_start of this InvoiceLines.  # noqa: E501
        :type: datetime
        """
        if period_start is None:
            raise ValueError("Invalid value for `period_start`, must not be `None`")  # noqa: E501

        self._period_start = period_start

    @property
    def period_end(self):
        """Gets the period_end of this InvoiceLines.  # noqa: E501


        :return: The period_end of this InvoiceLines.  # noqa: E501
        :rtype: datetime
        """
        return self._period_end

    @period_end.setter
    def period_end(self, period_end):
        """Sets the period_end of this InvoiceLines.


        :param period_end: The period_end of this InvoiceLines.  # noqa: E501
        :type: datetime
        """
        if period_end is None:
            raise ValueError("Invalid value for `period_end`, must not be `None`")  # noqa: E501

        self._period_end = period_end

    @property
    def linked_charge_id(self):
        """Gets the linked_charge_id of this InvoiceLines.  # noqa: E501


        :return: The linked_charge_id of this InvoiceLines.  # noqa: E501
        :rtype: str
        """
        return self._linked_charge_id

    @linked_charge_id.setter
    def linked_charge_id(self, linked_charge_id):
        """Sets the linked_charge_id of this InvoiceLines.


        :param linked_charge_id: The linked_charge_id of this InvoiceLines.  # noqa: E501
        :type: str
        """

        self._linked_charge_id = linked_charge_id

    @property
    def discount(self):
        """Gets the discount of this InvoiceLines.  # noqa: E501


        :return: The discount of this InvoiceLines.  # noqa: E501
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this InvoiceLines.


        :param discount: The discount of this InvoiceLines.  # noqa: E501
        :type: float
        """

        self._discount = discount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvoiceLines, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoiceLines):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
