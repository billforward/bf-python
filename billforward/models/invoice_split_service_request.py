# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InvoiceSplitServiceRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'requests': 'list[InvoiceSplit]',
        'organization_id': 'str',
        'invoice_state': 'str',
        'invoice_execution_time': 'str'
    }

    attribute_map = {
        'requests': 'requests',
        'organization_id': 'organizationID',
        'invoice_state': 'invoiceState',
        'invoice_execution_time': 'invoiceExecutionTime'
    }

    def __init__(self, requests=None, organization_id=None, invoice_state=None, invoice_execution_time=None):  # noqa: E501
        """InvoiceSplitServiceRequest - a model defined in Swagger"""  # noqa: E501
        self._requests = None
        self._organization_id = None
        self._invoice_state = None
        self._invoice_execution_time = None
        self.discriminator = None
        if requests is not None:
            self.requests = requests
        if organization_id is not None:
            self.organization_id = organization_id
        if invoice_state is not None:
            self.invoice_state = invoice_state
        if invoice_execution_time is not None:
            self.invoice_execution_time = invoice_execution_time

    @property
    def requests(self):
        """Gets the requests of this InvoiceSplitServiceRequest.  # noqa: E501


        :return: The requests of this InvoiceSplitServiceRequest.  # noqa: E501
        :rtype: list[InvoiceSplit]
        """
        return self._requests

    @requests.setter
    def requests(self, requests):
        """Sets the requests of this InvoiceSplitServiceRequest.


        :param requests: The requests of this InvoiceSplitServiceRequest.  # noqa: E501
        :type: list[InvoiceSplit]
        """

        self._requests = requests

    @property
    def organization_id(self):
        """Gets the organization_id of this InvoiceSplitServiceRequest.  # noqa: E501


        :return: The organization_id of this InvoiceSplitServiceRequest.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this InvoiceSplitServiceRequest.


        :param organization_id: The organization_id of this InvoiceSplitServiceRequest.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def invoice_state(self):
        """Gets the invoice_state of this InvoiceSplitServiceRequest.  # noqa: E501


        :return: The invoice_state of this InvoiceSplitServiceRequest.  # noqa: E501
        :rtype: str
        """
        return self._invoice_state

    @invoice_state.setter
    def invoice_state(self, invoice_state):
        """Sets the invoice_state of this InvoiceSplitServiceRequest.


        :param invoice_state: The invoice_state of this InvoiceSplitServiceRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Pending", "Unpaid"]  # noqa: E501
        if invoice_state not in allowed_values:
            raise ValueError(
                "Invalid value for `invoice_state` ({0}), must be one of {1}"  # noqa: E501
                .format(invoice_state, allowed_values)
            )

        self._invoice_state = invoice_state

    @property
    def invoice_execution_time(self):
        """Gets the invoice_execution_time of this InvoiceSplitServiceRequest.  # noqa: E501


        :return: The invoice_execution_time of this InvoiceSplitServiceRequest.  # noqa: E501
        :rtype: str
        """
        return self._invoice_execution_time

    @invoice_execution_time.setter
    def invoice_execution_time(self, invoice_execution_time):
        """Sets the invoice_execution_time of this InvoiceSplitServiceRequest.


        :param invoice_execution_time: The invoice_execution_time of this InvoiceSplitServiceRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["DueDate", "PeriodStart"]  # noqa: E501
        if invoice_execution_time not in allowed_values:
            raise ValueError(
                "Invalid value for `invoice_execution_time` ({0}), must be one of {1}"  # noqa: E501
                .format(invoice_execution_time, allowed_values)
            )

        self._invoice_execution_time = invoice_execution_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvoiceSplitServiceRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoiceSplitServiceRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
