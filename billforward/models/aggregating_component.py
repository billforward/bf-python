# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class AggregatingComponent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, changed_by=None, updated=None, id=None, organization_id=None, product_rate_plan_id=None, product_rate_plan_name=None, pricing_component_id=None, pricing_component_name=None, deleted=False):
        """
        AggregatingComponent - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'changed_by': 'str',
            'updated': 'datetime',
            'id': 'str',
            'organization_id': 'str',
            'product_rate_plan_id': 'str',
            'product_rate_plan_name': 'str',
            'pricing_component_id': 'str',
            'pricing_component_name': 'str',
            'deleted': 'bool'
        }

        self.attribute_map = {
            'created': 'created',
            'changed_by': 'changedBy',
            'updated': 'updated',
            'id': 'id',
            'organization_id': 'organizationID',
            'product_rate_plan_id': 'productRatePlanID',
            'product_rate_plan_name': 'productRatePlanName',
            'pricing_component_id': 'pricingComponentID',
            'pricing_component_name': 'pricingComponentName',
            'deleted': 'deleted'
        }

        self._created = created
        self._changed_by = changed_by
        self._updated = updated
        self._id = id
        self._organization_id = organization_id
        self._product_rate_plan_id = product_rate_plan_id
        self._product_rate_plan_name = product_rate_plan_name
        self._pricing_component_id = pricing_component_id
        self._pricing_component_name = pricing_component_name
        self._deleted = deleted

    @property
    def created(self):
        """
        Gets the created of this AggregatingComponent.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this AggregatingComponent.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this AggregatingComponent.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this AggregatingComponent.
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """
        Gets the changed_by of this AggregatingComponent.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :return: The changed_by of this AggregatingComponent.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """
        Sets the changed_by of this AggregatingComponent.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :param changed_by: The changed_by of this AggregatingComponent.
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """
        Gets the updated of this AggregatingComponent.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :return: The updated of this AggregatingComponent.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this AggregatingComponent.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :param updated: The updated of this AggregatingComponent.
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """
        Gets the id of this AggregatingComponent.
        {\"description\":\"Unique ID by which the AggregatingComponent can be looked up.\",\"verbs\":[\"GET\"]}

        :return: The id of this AggregatingComponent.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AggregatingComponent.
        {\"description\":\"Unique ID by which the AggregatingComponent can be looked up.\",\"verbs\":[\"GET\"]}

        :param id: The id of this AggregatingComponent.
        :type: str
        """

        self._id = id

    @property
    def organization_id(self):
        """
        Gets the organization_id of this AggregatingComponent.
        {\"default\":\"(Auto-populated using your authentication credentials)\",\"description\":\"ID of the BillForward Organization within which the requested pricing component should be created. If omitted: this will be auto-populated using your authentication credentials.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The organization_id of this AggregatingComponent.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this AggregatingComponent.
        {\"default\":\"(Auto-populated using your authentication credentials)\",\"description\":\"ID of the BillForward Organization within which the requested pricing component should be created. If omitted: this will be auto-populated using your authentication credentials.\",\"verbs\":[\"POST\",\"GET\"]}

        :param organization_id: The organization_id of this AggregatingComponent.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def product_rate_plan_id(self):
        """
        Gets the product_rate_plan_id of this AggregatingComponent.
        {\"description\":\"ID of the rate plan upon which this AggregatingComponent is defined.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The product_rate_plan_id of this AggregatingComponent.
        :rtype: str
        """
        return self._product_rate_plan_id

    @product_rate_plan_id.setter
    def product_rate_plan_id(self, product_rate_plan_id):
        """
        Sets the product_rate_plan_id of this AggregatingComponent.
        {\"description\":\"ID of the rate plan upon which this AggregatingComponent is defined.\",\"verbs\":[\"POST\",\"GET\"]}

        :param product_rate_plan_id: The product_rate_plan_id of this AggregatingComponent.
        :type: str
        """

        self._product_rate_plan_id = product_rate_plan_id

    @property
    def product_rate_plan_name(self):
        """
        Gets the product_rate_plan_name of this AggregatingComponent.
        {\"description\":\"Name of the rate plan upon which this AggregatingComponent is defined.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The product_rate_plan_name of this AggregatingComponent.
        :rtype: str
        """
        return self._product_rate_plan_name

    @product_rate_plan_name.setter
    def product_rate_plan_name(self, product_rate_plan_name):
        """
        Sets the product_rate_plan_name of this AggregatingComponent.
        {\"description\":\"Name of the rate plan upon which this AggregatingComponent is defined.\",\"verbs\":[\"POST\",\"GET\"]}

        :param product_rate_plan_name: The product_rate_plan_name of this AggregatingComponent.
        :type: str
        """

        self._product_rate_plan_name = product_rate_plan_name

    @property
    def pricing_component_id(self):
        """
        Gets the pricing_component_id of this AggregatingComponent.
        {\"description\":\"ID of the pricing component to which this AggregatingComponent's aggregation applies. The subscriber to the aggregating rate plan (which contains this AggregatingComponent), will consult its children at the end of each billing period, and collect from those children all charges whose pricing component matches this ID. Those charges' quantities will be counted, and used when calculating the price of consuming this AggregatingComponent. The aggregating subscription then raises a discount charge &mdash; to account for the more favourable price tiering that emerges when aggregating.\",\"verbs\":[\"POST\"]}

        :return: The pricing_component_id of this AggregatingComponent.
        :rtype: str
        """
        return self._pricing_component_id

    @pricing_component_id.setter
    def pricing_component_id(self, pricing_component_id):
        """
        Sets the pricing_component_id of this AggregatingComponent.
        {\"description\":\"ID of the pricing component to which this AggregatingComponent's aggregation applies. The subscriber to the aggregating rate plan (which contains this AggregatingComponent), will consult its children at the end of each billing period, and collect from those children all charges whose pricing component matches this ID. Those charges' quantities will be counted, and used when calculating the price of consuming this AggregatingComponent. The aggregating subscription then raises a discount charge &mdash; to account for the more favourable price tiering that emerges when aggregating.\",\"verbs\":[\"POST\"]}

        :param pricing_component_id: The pricing_component_id of this AggregatingComponent.
        :type: str
        """

        self._pricing_component_id = pricing_component_id

    @property
    def pricing_component_name(self):
        """
        Gets the pricing_component_name of this AggregatingComponent.
        {\"description\":\"Name of the pricing component to which this AggregatingComponent's aggregation applies. The subscriber to the aggregating rate plan (which contains this AggregatingComponent), will consult its children at the end of each billing period, and collect from those children all charges whose pricing component matches this ID. Those charges' quantities will be counted, and used when calculating the price of consuming this AggregatingComponent. The aggregating subscription then raises a discount charge &mdash; to account for the more favourable price tiering that emerges when aggregating.\",\"verbs\":[\"POST\"]}

        :return: The pricing_component_name of this AggregatingComponent.
        :rtype: str
        """
        return self._pricing_component_name

    @pricing_component_name.setter
    def pricing_component_name(self, pricing_component_name):
        """
        Sets the pricing_component_name of this AggregatingComponent.
        {\"description\":\"Name of the pricing component to which this AggregatingComponent's aggregation applies. The subscriber to the aggregating rate plan (which contains this AggregatingComponent), will consult its children at the end of each billing period, and collect from those children all charges whose pricing component matches this ID. Those charges' quantities will be counted, and used when calculating the price of consuming this AggregatingComponent. The aggregating subscription then raises a discount charge &mdash; to account for the more favourable price tiering that emerges when aggregating.\",\"verbs\":[\"POST\"]}

        :param pricing_component_name: The pricing_component_name of this AggregatingComponent.
        :type: str
        """

        self._pricing_component_name = pricing_component_name

    @property
    def deleted(self):
        """
        Gets the deleted of this AggregatingComponent.
        {\"default\":false,\"description\":\"Whether the AggregatingComponent has been retired.\",\"verbs\":[\"GET\"]}

        :return: The deleted of this AggregatingComponent.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """
        Sets the deleted of this AggregatingComponent.
        {\"default\":false,\"description\":\"Whether the AggregatingComponent has been retired.\",\"verbs\":[\"GET\"]}

        :param deleted: The deleted of this AggregatingComponent.
        :type: bool
        """

        self._deleted = deleted

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
