# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Amendment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'changed_by': 'str',
        'updated': 'datetime',
        'dummy_field': 'str',
        'id': 'str',
        'organization_id': 'str',
        'subscription_id': 'str',
        'description': 'str',
        'actioning_time': 'datetime',
        'actioned_time': 'datetime',
        'state': 'str',
        'deleted': 'bool',
        'discardable_subsystem_object': 'IDiscardable',
        'amendment_type': 'str',
        'at_type': 'str'
    }

    attribute_map = {
        'created': 'created',
        'changed_by': 'changedBy',
        'updated': 'updated',
        'dummy_field': 'dummyField',
        'id': 'id',
        'organization_id': 'organizationID',
        'subscription_id': 'subscriptionID',
        'description': 'description',
        'actioning_time': 'actioningTime',
        'actioned_time': 'actionedTime',
        'state': 'state',
        'deleted': 'deleted',
        'discardable_subsystem_object': 'discardableSubsystemObject',
        'amendment_type': 'amendmentType',
        'at_type': '@type'
    }

    discriminator_value_class_map = {
          'SubscriptionReviveAmendment': 'SubscriptionReviveAmendment',
'AmendmentDiscardAmendment': 'AmendmentDiscardAmendment',
'UpdateComponentValueAmendment': 'UpdateComponentValueAmendment',
'InvoiceNextExecutionAttemptAmendment': 'InvoiceNextExecutionAttemptAmendment',
'CreateSubscriptionChargeAmendment': 'CreateSubscriptionChargeAmendment',
'ResumeSubscriptionAmendment': 'ResumeSubscriptionAmendment',
'CancellationAmendment': 'CancellationAmendment',
'PricingComponentValueAmendment': 'PricingComponentValueAmendment',
'InvoiceOutstandingChargesAmendment': 'InvoiceOutstandingChargesAmendment',
'FixedTermExpiryAmendment': 'FixedTermExpiryAmendment',
'IssueInvoiceAmendment': 'IssueInvoiceAmendment',
'InvoiceRecalculationAmendment': 'InvoiceRecalculationAmendment',
'EndTrialAmendment': 'EndTrialAmendment',
'ProductRatePlanMigrationAmendment': 'ProductRatePlanMigrationAmendment',
'ServiceEndAmendment': 'ServiceEndAmendment',
'TimerAmendment': 'TimerAmendment'    }

    def __init__(self, created=None, changed_by=None, updated=None, dummy_field=None, id=None, organization_id=None, subscription_id=None, description=None, actioning_time=None, actioned_time=None, state=None, deleted=None, discardable_subsystem_object=None, amendment_type=None, at_type=None):  # noqa: E501
        """Amendment - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._changed_by = None
        self._updated = None
        self._dummy_field = None
        self._id = None
        self._organization_id = None
        self._subscription_id = None
        self._description = None
        self._actioning_time = None
        self._actioned_time = None
        self._state = None
        self._deleted = None
        self._discardable_subsystem_object = None
        self._amendment_type = None
        self._at_type = None
        self.discriminator = '@type'
        if created is not None:
            self.created = created
        if changed_by is not None:
            self.changed_by = changed_by
        if updated is not None:
            self.updated = updated
        if dummy_field is not None:
            self.dummy_field = dummy_field
        if id is not None:
            self.id = id
        if organization_id is not None:
            self.organization_id = organization_id
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if description is not None:
            self.description = description
        if actioning_time is not None:
            self.actioning_time = actioning_time
        if actioned_time is not None:
            self.actioned_time = actioned_time
        self.state = state
        self.deleted = deleted
        if discardable_subsystem_object is not None:
            self.discardable_subsystem_object = discardable_subsystem_object
        if amendment_type is not None:
            self.amendment_type = amendment_type
        self.at_type = at_type

    @property
    def created(self):
        """Gets the created of this Amendment.  # noqa: E501


        :return: The created of this Amendment.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Amendment.


        :param created: The created of this Amendment.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """Gets the changed_by of this Amendment.  # noqa: E501


        :return: The changed_by of this Amendment.  # noqa: E501
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """Sets the changed_by of this Amendment.


        :param changed_by: The changed_by of this Amendment.  # noqa: E501
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """Gets the updated of this Amendment.  # noqa: E501


        :return: The updated of this Amendment.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Amendment.


        :param updated: The updated of this Amendment.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def dummy_field(self):
        """Gets the dummy_field of this Amendment.  # noqa: E501


        :return: The dummy_field of this Amendment.  # noqa: E501
        :rtype: str
        """
        return self._dummy_field

    @dummy_field.setter
    def dummy_field(self, dummy_field):
        """Sets the dummy_field of this Amendment.


        :param dummy_field: The dummy_field of this Amendment.  # noqa: E501
        :type: str
        """

        self._dummy_field = dummy_field

    @property
    def id(self):
        """Gets the id of this Amendment.  # noqa: E501


        :return: The id of this Amendment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Amendment.


        :param id: The id of this Amendment.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def organization_id(self):
        """Gets the organization_id of this Amendment.  # noqa: E501


        :return: The organization_id of this Amendment.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this Amendment.


        :param organization_id: The organization_id of this Amendment.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this Amendment.  # noqa: E501


        :return: The subscription_id of this Amendment.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this Amendment.


        :param subscription_id: The subscription_id of this Amendment.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def description(self):
        """Gets the description of this Amendment.  # noqa: E501


        :return: The description of this Amendment.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Amendment.


        :param description: The description of this Amendment.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def actioning_time(self):
        """Gets the actioning_time of this Amendment.  # noqa: E501


        :return: The actioning_time of this Amendment.  # noqa: E501
        :rtype: datetime
        """
        return self._actioning_time

    @actioning_time.setter
    def actioning_time(self, actioning_time):
        """Sets the actioning_time of this Amendment.


        :param actioning_time: The actioning_time of this Amendment.  # noqa: E501
        :type: datetime
        """

        self._actioning_time = actioning_time

    @property
    def actioned_time(self):
        """Gets the actioned_time of this Amendment.  # noqa: E501


        :return: The actioned_time of this Amendment.  # noqa: E501
        :rtype: datetime
        """
        return self._actioned_time

    @actioned_time.setter
    def actioned_time(self, actioned_time):
        """Sets the actioned_time of this Amendment.


        :param actioned_time: The actioned_time of this Amendment.  # noqa: E501
        :type: datetime
        """

        self._actioned_time = actioned_time

    @property
    def state(self):
        """Gets the state of this Amendment.  # noqa: E501


        :return: The state of this Amendment.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Amendment.


        :param state: The state of this Amendment.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["Pending", "Succeeded", "Failed", "Discarded"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def deleted(self):
        """Gets the deleted of this Amendment.  # noqa: E501


        :return: The deleted of this Amendment.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Amendment.


        :param deleted: The deleted of this Amendment.  # noqa: E501
        :type: bool
        """
        if deleted is None:
            raise ValueError("Invalid value for `deleted`, must not be `None`")  # noqa: E501

        self._deleted = deleted

    @property
    def discardable_subsystem_object(self):
        """Gets the discardable_subsystem_object of this Amendment.  # noqa: E501


        :return: The discardable_subsystem_object of this Amendment.  # noqa: E501
        :rtype: IDiscardable
        """
        return self._discardable_subsystem_object

    @discardable_subsystem_object.setter
    def discardable_subsystem_object(self, discardable_subsystem_object):
        """Sets the discardable_subsystem_object of this Amendment.


        :param discardable_subsystem_object: The discardable_subsystem_object of this Amendment.  # noqa: E501
        :type: IDiscardable
        """

        self._discardable_subsystem_object = discardable_subsystem_object

    @property
    def amendment_type(self):
        """Gets the amendment_type of this Amendment.  # noqa: E501


        :return: The amendment_type of this Amendment.  # noqa: E501
        :rtype: str
        """
        return self._amendment_type

    @amendment_type.setter
    def amendment_type(self, amendment_type):
        """Sets the amendment_type of this Amendment.


        :param amendment_type: The amendment_type of this Amendment.  # noqa: E501
        :type: str
        """
        allowed_values = ["InvoiceNextExecutionAttempt", "Cancellation", "PricingComponentValue", "AmendmentDiscard", "Compound", "FixedTermExpiry", "InvoiceRecalculation", "EndTrial", "InvoiceOutstandingCharges", "IssueInvoice", "ProductRatePlanMigration", "UpdateComponentValue", "ServiceEnd", "ResumeSubscription", "CreateSubscriptionCharge", "Timer", "SubscriptionRevive"]  # noqa: E501
        if amendment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `amendment_type` ({0}), must be one of {1}"  # noqa: E501
                .format(amendment_type, allowed_values)
            )

        self._amendment_type = amendment_type

    @property
    def at_type(self):
        """Gets the at_type of this Amendment.  # noqa: E501


        :return: The at_type of this Amendment.  # noqa: E501
        :rtype: str
        """
        return self._at_type

    @at_type.setter
    def at_type(self, at_type):
        """Sets the at_type of this Amendment.


        :param at_type: The at_type of this Amendment.  # noqa: E501
        :type: str
        """
        if at_type is None:
            raise ValueError("Invalid value for `at_type`, must not be `None`")  # noqa: E501

        self._at_type = at_type

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Amendment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Amendment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
