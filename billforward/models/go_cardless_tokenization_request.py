# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GoCardlessTokenizationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'organization_id': 'str',
        'account_id': 'str',
        'default_payment_method': 'bool',
        'account_holder_name': 'str',
        'sort_code': 'str',
        'account_number': 'str',
        'iban': 'str',
        'country': 'str',
        'currency': 'str',
        'holder_type': 'str',
        'customer_id': 'str',
        'name': 'str',
        'email_tokenization_id': 'str'
    }

    attribute_map = {
        'created': 'created',
        'organization_id': 'organizationID',
        'account_id': 'accountID',
        'default_payment_method': 'defaultPaymentMethod',
        'account_holder_name': 'accountHolderName',
        'sort_code': 'sortCode',
        'account_number': 'accountNumber',
        'iban': 'iban',
        'country': 'country',
        'currency': 'currency',
        'holder_type': 'holderType',
        'customer_id': 'customerID',
        'name': 'name',
        'email_tokenization_id': 'emailTokenizationID'
    }

    def __init__(self, created=None, organization_id=None, account_id=None, default_payment_method=None, account_holder_name=None, sort_code=None, account_number=None, iban=None, country=None, currency=None, holder_type=None, customer_id=None, name=None, email_tokenization_id=None):  # noqa: E501
        """GoCardlessTokenizationRequest - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._organization_id = None
        self._account_id = None
        self._default_payment_method = None
        self._account_holder_name = None
        self._sort_code = None
        self._account_number = None
        self._iban = None
        self._country = None
        self._currency = None
        self._holder_type = None
        self._customer_id = None
        self._name = None
        self._email_tokenization_id = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if organization_id is not None:
            self.organization_id = organization_id
        if account_id is not None:
            self.account_id = account_id
        if default_payment_method is not None:
            self.default_payment_method = default_payment_method
        if account_holder_name is not None:
            self.account_holder_name = account_holder_name
        if sort_code is not None:
            self.sort_code = sort_code
        if account_number is not None:
            self.account_number = account_number
        if iban is not None:
            self.iban = iban
        if country is not None:
            self.country = country
        if currency is not None:
            self.currency = currency
        if holder_type is not None:
            self.holder_type = holder_type
        if customer_id is not None:
            self.customer_id = customer_id
        if name is not None:
            self.name = name
        if email_tokenization_id is not None:
            self.email_tokenization_id = email_tokenization_id

    @property
    def created(self):
        """Gets the created of this GoCardlessTokenizationRequest.  # noqa: E501


        :return: The created of this GoCardlessTokenizationRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this GoCardlessTokenizationRequest.


        :param created: The created of this GoCardlessTokenizationRequest.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def organization_id(self):
        """Gets the organization_id of this GoCardlessTokenizationRequest.  # noqa: E501


        :return: The organization_id of this GoCardlessTokenizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this GoCardlessTokenizationRequest.


        :param organization_id: The organization_id of this GoCardlessTokenizationRequest.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def account_id(self):
        """Gets the account_id of this GoCardlessTokenizationRequest.  # noqa: E501


        :return: The account_id of this GoCardlessTokenizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this GoCardlessTokenizationRequest.


        :param account_id: The account_id of this GoCardlessTokenizationRequest.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def default_payment_method(self):
        """Gets the default_payment_method of this GoCardlessTokenizationRequest.  # noqa: E501


        :return: The default_payment_method of this GoCardlessTokenizationRequest.  # noqa: E501
        :rtype: bool
        """
        return self._default_payment_method

    @default_payment_method.setter
    def default_payment_method(self, default_payment_method):
        """Sets the default_payment_method of this GoCardlessTokenizationRequest.


        :param default_payment_method: The default_payment_method of this GoCardlessTokenizationRequest.  # noqa: E501
        :type: bool
        """

        self._default_payment_method = default_payment_method

    @property
    def account_holder_name(self):
        """Gets the account_holder_name of this GoCardlessTokenizationRequest.  # noqa: E501


        :return: The account_holder_name of this GoCardlessTokenizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_holder_name

    @account_holder_name.setter
    def account_holder_name(self, account_holder_name):
        """Sets the account_holder_name of this GoCardlessTokenizationRequest.


        :param account_holder_name: The account_holder_name of this GoCardlessTokenizationRequest.  # noqa: E501
        :type: str
        """

        self._account_holder_name = account_holder_name

    @property
    def sort_code(self):
        """Gets the sort_code of this GoCardlessTokenizationRequest.  # noqa: E501


        :return: The sort_code of this GoCardlessTokenizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._sort_code

    @sort_code.setter
    def sort_code(self, sort_code):
        """Sets the sort_code of this GoCardlessTokenizationRequest.


        :param sort_code: The sort_code of this GoCardlessTokenizationRequest.  # noqa: E501
        :type: str
        """

        self._sort_code = sort_code

    @property
    def account_number(self):
        """Gets the account_number of this GoCardlessTokenizationRequest.  # noqa: E501


        :return: The account_number of this GoCardlessTokenizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this GoCardlessTokenizationRequest.


        :param account_number: The account_number of this GoCardlessTokenizationRequest.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def iban(self):
        """Gets the iban of this GoCardlessTokenizationRequest.  # noqa: E501


        :return: The iban of this GoCardlessTokenizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this GoCardlessTokenizationRequest.


        :param iban: The iban of this GoCardlessTokenizationRequest.  # noqa: E501
        :type: str
        """

        self._iban = iban

    @property
    def country(self):
        """Gets the country of this GoCardlessTokenizationRequest.  # noqa: E501


        :return: The country of this GoCardlessTokenizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this GoCardlessTokenizationRequest.


        :param country: The country of this GoCardlessTokenizationRequest.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def currency(self):
        """Gets the currency of this GoCardlessTokenizationRequest.  # noqa: E501


        :return: The currency of this GoCardlessTokenizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this GoCardlessTokenizationRequest.


        :param currency: The currency of this GoCardlessTokenizationRequest.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def holder_type(self):
        """Gets the holder_type of this GoCardlessTokenizationRequest.  # noqa: E501


        :return: The holder_type of this GoCardlessTokenizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._holder_type

    @holder_type.setter
    def holder_type(self, holder_type):
        """Sets the holder_type of this GoCardlessTokenizationRequest.


        :param holder_type: The holder_type of this GoCardlessTokenizationRequest.  # noqa: E501
        :type: str
        """

        self._holder_type = holder_type

    @property
    def customer_id(self):
        """Gets the customer_id of this GoCardlessTokenizationRequest.  # noqa: E501


        :return: The customer_id of this GoCardlessTokenizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this GoCardlessTokenizationRequest.


        :param customer_id: The customer_id of this GoCardlessTokenizationRequest.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def name(self):
        """Gets the name of this GoCardlessTokenizationRequest.  # noqa: E501


        :return: The name of this GoCardlessTokenizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoCardlessTokenizationRequest.


        :param name: The name of this GoCardlessTokenizationRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def email_tokenization_id(self):
        """Gets the email_tokenization_id of this GoCardlessTokenizationRequest.  # noqa: E501


        :return: The email_tokenization_id of this GoCardlessTokenizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._email_tokenization_id

    @email_tokenization_id.setter
    def email_tokenization_id(self, email_tokenization_id):
        """Sets the email_tokenization_id of this GoCardlessTokenizationRequest.


        :param email_tokenization_id: The email_tokenization_id of this GoCardlessTokenizationRequest.  # noqa: E501
        :type: str
        """

        self._email_tokenization_id = email_tokenization_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GoCardlessTokenizationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GoCardlessTokenizationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
