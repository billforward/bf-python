# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdatePricingComponentValueRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pricing_component': 'str',
        'value': 'int',
        'change_mode': 'str',
        'prorate': 'bool'
    }

    attribute_map = {
        'pricing_component': 'pricingComponent',
        'value': 'value',
        'change_mode': 'changeMode',
        'prorate': 'prorate'
    }

    def __init__(self, pricing_component=None, value=None, change_mode=None, prorate=None):  # noqa: E501
        """UpdatePricingComponentValueRequest - a model defined in Swagger"""  # noqa: E501
        self._pricing_component = None
        self._value = None
        self._change_mode = None
        self._prorate = None
        self.discriminator = None
        self.pricing_component = pricing_component
        self.value = value
        if change_mode is not None:
            self.change_mode = change_mode
        if prorate is not None:
            self.prorate = prorate

    @property
    def pricing_component(self):
        """Gets the pricing_component of this UpdatePricingComponentValueRequest.  # noqa: E501


        :return: The pricing_component of this UpdatePricingComponentValueRequest.  # noqa: E501
        :rtype: str
        """
        return self._pricing_component

    @pricing_component.setter
    def pricing_component(self, pricing_component):
        """Sets the pricing_component of this UpdatePricingComponentValueRequest.


        :param pricing_component: The pricing_component of this UpdatePricingComponentValueRequest.  # noqa: E501
        :type: str
        """
        if pricing_component is None:
            raise ValueError("Invalid value for `pricing_component`, must not be `None`")  # noqa: E501

        self._pricing_component = pricing_component

    @property
    def value(self):
        """Gets the value of this UpdatePricingComponentValueRequest.  # noqa: E501


        :return: The value of this UpdatePricingComponentValueRequest.  # noqa: E501
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this UpdatePricingComponentValueRequest.


        :param value: The value of this UpdatePricingComponentValueRequest.  # noqa: E501
        :type: int
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def change_mode(self):
        """Gets the change_mode of this UpdatePricingComponentValueRequest.  # noqa: E501


        :return: The change_mode of this UpdatePricingComponentValueRequest.  # noqa: E501
        :rtype: str
        """
        return self._change_mode

    @change_mode.setter
    def change_mode(self, change_mode):
        """Sets the change_mode of this UpdatePricingComponentValueRequest.


        :param change_mode: The change_mode of this UpdatePricingComponentValueRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Default", "Immediate", "AtPeriodEnd"]  # noqa: E501
        if change_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `change_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(change_mode, allowed_values)
            )

        self._change_mode = change_mode

    @property
    def prorate(self):
        """Gets the prorate of this UpdatePricingComponentValueRequest.  # noqa: E501


        :return: The prorate of this UpdatePricingComponentValueRequest.  # noqa: E501
        :rtype: bool
        """
        return self._prorate

    @prorate.setter
    def prorate(self, prorate):
        """Sets the prorate of this UpdatePricingComponentValueRequest.


        :param prorate: The prorate of this UpdatePricingComponentValueRequest.  # noqa: E501
        :type: bool
        """

        self._prorate = prorate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdatePricingComponentValueRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdatePricingComponentValueRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
