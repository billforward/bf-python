# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TrustCommerceToken(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'changed_by': 'str',
        'updated': 'datetime',
        'id': 'str',
        'account_id': 'str',
        'card_details_id': 'str',
        'organization_id': 'str',
        'token_id': 'str',
        'deleted': 'bool'
    }

    attribute_map = {
        'created': 'created',
        'changed_by': 'changedBy',
        'updated': 'updated',
        'id': 'id',
        'account_id': 'accountID',
        'card_details_id': 'cardDetailsID',
        'organization_id': 'organizationID',
        'token_id': 'tokenID',
        'deleted': 'deleted'
    }

    def __init__(self, created=None, changed_by=None, updated=None, id=None, account_id=None, card_details_id=None, organization_id=None, token_id=None, deleted=None):  # noqa: E501
        """TrustCommerceToken - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._changed_by = None
        self._updated = None
        self._id = None
        self._account_id = None
        self._card_details_id = None
        self._organization_id = None
        self._token_id = None
        self._deleted = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if changed_by is not None:
            self.changed_by = changed_by
        if updated is not None:
            self.updated = updated
        if id is not None:
            self.id = id
        self.account_id = account_id
        if card_details_id is not None:
            self.card_details_id = card_details_id
        self.organization_id = organization_id
        self.token_id = token_id
        self.deleted = deleted

    @property
    def created(self):
        """Gets the created of this TrustCommerceToken.  # noqa: E501


        :return: The created of this TrustCommerceToken.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this TrustCommerceToken.


        :param created: The created of this TrustCommerceToken.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """Gets the changed_by of this TrustCommerceToken.  # noqa: E501


        :return: The changed_by of this TrustCommerceToken.  # noqa: E501
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """Sets the changed_by of this TrustCommerceToken.


        :param changed_by: The changed_by of this TrustCommerceToken.  # noqa: E501
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """Gets the updated of this TrustCommerceToken.  # noqa: E501


        :return: The updated of this TrustCommerceToken.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this TrustCommerceToken.


        :param updated: The updated of this TrustCommerceToken.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """Gets the id of this TrustCommerceToken.  # noqa: E501


        :return: The id of this TrustCommerceToken.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TrustCommerceToken.


        :param id: The id of this TrustCommerceToken.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def account_id(self):
        """Gets the account_id of this TrustCommerceToken.  # noqa: E501


        :return: The account_id of this TrustCommerceToken.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this TrustCommerceToken.


        :param account_id: The account_id of this TrustCommerceToken.  # noqa: E501
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def card_details_id(self):
        """Gets the card_details_id of this TrustCommerceToken.  # noqa: E501


        :return: The card_details_id of this TrustCommerceToken.  # noqa: E501
        :rtype: str
        """
        return self._card_details_id

    @card_details_id.setter
    def card_details_id(self, card_details_id):
        """Sets the card_details_id of this TrustCommerceToken.


        :param card_details_id: The card_details_id of this TrustCommerceToken.  # noqa: E501
        :type: str
        """

        self._card_details_id = card_details_id

    @property
    def organization_id(self):
        """Gets the organization_id of this TrustCommerceToken.  # noqa: E501


        :return: The organization_id of this TrustCommerceToken.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this TrustCommerceToken.


        :param organization_id: The organization_id of this TrustCommerceToken.  # noqa: E501
        :type: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")  # noqa: E501

        self._organization_id = organization_id

    @property
    def token_id(self):
        """Gets the token_id of this TrustCommerceToken.  # noqa: E501


        :return: The token_id of this TrustCommerceToken.  # noqa: E501
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this TrustCommerceToken.


        :param token_id: The token_id of this TrustCommerceToken.  # noqa: E501
        :type: str
        """
        if token_id is None:
            raise ValueError("Invalid value for `token_id`, must not be `None`")  # noqa: E501

        self._token_id = token_id

    @property
    def deleted(self):
        """Gets the deleted of this TrustCommerceToken.  # noqa: E501


        :return: The deleted of this TrustCommerceToken.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this TrustCommerceToken.


        :param deleted: The deleted of this TrustCommerceToken.  # noqa: E501
        :type: bool
        """
        if deleted is None:
            raise ValueError("Invalid value for `deleted`, must not be `None`")  # noqa: E501

        self._deleted = deleted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrustCommerceToken, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrustCommerceToken):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
