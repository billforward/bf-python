# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NotificationSendResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'id': 'str',
        'domain': 'str',
        'action': 'str',
        'organization_id': 'str',
        'webhook_id': 'str',
        'entity_id': 'str',
        'destination_url': 'str',
        'entity': 'list[str]',
        'changes': 'list[str]',
        'last_send_attempt': 'datetime',
        'next_send_attempt': 'datetime',
        'final_send_attempt': 'datetime',
        'total_send_attempts': 'int',
        'state': 'str',
        'http_response_code': 'int',
        'http_response_message': 'str',
        'http_response_body': 'str'
    }

    attribute_map = {
        'created': 'created',
        'id': 'id',
        'domain': 'domain',
        'action': 'action',
        'organization_id': 'organizationID',
        'webhook_id': 'webhookID',
        'entity_id': 'entityID',
        'destination_url': 'destinationURL',
        'entity': 'entity',
        'changes': 'changes',
        'last_send_attempt': 'lastSendAttempt',
        'next_send_attempt': 'nextSendAttempt',
        'final_send_attempt': 'finalSendAttempt',
        'total_send_attempts': 'totalSendAttempts',
        'state': 'state',
        'http_response_code': 'httpResponseCode',
        'http_response_message': 'httpResponseMessage',
        'http_response_body': 'httpResponseBody'
    }

    def __init__(self, created=None, id=None, domain=None, action=None, organization_id=None, webhook_id=None, entity_id=None, destination_url=None, entity=None, changes=None, last_send_attempt=None, next_send_attempt=None, final_send_attempt=None, total_send_attempts=None, state=None, http_response_code=None, http_response_message=None, http_response_body=None):  # noqa: E501
        """NotificationSendResponse - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._id = None
        self._domain = None
        self._action = None
        self._organization_id = None
        self._webhook_id = None
        self._entity_id = None
        self._destination_url = None
        self._entity = None
        self._changes = None
        self._last_send_attempt = None
        self._next_send_attempt = None
        self._final_send_attempt = None
        self._total_send_attempts = None
        self._state = None
        self._http_response_code = None
        self._http_response_message = None
        self._http_response_body = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if id is not None:
            self.id = id
        if domain is not None:
            self.domain = domain
        if action is not None:
            self.action = action
        if organization_id is not None:
            self.organization_id = organization_id
        if webhook_id is not None:
            self.webhook_id = webhook_id
        if entity_id is not None:
            self.entity_id = entity_id
        if destination_url is not None:
            self.destination_url = destination_url
        if entity is not None:
            self.entity = entity
        if changes is not None:
            self.changes = changes
        if last_send_attempt is not None:
            self.last_send_attempt = last_send_attempt
        if next_send_attempt is not None:
            self.next_send_attempt = next_send_attempt
        if final_send_attempt is not None:
            self.final_send_attempt = final_send_attempt
        if total_send_attempts is not None:
            self.total_send_attempts = total_send_attempts
        if state is not None:
            self.state = state
        if http_response_code is not None:
            self.http_response_code = http_response_code
        if http_response_message is not None:
            self.http_response_message = http_response_message
        if http_response_body is not None:
            self.http_response_body = http_response_body

    @property
    def created(self):
        """Gets the created of this NotificationSendResponse.  # noqa: E501


        :return: The created of this NotificationSendResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this NotificationSendResponse.


        :param created: The created of this NotificationSendResponse.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def id(self):
        """Gets the id of this NotificationSendResponse.  # noqa: E501


        :return: The id of this NotificationSendResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NotificationSendResponse.


        :param id: The id of this NotificationSendResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def domain(self):
        """Gets the domain of this NotificationSendResponse.  # noqa: E501


        :return: The domain of this NotificationSendResponse.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this NotificationSendResponse.


        :param domain: The domain of this NotificationSendResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["AvataxConfiguration", "Notification", "Organization", "Product", "User", "Subscription", "Profile", "ProductRatePlan", "Client", "Invoice", "PricingComponentValue", "Account", "PricingComponentValueChange", "PricingComponentTier", "PricingComponent", "PricingCalculation", "CouponDefinition", "CouponInstance", "CouponModifier", "CouponRule", "CouponBookDefinition", "CouponBook", "InvoiceLine", "Webhook", "SubscriptionCancellation", "NotificationSnapshot", "InvoicePayment", "InvoiceLinePayment", "Payment", "PaymentMethod", "BankAccount", "PaymentMethodSubscriptionLink", "DunningLine", "CybersourceToken", "Card", "Alias", "CouponInstanceExistingValue", "TaxLine", "TaxationStrategy", "TaxationLink", "Address", "AmendmentPriceNTime", "Authority", "UnitOfMeasure", "Amendment", "AuditLog", "Password", "Username", "FixedTermDefinition", "FixedTerm", "Refund", "CreditNote", "Receipt", "AmendmentCompoundConstituent", "APIConfiguration", "StripeToken", "BraintreeToken", "PaypalToken", "AuthorizeNetToken", "SpreedlyToken", "AmendmentDiscardAmendment", "CancellationAmendment", "CompoundAmendment", "CompoundAmendmentConstituent", "FixedTermExpiryAmendment", "InvoiceNextExecutionAttemptAmendment", "PricingComponentValueAmendment", "BraintreeMerchantAccount", "WebhookSubscription", "Migration", "SubscriptionCharge", "StripeACHToken", "OfflinePayment", "CreditNotePayment", "CardVaultPayment", "BraintreePayment", "CybersourcePayment", "PaypalPayment", "StripeACHPayment", "AuthorizeNetPayment", "PricingComponentValueMigrationChargeAmendmentMapping", "ComponentChange", "QuoteRequest", "Quote", "CouponCharge", "CouponInstanceInvoiceLink", "Coupon", "CouponDiscount", "CouponUniqueCodesRequest", "CouponUniqueCodesResponse", "GetCouponsResponse", "AddCouponCodeRequest", "AddCouponCodeResponse", "RemoveCouponFromSubscriptionRequest", "TokenizationPreAuth", "StripeTokenizationPreAuth", "BraintreeTokenizationPreAuth", "SpreedlyTokenizationPreAuth", "SagePayTokenizationPreAuth", "PayVisionTokenizationPreAuth", "TokenizationPreAuthRequest", "AuthCaptureRequest", "StripeACHBankAccountVerification", "PasswordReset", "PricingRequest", "AmendmentPriceRequest", "AddTaxationStrategyRequest", "AddPaymentMethodRequest", "APIRequest", "SagePayToken", "SagePayNotificationRequest", "SagePayNotificationResponse", "SagePayOutstandingTransaction", "SagePayEnabledCardType", "TrustCommerceToken", "SagePayTransaction", "PricingComponentValueResponse", "MigrationResponse", "TimeResponse", "EntityTime", "Email", "MarketplaceConfiguration", "BFPermission", "Role", "PermissionLink", "PayVisionToken", "XeroConfiguration", "XeroMapping", "QuickBooksConfiguration", "QuickBooksWebhookEvent", "PayVisionTransaction", "KashToken", "EmailProvider", "DataSynchronizationJob", "DataSynchronizationJobError", "DataSynchronizationConfiguration", "DataSynchronizationAppConfiguration", "AggregationChildrenResponse", "MetadataKeyValue", "Metadata", "AggregatingComponent", "PricingComponentMigrationValue", "RegistrationResponse", "InvoiceRecalculationAmendment", "IssueInvoiceAmendment", "EmailSubscription", "SubscriptionCheckoutDefinition", "InvoiceCheckoutDefinition", "RevenueAttribution", "AddChargeToAccountResponse", "APIResponse", "PricingComponentUnitCredit", "CurrencyConfiguration", "SubscriptionNotificationConfiguration", "InvoiceTemplateConfig", "ChartMogulConfiguration", "BraintreeUpdateResult", "SubscriptionPricingComponentValueBatchUpdate", "InvoiceRender", "CouponWrapperResponse", "APIQuoteResponseQuantity", "APIQuote", "Contract", "HaltAggregationResponse", "ContractPeriod", "Affiliate", "AffiliateSubscriptionRelationship", "AffiliateRatePlanRelationship", "GoCardlessToken", "SetRatePlanAffiliateRequest", "CommissionStructure", "UserDefinableSalesforceObject", "EpxToken", "EpxPayment", "EpxApiConfiguration", "ZoozToken", "ZoozCustomer", "ZoozPayment", "EmailTokenization", "SubscriptionPlan", "SubscriptionGroup", "LoginAttempt", "InvoiceTemplateConfiguration", "OrganizationProfile", "PaymentMethodResponse", "ShuttleLink", "EmailNotification", "ShuttleHostedPayment", "EBANXPaymentMethod"]  # noqa: E501
        if domain not in allowed_values:
            raise ValueError(
                "Invalid value for `domain` ({0}), must be one of {1}"  # noqa: E501
                .format(domain, allowed_values)
            )

        self._domain = domain

    @property
    def action(self):
        """Gets the action of this NotificationSendResponse.  # noqa: E501


        :return: The action of this NotificationSendResponse.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this NotificationSendResponse.


        :param action: The action of this NotificationSendResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["Accept", "Active", "AwaitingPayment", "AwaitingRefund", "Cancelled", "Completed", "Created", "Current", "Error", "Expiring", "Expired", "Failed", "Migrated", "NeedsAmendments", "Paid", "Pending", "Provisioned", "Refunded", "Reject", "Restarted", "Trial", "Unknown", "Unpaid", "Updated", "Voided", "PaymentFailed", "ProcessingPayment", "ServiceEnded", "AdvanceNotification"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def organization_id(self):
        """Gets the organization_id of this NotificationSendResponse.  # noqa: E501


        :return: The organization_id of this NotificationSendResponse.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this NotificationSendResponse.


        :param organization_id: The organization_id of this NotificationSendResponse.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def webhook_id(self):
        """Gets the webhook_id of this NotificationSendResponse.  # noqa: E501


        :return: The webhook_id of this NotificationSendResponse.  # noqa: E501
        :rtype: str
        """
        return self._webhook_id

    @webhook_id.setter
    def webhook_id(self, webhook_id):
        """Sets the webhook_id of this NotificationSendResponse.


        :param webhook_id: The webhook_id of this NotificationSendResponse.  # noqa: E501
        :type: str
        """

        self._webhook_id = webhook_id

    @property
    def entity_id(self):
        """Gets the entity_id of this NotificationSendResponse.  # noqa: E501


        :return: The entity_id of this NotificationSendResponse.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this NotificationSendResponse.


        :param entity_id: The entity_id of this NotificationSendResponse.  # noqa: E501
        :type: str
        """

        self._entity_id = entity_id

    @property
    def destination_url(self):
        """Gets the destination_url of this NotificationSendResponse.  # noqa: E501


        :return: The destination_url of this NotificationSendResponse.  # noqa: E501
        :rtype: str
        """
        return self._destination_url

    @destination_url.setter
    def destination_url(self, destination_url):
        """Sets the destination_url of this NotificationSendResponse.


        :param destination_url: The destination_url of this NotificationSendResponse.  # noqa: E501
        :type: str
        """

        self._destination_url = destination_url

    @property
    def entity(self):
        """Gets the entity of this NotificationSendResponse.  # noqa: E501


        :return: The entity of this NotificationSendResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this NotificationSendResponse.


        :param entity: The entity of this NotificationSendResponse.  # noqa: E501
        :type: list[str]
        """

        self._entity = entity

    @property
    def changes(self):
        """Gets the changes of this NotificationSendResponse.  # noqa: E501


        :return: The changes of this NotificationSendResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._changes

    @changes.setter
    def changes(self, changes):
        """Sets the changes of this NotificationSendResponse.


        :param changes: The changes of this NotificationSendResponse.  # noqa: E501
        :type: list[str]
        """

        self._changes = changes

    @property
    def last_send_attempt(self):
        """Gets the last_send_attempt of this NotificationSendResponse.  # noqa: E501


        :return: The last_send_attempt of this NotificationSendResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._last_send_attempt

    @last_send_attempt.setter
    def last_send_attempt(self, last_send_attempt):
        """Sets the last_send_attempt of this NotificationSendResponse.


        :param last_send_attempt: The last_send_attempt of this NotificationSendResponse.  # noqa: E501
        :type: datetime
        """

        self._last_send_attempt = last_send_attempt

    @property
    def next_send_attempt(self):
        """Gets the next_send_attempt of this NotificationSendResponse.  # noqa: E501


        :return: The next_send_attempt of this NotificationSendResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._next_send_attempt

    @next_send_attempt.setter
    def next_send_attempt(self, next_send_attempt):
        """Sets the next_send_attempt of this NotificationSendResponse.


        :param next_send_attempt: The next_send_attempt of this NotificationSendResponse.  # noqa: E501
        :type: datetime
        """

        self._next_send_attempt = next_send_attempt

    @property
    def final_send_attempt(self):
        """Gets the final_send_attempt of this NotificationSendResponse.  # noqa: E501


        :return: The final_send_attempt of this NotificationSendResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._final_send_attempt

    @final_send_attempt.setter
    def final_send_attempt(self, final_send_attempt):
        """Sets the final_send_attempt of this NotificationSendResponse.


        :param final_send_attempt: The final_send_attempt of this NotificationSendResponse.  # noqa: E501
        :type: datetime
        """

        self._final_send_attempt = final_send_attempt

    @property
    def total_send_attempts(self):
        """Gets the total_send_attempts of this NotificationSendResponse.  # noqa: E501


        :return: The total_send_attempts of this NotificationSendResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_send_attempts

    @total_send_attempts.setter
    def total_send_attempts(self, total_send_attempts):
        """Sets the total_send_attempts of this NotificationSendResponse.


        :param total_send_attempts: The total_send_attempts of this NotificationSendResponse.  # noqa: E501
        :type: int
        """

        self._total_send_attempts = total_send_attempts

    @property
    def state(self):
        """Gets the state of this NotificationSendResponse.  # noqa: E501


        :return: The state of this NotificationSendResponse.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this NotificationSendResponse.


        :param state: The state of this NotificationSendResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unsent", "Sending", "Sent", "Voided"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def http_response_code(self):
        """Gets the http_response_code of this NotificationSendResponse.  # noqa: E501


        :return: The http_response_code of this NotificationSendResponse.  # noqa: E501
        :rtype: int
        """
        return self._http_response_code

    @http_response_code.setter
    def http_response_code(self, http_response_code):
        """Sets the http_response_code of this NotificationSendResponse.


        :param http_response_code: The http_response_code of this NotificationSendResponse.  # noqa: E501
        :type: int
        """

        self._http_response_code = http_response_code

    @property
    def http_response_message(self):
        """Gets the http_response_message of this NotificationSendResponse.  # noqa: E501


        :return: The http_response_message of this NotificationSendResponse.  # noqa: E501
        :rtype: str
        """
        return self._http_response_message

    @http_response_message.setter
    def http_response_message(self, http_response_message):
        """Sets the http_response_message of this NotificationSendResponse.


        :param http_response_message: The http_response_message of this NotificationSendResponse.  # noqa: E501
        :type: str
        """

        self._http_response_message = http_response_message

    @property
    def http_response_body(self):
        """Gets the http_response_body of this NotificationSendResponse.  # noqa: E501


        :return: The http_response_body of this NotificationSendResponse.  # noqa: E501
        :rtype: str
        """
        return self._http_response_body

    @http_response_body.setter
    def http_response_body(self, http_response_body):
        """Sets the http_response_body of this NotificationSendResponse.


        :param http_response_body: The http_response_body of this NotificationSendResponse.  # noqa: E501
        :type: str
        """

        self._http_response_body = http_response_body

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NotificationSendResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationSendResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
