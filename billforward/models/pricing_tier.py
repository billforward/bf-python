# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PricingTier(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_from': 'int',
        'to': 'int',
        'price': 'float',
        'bucket_size': 'int',
        'type': 'str'
    }

    attribute_map = {
        '_from': 'from',
        'to': 'to',
        'price': 'price',
        'bucket_size': 'bucketSize',
        'type': 'type'
    }

    def __init__(self, _from=None, to=None, price=None, bucket_size=None, type=None):  # noqa: E501
        """PricingTier - a model defined in Swagger"""  # noqa: E501
        self.__from = None
        self._to = None
        self._price = None
        self._bucket_size = None
        self._type = None
        self.discriminator = None
        if _from is not None:
            self._from = _from
        if to is not None:
            self.to = to
        if price is not None:
            self.price = price
        if bucket_size is not None:
            self.bucket_size = bucket_size
        if type is not None:
            self.type = type

    @property
    def _from(self):
        """Gets the _from of this PricingTier.  # noqa: E501


        :return: The _from of this PricingTier.  # noqa: E501
        :rtype: int
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this PricingTier.


        :param _from: The _from of this PricingTier.  # noqa: E501
        :type: int
        """

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this PricingTier.  # noqa: E501


        :return: The to of this PricingTier.  # noqa: E501
        :rtype: int
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this PricingTier.


        :param to: The to of this PricingTier.  # noqa: E501
        :type: int
        """

        self._to = to

    @property
    def price(self):
        """Gets the price of this PricingTier.  # noqa: E501


        :return: The price of this PricingTier.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this PricingTier.


        :param price: The price of this PricingTier.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def bucket_size(self):
        """Gets the bucket_size of this PricingTier.  # noqa: E501


        :return: The bucket_size of this PricingTier.  # noqa: E501
        :rtype: int
        """
        return self._bucket_size

    @bucket_size.setter
    def bucket_size(self, bucket_size):
        """Sets the bucket_size of this PricingTier.


        :param bucket_size: The bucket_size of this PricingTier.  # noqa: E501
        :type: int
        """

        self._bucket_size = bucket_size

    @property
    def type(self):
        """Gets the type of this PricingTier.  # noqa: E501


        :return: The type of this PricingTier.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PricingTier.


        :param type: The type of this PricingTier.  # noqa: E501
        :type: str
        """
        allowed_values = ["unit", "fixed", "bucket"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PricingTier, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PricingTier):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
