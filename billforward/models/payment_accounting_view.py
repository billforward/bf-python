# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PaymentAccountingView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'account_id': 'str',
        'subscription_id': 'str',
        'payment_method_id': 'str',
        'invoice_id': 'str',
        'actual_value': 'float',
        'nominal_value': 'float',
        'remaining_value': 'float',
        'refunded_value': 'float',
        'currency': 'CreditNoteCurrency',
        'gateway': 'str',
        'payment_received': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'account_id': 'accountID',
        'subscription_id': 'subscriptionID',
        'payment_method_id': 'paymentMethodID',
        'invoice_id': 'invoiceID',
        'actual_value': 'actualValue',
        'nominal_value': 'nominalValue',
        'remaining_value': 'remainingValue',
        'refunded_value': 'refundedValue',
        'currency': 'currency',
        'gateway': 'gateway',
        'payment_received': 'paymentReceived'
    }

    def __init__(self, id=None, account_id=None, subscription_id=None, payment_method_id=None, invoice_id=None, actual_value=None, nominal_value=None, remaining_value=None, refunded_value=None, currency=None, gateway=None, payment_received=None):  # noqa: E501
        """PaymentAccountingView - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._account_id = None
        self._subscription_id = None
        self._payment_method_id = None
        self._invoice_id = None
        self._actual_value = None
        self._nominal_value = None
        self._remaining_value = None
        self._refunded_value = None
        self._currency = None
        self._gateway = None
        self._payment_received = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if account_id is not None:
            self.account_id = account_id
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if payment_method_id is not None:
            self.payment_method_id = payment_method_id
        if invoice_id is not None:
            self.invoice_id = invoice_id
        if actual_value is not None:
            self.actual_value = actual_value
        if nominal_value is not None:
            self.nominal_value = nominal_value
        if remaining_value is not None:
            self.remaining_value = remaining_value
        if refunded_value is not None:
            self.refunded_value = refunded_value
        if currency is not None:
            self.currency = currency
        if gateway is not None:
            self.gateway = gateway
        if payment_received is not None:
            self.payment_received = payment_received

    @property
    def id(self):
        """Gets the id of this PaymentAccountingView.  # noqa: E501


        :return: The id of this PaymentAccountingView.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PaymentAccountingView.


        :param id: The id of this PaymentAccountingView.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def account_id(self):
        """Gets the account_id of this PaymentAccountingView.  # noqa: E501


        :return: The account_id of this PaymentAccountingView.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this PaymentAccountingView.


        :param account_id: The account_id of this PaymentAccountingView.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this PaymentAccountingView.  # noqa: E501


        :return: The subscription_id of this PaymentAccountingView.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this PaymentAccountingView.


        :param subscription_id: The subscription_id of this PaymentAccountingView.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def payment_method_id(self):
        """Gets the payment_method_id of this PaymentAccountingView.  # noqa: E501


        :return: The payment_method_id of this PaymentAccountingView.  # noqa: E501
        :rtype: str
        """
        return self._payment_method_id

    @payment_method_id.setter
    def payment_method_id(self, payment_method_id):
        """Sets the payment_method_id of this PaymentAccountingView.


        :param payment_method_id: The payment_method_id of this PaymentAccountingView.  # noqa: E501
        :type: str
        """

        self._payment_method_id = payment_method_id

    @property
    def invoice_id(self):
        """Gets the invoice_id of this PaymentAccountingView.  # noqa: E501


        :return: The invoice_id of this PaymentAccountingView.  # noqa: E501
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this PaymentAccountingView.


        :param invoice_id: The invoice_id of this PaymentAccountingView.  # noqa: E501
        :type: str
        """

        self._invoice_id = invoice_id

    @property
    def actual_value(self):
        """Gets the actual_value of this PaymentAccountingView.  # noqa: E501


        :return: The actual_value of this PaymentAccountingView.  # noqa: E501
        :rtype: float
        """
        return self._actual_value

    @actual_value.setter
    def actual_value(self, actual_value):
        """Sets the actual_value of this PaymentAccountingView.


        :param actual_value: The actual_value of this PaymentAccountingView.  # noqa: E501
        :type: float
        """

        self._actual_value = actual_value

    @property
    def nominal_value(self):
        """Gets the nominal_value of this PaymentAccountingView.  # noqa: E501


        :return: The nominal_value of this PaymentAccountingView.  # noqa: E501
        :rtype: float
        """
        return self._nominal_value

    @nominal_value.setter
    def nominal_value(self, nominal_value):
        """Sets the nominal_value of this PaymentAccountingView.


        :param nominal_value: The nominal_value of this PaymentAccountingView.  # noqa: E501
        :type: float
        """

        self._nominal_value = nominal_value

    @property
    def remaining_value(self):
        """Gets the remaining_value of this PaymentAccountingView.  # noqa: E501


        :return: The remaining_value of this PaymentAccountingView.  # noqa: E501
        :rtype: float
        """
        return self._remaining_value

    @remaining_value.setter
    def remaining_value(self, remaining_value):
        """Sets the remaining_value of this PaymentAccountingView.


        :param remaining_value: The remaining_value of this PaymentAccountingView.  # noqa: E501
        :type: float
        """

        self._remaining_value = remaining_value

    @property
    def refunded_value(self):
        """Gets the refunded_value of this PaymentAccountingView.  # noqa: E501


        :return: The refunded_value of this PaymentAccountingView.  # noqa: E501
        :rtype: float
        """
        return self._refunded_value

    @refunded_value.setter
    def refunded_value(self, refunded_value):
        """Sets the refunded_value of this PaymentAccountingView.


        :param refunded_value: The refunded_value of this PaymentAccountingView.  # noqa: E501
        :type: float
        """

        self._refunded_value = refunded_value

    @property
    def currency(self):
        """Gets the currency of this PaymentAccountingView.  # noqa: E501


        :return: The currency of this PaymentAccountingView.  # noqa: E501
        :rtype: CreditNoteCurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PaymentAccountingView.


        :param currency: The currency of this PaymentAccountingView.  # noqa: E501
        :type: CreditNoteCurrency
        """

        self._currency = currency

    @property
    def gateway(self):
        """Gets the gateway of this PaymentAccountingView.  # noqa: E501


        :return: The gateway of this PaymentAccountingView.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this PaymentAccountingView.


        :param gateway: The gateway of this PaymentAccountingView.  # noqa: E501
        :type: str
        """
        allowed_values = ["VOID", "cybersource_token", "card_vault", "paypal_simple", "locustworld", "free", "coupon", "credit_note", "stripe", "braintree", "zooz", "balanced", "paypal", "billforward_test", "offline", "trial", "stripeACH", "goCardless", "authorizeNet", "spreedly", "sagePay", "trustCommerce", "payvision", "kash", "epx", "shuttle", "square", "billforwardRandomizer", "cardConnect", "ebanx"]  # noqa: E501
        if gateway not in allowed_values:
            raise ValueError(
                "Invalid value for `gateway` ({0}), must be one of {1}"  # noqa: E501
                .format(gateway, allowed_values)
            )

        self._gateway = gateway

    @property
    def payment_received(self):
        """Gets the payment_received of this PaymentAccountingView.  # noqa: E501


        :return: The payment_received of this PaymentAccountingView.  # noqa: E501
        :rtype: datetime
        """
        return self._payment_received

    @payment_received.setter
    def payment_received(self, payment_received):
        """Sets the payment_received of this PaymentAccountingView.


        :param payment_received: The payment_received of this PaymentAccountingView.  # noqa: E501
        :type: datetime
        """

        self._payment_received = payment_received

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentAccountingView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentAccountingView):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
