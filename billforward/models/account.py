# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Account(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'changed_by': 'str',
        'updated': 'datetime',
        'metadata': 'dict(str, object)',
        'id': 'str',
        'crm_id': 'str',
        'organization_id': 'str',
        'user_id': 'str',
        'successful_subscriptions': 'int',
        'aggregating_product_rate_plan_id': 'str',
        'aggregating_subscription_id': 'str',
        'parent_id': 'str',
        'deleted': 'bool',
        'profile': 'Profile',
        'affiliate': 'Affiliate',
        'payment_methods': 'list[PaymentMethod]',
        'profile_from_request': 'CreateProfileRequest'
    }

    attribute_map = {
        'created': 'created',
        'changed_by': 'changedBy',
        'updated': 'updated',
        'metadata': 'metadata',
        'id': 'id',
        'crm_id': 'crmID',
        'organization_id': 'organizationID',
        'user_id': 'userID',
        'successful_subscriptions': 'successfulSubscriptions',
        'aggregating_product_rate_plan_id': 'aggregatingProductRatePlanID',
        'aggregating_subscription_id': 'aggregatingSubscriptionID',
        'parent_id': 'parentID',
        'deleted': 'deleted',
        'profile': 'profile',
        'affiliate': 'affiliate',
        'payment_methods': 'paymentMethods',
        'profile_from_request': 'profileFromRequest'
    }

    def __init__(self, created=None, changed_by=None, updated=None, metadata=None, id=None, crm_id=None, organization_id=None, user_id=None, successful_subscriptions=None, aggregating_product_rate_plan_id=None, aggregating_subscription_id=None, parent_id=None, deleted=None, profile=None, affiliate=None, payment_methods=None, profile_from_request=None):  # noqa: E501
        """Account - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._changed_by = None
        self._updated = None
        self._metadata = None
        self._id = None
        self._crm_id = None
        self._organization_id = None
        self._user_id = None
        self._successful_subscriptions = None
        self._aggregating_product_rate_plan_id = None
        self._aggregating_subscription_id = None
        self._parent_id = None
        self._deleted = None
        self._profile = None
        self._affiliate = None
        self._payment_methods = None
        self._profile_from_request = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if changed_by is not None:
            self.changed_by = changed_by
        if updated is not None:
            self.updated = updated
        if metadata is not None:
            self.metadata = metadata
        if id is not None:
            self.id = id
        if crm_id is not None:
            self.crm_id = crm_id
        self.organization_id = organization_id
        if user_id is not None:
            self.user_id = user_id
        if successful_subscriptions is not None:
            self.successful_subscriptions = successful_subscriptions
        if aggregating_product_rate_plan_id is not None:
            self.aggregating_product_rate_plan_id = aggregating_product_rate_plan_id
        if aggregating_subscription_id is not None:
            self.aggregating_subscription_id = aggregating_subscription_id
        if parent_id is not None:
            self.parent_id = parent_id
        if deleted is not None:
            self.deleted = deleted
        if profile is not None:
            self.profile = profile
        if affiliate is not None:
            self.affiliate = affiliate
        if payment_methods is not None:
            self.payment_methods = payment_methods
        if profile_from_request is not None:
            self.profile_from_request = profile_from_request

    @property
    def created(self):
        """Gets the created of this Account.  # noqa: E501


        :return: The created of this Account.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Account.


        :param created: The created of this Account.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """Gets the changed_by of this Account.  # noqa: E501


        :return: The changed_by of this Account.  # noqa: E501
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """Sets the changed_by of this Account.


        :param changed_by: The changed_by of this Account.  # noqa: E501
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """Gets the updated of this Account.  # noqa: E501


        :return: The updated of this Account.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Account.


        :param updated: The updated of this Account.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def metadata(self):
        """Gets the metadata of this Account.  # noqa: E501


        :return: The metadata of this Account.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Account.


        :param metadata: The metadata of this Account.  # noqa: E501
        :type: dict(str, object)
        """

        self._metadata = metadata

    @property
    def id(self):
        """Gets the id of this Account.  # noqa: E501


        :return: The id of this Account.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Account.


        :param id: The id of this Account.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def crm_id(self):
        """Gets the crm_id of this Account.  # noqa: E501


        :return: The crm_id of this Account.  # noqa: E501
        :rtype: str
        """
        return self._crm_id

    @crm_id.setter
    def crm_id(self, crm_id):
        """Sets the crm_id of this Account.


        :param crm_id: The crm_id of this Account.  # noqa: E501
        :type: str
        """

        self._crm_id = crm_id

    @property
    def organization_id(self):
        """Gets the organization_id of this Account.  # noqa: E501


        :return: The organization_id of this Account.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this Account.


        :param organization_id: The organization_id of this Account.  # noqa: E501
        :type: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")  # noqa: E501

        self._organization_id = organization_id

    @property
    def user_id(self):
        """Gets the user_id of this Account.  # noqa: E501


        :return: The user_id of this Account.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Account.


        :param user_id: The user_id of this Account.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def successful_subscriptions(self):
        """Gets the successful_subscriptions of this Account.  # noqa: E501


        :return: The successful_subscriptions of this Account.  # noqa: E501
        :rtype: int
        """
        return self._successful_subscriptions

    @successful_subscriptions.setter
    def successful_subscriptions(self, successful_subscriptions):
        """Sets the successful_subscriptions of this Account.


        :param successful_subscriptions: The successful_subscriptions of this Account.  # noqa: E501
        :type: int
        """

        self._successful_subscriptions = successful_subscriptions

    @property
    def aggregating_product_rate_plan_id(self):
        """Gets the aggregating_product_rate_plan_id of this Account.  # noqa: E501


        :return: The aggregating_product_rate_plan_id of this Account.  # noqa: E501
        :rtype: str
        """
        return self._aggregating_product_rate_plan_id

    @aggregating_product_rate_plan_id.setter
    def aggregating_product_rate_plan_id(self, aggregating_product_rate_plan_id):
        """Sets the aggregating_product_rate_plan_id of this Account.


        :param aggregating_product_rate_plan_id: The aggregating_product_rate_plan_id of this Account.  # noqa: E501
        :type: str
        """

        self._aggregating_product_rate_plan_id = aggregating_product_rate_plan_id

    @property
    def aggregating_subscription_id(self):
        """Gets the aggregating_subscription_id of this Account.  # noqa: E501


        :return: The aggregating_subscription_id of this Account.  # noqa: E501
        :rtype: str
        """
        return self._aggregating_subscription_id

    @aggregating_subscription_id.setter
    def aggregating_subscription_id(self, aggregating_subscription_id):
        """Sets the aggregating_subscription_id of this Account.


        :param aggregating_subscription_id: The aggregating_subscription_id of this Account.  # noqa: E501
        :type: str
        """

        self._aggregating_subscription_id = aggregating_subscription_id

    @property
    def parent_id(self):
        """Gets the parent_id of this Account.  # noqa: E501


        :return: The parent_id of this Account.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this Account.


        :param parent_id: The parent_id of this Account.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def deleted(self):
        """Gets the deleted of this Account.  # noqa: E501


        :return: The deleted of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Account.


        :param deleted: The deleted of this Account.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def profile(self):
        """Gets the profile of this Account.  # noqa: E501


        :return: The profile of this Account.  # noqa: E501
        :rtype: Profile
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this Account.


        :param profile: The profile of this Account.  # noqa: E501
        :type: Profile
        """

        self._profile = profile

    @property
    def affiliate(self):
        """Gets the affiliate of this Account.  # noqa: E501


        :return: The affiliate of this Account.  # noqa: E501
        :rtype: Affiliate
        """
        return self._affiliate

    @affiliate.setter
    def affiliate(self, affiliate):
        """Sets the affiliate of this Account.


        :param affiliate: The affiliate of this Account.  # noqa: E501
        :type: Affiliate
        """

        self._affiliate = affiliate

    @property
    def payment_methods(self):
        """Gets the payment_methods of this Account.  # noqa: E501


        :return: The payment_methods of this Account.  # noqa: E501
        :rtype: list[PaymentMethod]
        """
        return self._payment_methods

    @payment_methods.setter
    def payment_methods(self, payment_methods):
        """Sets the payment_methods of this Account.


        :param payment_methods: The payment_methods of this Account.  # noqa: E501
        :type: list[PaymentMethod]
        """

        self._payment_methods = payment_methods

    @property
    def profile_from_request(self):
        """Gets the profile_from_request of this Account.  # noqa: E501


        :return: The profile_from_request of this Account.  # noqa: E501
        :rtype: CreateProfileRequest
        """
        return self._profile_from_request

    @profile_from_request.setter
    def profile_from_request(self, profile_from_request):
        """Sets the profile_from_request of this Account.


        :param profile_from_request: The profile_from_request of this Account.  # noqa: E501
        :type: CreateProfileRequest
        """

        self._profile_from_request = profile_from_request

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Account, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Account):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
