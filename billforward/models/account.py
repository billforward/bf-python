# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Account(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, crm_id=None, created=None, changed_by=None, updated=None, metadata=None, id=None, organization_id=None, user_id=None, successful_subscriptions=None, aggregating_product_rate_plan_id=None, aggregating_subscription_id=None, deleted=False, profile=None, payment_methods=None):
        """
        Account - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'crm_id': 'str',
            'created': 'datetime',
            'changed_by': 'str',
            'updated': 'datetime',
            'metadata': 'DynamicMetadata',
            'id': 'str',
            'organization_id': 'str',
            'user_id': 'str',
            'successful_subscriptions': 'int',
            'aggregating_product_rate_plan_id': 'str',
            'aggregating_subscription_id': 'str',
            'deleted': 'bool',
            'profile': 'Profile',
            'payment_methods': 'list[PaymentMethod]'
        }

        self.attribute_map = {
            'crm_id': 'crmID',
            'created': 'created',
            'changed_by': 'changedBy',
            'updated': 'updated',
            'metadata': 'metadata',
            'id': 'id',
            'organization_id': 'organizationID',
            'user_id': 'userID',
            'successful_subscriptions': 'successfulSubscriptions',
            'aggregating_product_rate_plan_id': 'aggregatingProductRatePlanID',
            'aggregating_subscription_id': 'aggregatingSubscriptionID',
            'deleted': 'deleted',
            'profile': 'profile',
            'payment_methods': 'paymentMethods'
        }

        self._crm_id = crm_id
        self._created = created
        self._changed_by = changed_by
        self._updated = updated
        self._metadata = metadata
        self._id = id
        self._organization_id = organization_id
        self._user_id = user_id
        self._successful_subscriptions = successful_subscriptions
        self._aggregating_product_rate_plan_id = aggregating_product_rate_plan_id
        self._aggregating_subscription_id = aggregating_subscription_id
        self._deleted = deleted
        self._profile = profile
        self._payment_methods = payment_methods

    @property
    def crm_id(self):
        """
        Gets the crm_id of this Account.
        { \"description\" : \"CRM ID of the account.\", \"verbs\":[\"GET\"] }

        :return: The crm_id of this Account.
        :rtype: str
        """
        return self._crm_id

    @crm_id.setter
    def crm_id(self, crm_id):
        """
        Sets the crm_id of this Account.
        { \"description\" : \"CRM ID of the account.\", \"verbs\":[\"GET\"] }

        :param crm_id: The crm_id of this Account.
        :type: str
        """

        self._crm_id = crm_id

    @property
    def created(self):
        """
        Gets the created of this Account.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this Account.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this Account.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this Account.
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """
        Gets the changed_by of this Account.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :return: The changed_by of this Account.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """
        Sets the changed_by of this Account.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :param changed_by: The changed_by of this Account.
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """
        Gets the updated of this Account.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :return: The updated of this Account.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this Account.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :param updated: The updated of this Account.
        :type: datetime
        """

        self._updated = updated

    @property
    def metadata(self):
        """
        Gets the metadata of this Account.
        { \"description\" : \"Add metadata.\", \"verbs\":[\"POST\"] }

        :return: The metadata of this Account.
        :rtype: DynamicMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """
        Sets the metadata of this Account.
        { \"description\" : \"Add metadata.\", \"verbs\":[\"POST\"] }

        :param metadata: The metadata of this Account.
        :type: DynamicMetadata
        """

        self._metadata = metadata

    @property
    def id(self):
        """
        Gets the id of this Account.
        { \"description\" : \"ID of the account.\", \"verbs\":[\"GET\"] }

        :return: The id of this Account.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Account.
        { \"description\" : \"ID of the account.\", \"verbs\":[\"GET\"] }

        :param id: The id of this Account.
        :type: str
        """

        self._id = id

    @property
    def organization_id(self):
        """
        Gets the organization_id of this Account.
        { \"description\" : \"Organization associated with the account.\", \"verbs\":[] }

        :return: The organization_id of this Account.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this Account.
        { \"description\" : \"Organization associated with the account.\", \"verbs\":[] }

        :param organization_id: The organization_id of this Account.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def user_id(self):
        """
        Gets the user_id of this Account.
        { \"description\" : \"User associated with the account. If this is null, no user is currently assocaited with the account. A user is only set when an account is associated with a user account.\", \"verbs\":[] }

        :return: The user_id of this Account.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this Account.
        { \"description\" : \"User associated with the account. If this is null, no user is currently assocaited with the account. A user is only set when an account is associated with a user account.\", \"verbs\":[] }

        :param user_id: The user_id of this Account.
        :type: str
        """

        self._user_id = user_id

    @property
    def successful_subscriptions(self):
        """
        Gets the successful_subscriptions of this Account.
        { \"description\" : \"Number of distinct, paid subscriptions associated with this account. Initially the value will be 0 when no successful subscriptions have been taken. A subscription cancelled whilst in trial is counted as successful.\", \"verbs\":[\"GET\"] }

        :return: The successful_subscriptions of this Account.
        :rtype: int
        """
        return self._successful_subscriptions

    @successful_subscriptions.setter
    def successful_subscriptions(self, successful_subscriptions):
        """
        Sets the successful_subscriptions of this Account.
        { \"description\" : \"Number of distinct, paid subscriptions associated with this account. Initially the value will be 0 when no successful subscriptions have been taken. A subscription cancelled whilst in trial is counted as successful.\", \"verbs\":[\"GET\"] }

        :param successful_subscriptions: The successful_subscriptions of this Account.
        :type: int
        """

        self._successful_subscriptions = successful_subscriptions

    @property
    def aggregating_product_rate_plan_id(self):
        """
        Gets the aggregating_product_rate_plan_id of this Account.
        { \"description\" : \"If present, this will be the product rate plan to use when creating an aggregating subscription.  An account level aggregating subscription will be created when the first subscription is created against the account.\", \"verbs\":[] }

        :return: The aggregating_product_rate_plan_id of this Account.
        :rtype: str
        """
        return self._aggregating_product_rate_plan_id

    @aggregating_product_rate_plan_id.setter
    def aggregating_product_rate_plan_id(self, aggregating_product_rate_plan_id):
        """
        Sets the aggregating_product_rate_plan_id of this Account.
        { \"description\" : \"If present, this will be the product rate plan to use when creating an aggregating subscription.  An account level aggregating subscription will be created when the first subscription is created against the account.\", \"verbs\":[] }

        :param aggregating_product_rate_plan_id: The aggregating_product_rate_plan_id of this Account.
        :type: str
        """

        self._aggregating_product_rate_plan_id = aggregating_product_rate_plan_id

    @property
    def aggregating_subscription_id(self):
        """
        Gets the aggregating_subscription_id of this Account.
        { \"description\" : \"The consistent ID of the account level aggregating subscription, if one exists.\", \"verbs\":[] }

        :return: The aggregating_subscription_id of this Account.
        :rtype: str
        """
        return self._aggregating_subscription_id

    @aggregating_subscription_id.setter
    def aggregating_subscription_id(self, aggregating_subscription_id):
        """
        Sets the aggregating_subscription_id of this Account.
        { \"description\" : \"The consistent ID of the account level aggregating subscription, if one exists.\", \"verbs\":[] }

        :param aggregating_subscription_id: The aggregating_subscription_id of this Account.
        :type: str
        """

        self._aggregating_subscription_id = aggregating_subscription_id

    @property
    def deleted(self):
        """
        Gets the deleted of this Account.
        {  \"default\" : \"false\",  \"description\" : \"Indicates if an account has been retired. If an account has been retired it can still be retrieved using the appropriate flag on API requests.\", \"verbs\":[\"GET\"] }

        :return: The deleted of this Account.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """
        Sets the deleted of this Account.
        {  \"default\" : \"false\",  \"description\" : \"Indicates if an account has been retired. If an account has been retired it can still be retrieved using the appropriate flag on API requests.\", \"verbs\":[\"GET\"] }

        :param deleted: The deleted of this Account.
        :type: bool
        """

        self._deleted = deleted

    @property
    def profile(self):
        """
        Gets the profile of this Account.


        :return: The profile of this Account.
        :rtype: Profile
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """
        Sets the profile of this Account.


        :param profile: The profile of this Account.
        :type: Profile
        """

        self._profile = profile

    @property
    def payment_methods(self):
        """
        Gets the payment_methods of this Account.
        { \"description\" : \"The payment-methods associated with the account.\", \"verbs\":[\"GET\"] }

        :return: The payment_methods of this Account.
        :rtype: list[PaymentMethod]
        """
        return self._payment_methods

    @payment_methods.setter
    def payment_methods(self, payment_methods):
        """
        Sets the payment_methods of this Account.
        { \"description\" : \"The payment-methods associated with the account.\", \"verbs\":[\"GET\"] }

        :param payment_methods: The payment_methods of this Account.
        :type: list[PaymentMethod]
        """

        self._payment_methods = payment_methods

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
