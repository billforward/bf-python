# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PricingComponentTier(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'changed_by': 'str',
        'id': 'str',
        'crm_id': 'str',
        'pricing_component_version_id': 'str',
        'product_rate_plan_id': 'str',
        'organization_id': 'str',
        'lower_threshold': 'int',
        'bucket_size': 'int',
        'upper_threshold': 'int',
        'pricing_type': 'str',
        'price': 'float',
        'component_id': 'str',
        'pricing_component_id': 'str'
    }

    attribute_map = {
        'created': 'created',
        'changed_by': 'changedBy',
        'id': 'id',
        'crm_id': 'crmID',
        'pricing_component_version_id': 'pricingComponentVersionID',
        'product_rate_plan_id': 'productRatePlanID',
        'organization_id': 'organizationID',
        'lower_threshold': 'lowerThreshold',
        'bucket_size': 'bucketSize',
        'upper_threshold': 'upperThreshold',
        'pricing_type': 'pricingType',
        'price': 'price',
        'component_id': 'componentID',
        'pricing_component_id': 'pricingComponentID'
    }

    def __init__(self, created=None, changed_by=None, id=None, crm_id=None, pricing_component_version_id=None, product_rate_plan_id=None, organization_id=None, lower_threshold=None, bucket_size=None, upper_threshold=None, pricing_type=None, price=None, component_id=None, pricing_component_id=None):  # noqa: E501
        """PricingComponentTier - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._changed_by = None
        self._id = None
        self._crm_id = None
        self._pricing_component_version_id = None
        self._product_rate_plan_id = None
        self._organization_id = None
        self._lower_threshold = None
        self._bucket_size = None
        self._upper_threshold = None
        self._pricing_type = None
        self._price = None
        self._component_id = None
        self._pricing_component_id = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if changed_by is not None:
            self.changed_by = changed_by
        if id is not None:
            self.id = id
        if crm_id is not None:
            self.crm_id = crm_id
        if pricing_component_version_id is not None:
            self.pricing_component_version_id = pricing_component_version_id
        if product_rate_plan_id is not None:
            self.product_rate_plan_id = product_rate_plan_id
        if organization_id is not None:
            self.organization_id = organization_id
        if lower_threshold is not None:
            self.lower_threshold = lower_threshold
        if bucket_size is not None:
            self.bucket_size = bucket_size
        if upper_threshold is not None:
            self.upper_threshold = upper_threshold
        self.pricing_type = pricing_type
        self.price = price
        if component_id is not None:
            self.component_id = component_id
        if pricing_component_id is not None:
            self.pricing_component_id = pricing_component_id

    @property
    def created(self):
        """Gets the created of this PricingComponentTier.  # noqa: E501


        :return: The created of this PricingComponentTier.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this PricingComponentTier.


        :param created: The created of this PricingComponentTier.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """Gets the changed_by of this PricingComponentTier.  # noqa: E501


        :return: The changed_by of this PricingComponentTier.  # noqa: E501
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """Sets the changed_by of this PricingComponentTier.


        :param changed_by: The changed_by of this PricingComponentTier.  # noqa: E501
        :type: str
        """

        self._changed_by = changed_by

    @property
    def id(self):
        """Gets the id of this PricingComponentTier.  # noqa: E501


        :return: The id of this PricingComponentTier.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PricingComponentTier.


        :param id: The id of this PricingComponentTier.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def crm_id(self):
        """Gets the crm_id of this PricingComponentTier.  # noqa: E501


        :return: The crm_id of this PricingComponentTier.  # noqa: E501
        :rtype: str
        """
        return self._crm_id

    @crm_id.setter
    def crm_id(self, crm_id):
        """Sets the crm_id of this PricingComponentTier.


        :param crm_id: The crm_id of this PricingComponentTier.  # noqa: E501
        :type: str
        """

        self._crm_id = crm_id

    @property
    def pricing_component_version_id(self):
        """Gets the pricing_component_version_id of this PricingComponentTier.  # noqa: E501


        :return: The pricing_component_version_id of this PricingComponentTier.  # noqa: E501
        :rtype: str
        """
        return self._pricing_component_version_id

    @pricing_component_version_id.setter
    def pricing_component_version_id(self, pricing_component_version_id):
        """Sets the pricing_component_version_id of this PricingComponentTier.


        :param pricing_component_version_id: The pricing_component_version_id of this PricingComponentTier.  # noqa: E501
        :type: str
        """

        self._pricing_component_version_id = pricing_component_version_id

    @property
    def product_rate_plan_id(self):
        """Gets the product_rate_plan_id of this PricingComponentTier.  # noqa: E501


        :return: The product_rate_plan_id of this PricingComponentTier.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_id

    @product_rate_plan_id.setter
    def product_rate_plan_id(self, product_rate_plan_id):
        """Sets the product_rate_plan_id of this PricingComponentTier.


        :param product_rate_plan_id: The product_rate_plan_id of this PricingComponentTier.  # noqa: E501
        :type: str
        """

        self._product_rate_plan_id = product_rate_plan_id

    @property
    def organization_id(self):
        """Gets the organization_id of this PricingComponentTier.  # noqa: E501


        :return: The organization_id of this PricingComponentTier.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this PricingComponentTier.


        :param organization_id: The organization_id of this PricingComponentTier.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def lower_threshold(self):
        """Gets the lower_threshold of this PricingComponentTier.  # noqa: E501


        :return: The lower_threshold of this PricingComponentTier.  # noqa: E501
        :rtype: int
        """
        return self._lower_threshold

    @lower_threshold.setter
    def lower_threshold(self, lower_threshold):
        """Sets the lower_threshold of this PricingComponentTier.


        :param lower_threshold: The lower_threshold of this PricingComponentTier.  # noqa: E501
        :type: int
        """

        self._lower_threshold = lower_threshold

    @property
    def bucket_size(self):
        """Gets the bucket_size of this PricingComponentTier.  # noqa: E501


        :return: The bucket_size of this PricingComponentTier.  # noqa: E501
        :rtype: int
        """
        return self._bucket_size

    @bucket_size.setter
    def bucket_size(self, bucket_size):
        """Sets the bucket_size of this PricingComponentTier.


        :param bucket_size: The bucket_size of this PricingComponentTier.  # noqa: E501
        :type: int
        """

        self._bucket_size = bucket_size

    @property
    def upper_threshold(self):
        """Gets the upper_threshold of this PricingComponentTier.  # noqa: E501


        :return: The upper_threshold of this PricingComponentTier.  # noqa: E501
        :rtype: int
        """
        return self._upper_threshold

    @upper_threshold.setter
    def upper_threshold(self, upper_threshold):
        """Sets the upper_threshold of this PricingComponentTier.


        :param upper_threshold: The upper_threshold of this PricingComponentTier.  # noqa: E501
        :type: int
        """

        self._upper_threshold = upper_threshold

    @property
    def pricing_type(self):
        """Gets the pricing_type of this PricingComponentTier.  # noqa: E501


        :return: The pricing_type of this PricingComponentTier.  # noqa: E501
        :rtype: str
        """
        return self._pricing_type

    @pricing_type.setter
    def pricing_type(self, pricing_type):
        """Sets the pricing_type of this PricingComponentTier.


        :param pricing_type: The pricing_type of this PricingComponentTier.  # noqa: E501
        :type: str
        """
        if pricing_type is None:
            raise ValueError("Invalid value for `pricing_type`, must not be `None`")  # noqa: E501
        allowed_values = ["unit", "fixed", "bucket"]  # noqa: E501
        if pricing_type not in allowed_values:
            raise ValueError(
                "Invalid value for `pricing_type` ({0}), must be one of {1}"  # noqa: E501
                .format(pricing_type, allowed_values)
            )

        self._pricing_type = pricing_type

    @property
    def price(self):
        """Gets the price of this PricingComponentTier.  # noqa: E501


        :return: The price of this PricingComponentTier.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this PricingComponentTier.


        :param price: The price of this PricingComponentTier.  # noqa: E501
        :type: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def component_id(self):
        """Gets the component_id of this PricingComponentTier.  # noqa: E501


        :return: The component_id of this PricingComponentTier.  # noqa: E501
        :rtype: str
        """
        return self._component_id

    @component_id.setter
    def component_id(self, component_id):
        """Sets the component_id of this PricingComponentTier.


        :param component_id: The component_id of this PricingComponentTier.  # noqa: E501
        :type: str
        """

        self._component_id = component_id

    @property
    def pricing_component_id(self):
        """Gets the pricing_component_id of this PricingComponentTier.  # noqa: E501


        :return: The pricing_component_id of this PricingComponentTier.  # noqa: E501
        :rtype: str
        """
        return self._pricing_component_id

    @pricing_component_id.setter
    def pricing_component_id(self, pricing_component_id):
        """Sets the pricing_component_id of this PricingComponentTier.


        :param pricing_component_id: The pricing_component_id of this PricingComponentTier.  # noqa: E501
        :type: str
        """

        self._pricing_component_id = pricing_component_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PricingComponentTier, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PricingComponentTier):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
