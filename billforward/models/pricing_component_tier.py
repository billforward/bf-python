# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class PricingComponentTier(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, lower_threshold=None, upper_threshold=None, created=None, changed_by=None, id=None, crm_id=None, pricing_component_version_id=None, pricing_component_id=None, product_rate_plan_id=None, organization_id=None, pricing_type=None, price=None):
        """
        PricingComponentTier - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'lower_threshold': 'int',
            'upper_threshold': 'int',
            'created': 'datetime',
            'changed_by': 'str',
            'id': 'str',
            'crm_id': 'str',
            'pricing_component_version_id': 'str',
            'pricing_component_id': 'str',
            'product_rate_plan_id': 'str',
            'organization_id': 'str',
            'pricing_type': 'str',
            'price': 'float'
        }

        self.attribute_map = {
            'lower_threshold': 'lowerThreshold',
            'upper_threshold': 'upperThreshold',
            'created': 'created',
            'changed_by': 'changedBy',
            'id': 'id',
            'crm_id': 'crmID',
            'pricing_component_version_id': 'pricingComponentVersionID',
            'pricing_component_id': 'pricingComponentID',
            'product_rate_plan_id': 'productRatePlanID',
            'organization_id': 'organizationID',
            'pricing_type': 'pricingType',
            'price': 'price'
        }

        self._lower_threshold = lower_threshold
        self._upper_threshold = upper_threshold
        self._created = created
        self._changed_by = changed_by
        self._id = id
        self._crm_id = crm_id
        self._pricing_component_version_id = pricing_component_version_id
        self._pricing_component_id = pricing_component_id
        self._product_rate_plan_id = product_rate_plan_id
        self._organization_id = organization_id
        self._pricing_type = pricing_type
        self._price = price

    @property
    def lower_threshold(self):
        """
        Gets the lower_threshold of this PricingComponentTier.
        { \"description\" : \"The lower threshold of the tier.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The lower_threshold of this PricingComponentTier.
        :rtype: int
        """
        return self._lower_threshold

    @lower_threshold.setter
    def lower_threshold(self, lower_threshold):
        """
        Sets the lower_threshold of this PricingComponentTier.
        { \"description\" : \"The lower threshold of the tier.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param lower_threshold: The lower_threshold of this PricingComponentTier.
        :type: int
        """

        self._lower_threshold = lower_threshold

    @property
    def upper_threshold(self):
        """
        Gets the upper_threshold of this PricingComponentTier.
        {  \"default\" : \"&infin;\",  \"description\" : \"The upper threshold of the tier. If this is left null the tier will be infinite\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The upper_threshold of this PricingComponentTier.
        :rtype: int
        """
        return self._upper_threshold

    @upper_threshold.setter
    def upper_threshold(self, upper_threshold):
        """
        Sets the upper_threshold of this PricingComponentTier.
        {  \"default\" : \"&infin;\",  \"description\" : \"The upper threshold of the tier. If this is left null the tier will be infinite\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param upper_threshold: The upper_threshold of this PricingComponentTier.
        :type: int
        """

        self._upper_threshold = upper_threshold

    @property
    def created(self):
        """
        Gets the created of this PricingComponentTier.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this PricingComponentTier.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this PricingComponentTier.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this PricingComponentTier.
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """
        Gets the changed_by of this PricingComponentTier.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :return: The changed_by of this PricingComponentTier.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """
        Sets the changed_by of this PricingComponentTier.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :param changed_by: The changed_by of this PricingComponentTier.
        :type: str
        """

        self._changed_by = changed_by

    @property
    def id(self):
        """
        Gets the id of this PricingComponentTier.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :return: The id of this PricingComponentTier.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PricingComponentTier.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :param id: The id of this PricingComponentTier.
        :type: str
        """

        self._id = id

    @property
    def crm_id(self):
        """
        Gets the crm_id of this PricingComponentTier.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The crm_id of this PricingComponentTier.
        :rtype: str
        """
        return self._crm_id

    @crm_id.setter
    def crm_id(self, crm_id):
        """
        Sets the crm_id of this PricingComponentTier.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param crm_id: The crm_id of this PricingComponentTier.
        :type: str
        """

        self._crm_id = crm_id

    @property
    def pricing_component_version_id(self):
        """
        Gets the pricing_component_version_id of this PricingComponentTier.
        { \"description\" : \"Version ID of the associated pricing-component\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The pricing_component_version_id of this PricingComponentTier.
        :rtype: str
        """
        return self._pricing_component_version_id

    @pricing_component_version_id.setter
    def pricing_component_version_id(self, pricing_component_version_id):
        """
        Sets the pricing_component_version_id of this PricingComponentTier.
        { \"description\" : \"Version ID of the associated pricing-component\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param pricing_component_version_id: The pricing_component_version_id of this PricingComponentTier.
        :type: str
        """

        self._pricing_component_version_id = pricing_component_version_id

    @property
    def pricing_component_id(self):
        """
        Gets the pricing_component_id of this PricingComponentTier.
        { \"description\" : \"ID of the pricing-component associated with the pricing-component-tier.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The pricing_component_id of this PricingComponentTier.
        :rtype: str
        """
        return self._pricing_component_id

    @pricing_component_id.setter
    def pricing_component_id(self, pricing_component_id):
        """
        Sets the pricing_component_id of this PricingComponentTier.
        { \"description\" : \"ID of the pricing-component associated with the pricing-component-tier.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param pricing_component_id: The pricing_component_id of this PricingComponentTier.
        :type: str
        """

        self._pricing_component_id = pricing_component_id

    @property
    def product_rate_plan_id(self):
        """
        Gets the product_rate_plan_id of this PricingComponentTier.
        { \"description\" : \"ID of the product-rate-plan associated with the pricing-component-tier.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The product_rate_plan_id of this PricingComponentTier.
        :rtype: str
        """
        return self._product_rate_plan_id

    @product_rate_plan_id.setter
    def product_rate_plan_id(self, product_rate_plan_id):
        """
        Sets the product_rate_plan_id of this PricingComponentTier.
        { \"description\" : \"ID of the product-rate-plan associated with the pricing-component-tier.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param product_rate_plan_id: The product_rate_plan_id of this PricingComponentTier.
        :type: str
        """

        self._product_rate_plan_id = product_rate_plan_id

    @property
    def organization_id(self):
        """
        Gets the organization_id of this PricingComponentTier.
        { \"description\" : \"Organization associated with the pricing-component-tier.\", \"verbs\":[] }

        :return: The organization_id of this PricingComponentTier.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this PricingComponentTier.
        { \"description\" : \"Organization associated with the pricing-component-tier.\", \"verbs\":[] }

        :param organization_id: The organization_id of this PricingComponentTier.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def pricing_type(self):
        """
        Gets the pricing_type of this PricingComponentTier.
        { \"description\" : \"Pricing calculation used to price items in this pricing tier. Unit pricing means every distinct value is used in the calculation. Fixed means that the total price of the tier is fixed regardless of the purchased amount.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The pricing_type of this PricingComponentTier.
        :rtype: str
        """
        return self._pricing_type

    @pricing_type.setter
    def pricing_type(self, pricing_type):
        """
        Sets the pricing_type of this PricingComponentTier.
        { \"description\" : \"Pricing calculation used to price items in this pricing tier. Unit pricing means every distinct value is used in the calculation. Fixed means that the total price of the tier is fixed regardless of the purchased amount.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param pricing_type: The pricing_type of this PricingComponentTier.
        :type: str
        """
        allowed_values = ["unit", "fixed"]
        if pricing_type not in allowed_values:
            raise ValueError(
                "Invalid value for `pricing_type` ({0}), must be one of {1}"
                .format(pricing_type, allowed_values)
            )

        self._pricing_type = pricing_type

    @property
    def price(self):
        """
        Gets the price of this PricingComponentTier.
        { \"description\" : \"Cost associated with tier. When the pricingType is fixed this is the total value. When pricingType is unit, this is the cost of each unit. \", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The price of this PricingComponentTier.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this PricingComponentTier.
        { \"description\" : \"Cost associated with tier. When the pricingType is fixed this is the total value. When pricingType is unit, this is the cost of each unit. \", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param price: The price of this PricingComponentTier.
        :type: float
        """

        self._price = price

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
