# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from billforward.models.auth_capture_request import AuthCaptureRequest  # noqa: F401,E501

class BraintreeAuthCaptureRequest(AuthCaptureRequest):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payment_method_nonce': 'str',
        'device_data': 'str',
        'merchant_account_id': 'str'
    }
    if hasattr(AuthCaptureRequest, "swagger_types"):
        swagger_types.update(AuthCaptureRequest.swagger_types)

    attribute_map = {
        'payment_method_nonce': 'paymentMethodNonce',
        'device_data': 'deviceData',
        'merchant_account_id': 'merchantAccountId'
    }
    if hasattr(AuthCaptureRequest, "attribute_map"):
        attribute_map.update(AuthCaptureRequest.attribute_map)

    def __init__(self, payment_method_nonce=None, device_data=None, merchant_account_id=None, *args, **kwargs):  # noqa: E501
        """BraintreeAuthCaptureRequest - a model defined in Swagger"""  # noqa: E501
        self._payment_method_nonce = None
        self._device_data = None
        self._merchant_account_id = None
        self.discriminator = None
        self.payment_method_nonce = payment_method_nonce
        if device_data is not None:
            self.device_data = device_data
        if merchant_account_id is not None:
            self.merchant_account_id = merchant_account_id
        AuthCaptureRequest.__init__(self, *args, **kwargs)

    @property
    def payment_method_nonce(self):
        """Gets the payment_method_nonce of this BraintreeAuthCaptureRequest.  # noqa: E501


        :return: The payment_method_nonce of this BraintreeAuthCaptureRequest.  # noqa: E501
        :rtype: str
        """
        return self._payment_method_nonce

    @payment_method_nonce.setter
    def payment_method_nonce(self, payment_method_nonce):
        """Sets the payment_method_nonce of this BraintreeAuthCaptureRequest.


        :param payment_method_nonce: The payment_method_nonce of this BraintreeAuthCaptureRequest.  # noqa: E501
        :type: str
        """
        if payment_method_nonce is None:
            raise ValueError("Invalid value for `payment_method_nonce`, must not be `None`")  # noqa: E501

        self._payment_method_nonce = payment_method_nonce

    @property
    def device_data(self):
        """Gets the device_data of this BraintreeAuthCaptureRequest.  # noqa: E501


        :return: The device_data of this BraintreeAuthCaptureRequest.  # noqa: E501
        :rtype: str
        """
        return self._device_data

    @device_data.setter
    def device_data(self, device_data):
        """Sets the device_data of this BraintreeAuthCaptureRequest.


        :param device_data: The device_data of this BraintreeAuthCaptureRequest.  # noqa: E501
        :type: str
        """

        self._device_data = device_data

    @property
    def merchant_account_id(self):
        """Gets the merchant_account_id of this BraintreeAuthCaptureRequest.  # noqa: E501


        :return: The merchant_account_id of this BraintreeAuthCaptureRequest.  # noqa: E501
        :rtype: str
        """
        return self._merchant_account_id

    @merchant_account_id.setter
    def merchant_account_id(self, merchant_account_id):
        """Sets the merchant_account_id of this BraintreeAuthCaptureRequest.


        :param merchant_account_id: The merchant_account_id of this BraintreeAuthCaptureRequest.  # noqa: E501
        :type: str
        """

        self._merchant_account_id = merchant_account_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BraintreeAuthCaptureRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BraintreeAuthCaptureRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
