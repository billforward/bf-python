# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class MutableBillingEntity(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, changed_by=None, updated=None, id=None, config_id=None, organization_id=None, state=None, type=None, scope=None, target=None, name=None, description=None, data_from=None, data_till=None, started=None, stopped=None, created_by=None, max_retry_times=None, retry_attempted=None, deleted=False):
        """
        MutableBillingEntity - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'changed_by': 'str',
            'updated': 'datetime',
            'id': 'str',
            'config_id': 'str',
            'organization_id': 'str',
            'state': 'str',
            'type': 'str',
            'scope': 'str',
            'target': 'str',
            'name': 'str',
            'description': 'str',
            'data_from': 'datetime',
            'data_till': 'datetime',
            'started': 'datetime',
            'stopped': 'datetime',
            'created_by': 'str',
            'max_retry_times': 'int',
            'retry_attempted': 'int',
            'deleted': 'bool'
        }

        self.attribute_map = {
            'created': 'created',
            'changed_by': 'changedBy',
            'updated': 'updated',
            'id': 'id',
            'config_id': 'configID',
            'organization_id': 'organizationID',
            'state': 'state',
            'type': 'type',
            'scope': 'scope',
            'target': 'target',
            'name': 'name',
            'description': 'description',
            'data_from': 'dataFrom',
            'data_till': 'dataTill',
            'started': 'started',
            'stopped': 'stopped',
            'created_by': 'createdBy',
            'max_retry_times': 'maxRetryTimes',
            'retry_attempted': 'retryAttempted',
            'deleted': 'deleted'
        }

        self._created = created
        self._changed_by = changed_by
        self._updated = updated
        self._id = id
        self._config_id = config_id
        self._organization_id = organization_id
        self._state = state
        self._type = type
        self._scope = scope
        self._target = target
        self._name = name
        self._description = description
        self._data_from = data_from
        self._data_till = data_till
        self._started = started
        self._stopped = stopped
        self._created_by = created_by
        self._max_retry_times = max_retry_times
        self._retry_attempted = retry_attempted
        self._deleted = deleted

    @property
    def created(self):
        """
        Gets the created of this MutableBillingEntity.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this MutableBillingEntity.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this MutableBillingEntity.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this MutableBillingEntity.
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """
        Gets the changed_by of this MutableBillingEntity.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :return: The changed_by of this MutableBillingEntity.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """
        Sets the changed_by of this MutableBillingEntity.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :param changed_by: The changed_by of this MutableBillingEntity.
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """
        Gets the updated of this MutableBillingEntity.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :return: The updated of this MutableBillingEntity.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this MutableBillingEntity.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :param updated: The updated of this MutableBillingEntity.
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """
        Gets the id of this MutableBillingEntity.
        ID of the Synchronization Job.

        :return: The id of this MutableBillingEntity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this MutableBillingEntity.
        ID of the Synchronization Job.

        :param id: The id of this MutableBillingEntity.
        :type: str
        """

        self._id = id

    @property
    def config_id(self):
        """
        Gets the config_id of this MutableBillingEntity.
        This is config id which links to this sync job.

        :return: The config_id of this MutableBillingEntity.
        :rtype: str
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """
        Sets the config_id of this MutableBillingEntity.
        This is config id which links to this sync job.

        :param config_id: The config_id of this MutableBillingEntity.
        :type: str
        """

        self._config_id = config_id

    @property
    def organization_id(self):
        """
        Gets the organization_id of this MutableBillingEntity.
        Organization associated with the refund.

        :return: The organization_id of this MutableBillingEntity.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this MutableBillingEntity.
        Organization associated with the refund.

        :param organization_id: The organization_id of this MutableBillingEntity.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def state(self):
        """
        Gets the state of this MutableBillingEntity.
        This is the state of job. Pending jobs have not run. Complete jobs have run without error. Failed jobs have one of more errors. Cancelled jobs did not run.

        :return: The state of this MutableBillingEntity.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this MutableBillingEntity.
        This is the state of job. Pending jobs have not run. Complete jobs have run without error. Failed jobs have one of more errors. Cancelled jobs did not run.

        :param state: The state of this MutableBillingEntity.
        :type: str
        """
        allowed_values = ["Pending", "Complete", "Failed", "Cancelled", "Processing"]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def type(self):
        """
        Gets the type of this MutableBillingEntity.
        This is the type of job. Incremental jobs just sync changes, fully jobs sync all data.

        :return: The type of this MutableBillingEntity.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this MutableBillingEntity.
        This is the type of job. Incremental jobs just sync changes, fully jobs sync all data.

        :param type: The type of this MutableBillingEntity.
        :type: str
        """
        allowed_values = ["Incremental", "Full"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def scope(self):
        """
        Gets the scope of this MutableBillingEntity.
        The scope of the data synch'd.

        :return: The scope of this MutableBillingEntity.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """
        Sets the scope of this MutableBillingEntity.
        The scope of the data synch'd.

        :param scope: The scope of this MutableBillingEntity.
        :type: str
        """
        allowed_values = ["Manual", "Scheduled"]
        if scope not in allowed_values:
            raise ValueError(
                "Invalid value for `scope` ({0}), must be one of {1}"
                .format(scope, allowed_values)
            )

        self._scope = scope

    @property
    def target(self):
        """
        Gets the target of this MutableBillingEntity.
        This is the target of the job.

        :return: The target of this MutableBillingEntity.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """
        Sets the target of this MutableBillingEntity.
        This is the target of the job.

        :param target: The target of this MutableBillingEntity.
        :type: str
        """
        allowed_values = ["Salesforce"]
        if target not in allowed_values:
            raise ValueError(
                "Invalid value for `target` ({0}), must be one of {1}"
                .format(target, allowed_values)
            )

        self._target = target

    @property
    def name(self):
        """
        Gets the name of this MutableBillingEntity.
        Name of the Job.

        :return: The name of this MutableBillingEntity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this MutableBillingEntity.
        Name of the Job.

        :param name: The name of this MutableBillingEntity.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this MutableBillingEntity.
        Description of the Job.

        :return: The description of this MutableBillingEntity.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this MutableBillingEntity.
        Description of the Job.

        :param description: The description of this MutableBillingEntity.
        :type: str
        """

        self._description = description

    @property
    def data_from(self):
        """
        Gets the data_from of this MutableBillingEntity.
        UTC DateTime of the start of the data to sync.

        :return: The data_from of this MutableBillingEntity.
        :rtype: datetime
        """
        return self._data_from

    @data_from.setter
    def data_from(self, data_from):
        """
        Sets the data_from of this MutableBillingEntity.
        UTC DateTime of the start of the data to sync.

        :param data_from: The data_from of this MutableBillingEntity.
        :type: datetime
        """

        self._data_from = data_from

    @property
    def data_till(self):
        """
        Gets the data_till of this MutableBillingEntity.
        UTC DateTime of the start of the data to sync.

        :return: The data_till of this MutableBillingEntity.
        :rtype: datetime
        """
        return self._data_till

    @data_till.setter
    def data_till(self, data_till):
        """
        Sets the data_till of this MutableBillingEntity.
        UTC DateTime of the start of the data to sync.

        :param data_till: The data_till of this MutableBillingEntity.
        :type: datetime
        """

        self._data_till = data_till

    @property
    def started(self):
        """
        Gets the started of this MutableBillingEntity.
        UTC DateTime of the end of the data to sync.

        :return: The started of this MutableBillingEntity.
        :rtype: datetime
        """
        return self._started

    @started.setter
    def started(self, started):
        """
        Sets the started of this MutableBillingEntity.
        UTC DateTime of the end of the data to sync.

        :param started: The started of this MutableBillingEntity.
        :type: datetime
        """

        self._started = started

    @property
    def stopped(self):
        """
        Gets the stopped of this MutableBillingEntity.
        UTC DateTime of the start of the data to sync.

        :return: The stopped of this MutableBillingEntity.
        :rtype: datetime
        """
        return self._stopped

    @stopped.setter
    def stopped(self, stopped):
        """
        Sets the stopped of this MutableBillingEntity.
        UTC DateTime of the start of the data to sync.

        :param stopped: The stopped of this MutableBillingEntity.
        :type: datetime
        """

        self._stopped = stopped

    @property
    def created_by(self):
        """
        Gets the created_by of this MutableBillingEntity.
        The account who created the synch job.

        :return: The created_by of this MutableBillingEntity.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """
        Sets the created_by of this MutableBillingEntity.
        The account who created the synch job.

        :param created_by: The created_by of this MutableBillingEntity.
        :type: str
        """

        self._created_by = created_by

    @property
    def max_retry_times(self):
        """
        Gets the max_retry_times of this MutableBillingEntity.
        The max number of times the records will try to resync.

        :return: The max_retry_times of this MutableBillingEntity.
        :rtype: int
        """
        return self._max_retry_times

    @max_retry_times.setter
    def max_retry_times(self, max_retry_times):
        """
        Sets the max_retry_times of this MutableBillingEntity.
        The max number of times the records will try to resync.

        :param max_retry_times: The max_retry_times of this MutableBillingEntity.
        :type: int
        """

        self._max_retry_times = max_retry_times

    @property
    def retry_attempted(self):
        """
        Gets the retry_attempted of this MutableBillingEntity.
        The number of times the records tried to resync.

        :return: The retry_attempted of this MutableBillingEntity.
        :rtype: int
        """
        return self._retry_attempted

    @retry_attempted.setter
    def retry_attempted(self, retry_attempted):
        """
        Sets the retry_attempted of this MutableBillingEntity.
        The number of times the records tried to resync.

        :param retry_attempted: The retry_attempted of this MutableBillingEntity.
        :type: int
        """

        self._retry_attempted = retry_attempted

    @property
    def deleted(self):
        """
        Gets the deleted of this MutableBillingEntity.
        Is the sync job deleted.

        :return: The deleted of this MutableBillingEntity.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """
        Sets the deleted of this MutableBillingEntity.
        Is the sync job deleted.

        :param deleted: The deleted of this MutableBillingEntity.
        :type: bool
        """

        self._deleted = deleted

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
