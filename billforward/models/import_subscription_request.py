# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ImportSubscriptionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'product': 'str',
        'product_rate_plan': 'str',
        'account_id': 'str',
        'organization_id': 'str',
        'period_start': 'datetime',
        'period_end': 'datetime',
        'trial_end': 'datetime',
        'state': 'str',
        'name': 'str',
        'description': 'str',
        'subscription_end': 'datetime',
        'periods': 'int',
        'dry_run': 'bool',
        'purchase_order': 'str'
    }

    attribute_map = {
        'created': 'created',
        'product': 'product',
        'product_rate_plan': 'productRatePlan',
        'account_id': 'accountID',
        'organization_id': 'organizationID',
        'period_start': 'periodStart',
        'period_end': 'periodEnd',
        'trial_end': 'trialEnd',
        'state': 'state',
        'name': 'name',
        'description': 'description',
        'subscription_end': 'subscriptionEnd',
        'periods': 'periods',
        'dry_run': 'dryRun',
        'purchase_order': 'purchaseOrder'
    }

    def __init__(self, created=None, product=None, product_rate_plan=None, account_id=None, organization_id=None, period_start=None, period_end=None, trial_end=None, state=None, name=None, description=None, subscription_end=None, periods=None, dry_run=None, purchase_order=None):  # noqa: E501
        """ImportSubscriptionRequest - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._product = None
        self._product_rate_plan = None
        self._account_id = None
        self._organization_id = None
        self._period_start = None
        self._period_end = None
        self._trial_end = None
        self._state = None
        self._name = None
        self._description = None
        self._subscription_end = None
        self._periods = None
        self._dry_run = None
        self._purchase_order = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if product is not None:
            self.product = product
        if product_rate_plan is not None:
            self.product_rate_plan = product_rate_plan
        if account_id is not None:
            self.account_id = account_id
        if organization_id is not None:
            self.organization_id = organization_id
        if period_start is not None:
            self.period_start = period_start
        if period_end is not None:
            self.period_end = period_end
        if trial_end is not None:
            self.trial_end = trial_end
        if state is not None:
            self.state = state
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if subscription_end is not None:
            self.subscription_end = subscription_end
        if periods is not None:
            self.periods = periods
        if dry_run is not None:
            self.dry_run = dry_run
        if purchase_order is not None:
            self.purchase_order = purchase_order

    @property
    def created(self):
        """Gets the created of this ImportSubscriptionRequest.  # noqa: E501


        :return: The created of this ImportSubscriptionRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ImportSubscriptionRequest.


        :param created: The created of this ImportSubscriptionRequest.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def product(self):
        """Gets the product of this ImportSubscriptionRequest.  # noqa: E501


        :return: The product of this ImportSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this ImportSubscriptionRequest.


        :param product: The product of this ImportSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._product = product

    @property
    def product_rate_plan(self):
        """Gets the product_rate_plan of this ImportSubscriptionRequest.  # noqa: E501


        :return: The product_rate_plan of this ImportSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan

    @product_rate_plan.setter
    def product_rate_plan(self, product_rate_plan):
        """Sets the product_rate_plan of this ImportSubscriptionRequest.


        :param product_rate_plan: The product_rate_plan of this ImportSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._product_rate_plan = product_rate_plan

    @property
    def account_id(self):
        """Gets the account_id of this ImportSubscriptionRequest.  # noqa: E501


        :return: The account_id of this ImportSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ImportSubscriptionRequest.


        :param account_id: The account_id of this ImportSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def organization_id(self):
        """Gets the organization_id of this ImportSubscriptionRequest.  # noqa: E501


        :return: The organization_id of this ImportSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this ImportSubscriptionRequest.


        :param organization_id: The organization_id of this ImportSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def period_start(self):
        """Gets the period_start of this ImportSubscriptionRequest.  # noqa: E501


        :return: The period_start of this ImportSubscriptionRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._period_start

    @period_start.setter
    def period_start(self, period_start):
        """Sets the period_start of this ImportSubscriptionRequest.


        :param period_start: The period_start of this ImportSubscriptionRequest.  # noqa: E501
        :type: datetime
        """

        self._period_start = period_start

    @property
    def period_end(self):
        """Gets the period_end of this ImportSubscriptionRequest.  # noqa: E501


        :return: The period_end of this ImportSubscriptionRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._period_end

    @period_end.setter
    def period_end(self, period_end):
        """Sets the period_end of this ImportSubscriptionRequest.


        :param period_end: The period_end of this ImportSubscriptionRequest.  # noqa: E501
        :type: datetime
        """

        self._period_end = period_end

    @property
    def trial_end(self):
        """Gets the trial_end of this ImportSubscriptionRequest.  # noqa: E501


        :return: The trial_end of this ImportSubscriptionRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._trial_end

    @trial_end.setter
    def trial_end(self, trial_end):
        """Sets the trial_end of this ImportSubscriptionRequest.


        :param trial_end: The trial_end of this ImportSubscriptionRequest.  # noqa: E501
        :type: datetime
        """

        self._trial_end = trial_end

    @property
    def state(self):
        """Gets the state of this ImportSubscriptionRequest.  # noqa: E501


        :return: The state of this ImportSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ImportSubscriptionRequest.


        :param state: The state of this ImportSubscriptionRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Trial", "Provisioned", "Paid", "AwaitingPayment", "Cancelled", "Failed", "Expired"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def name(self):
        """Gets the name of this ImportSubscriptionRequest.  # noqa: E501


        :return: The name of this ImportSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImportSubscriptionRequest.


        :param name: The name of this ImportSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ImportSubscriptionRequest.  # noqa: E501


        :return: The description of this ImportSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ImportSubscriptionRequest.


        :param description: The description of this ImportSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def subscription_end(self):
        """Gets the subscription_end of this ImportSubscriptionRequest.  # noqa: E501


        :return: The subscription_end of this ImportSubscriptionRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._subscription_end

    @subscription_end.setter
    def subscription_end(self, subscription_end):
        """Sets the subscription_end of this ImportSubscriptionRequest.


        :param subscription_end: The subscription_end of this ImportSubscriptionRequest.  # noqa: E501
        :type: datetime
        """

        self._subscription_end = subscription_end

    @property
    def periods(self):
        """Gets the periods of this ImportSubscriptionRequest.  # noqa: E501


        :return: The periods of this ImportSubscriptionRequest.  # noqa: E501
        :rtype: int
        """
        return self._periods

    @periods.setter
    def periods(self, periods):
        """Sets the periods of this ImportSubscriptionRequest.


        :param periods: The periods of this ImportSubscriptionRequest.  # noqa: E501
        :type: int
        """

        self._periods = periods

    @property
    def dry_run(self):
        """Gets the dry_run of this ImportSubscriptionRequest.  # noqa: E501


        :return: The dry_run of this ImportSubscriptionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """Sets the dry_run of this ImportSubscriptionRequest.


        :param dry_run: The dry_run of this ImportSubscriptionRequest.  # noqa: E501
        :type: bool
        """

        self._dry_run = dry_run

    @property
    def purchase_order(self):
        """Gets the purchase_order of this ImportSubscriptionRequest.  # noqa: E501


        :return: The purchase_order of this ImportSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._purchase_order

    @purchase_order.setter
    def purchase_order(self, purchase_order):
        """Sets the purchase_order of this ImportSubscriptionRequest.


        :param purchase_order: The purchase_order of this ImportSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._purchase_order = purchase_order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportSubscriptionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportSubscriptionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
