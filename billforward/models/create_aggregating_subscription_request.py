# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateAggregatingSubscriptionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'account_id': 'str',
        'organization_id': 'str',
        'name': 'str',
        'description': 'str',
        'start': 'datetime',
        'end': 'datetime',
        'state': 'str',
        'product_rate_plan': 'str',
        'duration': 'int',
        'duration_period': 'str',
        'product_type': 'str',
        'aggregating_components': 'list[CreateAggregatingComponentRequest]',
        'aggregate_all_subscriptions_on_account': 'bool',
        'currency': 'CreditNoteCurrency',
        'failed_payment_behaviour': 'str',
        'payment_terms': 'int',
        'purchase_order': 'str',
        'align_period_with_aggregating_subscription': 'bool'
    }

    attribute_map = {
        'created': 'created',
        'account_id': 'accountID',
        'organization_id': 'organizationID',
        'name': 'name',
        'description': 'description',
        'start': 'start',
        'end': 'end',
        'state': 'state',
        'product_rate_plan': 'productRatePlan',
        'duration': 'duration',
        'duration_period': 'durationPeriod',
        'product_type': 'productType',
        'aggregating_components': 'aggregatingComponents',
        'aggregate_all_subscriptions_on_account': 'aggregateAllSubscriptionsOnAccount',
        'currency': 'currency',
        'failed_payment_behaviour': 'failedPaymentBehaviour',
        'payment_terms': 'paymentTerms',
        'purchase_order': 'purchaseOrder',
        'align_period_with_aggregating_subscription': 'alignPeriodWithAggregatingSubscription'
    }

    def __init__(self, created=None, account_id=None, organization_id=None, name=None, description=None, start=None, end=None, state=None, product_rate_plan=None, duration=None, duration_period=None, product_type=None, aggregating_components=None, aggregate_all_subscriptions_on_account=None, currency=None, failed_payment_behaviour=None, payment_terms=None, purchase_order=None, align_period_with_aggregating_subscription=None):  # noqa: E501
        """CreateAggregatingSubscriptionRequest - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._account_id = None
        self._organization_id = None
        self._name = None
        self._description = None
        self._start = None
        self._end = None
        self._state = None
        self._product_rate_plan = None
        self._duration = None
        self._duration_period = None
        self._product_type = None
        self._aggregating_components = None
        self._aggregate_all_subscriptions_on_account = None
        self._currency = None
        self._failed_payment_behaviour = None
        self._payment_terms = None
        self._purchase_order = None
        self._align_period_with_aggregating_subscription = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if account_id is not None:
            self.account_id = account_id
        if organization_id is not None:
            self.organization_id = organization_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if state is not None:
            self.state = state
        if product_rate_plan is not None:
            self.product_rate_plan = product_rate_plan
        if duration is not None:
            self.duration = duration
        if duration_period is not None:
            self.duration_period = duration_period
        if product_type is not None:
            self.product_type = product_type
        if aggregating_components is not None:
            self.aggregating_components = aggregating_components
        if aggregate_all_subscriptions_on_account is not None:
            self.aggregate_all_subscriptions_on_account = aggregate_all_subscriptions_on_account
        if currency is not None:
            self.currency = currency
        if failed_payment_behaviour is not None:
            self.failed_payment_behaviour = failed_payment_behaviour
        if payment_terms is not None:
            self.payment_terms = payment_terms
        if purchase_order is not None:
            self.purchase_order = purchase_order
        if align_period_with_aggregating_subscription is not None:
            self.align_period_with_aggregating_subscription = align_period_with_aggregating_subscription

    @property
    def created(self):
        """Gets the created of this CreateAggregatingSubscriptionRequest.  # noqa: E501


        :return: The created of this CreateAggregatingSubscriptionRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this CreateAggregatingSubscriptionRequest.


        :param created: The created of this CreateAggregatingSubscriptionRequest.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def account_id(self):
        """Gets the account_id of this CreateAggregatingSubscriptionRequest.  # noqa: E501


        :return: The account_id of this CreateAggregatingSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CreateAggregatingSubscriptionRequest.


        :param account_id: The account_id of this CreateAggregatingSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def organization_id(self):
        """Gets the organization_id of this CreateAggregatingSubscriptionRequest.  # noqa: E501


        :return: The organization_id of this CreateAggregatingSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this CreateAggregatingSubscriptionRequest.


        :param organization_id: The organization_id of this CreateAggregatingSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def name(self):
        """Gets the name of this CreateAggregatingSubscriptionRequest.  # noqa: E501


        :return: The name of this CreateAggregatingSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateAggregatingSubscriptionRequest.


        :param name: The name of this CreateAggregatingSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateAggregatingSubscriptionRequest.  # noqa: E501


        :return: The description of this CreateAggregatingSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateAggregatingSubscriptionRequest.


        :param description: The description of this CreateAggregatingSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def start(self):
        """Gets the start of this CreateAggregatingSubscriptionRequest.  # noqa: E501


        :return: The start of this CreateAggregatingSubscriptionRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this CreateAggregatingSubscriptionRequest.


        :param start: The start of this CreateAggregatingSubscriptionRequest.  # noqa: E501
        :type: datetime
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this CreateAggregatingSubscriptionRequest.  # noqa: E501


        :return: The end of this CreateAggregatingSubscriptionRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this CreateAggregatingSubscriptionRequest.


        :param end: The end of this CreateAggregatingSubscriptionRequest.  # noqa: E501
        :type: datetime
        """

        self._end = end

    @property
    def state(self):
        """Gets the state of this CreateAggregatingSubscriptionRequest.  # noqa: E501


        :return: The state of this CreateAggregatingSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CreateAggregatingSubscriptionRequest.


        :param state: The state of this CreateAggregatingSubscriptionRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Trial", "Provisioned", "Paid", "AwaitingPayment", "Cancelled", "Failed", "Expired"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def product_rate_plan(self):
        """Gets the product_rate_plan of this CreateAggregatingSubscriptionRequest.  # noqa: E501


        :return: The product_rate_plan of this CreateAggregatingSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan

    @product_rate_plan.setter
    def product_rate_plan(self, product_rate_plan):
        """Sets the product_rate_plan of this CreateAggregatingSubscriptionRequest.


        :param product_rate_plan: The product_rate_plan of this CreateAggregatingSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._product_rate_plan = product_rate_plan

    @property
    def duration(self):
        """Gets the duration of this CreateAggregatingSubscriptionRequest.  # noqa: E501


        :return: The duration of this CreateAggregatingSubscriptionRequest.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this CreateAggregatingSubscriptionRequest.


        :param duration: The duration of this CreateAggregatingSubscriptionRequest.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def duration_period(self):
        """Gets the duration_period of this CreateAggregatingSubscriptionRequest.  # noqa: E501


        :return: The duration_period of this CreateAggregatingSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._duration_period

    @duration_period.setter
    def duration_period(self, duration_period):
        """Sets the duration_period of this CreateAggregatingSubscriptionRequest.


        :param duration_period: The duration_period of this CreateAggregatingSubscriptionRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["minutes", "days", "months", "years"]  # noqa: E501
        if duration_period not in allowed_values:
            raise ValueError(
                "Invalid value for `duration_period` ({0}), must be one of {1}"  # noqa: E501
                .format(duration_period, allowed_values)
            )

        self._duration_period = duration_period

    @property
    def product_type(self):
        """Gets the product_type of this CreateAggregatingSubscriptionRequest.  # noqa: E501


        :return: The product_type of this CreateAggregatingSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this CreateAggregatingSubscriptionRequest.


        :param product_type: The product_type of this CreateAggregatingSubscriptionRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["non-recurring", "recurring"]  # noqa: E501
        if product_type not in allowed_values:
            raise ValueError(
                "Invalid value for `product_type` ({0}), must be one of {1}"  # noqa: E501
                .format(product_type, allowed_values)
            )

        self._product_type = product_type

    @property
    def aggregating_components(self):
        """Gets the aggregating_components of this CreateAggregatingSubscriptionRequest.  # noqa: E501


        :return: The aggregating_components of this CreateAggregatingSubscriptionRequest.  # noqa: E501
        :rtype: list[CreateAggregatingComponentRequest]
        """
        return self._aggregating_components

    @aggregating_components.setter
    def aggregating_components(self, aggregating_components):
        """Sets the aggregating_components of this CreateAggregatingSubscriptionRequest.


        :param aggregating_components: The aggregating_components of this CreateAggregatingSubscriptionRequest.  # noqa: E501
        :type: list[CreateAggregatingComponentRequest]
        """

        self._aggregating_components = aggregating_components

    @property
    def aggregate_all_subscriptions_on_account(self):
        """Gets the aggregate_all_subscriptions_on_account of this CreateAggregatingSubscriptionRequest.  # noqa: E501


        :return: The aggregate_all_subscriptions_on_account of this CreateAggregatingSubscriptionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._aggregate_all_subscriptions_on_account

    @aggregate_all_subscriptions_on_account.setter
    def aggregate_all_subscriptions_on_account(self, aggregate_all_subscriptions_on_account):
        """Sets the aggregate_all_subscriptions_on_account of this CreateAggregatingSubscriptionRequest.


        :param aggregate_all_subscriptions_on_account: The aggregate_all_subscriptions_on_account of this CreateAggregatingSubscriptionRequest.  # noqa: E501
        :type: bool
        """

        self._aggregate_all_subscriptions_on_account = aggregate_all_subscriptions_on_account

    @property
    def currency(self):
        """Gets the currency of this CreateAggregatingSubscriptionRequest.  # noqa: E501


        :return: The currency of this CreateAggregatingSubscriptionRequest.  # noqa: E501
        :rtype: CreditNoteCurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CreateAggregatingSubscriptionRequest.


        :param currency: The currency of this CreateAggregatingSubscriptionRequest.  # noqa: E501
        :type: CreditNoteCurrency
        """

        self._currency = currency

    @property
    def failed_payment_behaviour(self):
        """Gets the failed_payment_behaviour of this CreateAggregatingSubscriptionRequest.  # noqa: E501


        :return: The failed_payment_behaviour of this CreateAggregatingSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._failed_payment_behaviour

    @failed_payment_behaviour.setter
    def failed_payment_behaviour(self, failed_payment_behaviour):
        """Sets the failed_payment_behaviour of this CreateAggregatingSubscriptionRequest.


        :param failed_payment_behaviour: The failed_payment_behaviour of this CreateAggregatingSubscriptionRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["CancelSubscription", "None"]  # noqa: E501
        if failed_payment_behaviour not in allowed_values:
            raise ValueError(
                "Invalid value for `failed_payment_behaviour` ({0}), must be one of {1}"  # noqa: E501
                .format(failed_payment_behaviour, allowed_values)
            )

        self._failed_payment_behaviour = failed_payment_behaviour

    @property
    def payment_terms(self):
        """Gets the payment_terms of this CreateAggregatingSubscriptionRequest.  # noqa: E501


        :return: The payment_terms of this CreateAggregatingSubscriptionRequest.  # noqa: E501
        :rtype: int
        """
        return self._payment_terms

    @payment_terms.setter
    def payment_terms(self, payment_terms):
        """Sets the payment_terms of this CreateAggregatingSubscriptionRequest.


        :param payment_terms: The payment_terms of this CreateAggregatingSubscriptionRequest.  # noqa: E501
        :type: int
        """

        self._payment_terms = payment_terms

    @property
    def purchase_order(self):
        """Gets the purchase_order of this CreateAggregatingSubscriptionRequest.  # noqa: E501


        :return: The purchase_order of this CreateAggregatingSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._purchase_order

    @purchase_order.setter
    def purchase_order(self, purchase_order):
        """Sets the purchase_order of this CreateAggregatingSubscriptionRequest.


        :param purchase_order: The purchase_order of this CreateAggregatingSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._purchase_order = purchase_order

    @property
    def align_period_with_aggregating_subscription(self):
        """Gets the align_period_with_aggregating_subscription of this CreateAggregatingSubscriptionRequest.  # noqa: E501


        :return: The align_period_with_aggregating_subscription of this CreateAggregatingSubscriptionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._align_period_with_aggregating_subscription

    @align_period_with_aggregating_subscription.setter
    def align_period_with_aggregating_subscription(self, align_period_with_aggregating_subscription):
        """Sets the align_period_with_aggregating_subscription of this CreateAggregatingSubscriptionRequest.


        :param align_period_with_aggregating_subscription: The align_period_with_aggregating_subscription of this CreateAggregatingSubscriptionRequest.  # noqa: E501
        :type: bool
        """

        self._align_period_with_aggregating_subscription = align_period_with_aggregating_subscription

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateAggregatingSubscriptionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateAggregatingSubscriptionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
