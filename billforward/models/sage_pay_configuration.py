# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from billforward.models.api_configuration import APIConfiguration  # noqa: F401,E501

class SagePayConfiguration(APIConfiguration):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled_card_types': 'list[SagePayEnabledCardType]',
        'account_type': 'str',
        'vendor': 'str'
    }
    if hasattr(APIConfiguration, "swagger_types"):
        swagger_types.update(APIConfiguration.swagger_types)

    attribute_map = {
        'enabled_card_types': 'enabledCardTypes',
        'account_type': 'accountType',
        'vendor': 'vendor'
    }
    if hasattr(APIConfiguration, "attribute_map"):
        attribute_map.update(APIConfiguration.attribute_map)

    def __init__(self, enabled_card_types=None, account_type=None, vendor=None, *args, **kwargs):  # noqa: E501
        """SagePayConfiguration - a model defined in Swagger"""  # noqa: E501
        self._enabled_card_types = None
        self._account_type = None
        self._vendor = None
        self.discriminator = None
        if enabled_card_types is not None:
            self.enabled_card_types = enabled_card_types
        if account_type is not None:
            self.account_type = account_type
        if vendor is not None:
            self.vendor = vendor
        APIConfiguration.__init__(self, *args, **kwargs)

    @property
    def enabled_card_types(self):
        """Gets the enabled_card_types of this SagePayConfiguration.  # noqa: E501


        :return: The enabled_card_types of this SagePayConfiguration.  # noqa: E501
        :rtype: list[SagePayEnabledCardType]
        """
        return self._enabled_card_types

    @enabled_card_types.setter
    def enabled_card_types(self, enabled_card_types):
        """Sets the enabled_card_types of this SagePayConfiguration.


        :param enabled_card_types: The enabled_card_types of this SagePayConfiguration.  # noqa: E501
        :type: list[SagePayEnabledCardType]
        """

        self._enabled_card_types = enabled_card_types

    @property
    def account_type(self):
        """Gets the account_type of this SagePayConfiguration.  # noqa: E501


        :return: The account_type of this SagePayConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this SagePayConfiguration.


        :param account_type: The account_type of this SagePayConfiguration.  # noqa: E501
        :type: str
        """

        self._account_type = account_type

    @property
    def vendor(self):
        """Gets the vendor of this SagePayConfiguration.  # noqa: E501


        :return: The vendor of this SagePayConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this SagePayConfiguration.


        :param vendor: The vendor of this SagePayConfiguration.  # noqa: E501
        :type: str
        """

        self._vendor = vendor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SagePayConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SagePayConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
