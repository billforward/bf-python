# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CouponInstanceExistingValue(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, changed_by=None, updated=None, id=None, organization_id=None, coupon_instance_id=None, logical_component_id=None, existing_value=None):
        """
        CouponInstanceExistingValue - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'changed_by': 'str',
            'updated': 'datetime',
            'id': 'str',
            'organization_id': 'str',
            'coupon_instance_id': 'str',
            'logical_component_id': 'str',
            'existing_value': 'int'
        }

        self.attribute_map = {
            'created': 'created',
            'changed_by': 'changedBy',
            'updated': 'updated',
            'id': 'id',
            'organization_id': 'organizationID',
            'coupon_instance_id': 'couponInstanceID',
            'logical_component_id': 'logicalComponentID',
            'existing_value': 'existingValue'
        }

        self._created = created
        self._changed_by = changed_by
        self._updated = updated
        self._id = id
        self._organization_id = organization_id
        self._coupon_instance_id = coupon_instance_id
        self._logical_component_id = logical_component_id
        self._existing_value = existing_value

    @property
    def created(self):
        """
        Gets the created of this CouponInstanceExistingValue.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this CouponInstanceExistingValue.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this CouponInstanceExistingValue.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this CouponInstanceExistingValue.
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """
        Gets the changed_by of this CouponInstanceExistingValue.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :return: The changed_by of this CouponInstanceExistingValue.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """
        Sets the changed_by of this CouponInstanceExistingValue.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :param changed_by: The changed_by of this CouponInstanceExistingValue.
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """
        Gets the updated of this CouponInstanceExistingValue.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :return: The updated of this CouponInstanceExistingValue.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this CouponInstanceExistingValue.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :param updated: The updated of this CouponInstanceExistingValue.
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """
        Gets the id of this CouponInstanceExistingValue.
        { \"description\" : \"ID of the coupon-instance-existing-value.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The id of this CouponInstanceExistingValue.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CouponInstanceExistingValue.
        { \"description\" : \"ID of the coupon-instance-existing-value.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param id: The id of this CouponInstanceExistingValue.
        :type: str
        """

        self._id = id

    @property
    def organization_id(self):
        """
        Gets the organization_id of this CouponInstanceExistingValue.
        { \"description\" : \"ID of the organization associated with the coupon-existing-value.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The organization_id of this CouponInstanceExistingValue.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this CouponInstanceExistingValue.
        { \"description\" : \"ID of the organization associated with the coupon-existing-value.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param organization_id: The organization_id of this CouponInstanceExistingValue.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def coupon_instance_id(self):
        """
        Gets the coupon_instance_id of this CouponInstanceExistingValue.
        { \"description\" : \"The string ID of the coupon-instance associated with the coupon-instance-existing-value.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The coupon_instance_id of this CouponInstanceExistingValue.
        :rtype: str
        """
        return self._coupon_instance_id

    @coupon_instance_id.setter
    def coupon_instance_id(self, coupon_instance_id):
        """
        Sets the coupon_instance_id of this CouponInstanceExistingValue.
        { \"description\" : \"The string ID of the coupon-instance associated with the coupon-instance-existing-value.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param coupon_instance_id: The coupon_instance_id of this CouponInstanceExistingValue.
        :type: str
        """

        self._coupon_instance_id = coupon_instance_id

    @property
    def logical_component_id(self):
        """
        Gets the logical_component_id of this CouponInstanceExistingValue.
        { \"description\" : \"The consistent string ID of the pricing-component associated with the coupon-instance-existing-value.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The logical_component_id of this CouponInstanceExistingValue.
        :rtype: str
        """
        return self._logical_component_id

    @logical_component_id.setter
    def logical_component_id(self, logical_component_id):
        """
        Sets the logical_component_id of this CouponInstanceExistingValue.
        { \"description\" : \"The consistent string ID of the pricing-component associated with the coupon-instance-existing-value.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param logical_component_id: The logical_component_id of this CouponInstanceExistingValue.
        :type: str
        """

        self._logical_component_id = logical_component_id

    @property
    def existing_value(self):
        """
        Gets the existing_value of this CouponInstanceExistingValue.
        { \"description\" : \"The existing value\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The existing_value of this CouponInstanceExistingValue.
        :rtype: int
        """
        return self._existing_value

    @existing_value.setter
    def existing_value(self, existing_value):
        """
        Sets the existing_value of this CouponInstanceExistingValue.
        { \"description\" : \"The existing value\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param existing_value: The existing_value of this CouponInstanceExistingValue.
        :type: int
        """

        self._existing_value = existing_value

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
