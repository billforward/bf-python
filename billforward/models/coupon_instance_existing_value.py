# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CouponInstanceExistingValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'changed_by': 'str',
        'updated': 'datetime',
        'id': 'str',
        'organization_id': 'str',
        'coupon_instance_id': 'str',
        'logical_component_id': 'str',
        'existing_value': 'int',
        'pricing_component': 'PricingComponent'
    }

    attribute_map = {
        'created': 'created',
        'changed_by': 'changedBy',
        'updated': 'updated',
        'id': 'id',
        'organization_id': 'organizationID',
        'coupon_instance_id': 'couponInstanceID',
        'logical_component_id': 'logicalComponentID',
        'existing_value': 'existingValue',
        'pricing_component': 'pricingComponent'
    }

    def __init__(self, created=None, changed_by=None, updated=None, id=None, organization_id=None, coupon_instance_id=None, logical_component_id=None, existing_value=None, pricing_component=None):  # noqa: E501
        """CouponInstanceExistingValue - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._changed_by = None
        self._updated = None
        self._id = None
        self._organization_id = None
        self._coupon_instance_id = None
        self._logical_component_id = None
        self._existing_value = None
        self._pricing_component = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if changed_by is not None:
            self.changed_by = changed_by
        if updated is not None:
            self.updated = updated
        if id is not None:
            self.id = id
        if organization_id is not None:
            self.organization_id = organization_id
        if coupon_instance_id is not None:
            self.coupon_instance_id = coupon_instance_id
        self.logical_component_id = logical_component_id
        self.existing_value = existing_value
        if pricing_component is not None:
            self.pricing_component = pricing_component

    @property
    def created(self):
        """Gets the created of this CouponInstanceExistingValue.  # noqa: E501


        :return: The created of this CouponInstanceExistingValue.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this CouponInstanceExistingValue.


        :param created: The created of this CouponInstanceExistingValue.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """Gets the changed_by of this CouponInstanceExistingValue.  # noqa: E501


        :return: The changed_by of this CouponInstanceExistingValue.  # noqa: E501
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """Sets the changed_by of this CouponInstanceExistingValue.


        :param changed_by: The changed_by of this CouponInstanceExistingValue.  # noqa: E501
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """Gets the updated of this CouponInstanceExistingValue.  # noqa: E501


        :return: The updated of this CouponInstanceExistingValue.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this CouponInstanceExistingValue.


        :param updated: The updated of this CouponInstanceExistingValue.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """Gets the id of this CouponInstanceExistingValue.  # noqa: E501


        :return: The id of this CouponInstanceExistingValue.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CouponInstanceExistingValue.


        :param id: The id of this CouponInstanceExistingValue.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def organization_id(self):
        """Gets the organization_id of this CouponInstanceExistingValue.  # noqa: E501


        :return: The organization_id of this CouponInstanceExistingValue.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this CouponInstanceExistingValue.


        :param organization_id: The organization_id of this CouponInstanceExistingValue.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def coupon_instance_id(self):
        """Gets the coupon_instance_id of this CouponInstanceExistingValue.  # noqa: E501


        :return: The coupon_instance_id of this CouponInstanceExistingValue.  # noqa: E501
        :rtype: str
        """
        return self._coupon_instance_id

    @coupon_instance_id.setter
    def coupon_instance_id(self, coupon_instance_id):
        """Sets the coupon_instance_id of this CouponInstanceExistingValue.


        :param coupon_instance_id: The coupon_instance_id of this CouponInstanceExistingValue.  # noqa: E501
        :type: str
        """

        self._coupon_instance_id = coupon_instance_id

    @property
    def logical_component_id(self):
        """Gets the logical_component_id of this CouponInstanceExistingValue.  # noqa: E501


        :return: The logical_component_id of this CouponInstanceExistingValue.  # noqa: E501
        :rtype: str
        """
        return self._logical_component_id

    @logical_component_id.setter
    def logical_component_id(self, logical_component_id):
        """Sets the logical_component_id of this CouponInstanceExistingValue.


        :param logical_component_id: The logical_component_id of this CouponInstanceExistingValue.  # noqa: E501
        :type: str
        """
        if logical_component_id is None:
            raise ValueError("Invalid value for `logical_component_id`, must not be `None`")  # noqa: E501

        self._logical_component_id = logical_component_id

    @property
    def existing_value(self):
        """Gets the existing_value of this CouponInstanceExistingValue.  # noqa: E501


        :return: The existing_value of this CouponInstanceExistingValue.  # noqa: E501
        :rtype: int
        """
        return self._existing_value

    @existing_value.setter
    def existing_value(self, existing_value):
        """Sets the existing_value of this CouponInstanceExistingValue.


        :param existing_value: The existing_value of this CouponInstanceExistingValue.  # noqa: E501
        :type: int
        """
        if existing_value is None:
            raise ValueError("Invalid value for `existing_value`, must not be `None`")  # noqa: E501

        self._existing_value = existing_value

    @property
    def pricing_component(self):
        """Gets the pricing_component of this CouponInstanceExistingValue.  # noqa: E501


        :return: The pricing_component of this CouponInstanceExistingValue.  # noqa: E501
        :rtype: PricingComponent
        """
        return self._pricing_component

    @pricing_component.setter
    def pricing_component(self, pricing_component):
        """Sets the pricing_component of this CouponInstanceExistingValue.


        :param pricing_component: The pricing_component of this CouponInstanceExistingValue.  # noqa: E501
        :type: PricingComponent
        """

        self._pricing_component = pricing_component

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CouponInstanceExistingValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CouponInstanceExistingValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
