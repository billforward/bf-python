# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Refund(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'changed_by': 'str',
        'updated': 'datetime',
        'id': 'str',
        'organization_id': 'str',
        'account_id': 'str',
        'reason': 'str',
        'nominal_value': 'float',
        'value': 'float',
        'refunded': 'float',
        'actual_value': 'float',
        'nominal_refunded_value': 'float',
        'actual_refunded_value': 'float',
        'refund_state': 'str',
        'refund_type': 'str',
        'refund_nature': 'str',
        'last_execution_attempt': 'datetime',
        'next_execution_attempt': 'datetime',
        'final_execution_attempt': 'datetime',
        'refund_completed': 'datetime',
        'currency': 'CreditNoteCurrency',
        'payment_method_id': 'str',
        'invoice_payment_id': 'str',
        'refund_invoice_payment_id': 'str',
        'original_payment_id': 'str',
        'original_gateway_payment_reference': 'str',
        'refund_payment_id': 'str',
        'invoice_id': 'str',
        'receipt_id': 'str',
        'original_receipt_id': 'str',
        'created_by': 'str',
        'type': 'str',
        'state': 'str',
        'refunded_payment': 'Payment',
        'refunded_value': 'float',
        'account': 'str'
    }

    attribute_map = {
        'created': 'created',
        'changed_by': 'changedBy',
        'updated': 'updated',
        'id': 'id',
        'organization_id': 'organizationID',
        'account_id': 'accountID',
        'reason': 'reason',
        'nominal_value': 'nominalValue',
        'value': 'value',
        'refunded': 'refunded',
        'actual_value': 'actualValue',
        'nominal_refunded_value': 'nominalRefundedValue',
        'actual_refunded_value': 'actualRefundedValue',
        'refund_state': 'refundState',
        'refund_type': 'refundType',
        'refund_nature': 'refundNature',
        'last_execution_attempt': 'lastExecutionAttempt',
        'next_execution_attempt': 'nextExecutionAttempt',
        'final_execution_attempt': 'finalExecutionAttempt',
        'refund_completed': 'refundCompleted',
        'currency': 'currency',
        'payment_method_id': 'paymentMethodID',
        'invoice_payment_id': 'invoicePaymentID',
        'refund_invoice_payment_id': 'refundInvoicePaymentID',
        'original_payment_id': 'originalPaymentID',
        'original_gateway_payment_reference': 'originalGatewayPaymentReference',
        'refund_payment_id': 'refundPaymentID',
        'invoice_id': 'invoiceID',
        'receipt_id': 'receiptID',
        'original_receipt_id': 'originalReceiptID',
        'created_by': 'createdBy',
        'type': 'type',
        'state': 'state',
        'refunded_payment': 'refundedPayment',
        'refunded_value': 'refundedValue',
        'account': 'account'
    }

    def __init__(self, created=None, changed_by=None, updated=None, id=None, organization_id=None, account_id=None, reason=None, nominal_value=None, value=None, refunded=None, actual_value=None, nominal_refunded_value=None, actual_refunded_value=None, refund_state=None, refund_type=None, refund_nature=None, last_execution_attempt=None, next_execution_attempt=None, final_execution_attempt=None, refund_completed=None, currency=None, payment_method_id=None, invoice_payment_id=None, refund_invoice_payment_id=None, original_payment_id=None, original_gateway_payment_reference=None, refund_payment_id=None, invoice_id=None, receipt_id=None, original_receipt_id=None, created_by=None, type=None, state=None, refunded_payment=None, refunded_value=None, account=None):  # noqa: E501
        """Refund - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._changed_by = None
        self._updated = None
        self._id = None
        self._organization_id = None
        self._account_id = None
        self._reason = None
        self._nominal_value = None
        self._value = None
        self._refunded = None
        self._actual_value = None
        self._nominal_refunded_value = None
        self._actual_refunded_value = None
        self._refund_state = None
        self._refund_type = None
        self._refund_nature = None
        self._last_execution_attempt = None
        self._next_execution_attempt = None
        self._final_execution_attempt = None
        self._refund_completed = None
        self._currency = None
        self._payment_method_id = None
        self._invoice_payment_id = None
        self._refund_invoice_payment_id = None
        self._original_payment_id = None
        self._original_gateway_payment_reference = None
        self._refund_payment_id = None
        self._invoice_id = None
        self._receipt_id = None
        self._original_receipt_id = None
        self._created_by = None
        self._type = None
        self._state = None
        self._refunded_payment = None
        self._refunded_value = None
        self._account = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if changed_by is not None:
            self.changed_by = changed_by
        if updated is not None:
            self.updated = updated
        if id is not None:
            self.id = id
        if organization_id is not None:
            self.organization_id = organization_id
        if account_id is not None:
            self.account_id = account_id
        if reason is not None:
            self.reason = reason
        self.nominal_value = nominal_value
        if value is not None:
            self.value = value
        if refunded is not None:
            self.refunded = refunded
        self.actual_value = actual_value
        self.nominal_refunded_value = nominal_refunded_value
        self.actual_refunded_value = actual_refunded_value
        self.refund_state = refund_state
        self.refund_type = refund_type
        self.refund_nature = refund_nature
        if last_execution_attempt is not None:
            self.last_execution_attempt = last_execution_attempt
        if next_execution_attempt is not None:
            self.next_execution_attempt = next_execution_attempt
        if final_execution_attempt is not None:
            self.final_execution_attempt = final_execution_attempt
        if refund_completed is not None:
            self.refund_completed = refund_completed
        self.currency = currency
        if payment_method_id is not None:
            self.payment_method_id = payment_method_id
        if invoice_payment_id is not None:
            self.invoice_payment_id = invoice_payment_id
        if refund_invoice_payment_id is not None:
            self.refund_invoice_payment_id = refund_invoice_payment_id
        if original_payment_id is not None:
            self.original_payment_id = original_payment_id
        if original_gateway_payment_reference is not None:
            self.original_gateway_payment_reference = original_gateway_payment_reference
        if refund_payment_id is not None:
            self.refund_payment_id = refund_payment_id
        if invoice_id is not None:
            self.invoice_id = invoice_id
        if receipt_id is not None:
            self.receipt_id = receipt_id
        if original_receipt_id is not None:
            self.original_receipt_id = original_receipt_id
        if created_by is not None:
            self.created_by = created_by
        if type is not None:
            self.type = type
        if state is not None:
            self.state = state
        if refunded_payment is not None:
            self.refunded_payment = refunded_payment
        if refunded_value is not None:
            self.refunded_value = refunded_value
        if account is not None:
            self.account = account

    @property
    def created(self):
        """Gets the created of this Refund.  # noqa: E501


        :return: The created of this Refund.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Refund.


        :param created: The created of this Refund.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """Gets the changed_by of this Refund.  # noqa: E501


        :return: The changed_by of this Refund.  # noqa: E501
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """Sets the changed_by of this Refund.


        :param changed_by: The changed_by of this Refund.  # noqa: E501
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """Gets the updated of this Refund.  # noqa: E501


        :return: The updated of this Refund.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Refund.


        :param updated: The updated of this Refund.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """Gets the id of this Refund.  # noqa: E501


        :return: The id of this Refund.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Refund.


        :param id: The id of this Refund.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def organization_id(self):
        """Gets the organization_id of this Refund.  # noqa: E501


        :return: The organization_id of this Refund.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this Refund.


        :param organization_id: The organization_id of this Refund.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def account_id(self):
        """Gets the account_id of this Refund.  # noqa: E501


        :return: The account_id of this Refund.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Refund.


        :param account_id: The account_id of this Refund.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def reason(self):
        """Gets the reason of this Refund.  # noqa: E501


        :return: The reason of this Refund.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this Refund.


        :param reason: The reason of this Refund.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def nominal_value(self):
        """Gets the nominal_value of this Refund.  # noqa: E501


        :return: The nominal_value of this Refund.  # noqa: E501
        :rtype: float
        """
        return self._nominal_value

    @nominal_value.setter
    def nominal_value(self, nominal_value):
        """Sets the nominal_value of this Refund.


        :param nominal_value: The nominal_value of this Refund.  # noqa: E501
        :type: float
        """
        if nominal_value is None:
            raise ValueError("Invalid value for `nominal_value`, must not be `None`")  # noqa: E501

        self._nominal_value = nominal_value

    @property
    def value(self):
        """Gets the value of this Refund.  # noqa: E501


        :return: The value of this Refund.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Refund.


        :param value: The value of this Refund.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def refunded(self):
        """Gets the refunded of this Refund.  # noqa: E501


        :return: The refunded of this Refund.  # noqa: E501
        :rtype: float
        """
        return self._refunded

    @refunded.setter
    def refunded(self, refunded):
        """Sets the refunded of this Refund.


        :param refunded: The refunded of this Refund.  # noqa: E501
        :type: float
        """

        self._refunded = refunded

    @property
    def actual_value(self):
        """Gets the actual_value of this Refund.  # noqa: E501


        :return: The actual_value of this Refund.  # noqa: E501
        :rtype: float
        """
        return self._actual_value

    @actual_value.setter
    def actual_value(self, actual_value):
        """Sets the actual_value of this Refund.


        :param actual_value: The actual_value of this Refund.  # noqa: E501
        :type: float
        """
        if actual_value is None:
            raise ValueError("Invalid value for `actual_value`, must not be `None`")  # noqa: E501

        self._actual_value = actual_value

    @property
    def nominal_refunded_value(self):
        """Gets the nominal_refunded_value of this Refund.  # noqa: E501


        :return: The nominal_refunded_value of this Refund.  # noqa: E501
        :rtype: float
        """
        return self._nominal_refunded_value

    @nominal_refunded_value.setter
    def nominal_refunded_value(self, nominal_refunded_value):
        """Sets the nominal_refunded_value of this Refund.


        :param nominal_refunded_value: The nominal_refunded_value of this Refund.  # noqa: E501
        :type: float
        """
        if nominal_refunded_value is None:
            raise ValueError("Invalid value for `nominal_refunded_value`, must not be `None`")  # noqa: E501

        self._nominal_refunded_value = nominal_refunded_value

    @property
    def actual_refunded_value(self):
        """Gets the actual_refunded_value of this Refund.  # noqa: E501


        :return: The actual_refunded_value of this Refund.  # noqa: E501
        :rtype: float
        """
        return self._actual_refunded_value

    @actual_refunded_value.setter
    def actual_refunded_value(self, actual_refunded_value):
        """Sets the actual_refunded_value of this Refund.


        :param actual_refunded_value: The actual_refunded_value of this Refund.  # noqa: E501
        :type: float
        """
        if actual_refunded_value is None:
            raise ValueError("Invalid value for `actual_refunded_value`, must not be `None`")  # noqa: E501

        self._actual_refunded_value = actual_refunded_value

    @property
    def refund_state(self):
        """Gets the refund_state of this Refund.  # noqa: E501


        :return: The refund_state of this Refund.  # noqa: E501
        :rtype: str
        """
        return self._refund_state

    @refund_state.setter
    def refund_state(self, refund_state):
        """Sets the refund_state of this Refund.


        :param refund_state: The refund_state of this Refund.  # noqa: E501
        :type: str
        """
        if refund_state is None:
            raise ValueError("Invalid value for `refund_state`, must not be `None`")  # noqa: E501
        allowed_values = ["Pending", "AwaitingRefund", "Refunded", "Cancelled", "Failed"]  # noqa: E501
        if refund_state not in allowed_values:
            raise ValueError(
                "Invalid value for `refund_state` ({0}), must be one of {1}"  # noqa: E501
                .format(refund_state, allowed_values)
            )

        self._refund_state = refund_state

    @property
    def refund_type(self):
        """Gets the refund_type of this Refund.  # noqa: E501


        :return: The refund_type of this Refund.  # noqa: E501
        :rtype: str
        """
        return self._refund_type

    @refund_type.setter
    def refund_type(self, refund_type):
        """Sets the refund_type of this Refund.


        :param refund_type: The refund_type of this Refund.  # noqa: E501
        :type: str
        """
        if refund_type is None:
            raise ValueError("Invalid value for `refund_type`, must not be `None`")  # noqa: E501
        allowed_values = ["InvoicePayment", "Payment"]  # noqa: E501
        if refund_type not in allowed_values:
            raise ValueError(
                "Invalid value for `refund_type` ({0}), must be one of {1}"  # noqa: E501
                .format(refund_type, allowed_values)
            )

        self._refund_type = refund_type

    @property
    def refund_nature(self):
        """Gets the refund_nature of this Refund.  # noqa: E501


        :return: The refund_nature of this Refund.  # noqa: E501
        :rtype: str
        """
        return self._refund_nature

    @refund_nature.setter
    def refund_nature(self, refund_nature):
        """Sets the refund_nature of this Refund.


        :param refund_nature: The refund_nature of this Refund.  # noqa: E501
        :type: str
        """
        if refund_nature is None:
            raise ValueError("Invalid value for `refund_nature`, must not be `None`")  # noqa: E501
        allowed_values = ["Refund", "Void"]  # noqa: E501
        if refund_nature not in allowed_values:
            raise ValueError(
                "Invalid value for `refund_nature` ({0}), must be one of {1}"  # noqa: E501
                .format(refund_nature, allowed_values)
            )

        self._refund_nature = refund_nature

    @property
    def last_execution_attempt(self):
        """Gets the last_execution_attempt of this Refund.  # noqa: E501


        :return: The last_execution_attempt of this Refund.  # noqa: E501
        :rtype: datetime
        """
        return self._last_execution_attempt

    @last_execution_attempt.setter
    def last_execution_attempt(self, last_execution_attempt):
        """Sets the last_execution_attempt of this Refund.


        :param last_execution_attempt: The last_execution_attempt of this Refund.  # noqa: E501
        :type: datetime
        """

        self._last_execution_attempt = last_execution_attempt

    @property
    def next_execution_attempt(self):
        """Gets the next_execution_attempt of this Refund.  # noqa: E501


        :return: The next_execution_attempt of this Refund.  # noqa: E501
        :rtype: datetime
        """
        return self._next_execution_attempt

    @next_execution_attempt.setter
    def next_execution_attempt(self, next_execution_attempt):
        """Sets the next_execution_attempt of this Refund.


        :param next_execution_attempt: The next_execution_attempt of this Refund.  # noqa: E501
        :type: datetime
        """

        self._next_execution_attempt = next_execution_attempt

    @property
    def final_execution_attempt(self):
        """Gets the final_execution_attempt of this Refund.  # noqa: E501


        :return: The final_execution_attempt of this Refund.  # noqa: E501
        :rtype: datetime
        """
        return self._final_execution_attempt

    @final_execution_attempt.setter
    def final_execution_attempt(self, final_execution_attempt):
        """Sets the final_execution_attempt of this Refund.


        :param final_execution_attempt: The final_execution_attempt of this Refund.  # noqa: E501
        :type: datetime
        """

        self._final_execution_attempt = final_execution_attempt

    @property
    def refund_completed(self):
        """Gets the refund_completed of this Refund.  # noqa: E501


        :return: The refund_completed of this Refund.  # noqa: E501
        :rtype: datetime
        """
        return self._refund_completed

    @refund_completed.setter
    def refund_completed(self, refund_completed):
        """Sets the refund_completed of this Refund.


        :param refund_completed: The refund_completed of this Refund.  # noqa: E501
        :type: datetime
        """

        self._refund_completed = refund_completed

    @property
    def currency(self):
        """Gets the currency of this Refund.  # noqa: E501


        :return: The currency of this Refund.  # noqa: E501
        :rtype: CreditNoteCurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Refund.


        :param currency: The currency of this Refund.  # noqa: E501
        :type: CreditNoteCurrency
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def payment_method_id(self):
        """Gets the payment_method_id of this Refund.  # noqa: E501


        :return: The payment_method_id of this Refund.  # noqa: E501
        :rtype: str
        """
        return self._payment_method_id

    @payment_method_id.setter
    def payment_method_id(self, payment_method_id):
        """Sets the payment_method_id of this Refund.


        :param payment_method_id: The payment_method_id of this Refund.  # noqa: E501
        :type: str
        """

        self._payment_method_id = payment_method_id

    @property
    def invoice_payment_id(self):
        """Gets the invoice_payment_id of this Refund.  # noqa: E501


        :return: The invoice_payment_id of this Refund.  # noqa: E501
        :rtype: str
        """
        return self._invoice_payment_id

    @invoice_payment_id.setter
    def invoice_payment_id(self, invoice_payment_id):
        """Sets the invoice_payment_id of this Refund.


        :param invoice_payment_id: The invoice_payment_id of this Refund.  # noqa: E501
        :type: str
        """

        self._invoice_payment_id = invoice_payment_id

    @property
    def refund_invoice_payment_id(self):
        """Gets the refund_invoice_payment_id of this Refund.  # noqa: E501


        :return: The refund_invoice_payment_id of this Refund.  # noqa: E501
        :rtype: str
        """
        return self._refund_invoice_payment_id

    @refund_invoice_payment_id.setter
    def refund_invoice_payment_id(self, refund_invoice_payment_id):
        """Sets the refund_invoice_payment_id of this Refund.


        :param refund_invoice_payment_id: The refund_invoice_payment_id of this Refund.  # noqa: E501
        :type: str
        """

        self._refund_invoice_payment_id = refund_invoice_payment_id

    @property
    def original_payment_id(self):
        """Gets the original_payment_id of this Refund.  # noqa: E501


        :return: The original_payment_id of this Refund.  # noqa: E501
        :rtype: str
        """
        return self._original_payment_id

    @original_payment_id.setter
    def original_payment_id(self, original_payment_id):
        """Sets the original_payment_id of this Refund.


        :param original_payment_id: The original_payment_id of this Refund.  # noqa: E501
        :type: str
        """

        self._original_payment_id = original_payment_id

    @property
    def original_gateway_payment_reference(self):
        """Gets the original_gateway_payment_reference of this Refund.  # noqa: E501


        :return: The original_gateway_payment_reference of this Refund.  # noqa: E501
        :rtype: str
        """
        return self._original_gateway_payment_reference

    @original_gateway_payment_reference.setter
    def original_gateway_payment_reference(self, original_gateway_payment_reference):
        """Sets the original_gateway_payment_reference of this Refund.


        :param original_gateway_payment_reference: The original_gateway_payment_reference of this Refund.  # noqa: E501
        :type: str
        """

        self._original_gateway_payment_reference = original_gateway_payment_reference

    @property
    def refund_payment_id(self):
        """Gets the refund_payment_id of this Refund.  # noqa: E501


        :return: The refund_payment_id of this Refund.  # noqa: E501
        :rtype: str
        """
        return self._refund_payment_id

    @refund_payment_id.setter
    def refund_payment_id(self, refund_payment_id):
        """Sets the refund_payment_id of this Refund.


        :param refund_payment_id: The refund_payment_id of this Refund.  # noqa: E501
        :type: str
        """

        self._refund_payment_id = refund_payment_id

    @property
    def invoice_id(self):
        """Gets the invoice_id of this Refund.  # noqa: E501


        :return: The invoice_id of this Refund.  # noqa: E501
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this Refund.


        :param invoice_id: The invoice_id of this Refund.  # noqa: E501
        :type: str
        """

        self._invoice_id = invoice_id

    @property
    def receipt_id(self):
        """Gets the receipt_id of this Refund.  # noqa: E501


        :return: The receipt_id of this Refund.  # noqa: E501
        :rtype: str
        """
        return self._receipt_id

    @receipt_id.setter
    def receipt_id(self, receipt_id):
        """Sets the receipt_id of this Refund.


        :param receipt_id: The receipt_id of this Refund.  # noqa: E501
        :type: str
        """

        self._receipt_id = receipt_id

    @property
    def original_receipt_id(self):
        """Gets the original_receipt_id of this Refund.  # noqa: E501


        :return: The original_receipt_id of this Refund.  # noqa: E501
        :rtype: str
        """
        return self._original_receipt_id

    @original_receipt_id.setter
    def original_receipt_id(self, original_receipt_id):
        """Sets the original_receipt_id of this Refund.


        :param original_receipt_id: The original_receipt_id of this Refund.  # noqa: E501
        :type: str
        """

        self._original_receipt_id = original_receipt_id

    @property
    def created_by(self):
        """Gets the created_by of this Refund.  # noqa: E501


        :return: The created_by of this Refund.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Refund.


        :param created_by: The created_by of this Refund.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def type(self):
        """Gets the type of this Refund.  # noqa: E501


        :return: The type of this Refund.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Refund.


        :param type: The type of this Refund.  # noqa: E501
        :type: str
        """
        allowed_values = ["InvoicePayment", "Payment"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def state(self):
        """Gets the state of this Refund.  # noqa: E501


        :return: The state of this Refund.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Refund.


        :param state: The state of this Refund.  # noqa: E501
        :type: str
        """
        allowed_values = ["Pending", "AwaitingRefund", "Refunded", "Cancelled", "Failed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def refunded_payment(self):
        """Gets the refunded_payment of this Refund.  # noqa: E501


        :return: The refunded_payment of this Refund.  # noqa: E501
        :rtype: Payment
        """
        return self._refunded_payment

    @refunded_payment.setter
    def refunded_payment(self, refunded_payment):
        """Sets the refunded_payment of this Refund.


        :param refunded_payment: The refunded_payment of this Refund.  # noqa: E501
        :type: Payment
        """

        self._refunded_payment = refunded_payment

    @property
    def refunded_value(self):
        """Gets the refunded_value of this Refund.  # noqa: E501


        :return: The refunded_value of this Refund.  # noqa: E501
        :rtype: float
        """
        return self._refunded_value

    @refunded_value.setter
    def refunded_value(self, refunded_value):
        """Sets the refunded_value of this Refund.


        :param refunded_value: The refunded_value of this Refund.  # noqa: E501
        :type: float
        """

        self._refunded_value = refunded_value

    @property
    def account(self):
        """Gets the account of this Refund.  # noqa: E501


        :return: The account of this Refund.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this Refund.


        :param account: The account of this Refund.  # noqa: E501
        :type: str
        """

        self._account = account

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Refund, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Refund):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
