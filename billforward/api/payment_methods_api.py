# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from billforward.api_client import ApiClient


class PaymentMethodsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_payment_method(self, **kwargs):  # noqa: E501
        """create_payment_method  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_payment_method(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PaymentMethod body:
        :return: InlineResponseDefault40
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_payment_method_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_payment_method_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_payment_method_with_http_info(self, **kwargs):  # noqa: E501
        """create_payment_method  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_payment_method_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PaymentMethod body:
        :return: InlineResponseDefault40
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_payment_method" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/payment-methods', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault40',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_payment_method(self, payment_method_id, **kwargs):  # noqa: E501
        """delete_payment_method  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_payment_method(payment_method_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_method_id: (required)
        :param bool delete_gateway_data:
        :param list[str] organizations:
        :return: InlineResponseDefault40
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_payment_method_with_http_info(payment_method_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_payment_method_with_http_info(payment_method_id, **kwargs)  # noqa: E501
            return data

    def delete_payment_method_with_http_info(self, payment_method_id, **kwargs):  # noqa: E501
        """delete_payment_method  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_payment_method_with_http_info(payment_method_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_method_id: (required)
        :param bool delete_gateway_data:
        :param list[str] organizations:
        :return: InlineResponseDefault40
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_method_id', 'delete_gateway_data', 'organizations']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_payment_method" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_method_id' is set
        if ('payment_method_id' not in params or
                params['payment_method_id'] is None):
            raise ValueError("Missing the required parameter `payment_method_id` when calling `delete_payment_method`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_method_id' in params:
            path_params['payment-method-ID'] = params['payment_method_id']  # noqa: E501

        query_params = []
        if 'delete_gateway_data' in params:
            query_params.append(('delete_gateway_data', params['delete_gateway_data']))  # noqa: E501
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/payment-methods/{payment-method-ID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault40',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_payment_methods(self, **kwargs):  # noqa: E501
        """get_all_payment_methods  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_payment_methods(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param str routing_number:
        :param str account_number:
        :param int offset:
        :param int records:
        :param str order_by:
        :param str order:
        :param bool include_retired:
        :return: InlineResponseDefault9
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_payment_methods_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_payment_methods_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_payment_methods_with_http_info(self, **kwargs):  # noqa: E501
        """get_all_payment_methods  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_payment_methods_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param str routing_number:
        :param str account_number:
        :param int offset:
        :param int records:
        :param str order_by:
        :param str order:
        :param bool include_retired:
        :return: InlineResponseDefault9
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'routing_number', 'account_number', 'offset', 'records', 'order_by', 'order', 'include_retired']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_payment_methods" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'routing_number' in params:
            query_params.append(('routing_number', params['routing_number']))  # noqa: E501
        if 'account_number' in params:
            query_params.append(('account_number', params['account_number']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'records' in params:
            query_params.append(('records', params['records']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'include_retired' in params:
            query_params.append(('include_retired', params['include_retired']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/payment-methods', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault9',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_mandate_pdf(self, payment_method_id, **kwargs):  # noqa: E501
        """get_mandate_pdf  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mandate_pdf(payment_method_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_method_id: (required)
        :param list[str] organizations:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_mandate_pdf_with_http_info(payment_method_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_mandate_pdf_with_http_info(payment_method_id, **kwargs)  # noqa: E501
            return data

    def get_mandate_pdf_with_http_info(self, payment_method_id, **kwargs):  # noqa: E501
        """get_mandate_pdf  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mandate_pdf_with_http_info(payment_method_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_method_id: (required)
        :param list[str] organizations:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_method_id', 'organizations']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mandate_pdf" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_method_id' is set
        if ('payment_method_id' not in params or
                params['payment_method_id'] is None):
            raise ValueError("Missing the required parameter `payment_method_id` when calling `get_mandate_pdf`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_method_id' in params:
            path_params['payment-method-ID'] = params['payment_method_id']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/payment-methods/{payment-method-ID}/mandate.pdf', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_payment_method_by_id(self, payment_method_id, **kwargs):  # noqa: E501
        """get_payment_method_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment_method_by_id(payment_method_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_method_id: (required)
        :param list[str] organizations:
        :return: InlineResponseDefault40
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_payment_method_by_id_with_http_info(payment_method_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_payment_method_by_id_with_http_info(payment_method_id, **kwargs)  # noqa: E501
            return data

    def get_payment_method_by_id_with_http_info(self, payment_method_id, **kwargs):  # noqa: E501
        """get_payment_method_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment_method_by_id_with_http_info(payment_method_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_method_id: (required)
        :param list[str] organizations:
        :return: InlineResponseDefault40
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_method_id', 'organizations']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payment_method_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_method_id' is set
        if ('payment_method_id' not in params or
                params['payment_method_id'] is None):
            raise ValueError("Missing the required parameter `payment_method_id` when calling `get_payment_method_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_method_id' in params:
            path_params['payment-method-ID'] = params['payment_method_id']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/payment-methods/{payment-method-ID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault40',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_payment_method_by_link_id(self, link_id, **kwargs):  # noqa: E501
        """get_payment_method_by_link_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment_method_by_link_id(link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str link_id: (required)
        :param list[str] organizations:
        :return: InlineResponseDefault9
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_payment_method_by_link_id_with_http_info(link_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_payment_method_by_link_id_with_http_info(link_id, **kwargs)  # noqa: E501
            return data

    def get_payment_method_by_link_id_with_http_info(self, link_id, **kwargs):  # noqa: E501
        """get_payment_method_by_link_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment_method_by_link_id_with_http_info(link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str link_id: (required)
        :param list[str] organizations:
        :return: InlineResponseDefault9
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['link_id', 'organizations']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payment_method_by_link_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'link_id' is set
        if ('link_id' not in params or
                params['link_id'] is None):
            raise ValueError("Missing the required parameter `link_id` when calling `get_payment_method_by_link_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'link_id' in params:
            path_params['linkID'] = params['link_id']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/payment-methods/link-id/{linkID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault9',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_payment_method_by_payment_gateway(self, gateway, **kwargs):  # noqa: E501
        """get_payment_method_by_payment_gateway  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment_method_by_payment_gateway(gateway, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str gateway: (required)
        :param list[str] organizations:
        :param int offset:
        :param int records:
        :param str order_by:
        :param str order:
        :param bool include_retired:
        :return: InlineResponseDefault9
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_payment_method_by_payment_gateway_with_http_info(gateway, **kwargs)  # noqa: E501
        else:
            (data) = self.get_payment_method_by_payment_gateway_with_http_info(gateway, **kwargs)  # noqa: E501
            return data

    def get_payment_method_by_payment_gateway_with_http_info(self, gateway, **kwargs):  # noqa: E501
        """get_payment_method_by_payment_gateway  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment_method_by_payment_gateway_with_http_info(gateway, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str gateway: (required)
        :param list[str] organizations:
        :param int offset:
        :param int records:
        :param str order_by:
        :param str order:
        :param bool include_retired:
        :return: InlineResponseDefault9
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['gateway', 'organizations', 'offset', 'records', 'order_by', 'order', 'include_retired']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payment_method_by_payment_gateway" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'gateway' is set
        if ('gateway' not in params or
                params['gateway'] is None):
            raise ValueError("Missing the required parameter `gateway` when calling `get_payment_method_by_payment_gateway`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'gateway' in params:
            path_params['gateway'] = params['gateway']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'records' in params:
            query_params.append(('records', params['records']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'include_retired' in params:
            query_params.append(('include_retired', params['include_retired']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/payment-methods/gateway/{gateway}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault9',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_payment_method(self, **kwargs):  # noqa: E501
        """update_payment_method  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_payment_method(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PaymentMethod body:
        :param bool delete_gateway_data:
        :return: InlineResponseDefault40
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_payment_method_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.update_payment_method_with_http_info(**kwargs)  # noqa: E501
            return data

    def update_payment_method_with_http_info(self, **kwargs):  # noqa: E501
        """update_payment_method  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_payment_method_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PaymentMethod body:
        :param bool delete_gateway_data:
        :return: InlineResponseDefault40
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'delete_gateway_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_payment_method" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'delete_gateway_data' in params:
            query_params.append(('delete_gateway_data', params['delete_gateway_data']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/payment-methods', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault40',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def verify_ach(self, payment_method_id, **kwargs):  # noqa: E501
        """verify_ach  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verify_ach(payment_method_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_method_id: (required)
        :param VerifyPaymentMethodRequest body:
        :return: InlineResponseDefault40
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.verify_ach_with_http_info(payment_method_id, **kwargs)  # noqa: E501
        else:
            (data) = self.verify_ach_with_http_info(payment_method_id, **kwargs)  # noqa: E501
            return data

    def verify_ach_with_http_info(self, payment_method_id, **kwargs):  # noqa: E501
        """verify_ach  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verify_ach_with_http_info(payment_method_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_method_id: (required)
        :param VerifyPaymentMethodRequest body:
        :return: InlineResponseDefault40
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_method_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method verify_ach" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_method_id' is set
        if ('payment_method_id' not in params or
                params['payment_method_id'] is None):
            raise ValueError("Missing the required parameter `payment_method_id` when calling `verify_ach`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_method_id' in params:
            path_params['payment-method-ID'] = params['payment_method_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/payment-methods/{payment-method-ID}/verify/micro-deposits', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault40',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
