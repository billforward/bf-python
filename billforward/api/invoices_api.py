# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from billforward.api_client import ApiClient


class InvoicesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_charge_to_invoice(self, invoice_id, **kwargs):  # noqa: E501
        """add_charge_to_invoice  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_charge_to_invoice(invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param AddChargeRequest body:
        :return: InlineResponseDefault28
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_charge_to_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_charge_to_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
            return data

    def add_charge_to_invoice_with_http_info(self, invoice_id, **kwargs):  # noqa: E501
        """add_charge_to_invoice  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_charge_to_invoice_with_http_info(invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param AddChargeRequest body:
        :return: InlineResponseDefault28
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_charge_to_invoice" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `add_charge_to_invoice`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invoice_id' in params:
            path_params['invoice-ID'] = params['invoice_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{invoice-ID}/charges', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault28',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def execute_invoice(self, invoice_id, **kwargs):  # noqa: E501
        """execute_invoice  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_invoice(invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param InvoiceExecutionRequest body:
        :return: InlineResponseDefault29
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.execute_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
        else:
            (data) = self.execute_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
            return data

    def execute_invoice_with_http_info(self, invoice_id, **kwargs):  # noqa: E501
        """execute_invoice  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_invoice_with_http_info(invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param InvoiceExecutionRequest body:
        :return: InlineResponseDefault29
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method execute_invoice" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `execute_invoice`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invoice_id' in params:
            path_params['invoice-ID'] = params['invoice_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{invoice-ID}/execute', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault29',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_invoices(self, **kwargs):  # noqa: E501
        """get_all_invoices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_invoices(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param list[str] state:
        :param list[str] account_id:
        :param list[str] subscription_id:
        :param list[str] subscription_version_id:
        :param list[str] invoice_version_id:
        :param int offset:
        :param int records:
        :param str order_by:
        :param str order:
        :param bool include_retired:
        :param bool exclude_children:
        :param str metadata:
        :return: InlineResponseDefault8
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_invoices_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_invoices_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_invoices_with_http_info(self, **kwargs):  # noqa: E501
        """get_all_invoices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_invoices_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param list[str] state:
        :param list[str] account_id:
        :param list[str] subscription_id:
        :param list[str] subscription_version_id:
        :param list[str] invoice_version_id:
        :param int offset:
        :param int records:
        :param str order_by:
        :param str order:
        :param bool include_retired:
        :param bool exclude_children:
        :param str metadata:
        :return: InlineResponseDefault8
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'state', 'account_id', 'subscription_id', 'subscription_version_id', 'invoice_version_id', 'offset', 'records', 'order_by', 'order', 'include_retired', 'exclude_children', 'metadata']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_invoices" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501
            collection_formats['state'] = 'multi'  # noqa: E501
        if 'account_id' in params:
            query_params.append(('accountID', params['account_id']))  # noqa: E501
            collection_formats['accountID'] = 'multi'  # noqa: E501
        if 'subscription_id' in params:
            query_params.append(('subscriptionID', params['subscription_id']))  # noqa: E501
            collection_formats['subscriptionID'] = 'multi'  # noqa: E501
        if 'subscription_version_id' in params:
            query_params.append(('subscriptionVersionID', params['subscription_version_id']))  # noqa: E501
            collection_formats['subscriptionVersionID'] = 'multi'  # noqa: E501
        if 'invoice_version_id' in params:
            query_params.append(('invoiceVersionID', params['invoice_version_id']))  # noqa: E501
            collection_formats['invoiceVersionID'] = 'multi'  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'records' in params:
            query_params.append(('records', params['records']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'include_retired' in params:
            query_params.append(('include_retired', params['include_retired']))  # noqa: E501
        if 'exclude_children' in params:
            query_params.append(('exclude_children', params['exclude_children']))  # noqa: E501
        if 'metadata' in params:
            query_params.append(('metadata', params['metadata']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault8',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_invoices_as_csv(self, **kwargs):  # noqa: E501
        """get_all_invoices_as_csv  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_invoices_as_csv(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param int offset:
        :param int records:
        :param str order_by:
        :param str order:
        :param bool include_retired:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_invoices_as_csv_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_invoices_as_csv_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_invoices_as_csv_with_http_info(self, **kwargs):  # noqa: E501
        """get_all_invoices_as_csv  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_invoices_as_csv_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param int offset:
        :param int records:
        :param str order_by:
        :param str order:
        :param bool include_retired:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'offset', 'records', 'order_by', 'order', 'include_retired']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_invoices_as_csv" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'records' in params:
            query_params.append(('records', params['records']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'include_retired' in params:
            query_params.append(('include_retired', params['include_retired']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/all.csv', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_bucketed_revenue_attributions_as_csv(self, **kwargs):  # noqa: E501
        """get_bucketed_revenue_attributions_as_csv  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bucketed_revenue_attributions_as_csv(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param SimpleDateParam recognition_start:
        :param SimpleDateParam recognition_end:
        :param str date_interval_inclusivity:
        :param str date_granularity:
        :param str date_time_format:
        :param str boolean_format:
        :param str monetary_amount_format:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_bucketed_revenue_attributions_as_csv_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_bucketed_revenue_attributions_as_csv_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_bucketed_revenue_attributions_as_csv_with_http_info(self, **kwargs):  # noqa: E501
        """get_bucketed_revenue_attributions_as_csv  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bucketed_revenue_attributions_as_csv_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param SimpleDateParam recognition_start:
        :param SimpleDateParam recognition_end:
        :param str date_interval_inclusivity:
        :param str date_granularity:
        :param str date_time_format:
        :param str boolean_format:
        :param str monetary_amount_format:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'recognition_start', 'recognition_end', 'date_interval_inclusivity', 'date_granularity', 'date_time_format', 'boolean_format', 'monetary_amount_format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bucketed_revenue_attributions_as_csv" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'recognition_start' in params:
            query_params.append(('recognition_start', params['recognition_start']))  # noqa: E501
        if 'recognition_end' in params:
            query_params.append(('recognition_end', params['recognition_end']))  # noqa: E501
        if 'date_interval_inclusivity' in params:
            query_params.append(('date_interval_inclusivity', params['date_interval_inclusivity']))  # noqa: E501
        if 'date_granularity' in params:
            query_params.append(('date_granularity', params['date_granularity']))  # noqa: E501
        if 'date_time_format' in params:
            query_params.append(('date_time_format', params['date_time_format']))  # noqa: E501
        if 'boolean_format' in params:
            query_params.append(('boolean_format', params['boolean_format']))  # noqa: E501
        if 'monetary_amount_format' in params:
            query_params.append(('monetary_amount_format', params['monetary_amount_format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/bucketed-revenue-attributions.csv', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_charges_on_invoice(self, invoice_id, **kwargs):  # noqa: E501
        """get_charges_on_invoice  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_charges_on_invoice(invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param list[str] organizations:
        :param int offset:
        :param int records:
        :param str order_by:
        :param str order:
        :param str state:
        :param str type:
        :param bool include_retired:
        :return: InlineResponseDefault10
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_charges_on_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_charges_on_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
            return data

    def get_charges_on_invoice_with_http_info(self, invoice_id, **kwargs):  # noqa: E501
        """get_charges_on_invoice  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_charges_on_invoice_with_http_info(invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param list[str] organizations:
        :param int offset:
        :param int records:
        :param str order_by:
        :param str order:
        :param str state:
        :param str type:
        :param bool include_retired:
        :return: InlineResponseDefault10
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'organizations', 'offset', 'records', 'order_by', 'order', 'state', 'type', 'include_retired']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_charges_on_invoice" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `get_charges_on_invoice`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invoice_id' in params:
            path_params['invoice-ID'] = params['invoice_id']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'records' in params:
            query_params.append(('records', params['records']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'include_retired' in params:
            query_params.append(('include_retired', params['include_retired']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{invoice-ID}/charges', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault10',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_credit_invoice_line_payments_from_invoices_as_csv(self, **kwargs):  # noqa: E501
        """get_credit_invoice_line_payments_from_invoices_as_csv  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_credit_invoice_line_payments_from_invoices_as_csv(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param SimpleDateParam recognition_start:
        :param SimpleDateParam recognition_end:
        :param str date_interval_inclusivity:
        :param str date_time_format:
        :param str date_granularity:
        :param str boolean_format:
        :param str monetary_amount_format:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_credit_invoice_line_payments_from_invoices_as_csv_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_credit_invoice_line_payments_from_invoices_as_csv_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_credit_invoice_line_payments_from_invoices_as_csv_with_http_info(self, **kwargs):  # noqa: E501
        """get_credit_invoice_line_payments_from_invoices_as_csv  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_credit_invoice_line_payments_from_invoices_as_csv_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param SimpleDateParam recognition_start:
        :param SimpleDateParam recognition_end:
        :param str date_interval_inclusivity:
        :param str date_time_format:
        :param str date_granularity:
        :param str boolean_format:
        :param str monetary_amount_format:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'recognition_start', 'recognition_end', 'date_interval_inclusivity', 'date_time_format', 'date_granularity', 'boolean_format', 'monetary_amount_format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_credit_invoice_line_payments_from_invoices_as_csv" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'recognition_start' in params:
            query_params.append(('recognition_start', params['recognition_start']))  # noqa: E501
        if 'recognition_end' in params:
            query_params.append(('recognition_end', params['recognition_end']))  # noqa: E501
        if 'date_interval_inclusivity' in params:
            query_params.append(('date_interval_inclusivity', params['date_interval_inclusivity']))  # noqa: E501
        if 'date_time_format' in params:
            query_params.append(('date_time_format', params['date_time_format']))  # noqa: E501
        if 'date_granularity' in params:
            query_params.append(('date_granularity', params['date_granularity']))  # noqa: E501
        if 'boolean_format' in params:
            query_params.append(('boolean_format', params['boolean_format']))  # noqa: E501
        if 'monetary_amount_format' in params:
            query_params.append(('monetary_amount_format', params['monetary_amount_format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/credit.csv', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_credit_invoice_line_payments_from_invoices_as_csv_by_payment_received(self, **kwargs):  # noqa: E501
        """get_credit_invoice_line_payments_from_invoices_as_csv_by_payment_received  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_credit_invoice_line_payments_from_invoices_as_csv_by_payment_received(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param SimpleDateParam start:
        :param SimpleDateParam end:
        :param str date_interval_inclusivity:
        :param str date_time_format:
        :param str date_granularity:
        :param str boolean_format:
        :param str monetary_amount_format:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_credit_invoice_line_payments_from_invoices_as_csv_by_payment_received_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_credit_invoice_line_payments_from_invoices_as_csv_by_payment_received_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_credit_invoice_line_payments_from_invoices_as_csv_by_payment_received_with_http_info(self, **kwargs):  # noqa: E501
        """get_credit_invoice_line_payments_from_invoices_as_csv_by_payment_received  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_credit_invoice_line_payments_from_invoices_as_csv_by_payment_received_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param SimpleDateParam start:
        :param SimpleDateParam end:
        :param str date_interval_inclusivity:
        :param str date_time_format:
        :param str date_granularity:
        :param str boolean_format:
        :param str monetary_amount_format:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'start', 'end', 'date_interval_inclusivity', 'date_time_format', 'date_granularity', 'boolean_format', 'monetary_amount_format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_credit_invoice_line_payments_from_invoices_as_csv_by_payment_received" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'date_interval_inclusivity' in params:
            query_params.append(('date_interval_inclusivity', params['date_interval_inclusivity']))  # noqa: E501
        if 'date_time_format' in params:
            query_params.append(('date_time_format', params['date_time_format']))  # noqa: E501
        if 'date_granularity' in params:
            query_params.append(('date_granularity', params['date_granularity']))  # noqa: E501
        if 'boolean_format' in params:
            query_params.append(('boolean_format', params['boolean_format']))  # noqa: E501
        if 'monetary_amount_format' in params:
            query_params.append(('monetary_amount_format', params['monetary_amount_format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/payment-received/credit.csv', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_debit_invoice_line_payments_from_invoices_as_csv(self, **kwargs):  # noqa: E501
        """get_debit_invoice_line_payments_from_invoices_as_csv  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_debit_invoice_line_payments_from_invoices_as_csv(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param SimpleDateParam recognition_start:
        :param SimpleDateParam recognition_end:
        :param str date_interval_inclusivity:
        :param str date_time_format:
        :param str date_granularity:
        :param str boolean_format:
        :param str monetary_amount_format:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_debit_invoice_line_payments_from_invoices_as_csv_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_debit_invoice_line_payments_from_invoices_as_csv_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_debit_invoice_line_payments_from_invoices_as_csv_with_http_info(self, **kwargs):  # noqa: E501
        """get_debit_invoice_line_payments_from_invoices_as_csv  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_debit_invoice_line_payments_from_invoices_as_csv_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param SimpleDateParam recognition_start:
        :param SimpleDateParam recognition_end:
        :param str date_interval_inclusivity:
        :param str date_time_format:
        :param str date_granularity:
        :param str boolean_format:
        :param str monetary_amount_format:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'recognition_start', 'recognition_end', 'date_interval_inclusivity', 'date_time_format', 'date_granularity', 'boolean_format', 'monetary_amount_format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_debit_invoice_line_payments_from_invoices_as_csv" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'recognition_start' in params:
            query_params.append(('recognition_start', params['recognition_start']))  # noqa: E501
        if 'recognition_end' in params:
            query_params.append(('recognition_end', params['recognition_end']))  # noqa: E501
        if 'date_interval_inclusivity' in params:
            query_params.append(('date_interval_inclusivity', params['date_interval_inclusivity']))  # noqa: E501
        if 'date_time_format' in params:
            query_params.append(('date_time_format', params['date_time_format']))  # noqa: E501
        if 'date_granularity' in params:
            query_params.append(('date_granularity', params['date_granularity']))  # noqa: E501
        if 'boolean_format' in params:
            query_params.append(('boolean_format', params['boolean_format']))  # noqa: E501
        if 'monetary_amount_format' in params:
            query_params.append(('monetary_amount_format', params['monetary_amount_format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/revenue.csv', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_debit_invoice_line_payments_from_invoices_as_csv_by_payment_received(self, **kwargs):  # noqa: E501
        """get_debit_invoice_line_payments_from_invoices_as_csv_by_payment_received  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_debit_invoice_line_payments_from_invoices_as_csv_by_payment_received(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param SimpleDateParam start:
        :param SimpleDateParam end:
        :param str date_interval_inclusivity:
        :param str date_time_format:
        :param str date_granularity:
        :param str boolean_format:
        :param str monetary_amount_format:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_debit_invoice_line_payments_from_invoices_as_csv_by_payment_received_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_debit_invoice_line_payments_from_invoices_as_csv_by_payment_received_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_debit_invoice_line_payments_from_invoices_as_csv_by_payment_received_with_http_info(self, **kwargs):  # noqa: E501
        """get_debit_invoice_line_payments_from_invoices_as_csv_by_payment_received  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_debit_invoice_line_payments_from_invoices_as_csv_by_payment_received_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param SimpleDateParam start:
        :param SimpleDateParam end:
        :param str date_interval_inclusivity:
        :param str date_time_format:
        :param str date_granularity:
        :param str boolean_format:
        :param str monetary_amount_format:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'start', 'end', 'date_interval_inclusivity', 'date_time_format', 'date_granularity', 'boolean_format', 'monetary_amount_format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_debit_invoice_line_payments_from_invoices_as_csv_by_payment_received" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'date_interval_inclusivity' in params:
            query_params.append(('date_interval_inclusivity', params['date_interval_inclusivity']))  # noqa: E501
        if 'date_time_format' in params:
            query_params.append(('date_time_format', params['date_time_format']))  # noqa: E501
        if 'date_granularity' in params:
            query_params.append(('date_granularity', params['date_granularity']))  # noqa: E501
        if 'boolean_format' in params:
            query_params.append(('boolean_format', params['boolean_format']))  # noqa: E501
        if 'monetary_amount_format' in params:
            query_params.append(('monetary_amount_format', params['monetary_amount_format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/payment-received/revenue.csv', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_hosted_payments(self, invoice_id, **kwargs):  # noqa: E501
        """get_hosted_payments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hosted_payments(invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param list[str] organizations:
        :return: list[HostedPayment]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_hosted_payments_with_http_info(invoice_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_hosted_payments_with_http_info(invoice_id, **kwargs)  # noqa: E501
            return data

    def get_hosted_payments_with_http_info(self, invoice_id, **kwargs):  # noqa: E501
        """get_hosted_payments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hosted_payments_with_http_info(invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param list[str] organizations:
        :return: list[HostedPayment]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'organizations']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_hosted_payments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `get_hosted_payments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invoice_id' in params:
            path_params['invoiceID'] = params['invoice_id']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{invoiceID}/hosted-payments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[HostedPayment]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_invoice_as_html(self, id, **kwargs):  # noqa: E501
        """get_invoice_as_html  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_invoice_as_html(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param list[str] organizations:
        :param bool tier_breakdown:
        :param bool inclusive_end:
        :param bool show_zero_cost:
        :param bool show_plan_only_when_ambiguous:
        :param bool include_footer:
        :param str header_display:
        :param str group_line_items_by:
        :param bool hide_tax_if_zero:
        :param str show_unit_price:
        :param str representing_account_id:
        :param bool company_address_on_top:
        :param bool upgrade_duration_wording:
        :param bool refresh_cache:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_invoice_as_html_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_invoice_as_html_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_invoice_as_html_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_invoice_as_html  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_invoice_as_html_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param list[str] organizations:
        :param bool tier_breakdown:
        :param bool inclusive_end:
        :param bool show_zero_cost:
        :param bool show_plan_only_when_ambiguous:
        :param bool include_footer:
        :param str header_display:
        :param str group_line_items_by:
        :param bool hide_tax_if_zero:
        :param str show_unit_price:
        :param str representing_account_id:
        :param bool company_address_on_top:
        :param bool upgrade_duration_wording:
        :param bool refresh_cache:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'organizations', 'tier_breakdown', 'inclusive_end', 'show_zero_cost', 'show_plan_only_when_ambiguous', 'include_footer', 'header_display', 'group_line_items_by', 'hide_tax_if_zero', 'show_unit_price', 'representing_account_id', 'company_address_on_top', 'upgrade_duration_wording', 'refresh_cache']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_invoice_as_html" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_invoice_as_html`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['ID'] = params['id']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'tier_breakdown' in params:
            query_params.append(('tier_breakdown', params['tier_breakdown']))  # noqa: E501
        if 'inclusive_end' in params:
            query_params.append(('inclusive_end', params['inclusive_end']))  # noqa: E501
        if 'show_zero_cost' in params:
            query_params.append(('show_zero_cost', params['show_zero_cost']))  # noqa: E501
        if 'show_plan_only_when_ambiguous' in params:
            query_params.append(('show_plan_only_when_ambiguous', params['show_plan_only_when_ambiguous']))  # noqa: E501
        if 'include_footer' in params:
            query_params.append(('include_footer', params['include_footer']))  # noqa: E501
        if 'header_display' in params:
            query_params.append(('header_display', params['header_display']))  # noqa: E501
        if 'group_line_items_by' in params:
            query_params.append(('group_line_items_by', params['group_line_items_by']))  # noqa: E501
        if 'hide_tax_if_zero' in params:
            query_params.append(('hide_tax_if_zero', params['hide_tax_if_zero']))  # noqa: E501
        if 'show_unit_price' in params:
            query_params.append(('show_unit_price', params['show_unit_price']))  # noqa: E501
        if 'representing_account_id' in params:
            query_params.append(('representing_account_id', params['representing_account_id']))  # noqa: E501
        if 'company_address_on_top' in params:
            query_params.append(('company_address_on_top', params['company_address_on_top']))  # noqa: E501
        if 'upgrade_duration_wording' in params:
            query_params.append(('upgrade_duration_wording', params['upgrade_duration_wording']))  # noqa: E501
        if 'refresh_cache' in params:
            query_params.append(('refresh_cache', params['refresh_cache']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{ID}.html', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_invoice_as_pdf(self, id, **kwargs):  # noqa: E501
        """get_invoice_as_pdf  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_invoice_as_pdf(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param list[str] organizations:
        :param int offset:
        :param str order_by:
        :param str order:
        :param bool include_retired:
        :param bool tier_breakdown:
        :param bool inclusive_end:
        :param bool show_zero_cost:
        :param bool show_plan_only_when_ambiguous:
        :param bool include_footer:
        :param str header_display:
        :param str group_line_items_by:
        :param bool hide_tax_if_zero:
        :param str show_unit_price:
        :param str representing_account_id:
        :param bool company_address_on_top:
        :param bool upgrade_duration_wording:
        :param bool refresh_cache:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_invoice_as_pdf_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_invoice_as_pdf_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_invoice_as_pdf_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_invoice_as_pdf  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_invoice_as_pdf_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param list[str] organizations:
        :param int offset:
        :param str order_by:
        :param str order:
        :param bool include_retired:
        :param bool tier_breakdown:
        :param bool inclusive_end:
        :param bool show_zero_cost:
        :param bool show_plan_only_when_ambiguous:
        :param bool include_footer:
        :param str header_display:
        :param str group_line_items_by:
        :param bool hide_tax_if_zero:
        :param str show_unit_price:
        :param str representing_account_id:
        :param bool company_address_on_top:
        :param bool upgrade_duration_wording:
        :param bool refresh_cache:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'organizations', 'offset', 'order_by', 'order', 'include_retired', 'tier_breakdown', 'inclusive_end', 'show_zero_cost', 'show_plan_only_when_ambiguous', 'include_footer', 'header_display', 'group_line_items_by', 'hide_tax_if_zero', 'show_unit_price', 'representing_account_id', 'company_address_on_top', 'upgrade_duration_wording', 'refresh_cache']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_invoice_as_pdf" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_invoice_as_pdf`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'include_retired' in params:
            query_params.append(('include_retired', params['include_retired']))  # noqa: E501
        if 'tier_breakdown' in params:
            query_params.append(('tier_breakdown', params['tier_breakdown']))  # noqa: E501
        if 'inclusive_end' in params:
            query_params.append(('inclusive_end', params['inclusive_end']))  # noqa: E501
        if 'show_zero_cost' in params:
            query_params.append(('show_zero_cost', params['show_zero_cost']))  # noqa: E501
        if 'show_plan_only_when_ambiguous' in params:
            query_params.append(('show_plan_only_when_ambiguous', params['show_plan_only_when_ambiguous']))  # noqa: E501
        if 'include_footer' in params:
            query_params.append(('include_footer', params['include_footer']))  # noqa: E501
        if 'header_display' in params:
            query_params.append(('header_display', params['header_display']))  # noqa: E501
        if 'group_line_items_by' in params:
            query_params.append(('group_line_items_by', params['group_line_items_by']))  # noqa: E501
        if 'hide_tax_if_zero' in params:
            query_params.append(('hide_tax_if_zero', params['hide_tax_if_zero']))  # noqa: E501
        if 'show_unit_price' in params:
            query_params.append(('show_unit_price', params['show_unit_price']))  # noqa: E501
        if 'representing_account_id' in params:
            query_params.append(('representing_account_id', params['representing_account_id']))  # noqa: E501
        if 'company_address_on_top' in params:
            query_params.append(('company_address_on_top', params['company_address_on_top']))  # noqa: E501
        if 'upgrade_duration_wording' in params:
            query_params.append(('upgrade_duration_wording', params['upgrade_duration_wording']))  # noqa: E501
        if 'refresh_cache' in params:
            query_params.append(('refresh_cache', params['refresh_cache']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}.pdf', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_invoice_by_id(self, invoice_id, **kwargs):  # noqa: E501
        """get_invoice_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_invoice_by_id(invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param list[str] organizations:
        :param int offset:
        :param int records:
        :param str order_by:
        :param str order:
        :param bool include_retired:
        :return: InlineResponseDefault8
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_invoice_by_id_with_http_info(invoice_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_invoice_by_id_with_http_info(invoice_id, **kwargs)  # noqa: E501
            return data

    def get_invoice_by_id_with_http_info(self, invoice_id, **kwargs):  # noqa: E501
        """get_invoice_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_invoice_by_id_with_http_info(invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param list[str] organizations:
        :param int offset:
        :param int records:
        :param str order_by:
        :param str order:
        :param bool include_retired:
        :return: InlineResponseDefault8
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'organizations', 'offset', 'records', 'order_by', 'order', 'include_retired']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_invoice_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `get_invoice_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invoice_id' in params:
            path_params['invoice-ID'] = params['invoice_id']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'records' in params:
            query_params.append(('records', params['records']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'include_retired' in params:
            query_params.append(('include_retired', params['include_retired']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{invoice-ID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault8',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_invoice_by_id_as_csv(self, id, **kwargs):  # noqa: E501
        """get_invoice_by_id_as_csv  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_invoice_by_id_as_csv(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param list[str] organizations:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_invoice_by_id_as_csv_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_invoice_by_id_as_csv_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_invoice_by_id_as_csv_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_invoice_by_id_as_csv  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_invoice_by_id_as_csv_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param list[str] organizations:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'organizations']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_invoice_by_id_as_csv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_invoice_by_id_as_csv`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['ID'] = params['id']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{ID}.csv', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_invoice_by_subscription_id(self, subscription_id, **kwargs):  # noqa: E501
        """get_invoice_by_subscription_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_invoice_by_subscription_id(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subscription_id: (required)
        :param list[str] organizations:
        :param int offset:
        :param int records:
        :param str order_by:
        :param str order:
        :param bool include_retired:
        :return: InlineResponseDefault8
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_invoice_by_subscription_id_with_http_info(subscription_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_invoice_by_subscription_id_with_http_info(subscription_id, **kwargs)  # noqa: E501
            return data

    def get_invoice_by_subscription_id_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """get_invoice_by_subscription_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_invoice_by_subscription_id_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subscription_id: (required)
        :param list[str] organizations:
        :param int offset:
        :param int records:
        :param str order_by:
        :param str order:
        :param bool include_retired:
        :return: InlineResponseDefault8
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subscription_id', 'organizations', 'offset', 'records', 'order_by', 'order', 'include_retired']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_invoice_by_subscription_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in params or
                params['subscription_id'] is None):
            raise ValueError("Missing the required parameter `subscription_id` when calling `get_invoice_by_subscription_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'subscription_id' in params:
            path_params['subscription-ID'] = params['subscription_id']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'records' in params:
            query_params.append(('records', params['records']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'include_retired' in params:
            query_params.append(('include_retired', params['include_retired']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/subscription/{subscription-ID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault8',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_invoice_by_subscription_version_id(self, subscription_version_id, **kwargs):  # noqa: E501
        """get_invoice_by_subscription_version_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_invoice_by_subscription_version_id(subscription_version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subscription_version_id: (required)
        :param list[str] organizations:
        :param int offset:
        :param int records:
        :param str order_by:
        :param str order:
        :param bool include_retired:
        :return: InlineResponseDefault8
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_invoice_by_subscription_version_id_with_http_info(subscription_version_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_invoice_by_subscription_version_id_with_http_info(subscription_version_id, **kwargs)  # noqa: E501
            return data

    def get_invoice_by_subscription_version_id_with_http_info(self, subscription_version_id, **kwargs):  # noqa: E501
        """get_invoice_by_subscription_version_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_invoice_by_subscription_version_id_with_http_info(subscription_version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subscription_version_id: (required)
        :param list[str] organizations:
        :param int offset:
        :param int records:
        :param str order_by:
        :param str order:
        :param bool include_retired:
        :return: InlineResponseDefault8
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subscription_version_id', 'organizations', 'offset', 'records', 'order_by', 'order', 'include_retired']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_invoice_by_subscription_version_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subscription_version_id' is set
        if ('subscription_version_id' not in params or
                params['subscription_version_id'] is None):
            raise ValueError("Missing the required parameter `subscription_version_id` when calling `get_invoice_by_subscription_version_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'subscription_version_id' in params:
            path_params['subscription-version-ID'] = params['subscription_version_id']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'records' in params:
            query_params.append(('records', params['records']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'include_retired' in params:
            query_params.append(('include_retired', params['include_retired']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/subscription/version/{subscription-version-ID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault8',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_invoice_by_version_id(self, version_id, **kwargs):  # noqa: E501
        """get_invoice_by_version_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_invoice_by_version_id(version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version_id: (required)
        :param list[str] organizations:
        :return: InlineResponseDefault29
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_invoice_by_version_id_with_http_info(version_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_invoice_by_version_id_with_http_info(version_id, **kwargs)  # noqa: E501
            return data

    def get_invoice_by_version_id_with_http_info(self, version_id, **kwargs):  # noqa: E501
        """get_invoice_by_version_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_invoice_by_version_id_with_http_info(version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version_id: (required)
        :param list[str] organizations:
        :return: InlineResponseDefault29
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version_id', 'organizations']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_invoice_by_version_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version_id' is set
        if ('version_id' not in params or
                params['version_id'] is None):
            raise ValueError("Missing the required parameter `version_id` when calling `get_invoice_by_version_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version_id' in params:
            path_params['version-ID'] = params['version_id']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/version/{version-ID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault29',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_invoice_template(self, **kwargs):  # noqa: E501
        """get_invoice_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_invoice_template(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :return: InlineResponseDefault30
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_invoice_template_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_invoice_template_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_invoice_template_with_http_info(self, **kwargs):  # noqa: E501
        """get_invoice_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_invoice_template_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :return: InlineResponseDefault30
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_invoice_template" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/template', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault30',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_invoices_by_account_id1(self, account_id, **kwargs):  # noqa: E501
        """get_invoices_by_account_id1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_invoices_by_account_id1(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: (required)
        :param list[str] organizations:
        :param int offset:
        :param int records:
        :param str order_by:
        :param str order:
        :param bool include_retired:
        :param bool exclude_children:
        :return: InlineResponseDefault8
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_invoices_by_account_id1_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_invoices_by_account_id1_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def get_invoices_by_account_id1_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """get_invoices_by_account_id1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_invoices_by_account_id1_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: (required)
        :param list[str] organizations:
        :param int offset:
        :param int records:
        :param str order_by:
        :param str order:
        :param bool include_retired:
        :param bool exclude_children:
        :return: InlineResponseDefault8
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'organizations', 'offset', 'records', 'order_by', 'order', 'include_retired', 'exclude_children']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_invoices_by_account_id1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_invoices_by_account_id1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account-ID'] = params['account_id']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'records' in params:
            query_params.append(('records', params['records']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'include_retired' in params:
            query_params.append(('include_retired', params['include_retired']))  # noqa: E501
        if 'exclude_children' in params:
            query_params.append(('exclude_children', params['exclude_children']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/account/{account-ID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault8',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_invoices_by_period_end(self, lower_threshold, upper_threshold, **kwargs):  # noqa: E501
        """get_invoices_by_period_end  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_invoices_by_period_end(lower_threshold, upper_threshold, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SimpleDateParam lower_threshold: (required)
        :param SimpleDateParam upper_threshold: (required)
        :param list[str] organizations:
        :param int offset:
        :param int records:
        :param str order_by:
        :param str order:
        :param bool include_retired:
        :return: InlineResponseDefault8
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_invoices_by_period_end_with_http_info(lower_threshold, upper_threshold, **kwargs)  # noqa: E501
        else:
            (data) = self.get_invoices_by_period_end_with_http_info(lower_threshold, upper_threshold, **kwargs)  # noqa: E501
            return data

    def get_invoices_by_period_end_with_http_info(self, lower_threshold, upper_threshold, **kwargs):  # noqa: E501
        """get_invoices_by_period_end  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_invoices_by_period_end_with_http_info(lower_threshold, upper_threshold, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SimpleDateParam lower_threshold: (required)
        :param SimpleDateParam upper_threshold: (required)
        :param list[str] organizations:
        :param int offset:
        :param int records:
        :param str order_by:
        :param str order:
        :param bool include_retired:
        :return: InlineResponseDefault8
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lower_threshold', 'upper_threshold', 'organizations', 'offset', 'records', 'order_by', 'order', 'include_retired']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_invoices_by_period_end" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lower_threshold' is set
        if ('lower_threshold' not in params or
                params['lower_threshold'] is None):
            raise ValueError("Missing the required parameter `lower_threshold` when calling `get_invoices_by_period_end`")  # noqa: E501
        # verify the required parameter 'upper_threshold' is set
        if ('upper_threshold' not in params or
                params['upper_threshold'] is None):
            raise ValueError("Missing the required parameter `upper_threshold` when calling `get_invoices_by_period_end`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lower_threshold' in params:
            path_params['lower-threshold'] = params['lower_threshold']  # noqa: E501
        if 'upper_threshold' in params:
            path_params['upper-threshold'] = params['upper_threshold']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'records' in params:
            query_params.append(('records', params['records']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'include_retired' in params:
            query_params.append(('include_retired', params['include_retired']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/period-end/{lower-threshold}/{upper-threshold}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault8',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_invoices_by_period_start(self, lower_threshold, upper_threshold, **kwargs):  # noqa: E501
        """get_invoices_by_period_start  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_invoices_by_period_start(lower_threshold, upper_threshold, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SimpleDateParam lower_threshold: (required)
        :param SimpleDateParam upper_threshold: (required)
        :param list[str] organizations:
        :param int offset:
        :param int records:
        :param str order_by:
        :param str order:
        :param bool include_retired:
        :return: InlineResponseDefault8
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_invoices_by_period_start_with_http_info(lower_threshold, upper_threshold, **kwargs)  # noqa: E501
        else:
            (data) = self.get_invoices_by_period_start_with_http_info(lower_threshold, upper_threshold, **kwargs)  # noqa: E501
            return data

    def get_invoices_by_period_start_with_http_info(self, lower_threshold, upper_threshold, **kwargs):  # noqa: E501
        """get_invoices_by_period_start  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_invoices_by_period_start_with_http_info(lower_threshold, upper_threshold, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SimpleDateParam lower_threshold: (required)
        :param SimpleDateParam upper_threshold: (required)
        :param list[str] organizations:
        :param int offset:
        :param int records:
        :param str order_by:
        :param str order:
        :param bool include_retired:
        :return: InlineResponseDefault8
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lower_threshold', 'upper_threshold', 'organizations', 'offset', 'records', 'order_by', 'order', 'include_retired']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_invoices_by_period_start" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lower_threshold' is set
        if ('lower_threshold' not in params or
                params['lower_threshold'] is None):
            raise ValueError("Missing the required parameter `lower_threshold` when calling `get_invoices_by_period_start`")  # noqa: E501
        # verify the required parameter 'upper_threshold' is set
        if ('upper_threshold' not in params or
                params['upper_threshold'] is None):
            raise ValueError("Missing the required parameter `upper_threshold` when calling `get_invoices_by_period_start`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lower_threshold' in params:
            path_params['lower-threshold'] = params['lower_threshold']  # noqa: E501
        if 'upper_threshold' in params:
            path_params['upper-threshold'] = params['upper_threshold']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'records' in params:
            query_params.append(('records', params['records']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'include_retired' in params:
            query_params.append(('include_retired', params['include_retired']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/period-start/{lower-threshold}/{upper-threshold}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault8',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_invoices_by_period_start_as_csv(self, lower_threshold, upper_threshold, **kwargs):  # noqa: E501
        """get_invoices_by_period_start_as_csv  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_invoices_by_period_start_as_csv(lower_threshold, upper_threshold, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SimpleDateParam lower_threshold: (required)
        :param SimpleDateParam upper_threshold: (required)
        :param list[str] organizations:
        :param int offset:
        :param int records:
        :param str order_by:
        :param str order:
        :param bool include_retired:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_invoices_by_period_start_as_csv_with_http_info(lower_threshold, upper_threshold, **kwargs)  # noqa: E501
        else:
            (data) = self.get_invoices_by_period_start_as_csv_with_http_info(lower_threshold, upper_threshold, **kwargs)  # noqa: E501
            return data

    def get_invoices_by_period_start_as_csv_with_http_info(self, lower_threshold, upper_threshold, **kwargs):  # noqa: E501
        """get_invoices_by_period_start_as_csv  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_invoices_by_period_start_as_csv_with_http_info(lower_threshold, upper_threshold, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SimpleDateParam lower_threshold: (required)
        :param SimpleDateParam upper_threshold: (required)
        :param list[str] organizations:
        :param int offset:
        :param int records:
        :param str order_by:
        :param str order:
        :param bool include_retired:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lower_threshold', 'upper_threshold', 'organizations', 'offset', 'records', 'order_by', 'order', 'include_retired']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_invoices_by_period_start_as_csv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lower_threshold' is set
        if ('lower_threshold' not in params or
                params['lower_threshold'] is None):
            raise ValueError("Missing the required parameter `lower_threshold` when calling `get_invoices_by_period_start_as_csv`")  # noqa: E501
        # verify the required parameter 'upper_threshold' is set
        if ('upper_threshold' not in params or
                params['upper_threshold'] is None):
            raise ValueError("Missing the required parameter `upper_threshold` when calling `get_invoices_by_period_start_as_csv`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lower_threshold' in params:
            path_params['lower-threshold'] = params['lower_threshold']  # noqa: E501
        if 'upper_threshold' in params:
            path_params['upper-threshold'] = params['upper_threshold']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'records' in params:
            query_params.append(('records', params['records']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'include_retired' in params:
            query_params.append(('include_retired', params['include_retired']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/period-start/{lower-threshold}/{upper-threshold}.csv', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_invoices_by_state(self, state, **kwargs):  # noqa: E501
        """get_invoices_by_state  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_invoices_by_state(state, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str state: (required)
        :param list[str] organizations:
        :param int offset:
        :param int records:
        :param str order_by:
        :param str order:
        :param bool include_retired:
        :return: InlineResponseDefault8
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_invoices_by_state_with_http_info(state, **kwargs)  # noqa: E501
        else:
            (data) = self.get_invoices_by_state_with_http_info(state, **kwargs)  # noqa: E501
            return data

    def get_invoices_by_state_with_http_info(self, state, **kwargs):  # noqa: E501
        """get_invoices_by_state  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_invoices_by_state_with_http_info(state, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str state: (required)
        :param list[str] organizations:
        :param int offset:
        :param int records:
        :param str order_by:
        :param str order:
        :param bool include_retired:
        :return: InlineResponseDefault8
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['state', 'organizations', 'offset', 'records', 'order_by', 'order', 'include_retired']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_invoices_by_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'state' is set
        if ('state' not in params or
                params['state'] is None):
            raise ValueError("Missing the required parameter `state` when calling `get_invoices_by_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'state' in params:
            path_params['state'] = params['state']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'records' in params:
            query_params.append(('records', params['records']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'include_retired' in params:
            query_params.append(('include_retired', params['include_retired']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/state/{state}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault8',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_invoices_by_state_and_period_start(self, state, lower_threshold, upper_threshold, **kwargs):  # noqa: E501
        """get_invoices_by_state_and_period_start  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_invoices_by_state_and_period_start(state, lower_threshold, upper_threshold, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str state: (required)
        :param SimpleDateParam lower_threshold: (required)
        :param SimpleDateParam upper_threshold: (required)
        :param list[str] organizations:
        :param int offset:
        :param int records:
        :param str order_by:
        :param str order:
        :param bool include_retired:
        :return: InlineResponseDefault8
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_invoices_by_state_and_period_start_with_http_info(state, lower_threshold, upper_threshold, **kwargs)  # noqa: E501
        else:
            (data) = self.get_invoices_by_state_and_period_start_with_http_info(state, lower_threshold, upper_threshold, **kwargs)  # noqa: E501
            return data

    def get_invoices_by_state_and_period_start_with_http_info(self, state, lower_threshold, upper_threshold, **kwargs):  # noqa: E501
        """get_invoices_by_state_and_period_start  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_invoices_by_state_and_period_start_with_http_info(state, lower_threshold, upper_threshold, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str state: (required)
        :param SimpleDateParam lower_threshold: (required)
        :param SimpleDateParam upper_threshold: (required)
        :param list[str] organizations:
        :param int offset:
        :param int records:
        :param str order_by:
        :param str order:
        :param bool include_retired:
        :return: InlineResponseDefault8
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['state', 'lower_threshold', 'upper_threshold', 'organizations', 'offset', 'records', 'order_by', 'order', 'include_retired']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_invoices_by_state_and_period_start" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'state' is set
        if ('state' not in params or
                params['state'] is None):
            raise ValueError("Missing the required parameter `state` when calling `get_invoices_by_state_and_period_start`")  # noqa: E501
        # verify the required parameter 'lower_threshold' is set
        if ('lower_threshold' not in params or
                params['lower_threshold'] is None):
            raise ValueError("Missing the required parameter `lower_threshold` when calling `get_invoices_by_state_and_period_start`")  # noqa: E501
        # verify the required parameter 'upper_threshold' is set
        if ('upper_threshold' not in params or
                params['upper_threshold'] is None):
            raise ValueError("Missing the required parameter `upper_threshold` when calling `get_invoices_by_state_and_period_start`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'state' in params:
            path_params['state'] = params['state']  # noqa: E501
        if 'lower_threshold' in params:
            path_params['lower-threshold'] = params['lower_threshold']  # noqa: E501
        if 'upper_threshold' in params:
            path_params['upper-threshold'] = params['upper_threshold']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'records' in params:
            query_params.append(('records', params['records']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'include_retired' in params:
            query_params.append(('include_retired', params['include_retired']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/state/{state}/period-start/{lower-threshold}/{upper-threshold}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault8',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_invoices_by_state_and_period_start_as_csv(self, state, lower_threshold, upper_threshold, **kwargs):  # noqa: E501
        """get_invoices_by_state_and_period_start_as_csv  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_invoices_by_state_and_period_start_as_csv(state, lower_threshold, upper_threshold, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str state: (required)
        :param SimpleDateParam lower_threshold: (required)
        :param SimpleDateParam upper_threshold: (required)
        :param list[str] organizations:
        :param int offset:
        :param int records:
        :param str order_by:
        :param str order:
        :param bool include_retired:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_invoices_by_state_and_period_start_as_csv_with_http_info(state, lower_threshold, upper_threshold, **kwargs)  # noqa: E501
        else:
            (data) = self.get_invoices_by_state_and_period_start_as_csv_with_http_info(state, lower_threshold, upper_threshold, **kwargs)  # noqa: E501
            return data

    def get_invoices_by_state_and_period_start_as_csv_with_http_info(self, state, lower_threshold, upper_threshold, **kwargs):  # noqa: E501
        """get_invoices_by_state_and_period_start_as_csv  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_invoices_by_state_and_period_start_as_csv_with_http_info(state, lower_threshold, upper_threshold, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str state: (required)
        :param SimpleDateParam lower_threshold: (required)
        :param SimpleDateParam upper_threshold: (required)
        :param list[str] organizations:
        :param int offset:
        :param int records:
        :param str order_by:
        :param str order:
        :param bool include_retired:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['state', 'lower_threshold', 'upper_threshold', 'organizations', 'offset', 'records', 'order_by', 'order', 'include_retired']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_invoices_by_state_and_period_start_as_csv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'state' is set
        if ('state' not in params or
                params['state'] is None):
            raise ValueError("Missing the required parameter `state` when calling `get_invoices_by_state_and_period_start_as_csv`")  # noqa: E501
        # verify the required parameter 'lower_threshold' is set
        if ('lower_threshold' not in params or
                params['lower_threshold'] is None):
            raise ValueError("Missing the required parameter `lower_threshold` when calling `get_invoices_by_state_and_period_start_as_csv`")  # noqa: E501
        # verify the required parameter 'upper_threshold' is set
        if ('upper_threshold' not in params or
                params['upper_threshold'] is None):
            raise ValueError("Missing the required parameter `upper_threshold` when calling `get_invoices_by_state_and_period_start_as_csv`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'state' in params:
            path_params['state'] = params['state']  # noqa: E501
        if 'lower_threshold' in params:
            path_params['lower-threshold'] = params['lower_threshold']  # noqa: E501
        if 'upper_threshold' in params:
            path_params['upper-threshold'] = params['upper_threshold']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'records' in params:
            query_params.append(('records', params['records']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'include_retired' in params:
            query_params.append(('include_retired', params['include_retired']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/state/{state}/period-start/{lower-threshold}/{upper-threshold}.csv', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_invoices_by_state_as_csv(self, state, **kwargs):  # noqa: E501
        """get_invoices_by_state_as_csv  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_invoices_by_state_as_csv(state, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str state: (required)
        :param list[str] organizations:
        :param int offset:
        :param int records:
        :param str order_by:
        :param str order:
        :param bool include_retired:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_invoices_by_state_as_csv_with_http_info(state, **kwargs)  # noqa: E501
        else:
            (data) = self.get_invoices_by_state_as_csv_with_http_info(state, **kwargs)  # noqa: E501
            return data

    def get_invoices_by_state_as_csv_with_http_info(self, state, **kwargs):  # noqa: E501
        """get_invoices_by_state_as_csv  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_invoices_by_state_as_csv_with_http_info(state, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str state: (required)
        :param list[str] organizations:
        :param int offset:
        :param int records:
        :param str order_by:
        :param str order:
        :param bool include_retired:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['state', 'organizations', 'offset', 'records', 'order_by', 'order', 'include_retired']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_invoices_by_state_as_csv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'state' is set
        if ('state' not in params or
                params['state'] is None):
            raise ValueError("Missing the required parameter `state` when calling `get_invoices_by_state_as_csv`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'state' in params:
            path_params['state'] = params['state']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'records' in params:
            query_params.append(('records', params['records']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'include_retired' in params:
            query_params.append(('include_retired', params['include_retired']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/state/{state}.csv', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_line_payments(self, **kwargs):  # noqa: E501
        """get_line_payments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_line_payments(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param str payment_direction:
        :param str date_discriminator:
        :param SimpleDateParam recognition_start:
        :param SimpleDateParam recognition_end:
        :param list[str] include_gateway:
        :param list[str] exclude_gateway:
        :return: InlineResponseDefault31
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_line_payments_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_line_payments_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_line_payments_with_http_info(self, **kwargs):  # noqa: E501
        """get_line_payments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_line_payments_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param str payment_direction:
        :param str date_discriminator:
        :param SimpleDateParam recognition_start:
        :param SimpleDateParam recognition_end:
        :param list[str] include_gateway:
        :param list[str] exclude_gateway:
        :return: InlineResponseDefault31
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'payment_direction', 'date_discriminator', 'recognition_start', 'recognition_end', 'include_gateway', 'exclude_gateway']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_line_payments" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'payment_direction' in params:
            query_params.append(('payment_direction', params['payment_direction']))  # noqa: E501
        if 'date_discriminator' in params:
            query_params.append(('date_discriminator', params['date_discriminator']))  # noqa: E501
        if 'recognition_start' in params:
            query_params.append(('recognition_start', params['recognition_start']))  # noqa: E501
        if 'recognition_end' in params:
            query_params.append(('recognition_end', params['recognition_end']))  # noqa: E501
        if 'include_gateway' in params:
            query_params.append(('include_gateway', params['include_gateway']))  # noqa: E501
            collection_formats['include_gateway'] = 'multi'  # noqa: E501
        if 'exclude_gateway' in params:
            query_params.append(('exclude_gateway', params['exclude_gateway']))  # noqa: E501
            collection_formats['exclude_gateway'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/line-payments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault31',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_line_payments_as_csv(self, **kwargs):  # noqa: E501
        """get_line_payments_as_csv  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_line_payments_as_csv(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param str payment_direction:
        :param str date_discriminator:
        :param SimpleDateParam recognition_start:
        :param SimpleDateParam recognition_end:
        :param list[str] include_gateway:
        :param list[str] exclude_gateway:
        :param str date_interval_inclusivity:
        :param str date_time_format:
        :param str date_granularity:
        :param str boolean_format:
        :param str monetary_amount_format:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_line_payments_as_csv_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_line_payments_as_csv_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_line_payments_as_csv_with_http_info(self, **kwargs):  # noqa: E501
        """get_line_payments_as_csv  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_line_payments_as_csv_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param str payment_direction:
        :param str date_discriminator:
        :param SimpleDateParam recognition_start:
        :param SimpleDateParam recognition_end:
        :param list[str] include_gateway:
        :param list[str] exclude_gateway:
        :param str date_interval_inclusivity:
        :param str date_time_format:
        :param str date_granularity:
        :param str boolean_format:
        :param str monetary_amount_format:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'payment_direction', 'date_discriminator', 'recognition_start', 'recognition_end', 'include_gateway', 'exclude_gateway', 'date_interval_inclusivity', 'date_time_format', 'date_granularity', 'boolean_format', 'monetary_amount_format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_line_payments_as_csv" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'payment_direction' in params:
            query_params.append(('payment_direction', params['payment_direction']))  # noqa: E501
        if 'date_discriminator' in params:
            query_params.append(('date_discriminator', params['date_discriminator']))  # noqa: E501
        if 'recognition_start' in params:
            query_params.append(('recognition_start', params['recognition_start']))  # noqa: E501
        if 'recognition_end' in params:
            query_params.append(('recognition_end', params['recognition_end']))  # noqa: E501
        if 'include_gateway' in params:
            query_params.append(('include_gateway', params['include_gateway']))  # noqa: E501
            collection_formats['include_gateway'] = 'multi'  # noqa: E501
        if 'exclude_gateway' in params:
            query_params.append(('exclude_gateway', params['exclude_gateway']))  # noqa: E501
            collection_formats['exclude_gateway'] = 'multi'  # noqa: E501
        if 'date_interval_inclusivity' in params:
            query_params.append(('date_interval_inclusivity', params['date_interval_inclusivity']))  # noqa: E501
        if 'date_time_format' in params:
            query_params.append(('date_time_format', params['date_time_format']))  # noqa: E501
        if 'date_granularity' in params:
            query_params.append(('date_granularity', params['date_granularity']))  # noqa: E501
        if 'boolean_format' in params:
            query_params.append(('boolean_format', params['boolean_format']))  # noqa: E501
        if 'monetary_amount_format' in params:
            query_params.append(('monetary_amount_format', params['monetary_amount_format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/line-payments.csv', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_metadata_for_invoice(self, invoice_id, **kwargs):  # noqa: E501
        """get_metadata_for_invoice  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metadata_for_invoice(invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param list[str] organizations:
        :return: InlineResponseDefault7
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_metadata_for_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_metadata_for_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
            return data

    def get_metadata_for_invoice_with_http_info(self, invoice_id, **kwargs):  # noqa: E501
        """get_metadata_for_invoice  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metadata_for_invoice_with_http_info(invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param list[str] organizations:
        :return: InlineResponseDefault7
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'organizations']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metadata_for_invoice" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `get_metadata_for_invoice`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invoice_id' in params:
            path_params['invoice-ID'] = params['invoice_id']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{invoice-ID}/metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault7',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_refund_for_refunded_invoice(self, invoice_id, **kwargs):  # noqa: E501
        """get_refund_for_refunded_invoice  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_refund_for_refunded_invoice(invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param list[str] organizations:
        :return: InlineResponseDefault32
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_refund_for_refunded_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_refund_for_refunded_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
            return data

    def get_refund_for_refunded_invoice_with_http_info(self, invoice_id, **kwargs):  # noqa: E501
        """get_refund_for_refunded_invoice  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_refund_for_refunded_invoice_with_http_info(invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param list[str] organizations:
        :return: InlineResponseDefault32
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'organizations']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_refund_for_refunded_invoice" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `get_refund_for_refunded_invoice`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invoice_id' in params:
            path_params['invoice-ID'] = params['invoice_id']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{invoice-ID}/refunds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault32',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_refund_invoice_line_payments_from_invoices_as_csv(self, **kwargs):  # noqa: E501
        """get_refund_invoice_line_payments_from_invoices_as_csv  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_refund_invoice_line_payments_from_invoices_as_csv(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param SimpleDateParam recognition_start:
        :param SimpleDateParam recognition_end:
        :param str date_interval_inclusivity:
        :param str date_time_format:
        :param str date_granularity:
        :param str boolean_format:
        :param str monetary_amount_format:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_refund_invoice_line_payments_from_invoices_as_csv_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_refund_invoice_line_payments_from_invoices_as_csv_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_refund_invoice_line_payments_from_invoices_as_csv_with_http_info(self, **kwargs):  # noqa: E501
        """get_refund_invoice_line_payments_from_invoices_as_csv  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_refund_invoice_line_payments_from_invoices_as_csv_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param SimpleDateParam recognition_start:
        :param SimpleDateParam recognition_end:
        :param str date_interval_inclusivity:
        :param str date_time_format:
        :param str date_granularity:
        :param str boolean_format:
        :param str monetary_amount_format:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'recognition_start', 'recognition_end', 'date_interval_inclusivity', 'date_time_format', 'date_granularity', 'boolean_format', 'monetary_amount_format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_refund_invoice_line_payments_from_invoices_as_csv" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'recognition_start' in params:
            query_params.append(('recognition_start', params['recognition_start']))  # noqa: E501
        if 'recognition_end' in params:
            query_params.append(('recognition_end', params['recognition_end']))  # noqa: E501
        if 'date_interval_inclusivity' in params:
            query_params.append(('date_interval_inclusivity', params['date_interval_inclusivity']))  # noqa: E501
        if 'date_time_format' in params:
            query_params.append(('date_time_format', params['date_time_format']))  # noqa: E501
        if 'date_granularity' in params:
            query_params.append(('date_granularity', params['date_granularity']))  # noqa: E501
        if 'boolean_format' in params:
            query_params.append(('boolean_format', params['boolean_format']))  # noqa: E501
        if 'monetary_amount_format' in params:
            query_params.append(('monetary_amount_format', params['monetary_amount_format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/refund.csv', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_refund_invoice_line_payments_from_invoices_as_csv_by_refund_received(self, **kwargs):  # noqa: E501
        """get_refund_invoice_line_payments_from_invoices_as_csv_by_refund_received  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_refund_invoice_line_payments_from_invoices_as_csv_by_refund_received(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param SimpleDateParam start:
        :param SimpleDateParam end:
        :param str date_interval_inclusivity:
        :param str date_time_format:
        :param str date_granularity:
        :param str boolean_format:
        :param str monetary_amount_format:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_refund_invoice_line_payments_from_invoices_as_csv_by_refund_received_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_refund_invoice_line_payments_from_invoices_as_csv_by_refund_received_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_refund_invoice_line_payments_from_invoices_as_csv_by_refund_received_with_http_info(self, **kwargs):  # noqa: E501
        """get_refund_invoice_line_payments_from_invoices_as_csv_by_refund_received  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_refund_invoice_line_payments_from_invoices_as_csv_by_refund_received_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param SimpleDateParam start:
        :param SimpleDateParam end:
        :param str date_interval_inclusivity:
        :param str date_time_format:
        :param str date_granularity:
        :param str boolean_format:
        :param str monetary_amount_format:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'start', 'end', 'date_interval_inclusivity', 'date_time_format', 'date_granularity', 'boolean_format', 'monetary_amount_format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_refund_invoice_line_payments_from_invoices_as_csv_by_refund_received" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'date_interval_inclusivity' in params:
            query_params.append(('date_interval_inclusivity', params['date_interval_inclusivity']))  # noqa: E501
        if 'date_time_format' in params:
            query_params.append(('date_time_format', params['date_time_format']))  # noqa: E501
        if 'date_granularity' in params:
            query_params.append(('date_granularity', params['date_granularity']))  # noqa: E501
        if 'boolean_format' in params:
            query_params.append(('boolean_format', params['boolean_format']))  # noqa: E501
        if 'monetary_amount_format' in params:
            query_params.append(('monetary_amount_format', params['monetary_amount_format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/payment-received/refund.csv', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_revenue_attributions(self, **kwargs):  # noqa: E501
        """get_revenue_attributions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_revenue_attributions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param SimpleDateParam recognition_start:
        :param SimpleDateParam recognition_end:
        :return: InlineResponseDefault33
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_revenue_attributions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_revenue_attributions_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_revenue_attributions_with_http_info(self, **kwargs):  # noqa: E501
        """get_revenue_attributions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_revenue_attributions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param SimpleDateParam recognition_start:
        :param SimpleDateParam recognition_end:
        :return: InlineResponseDefault33
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'recognition_start', 'recognition_end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_revenue_attributions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'recognition_start' in params:
            query_params.append(('recognition_start', params['recognition_start']))  # noqa: E501
        if 'recognition_end' in params:
            query_params.append(('recognition_end', params['recognition_end']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/revenue-attributions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault33',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_revenue_attributions_as_csv(self, **kwargs):  # noqa: E501
        """get_revenue_attributions_as_csv  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_revenue_attributions_as_csv(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param SimpleDateParam recognition_start:
        :param SimpleDateParam recognition_end:
        :param str date_interval_inclusivity:
        :param str date_granularity:
        :param str date_time_format:
        :param str boolean_format:
        :param str monetary_amount_format:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_revenue_attributions_as_csv_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_revenue_attributions_as_csv_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_revenue_attributions_as_csv_with_http_info(self, **kwargs):  # noqa: E501
        """get_revenue_attributions_as_csv  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_revenue_attributions_as_csv_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param SimpleDateParam recognition_start:
        :param SimpleDateParam recognition_end:
        :param str date_interval_inclusivity:
        :param str date_granularity:
        :param str date_time_format:
        :param str boolean_format:
        :param str monetary_amount_format:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'recognition_start', 'recognition_end', 'date_interval_inclusivity', 'date_granularity', 'date_time_format', 'boolean_format', 'monetary_amount_format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_revenue_attributions_as_csv" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'recognition_start' in params:
            query_params.append(('recognition_start', params['recognition_start']))  # noqa: E501
        if 'recognition_end' in params:
            query_params.append(('recognition_end', params['recognition_end']))  # noqa: E501
        if 'date_interval_inclusivity' in params:
            query_params.append(('date_interval_inclusivity', params['date_interval_inclusivity']))  # noqa: E501
        if 'date_granularity' in params:
            query_params.append(('date_granularity', params['date_granularity']))  # noqa: E501
        if 'date_time_format' in params:
            query_params.append(('date_time_format', params['date_time_format']))  # noqa: E501
        if 'boolean_format' in params:
            query_params.append(('boolean_format', params['boolean_format']))  # noqa: E501
        if 'monetary_amount_format' in params:
            query_params.append(('monetary_amount_format', params['monetary_amount_format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/revenue-attributions.csv', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_swagger_for_invoice(self, query_string, **kwargs):  # noqa: E501
        """get_swagger_for_invoice  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_swagger_for_invoice(query_string, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query_string: (required)
        :param list[str] organizations:
        :param int offset:
        :param int records:
        :param str format:
        :param bool wildcard:
        :param bool entity:
        :return: InlineResponseDefault34
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_swagger_for_invoice_with_http_info(query_string, **kwargs)  # noqa: E501
        else:
            (data) = self.get_swagger_for_invoice_with_http_info(query_string, **kwargs)  # noqa: E501
            return data

    def get_swagger_for_invoice_with_http_info(self, query_string, **kwargs):  # noqa: E501
        """get_swagger_for_invoice  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_swagger_for_invoice_with_http_info(query_string, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query_string: (required)
        :param list[str] organizations:
        :param int offset:
        :param int records:
        :param str format:
        :param bool wildcard:
        :param bool entity:
        :return: InlineResponseDefault34
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query_string', 'organizations', 'offset', 'records', 'format', 'wildcard', 'entity']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_swagger_for_invoice" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'query_string' is set
        if ('query_string' not in params or
                params['query_string'] is None):
            raise ValueError("Missing the required parameter `query_string` when calling `get_swagger_for_invoice`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'query_string' in params:
            path_params['query-string'] = params['query_string']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'records' in params:
            query_params.append(('records', params['records']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'wildcard' in params:
            query_params.append(('wildcard', params['wildcard']))  # noqa: E501
        if 'entity' in params:
            query_params.append(('entity', params['entity']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/swagger-end-point/{query-string}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault34',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def import_invoice(self, **kwargs):  # noqa: E501
        """import_invoice  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_invoice(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ImportInvoiceRequest body:
        :return: InlineResponseDefault29
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.import_invoice_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.import_invoice_with_http_info(**kwargs)  # noqa: E501
            return data

    def import_invoice_with_http_info(self, **kwargs):  # noqa: E501
        """import_invoice  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_invoice_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ImportInvoiceRequest body:
        :return: InlineResponseDefault29
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_invoice" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/import', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault29',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def issue_invoice(self, invoice_id, **kwargs):  # noqa: E501
        """issue_invoice  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.issue_invoice(invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param IssueInvoiceRequest body:
        :return: InlineResponseDefault35
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.issue_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
        else:
            (data) = self.issue_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
            return data

    def issue_invoice_with_http_info(self, invoice_id, **kwargs):  # noqa: E501
        """issue_invoice  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.issue_invoice_with_http_info(invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param IssueInvoiceRequest body:
        :return: InlineResponseDefault35
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method issue_invoice" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `issue_invoice`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invoice_id' in params:
            path_params['invoice-id'] = params['invoice_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{invoice-id}/issue', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault35',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_original_invoice(self, invoice_id, **kwargs):  # noqa: E501
        """list_original_invoice  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_original_invoice(invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param list[str] organizations:
        :return: InlineResponseDefault8
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_original_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_original_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
            return data

    def list_original_invoice_with_http_info(self, invoice_id, **kwargs):  # noqa: E501
        """list_original_invoice  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_original_invoice_with_http_info(invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param list[str] organizations:
        :return: InlineResponseDefault8
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'organizations']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_original_invoice" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `list_original_invoice`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invoice_id' in params:
            path_params['invoice-id'] = params['invoice_id']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{invoice-id}/original', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault8',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_split_invoice(self, invoice_id, **kwargs):  # noqa: E501
        """list_split_invoice  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_split_invoice(invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param list[str] organizations:
        :return: InlineResponseDefault8
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_split_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_split_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
            return data

    def list_split_invoice_with_http_info(self, invoice_id, **kwargs):  # noqa: E501
        """list_split_invoice  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_split_invoice_with_http_info(invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param list[str] organizations:
        :return: InlineResponseDefault8
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'organizations']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_split_invoice" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `list_split_invoice`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invoice_id' in params:
            path_params['invoice-id'] = params['invoice_id']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{invoice-id}/split', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault8',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def recalculate_invoice(self, invoice_id, **kwargs):  # noqa: E501
        """recalculate_invoice  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recalculate_invoice(invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param InvoiceRecalculationRequest body:
        :return: InlineResponseDefault29
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.recalculate_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
        else:
            (data) = self.recalculate_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
            return data

    def recalculate_invoice_with_http_info(self, invoice_id, **kwargs):  # noqa: E501
        """recalculate_invoice  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recalculate_invoice_with_http_info(invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param InvoiceRecalculationRequest body:
        :return: InlineResponseDefault29
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recalculate_invoice" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `recalculate_invoice`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invoice_id' in params:
            path_params['invoice-ID'] = params['invoice_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{invoice-ID}/recalculate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault29',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def refund_invoice(self, invoice_id, **kwargs):  # noqa: E501
        """refund_invoice  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.refund_invoice(invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param InvoiceRefundRequest body:
        :return: InlineResponseDefault36
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.refund_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
        else:
            (data) = self.refund_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
            return data

    def refund_invoice_with_http_info(self, invoice_id, **kwargs):  # noqa: E501
        """refund_invoice  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.refund_invoice_with_http_info(invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param InvoiceRefundRequest body:
        :return: InlineResponseDefault36
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method refund_invoice" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `refund_invoice`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invoice_id' in params:
            path_params['invoice-id'] = params['invoice_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{invoice-id}/refund', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault36',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_charge_from_invoice(self, invoice_id, charge_id, **kwargs):  # noqa: E501
        """remove_charge_from_invoice  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_charge_from_invoice(invoice_id, charge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param str charge_id: (required)
        :param list[str] organizations:
        :return: InlineResponseDefault10
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_charge_from_invoice_with_http_info(invoice_id, charge_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_charge_from_invoice_with_http_info(invoice_id, charge_id, **kwargs)  # noqa: E501
            return data

    def remove_charge_from_invoice_with_http_info(self, invoice_id, charge_id, **kwargs):  # noqa: E501
        """remove_charge_from_invoice  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_charge_from_invoice_with_http_info(invoice_id, charge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param str charge_id: (required)
        :param list[str] organizations:
        :return: InlineResponseDefault10
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'charge_id', 'organizations']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_charge_from_invoice" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `remove_charge_from_invoice`")  # noqa: E501
        # verify the required parameter 'charge_id' is set
        if ('charge_id' not in params or
                params['charge_id'] is None):
            raise ValueError("Missing the required parameter `charge_id` when calling `remove_charge_from_invoice`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invoice_id' in params:
            path_params['invoice-ID'] = params['invoice_id']  # noqa: E501
        if 'charge_id' in params:
            path_params['charge-ID'] = params['charge_id']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{invoice-ID}/charges/{charge-ID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault10',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_metadata_from_invoice(self, invoice_id, **kwargs):  # noqa: E501
        """remove_metadata_from_invoice  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_metadata_from_invoice(invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param list[str] organizations:
        :return: InlineResponseDefault7
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_metadata_from_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_metadata_from_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
            return data

    def remove_metadata_from_invoice_with_http_info(self, invoice_id, **kwargs):  # noqa: E501
        """remove_metadata_from_invoice  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_metadata_from_invoice_with_http_info(invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param list[str] organizations:
        :return: InlineResponseDefault7
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'organizations']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_metadata_from_invoice" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `remove_metadata_from_invoice`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invoice_id' in params:
            path_params['invoice-ID'] = params['invoice_id']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{invoice-ID}/metadata', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault7',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_metadata_for_invoice(self, invoice_id, **kwargs):  # noqa: E501
        """set_metadata_for_invoice  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_metadata_for_invoice(invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param str body:
        :param list[str] organizations:
        :return: InlineResponseDefault7
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_metadata_for_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_metadata_for_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
            return data

    def set_metadata_for_invoice_with_http_info(self, invoice_id, **kwargs):  # noqa: E501
        """set_metadata_for_invoice  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_metadata_for_invoice_with_http_info(invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param str body:
        :param list[str] organizations:
        :return: InlineResponseDefault7
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'body', 'organizations']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_metadata_for_invoice" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `set_metadata_for_invoice`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invoice_id' in params:
            path_params['invoice-ID'] = params['invoice_id']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{invoice-ID}/metadata', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault7',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def split_invoice(self, invoice_id, **kwargs):  # noqa: E501
        """split_invoice  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.split_invoice(invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param InvoiceSplitServiceRequest body:
        :return: InlineResponseDefault8
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.split_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
        else:
            (data) = self.split_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
            return data

    def split_invoice_with_http_info(self, invoice_id, **kwargs):  # noqa: E501
        """split_invoice  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.split_invoice_with_http_info(invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param InvoiceSplitServiceRequest body:
        :return: InlineResponseDefault8
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method split_invoice" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `split_invoice`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invoice_id' in params:
            path_params['invoice-id'] = params['invoice_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{invoice-id}/split', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault8',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_invoice(self, **kwargs):  # noqa: E501
        """update_invoice  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_invoice(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateInvoiceRequest body:
        :return: InlineResponseDefault8
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_invoice_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.update_invoice_with_http_info(**kwargs)  # noqa: E501
            return data

    def update_invoice_with_http_info(self, **kwargs):  # noqa: E501
        """update_invoice  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_invoice_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateInvoiceRequest body:
        :return: InlineResponseDefault8
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_invoice" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault8',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_invoice_template(self, **kwargs):  # noqa: E501
        """update_invoice_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_invoice_template(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateInvoiceTemplateRequest body:
        :return: InlineResponseDefault30
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_invoice_template_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.update_invoice_template_with_http_info(**kwargs)  # noqa: E501
            return data

    def update_invoice_template_with_http_info(self, **kwargs):  # noqa: E501
        """update_invoice_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_invoice_template_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateInvoiceTemplateRequest body:
        :return: InlineResponseDefault30
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_invoice_template" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/template', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault30',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upsert_metadata_for_invoice(self, invoice_id, **kwargs):  # noqa: E501
        """upsert_metadata_for_invoice  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upsert_metadata_for_invoice(invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param str body:
        :param list[str] organizations:
        :return: InlineResponseDefault7
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upsert_metadata_for_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
        else:
            (data) = self.upsert_metadata_for_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
            return data

    def upsert_metadata_for_invoice_with_http_info(self, invoice_id, **kwargs):  # noqa: E501
        """upsert_metadata_for_invoice  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upsert_metadata_for_invoice_with_http_info(invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param str body:
        :param list[str] organizations:
        :return: InlineResponseDefault7
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'body', 'organizations']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upsert_metadata_for_invoice" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `upsert_metadata_for_invoice`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invoice_id' in params:
            path_params['invoice-ID'] = params['invoice_id']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{invoice-ID}/metadata', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault7',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def void_invoice(self, invoice_id, **kwargs):  # noqa: E501
        """void_invoice  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.void_invoice(invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param list[str] organizations:
        :param bool void_charges:
        :return: InlineResponseDefault29
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.void_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
        else:
            (data) = self.void_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
            return data

    def void_invoice_with_http_info(self, invoice_id, **kwargs):  # noqa: E501
        """void_invoice  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.void_invoice_with_http_info(invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param list[str] organizations:
        :param bool void_charges:
        :return: InlineResponseDefault29
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'organizations', 'void_charges']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method void_invoice" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `void_invoice`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invoice_id' in params:
            path_params['invoice-ID'] = params['invoice_id']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'void_charges' in params:
            query_params.append(('void_charges', params['void_charges']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{invoice-ID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault29',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
