# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from billforward.api_client import ApiClient


class TokenizationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def auth_capture(self, **kwargs):  # noqa: E501
        """auth_capture  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_capture(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuthCaptureRequest body:
        :return: InlineResponseDefault40
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_capture_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.auth_capture_with_http_info(**kwargs)  # noqa: E501
            return data

    def auth_capture_with_http_info(self, **kwargs):  # noqa: E501
        """auth_capture  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_capture_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuthCaptureRequest body:
        :return: InlineResponseDefault40
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_capture" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tokenization/auth-capture', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault40',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def braintree_card_capture(self, **kwargs):  # noqa: E501
        """braintree_card_capture  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.braintree_card_capture(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BraintreeCaptureRequest body:
        :return: InlineResponseDefault40
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.braintree_card_capture_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.braintree_card_capture_with_http_info(**kwargs)  # noqa: E501
            return data

    def braintree_card_capture_with_http_info(self, **kwargs):  # noqa: E501
        """braintree_card_capture  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.braintree_card_capture_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BraintreeCaptureRequest body:
        :return: InlineResponseDefault40
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method braintree_card_capture" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tokenization/braintree', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault40',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_authorize_net_token(self, **kwargs):  # noqa: E501
        """create_authorize_net_token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_authorize_net_token(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuthorizeNetToken body:
        :return: InlineResponseDefault93
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_authorize_net_token_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_authorize_net_token_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_authorize_net_token_with_http_info(self, **kwargs):  # noqa: E501
        """create_authorize_net_token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_authorize_net_token_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuthorizeNetToken body:
        :return: InlineResponseDefault93
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_authorize_net_token" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/vaulted-gateways/authorize-net', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault93',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_braintree_token(self, **kwargs):  # noqa: E501
        """create_braintree_token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_braintree_token(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BraintreeToken body:
        :return: InlineResponseDefault94
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_braintree_token_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_braintree_token_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_braintree_token_with_http_info(self, **kwargs):  # noqa: E501
        """create_braintree_token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_braintree_token_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BraintreeToken body:
        :return: InlineResponseDefault94
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_braintree_token" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/vaulted-gateways/braintree', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault94',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_stripe_ach_token(self, **kwargs):  # noqa: E501
        """create_stripe_ach_token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_stripe_ach_token(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StripeAchToken body:
        :return: InlineResponseDefault95
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_stripe_ach_token_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_stripe_ach_token_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_stripe_ach_token_with_http_info(self, **kwargs):  # noqa: E501
        """create_stripe_ach_token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_stripe_ach_token_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StripeAchToken body:
        :return: InlineResponseDefault95
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_stripe_ach_token" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/vaulted-gateways/stripe-ACH', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault95',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_stripe_token(self, **kwargs):  # noqa: E501
        """create_stripe_token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_stripe_token(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StripeToken body:
        :return: InlineResponseDefault96
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_stripe_token_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_stripe_token_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_stripe_token_with_http_info(self, **kwargs):  # noqa: E501
        """create_stripe_token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_stripe_token_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StripeToken body:
        :return: InlineResponseDefault96
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_stripe_token" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/vaulted-gateways/stripe', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault96',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_trust_commerce_token(self, **kwargs):  # noqa: E501
        """create_trust_commerce_token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_trust_commerce_token(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrustCommerceToken body:
        :return: InlineResponseDefault97
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_trust_commerce_token_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_trust_commerce_token_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_trust_commerce_token_with_http_info(self, **kwargs):  # noqa: E501
        """create_trust_commerce_token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_trust_commerce_token_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrustCommerceToken body:
        :return: InlineResponseDefault97
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_trust_commerce_token" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/vaulted-gateways/trustCommerce', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault97',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def display_card_capture_form(self, **kwargs):  # noqa: E501
        """display_card_capture_form  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.display_card_capture_form(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param str account_id:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.display_card_capture_form_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.display_card_capture_form_with_http_info(**kwargs)  # noqa: E501
            return data

    def display_card_capture_form_with_http_info(self, **kwargs):  # noqa: E501
        """display_card_capture_form  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.display_card_capture_form_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param str account_id:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method display_card_capture_form" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'account_id' in params:
            query_params.append(('accountID', params['account_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tokenization/card-capture-form', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def epx_card_capture(self, **kwargs):  # noqa: E501
        """epx_card_capture  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.epx_card_capture(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EpxCaptureRequest body:
        :return: InlineResponseDefault40
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.epx_card_capture_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.epx_card_capture_with_http_info(**kwargs)  # noqa: E501
            return data

    def epx_card_capture_with_http_info(self, **kwargs):  # noqa: E501
        """epx_card_capture  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.epx_card_capture_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EpxCaptureRequest body:
        :return: InlineResponseDefault40
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method epx_card_capture" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tokenization/epx', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault40',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def epx_pre_auth(self, **kwargs):  # noqa: E501
        """epx_pre_auth  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.epx_pre_auth(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EpxPreAuthRequest body:
        :return: InlineResponseDefault79
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.epx_pre_auth_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.epx_pre_auth_with_http_info(**kwargs)  # noqa: E501
            return data

    def epx_pre_auth_with_http_info(self, **kwargs):  # noqa: E501
        """epx_pre_auth  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.epx_pre_auth_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EpxPreAuthRequest body:
        :return: InlineResponseDefault79
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method epx_pre_auth" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tokenization/epx-pre-auth', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault79',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def epx_pre_auth_response(self, **kwargs):  # noqa: E501
        """epx_pre_auth_response  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.epx_pre_auth_response(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cust_nbr:
        :param str merch_nbr:
        :param str dba_nbr:
        :param str terminal_nbr:
        :param str tran_code:
        :param str amount:
        :param str auth_account:
        :param str first_name:
        :param str last_name:
        :param str exp_date:
        :param str bp_resp_code:
        :param str bp_resp_text:
        :param str bp_field_errors:
        :param str msg_version:
        :param str tran_type:
        :param str tran_nbr:
        :param str local_date:
        :param str local_time:
        :param str auth_guid:
        :param str auth_resp:
        :param str auth_code:
        :param str auth_cvv2:
        :param str auth_resp_text:
        :param str auth_card_type:
        :param str auth_tran_date_gmt:
        :param str auth_amount_requested:
        :param str auth_amount:
        :param str auth_currency_code:
        :param str network_response:
        :param str auth_masked_account_nbr:
        :param str user_data_9:
        :param str user_data_10:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.epx_pre_auth_response_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.epx_pre_auth_response_with_http_info(**kwargs)  # noqa: E501
            return data

    def epx_pre_auth_response_with_http_info(self, **kwargs):  # noqa: E501
        """epx_pre_auth_response  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.epx_pre_auth_response_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cust_nbr:
        :param str merch_nbr:
        :param str dba_nbr:
        :param str terminal_nbr:
        :param str tran_code:
        :param str amount:
        :param str auth_account:
        :param str first_name:
        :param str last_name:
        :param str exp_date:
        :param str bp_resp_code:
        :param str bp_resp_text:
        :param str bp_field_errors:
        :param str msg_version:
        :param str tran_type:
        :param str tran_nbr:
        :param str local_date:
        :param str local_time:
        :param str auth_guid:
        :param str auth_resp:
        :param str auth_code:
        :param str auth_cvv2:
        :param str auth_resp_text:
        :param str auth_card_type:
        :param str auth_tran_date_gmt:
        :param str auth_amount_requested:
        :param str auth_amount:
        :param str auth_currency_code:
        :param str network_response:
        :param str auth_masked_account_nbr:
        :param str user_data_9:
        :param str user_data_10:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cust_nbr', 'merch_nbr', 'dba_nbr', 'terminal_nbr', 'tran_code', 'amount', 'auth_account', 'first_name', 'last_name', 'exp_date', 'bp_resp_code', 'bp_resp_text', 'bp_field_errors', 'msg_version', 'tran_type', 'tran_nbr', 'local_date', 'local_time', 'auth_guid', 'auth_resp', 'auth_code', 'auth_cvv2', 'auth_resp_text', 'auth_card_type', 'auth_tran_date_gmt', 'auth_amount_requested', 'auth_amount', 'auth_currency_code', 'network_response', 'auth_masked_account_nbr', 'user_data_9', 'user_data_10']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method epx_pre_auth_response" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'cust_nbr' in params:
            form_params.append(('CUST_NBR', params['cust_nbr']))  # noqa: E501
        if 'merch_nbr' in params:
            form_params.append(('MERCH_NBR', params['merch_nbr']))  # noqa: E501
        if 'dba_nbr' in params:
            form_params.append(('DBA_NBR', params['dba_nbr']))  # noqa: E501
        if 'terminal_nbr' in params:
            form_params.append(('TERMINAL_NBR', params['terminal_nbr']))  # noqa: E501
        if 'tran_code' in params:
            form_params.append(('TRAN_CODE', params['tran_code']))  # noqa: E501
        if 'amount' in params:
            form_params.append(('AMOUNT', params['amount']))  # noqa: E501
        if 'auth_account' in params:
            form_params.append(('AUTH_ACCOUNT', params['auth_account']))  # noqa: E501
        if 'first_name' in params:
            form_params.append(('FIRST_NAME', params['first_name']))  # noqa: E501
        if 'last_name' in params:
            form_params.append(('LAST_NAME', params['last_name']))  # noqa: E501
        if 'exp_date' in params:
            form_params.append(('EXP_DATE', params['exp_date']))  # noqa: E501
        if 'bp_resp_code' in params:
            form_params.append(('BP_RESP_CODE', params['bp_resp_code']))  # noqa: E501
        if 'bp_resp_text' in params:
            form_params.append(('BP_RESP_TEXT', params['bp_resp_text']))  # noqa: E501
        if 'bp_field_errors' in params:
            form_params.append(('BP_FIELD_ERRORS', params['bp_field_errors']))  # noqa: E501
        if 'msg_version' in params:
            form_params.append(('MSG_VERSION', params['msg_version']))  # noqa: E501
        if 'tran_type' in params:
            form_params.append(('TRAN_TYPE', params['tran_type']))  # noqa: E501
        if 'tran_nbr' in params:
            form_params.append(('TRAN_NBR', params['tran_nbr']))  # noqa: E501
        if 'local_date' in params:
            form_params.append(('LOCAL_DATE', params['local_date']))  # noqa: E501
        if 'local_time' in params:
            form_params.append(('LOCAL_TIME', params['local_time']))  # noqa: E501
        if 'auth_guid' in params:
            form_params.append(('AUTH_GUID', params['auth_guid']))  # noqa: E501
        if 'auth_resp' in params:
            form_params.append(('AUTH_RESP', params['auth_resp']))  # noqa: E501
        if 'auth_code' in params:
            form_params.append(('AUTH_CODE', params['auth_code']))  # noqa: E501
        if 'auth_cvv2' in params:
            form_params.append(('AUTH_CVV2', params['auth_cvv2']))  # noqa: E501
        if 'auth_resp_text' in params:
            form_params.append(('AUTH_RESP_TEXT', params['auth_resp_text']))  # noqa: E501
        if 'auth_card_type' in params:
            form_params.append(('AUTH_CARD_TYPE', params['auth_card_type']))  # noqa: E501
        if 'auth_tran_date_gmt' in params:
            form_params.append(('AUTH_TRAN_DATE_GMT', params['auth_tran_date_gmt']))  # noqa: E501
        if 'auth_amount_requested' in params:
            form_params.append(('AUTH_AMOUNT_REQUESTED', params['auth_amount_requested']))  # noqa: E501
        if 'auth_amount' in params:
            form_params.append(('AUTH_AMOUNT', params['auth_amount']))  # noqa: E501
        if 'auth_currency_code' in params:
            form_params.append(('AUTH_CURRENCY_CODE', params['auth_currency_code']))  # noqa: E501
        if 'network_response' in params:
            form_params.append(('NETWORK_RESPONSE', params['network_response']))  # noqa: E501
        if 'auth_masked_account_nbr' in params:
            form_params.append(('AUTH_MASKED_ACCOUNT_NBR', params['auth_masked_account_nbr']))  # noqa: E501
        if 'user_data_9' in params:
            form_params.append(('USER_DATA_9', params['user_data_9']))  # noqa: E501
        if 'user_data_10' in params:
            form_params.append(('USER_DATA_10', params['user_data_10']))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tokenization/epx-redirect', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def expire_email_redirect_capture(self, id, **kwargs):  # noqa: E501
        """expire_email_redirect_capture  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.expire_email_redirect_capture(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param list[str] organizations:
        :return: InlineResponseDefault80
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.expire_email_redirect_capture_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.expire_email_redirect_capture_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def expire_email_redirect_capture_with_http_info(self, id, **kwargs):  # noqa: E501
        """expire_email_redirect_capture  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.expire_email_redirect_capture_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param list[str] organizations:
        :return: InlineResponseDefault80
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'organizations']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method expire_email_redirect_capture" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `expire_email_redirect_capture`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tokenization/email-redirect/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault80',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_email_redirect_capture(self, **kwargs):  # noqa: E501
        """get_all_email_redirect_capture  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_email_redirect_capture(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id:
        :param str subscription_id:
        :param str invoice_id:
        :param list[str] organizations:
        :return: InlineResponseDefault81
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_email_redirect_capture_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_email_redirect_capture_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_email_redirect_capture_with_http_info(self, **kwargs):  # noqa: E501
        """get_all_email_redirect_capture  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_email_redirect_capture_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id:
        :param str subscription_id:
        :param str invoice_id:
        :param list[str] organizations:
        :return: InlineResponseDefault81
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'subscription_id', 'invoice_id', 'organizations']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_email_redirect_capture" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_id' in params:
            query_params.append(('account_id', params['account_id']))  # noqa: E501
        if 'subscription_id' in params:
            query_params.append(('subscription_id', params['subscription_id']))  # noqa: E501
        if 'invoice_id' in params:
            query_params.append(('invoice_id', params['invoice_id']))  # noqa: E501
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tokenization/email-redirect', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault81',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_braintree_by_account_id(self, account_id, **kwargs):  # noqa: E501
        """get_braintree_by_account_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_braintree_by_account_id(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: (required)
        :param list[str] organizations:
        :return: InlineResponseDefault98
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_braintree_by_account_id_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_braintree_by_account_id_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def get_braintree_by_account_id_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """get_braintree_by_account_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_braintree_by_account_id_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: (required)
        :param list[str] organizations:
        :return: InlineResponseDefault98
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'organizations']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_braintree_by_account_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_braintree_by_account_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/vaulted-gateways/braintree/{accountID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault98',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_by_card_details_id(self, card_details_id, **kwargs):  # noqa: E501
        """get_by_card_details_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_by_card_details_id(card_details_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str card_details_id: (required)
        :param list[str] organizations:
        :return: InlineResponseDefault99
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_by_card_details_id_with_http_info(card_details_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_by_card_details_id_with_http_info(card_details_id, **kwargs)  # noqa: E501
            return data

    def get_by_card_details_id_with_http_info(self, card_details_id, **kwargs):  # noqa: E501
        """get_by_card_details_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_by_card_details_id_with_http_info(card_details_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str card_details_id: (required)
        :param list[str] organizations:
        :return: InlineResponseDefault99
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['card_details_id', 'organizations']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_by_card_details_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'card_details_id' is set
        if ('card_details_id' not in params or
                params['card_details_id'] is None):
            raise ValueError("Missing the required parameter `card_details_id` when calling `get_by_card_details_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'card_details_id' in params:
            path_params['cardDetailsID'] = params['card_details_id']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/vaulted-gateways/stripe/card-details-id/{cardDetailsID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault99',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_email_redirect_capture(self, id, **kwargs):  # noqa: E501
        """get_email_redirect_capture  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_email_redirect_capture(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param list[str] organizations:
        :return: InlineResponseDefault80
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_email_redirect_capture_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_email_redirect_capture_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_email_redirect_capture_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_email_redirect_capture  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_email_redirect_capture_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param list[str] organizations:
        :return: InlineResponseDefault80
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'organizations']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email_redirect_capture" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_email_redirect_capture`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tokenization/email-redirect/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault80',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_email_redirect_capture_invoice_html(self, id, **kwargs):  # noqa: E501
        """get_email_redirect_capture_invoice_html  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_email_redirect_capture_invoice_html(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param list[str] organizations:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_email_redirect_capture_invoice_html_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_email_redirect_capture_invoice_html_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_email_redirect_capture_invoice_html_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_email_redirect_capture_invoice_html  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_email_redirect_capture_invoice_html_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param list[str] organizations:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'organizations']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email_redirect_capture_invoice_html" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_email_redirect_capture_invoice_html`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tokenization/email-redirect/{id}/invoice.html', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_stripe_ach(self, stripe_ach_token_id, **kwargs):  # noqa: E501
        """get_stripe_ach  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_stripe_ach(stripe_ach_token_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stripe_ach_token_id: (required)
        :param list[str] organizations:
        :return: InlineResponseDefault100
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_stripe_ach_with_http_info(stripe_ach_token_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_stripe_ach_with_http_info(stripe_ach_token_id, **kwargs)  # noqa: E501
            return data

    def get_stripe_ach_with_http_info(self, stripe_ach_token_id, **kwargs):  # noqa: E501
        """get_stripe_ach  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_stripe_ach_with_http_info(stripe_ach_token_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stripe_ach_token_id: (required)
        :param list[str] organizations:
        :return: InlineResponseDefault100
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stripe_ach_token_id', 'organizations']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_stripe_ach" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stripe_ach_token_id' is set
        if ('stripe_ach_token_id' not in params or
                params['stripe_ach_token_id'] is None):
            raise ValueError("Missing the required parameter `stripe_ach_token_id` when calling `get_stripe_ach`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stripe_ach_token_id' in params:
            path_params['stripeACHTokenID'] = params['stripe_ach_token_id']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/vaulted-gateways/stripe-ACH/{stripeACHTokenID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault100',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_stripe_token(self, stripe_token_id, **kwargs):  # noqa: E501
        """get_stripe_token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_stripe_token(stripe_token_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stripe_token_id: (required)
        :param list[str] organizations:
        :return: InlineResponseDefault99
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_stripe_token_with_http_info(stripe_token_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_stripe_token_with_http_info(stripe_token_id, **kwargs)  # noqa: E501
            return data

    def get_stripe_token_with_http_info(self, stripe_token_id, **kwargs):  # noqa: E501
        """get_stripe_token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_stripe_token_with_http_info(stripe_token_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stripe_token_id: (required)
        :param list[str] organizations:
        :return: InlineResponseDefault99
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stripe_token_id', 'organizations']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_stripe_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stripe_token_id' is set
        if ('stripe_token_id' not in params or
                params['stripe_token_id'] is None):
            raise ValueError("Missing the required parameter `stripe_token_id` when calling `get_stripe_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stripe_token_id' in params:
            path_params['stripeTokenID'] = params['stripe_token_id']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/vaulted-gateways/stripe/{stripeTokenID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault99',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def go_cardless_bank_account_capture(self, **kwargs):  # noqa: E501
        """go_cardless_bank_account_capture  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.go_cardless_bank_account_capture(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GoCardlessTokenizationRequest body:
        :return: InlineResponseDefault40
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.go_cardless_bank_account_capture_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.go_cardless_bank_account_capture_with_http_info(**kwargs)  # noqa: E501
            return data

    def go_cardless_bank_account_capture_with_http_info(self, **kwargs):  # noqa: E501
        """go_cardless_bank_account_capture  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.go_cardless_bank_account_capture_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GoCardlessTokenizationRequest body:
        :return: InlineResponseDefault40
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method go_cardless_bank_account_capture" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tokenization/direct-debit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault40',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pay_vision_shout_v1(self, **kwargs):  # noqa: E501
        """pay_vision_shout_v1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pay_vision_shout_v1(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _resource_path:
        :param str id:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pay_vision_shout_v1_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.pay_vision_shout_v1_with_http_info(**kwargs)  # noqa: E501
            return data

    def pay_vision_shout_v1_with_http_info(self, **kwargs):  # noqa: E501
        """pay_vision_shout_v1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pay_vision_shout_v1_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _resource_path:
        :param str id:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_resource_path', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pay_vision_shout_v1" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if '_resource_path' in params:
            form_params.append(('resourcePath', params['_resource_path']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tokenization/payvision-shout-v1', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pre_auth(self, **kwargs):  # noqa: E501
        """pre_auth  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pre_auth(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TokenizationPreAuthRequest body:
        :return: InlineResponseDefault82
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pre_auth_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.pre_auth_with_http_info(**kwargs)  # noqa: E501
            return data

    def pre_auth_with_http_info(self, **kwargs):  # noqa: E501
        """pre_auth  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pre_auth_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TokenizationPreAuthRequest body:
        :return: InlineResponseDefault82
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pre_auth" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tokenization/pre-auth', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault82',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sage_pay_notify_v300(self, **kwargs):  # noqa: E501
        """sage_pay_notify_v300  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sage_pay_notify_v300(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vps_protocol:
        :param str tx_type:
        :param str vendor_tx_code:
        :param str status:
        :param str vps_tx_id:
        :param str card_type:
        :param str token:
        :param str status_detail:
        :param str last4_digits:
        :param str vps_signature:
        :param str expiry_date:
        :param list[str] organizations:
        :param str u:
        :param str access_token:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sage_pay_notify_v300_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sage_pay_notify_v300_with_http_info(**kwargs)  # noqa: E501
            return data

    def sage_pay_notify_v300_with_http_info(self, **kwargs):  # noqa: E501
        """sage_pay_notify_v300  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sage_pay_notify_v300_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vps_protocol:
        :param str tx_type:
        :param str vendor_tx_code:
        :param str status:
        :param str vps_tx_id:
        :param str card_type:
        :param str token:
        :param str status_detail:
        :param str last4_digits:
        :param str vps_signature:
        :param str expiry_date:
        :param list[str] organizations:
        :param str u:
        :param str access_token:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vps_protocol', 'tx_type', 'vendor_tx_code', 'status', 'vps_tx_id', 'card_type', 'token', 'status_detail', 'last4_digits', 'vps_signature', 'expiry_date', 'organizations', 'u', 'access_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sage_pay_notify_v300" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'u' in params:
            query_params.append(('u', params['u']))  # noqa: E501
        if 'access_token' in params:
            query_params.append(('access_token', params['access_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'vps_protocol' in params:
            form_params.append(('VPSProtocol', params['vps_protocol']))  # noqa: E501
        if 'tx_type' in params:
            form_params.append(('TxType', params['tx_type']))  # noqa: E501
        if 'vendor_tx_code' in params:
            form_params.append(('VendorTxCode', params['vendor_tx_code']))  # noqa: E501
        if 'status' in params:
            form_params.append(('Status', params['status']))  # noqa: E501
        if 'vps_tx_id' in params:
            form_params.append(('VPSTxId', params['vps_tx_id']))  # noqa: E501
        if 'card_type' in params:
            form_params.append(('CardType', params['card_type']))  # noqa: E501
        if 'token' in params:
            form_params.append(('Token', params['token']))  # noqa: E501
        if 'status_detail' in params:
            form_params.append(('StatusDetail', params['status_detail']))  # noqa: E501
        if 'last4_digits' in params:
            form_params.append(('Last4Digits', params['last4_digits']))  # noqa: E501
        if 'vps_signature' in params:
            form_params.append(('VPSSignature', params['vps_signature']))  # noqa: E501
        if 'expiry_date' in params:
            form_params.append(('ExpiryDate', params['expiry_date']))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tokenization/sagepay-notify-v3-00', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sage_pay_shout_v300(self, **kwargs):  # noqa: E501
        """sage_pay_shout_v300  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sage_pay_shout_v300(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param str s:
        :param str t:
        :param str c:
        :param str e:
        :param str l:
        :param str d:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sage_pay_shout_v300_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sage_pay_shout_v300_with_http_info(**kwargs)  # noqa: E501
            return data

    def sage_pay_shout_v300_with_http_info(self, **kwargs):  # noqa: E501
        """sage_pay_shout_v300  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sage_pay_shout_v300_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param str s:
        :param str t:
        :param str c:
        :param str e:
        :param str l:
        :param str d:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 's', 't', 'c', 'e', 'l', 'd']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sage_pay_shout_v300" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 's' in params:
            query_params.append(('s', params['s']))  # noqa: E501
        if 't' in params:
            query_params.append(('t', params['t']))  # noqa: E501
        if 'c' in params:
            query_params.append(('c', params['c']))  # noqa: E501
        if 'e' in params:
            query_params.append(('e', params['e']))  # noqa: E501
        if 'l' in params:
            query_params.append(('l', params['l']))  # noqa: E501
        if 'd' in params:
            query_params.append(('d', params['d']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tokenization/sagepay-shout-v3-00', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def send_email_redirect_capture(self, id, **kwargs):  # noqa: E501
        """send_email_redirect_capture  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_email_redirect_capture(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param EmailTokenizationSendAPIRequest body:
        :return: InlineResponseDefault80
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.send_email_redirect_capture_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.send_email_redirect_capture_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def send_email_redirect_capture_with_http_info(self, id, **kwargs):  # noqa: E501
        """send_email_redirect_capture  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_email_redirect_capture_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param EmailTokenizationSendAPIRequest body:
        :return: InlineResponseDefault80
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_email_redirect_capture" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `send_email_redirect_capture`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tokenization/email-redirect/{id}/send', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault80',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_email_redirect_capture(self, **kwargs):  # noqa: E501
        """start_email_redirect_capture  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_email_redirect_capture(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmailTokenizationCreateAPIRequest body:
        :return: InlineResponseDefault80
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.start_email_redirect_capture_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.start_email_redirect_capture_with_http_info(**kwargs)  # noqa: E501
            return data

    def start_email_redirect_capture_with_http_info(self, **kwargs):  # noqa: E501
        """start_email_redirect_capture  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_email_redirect_capture_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmailTokenizationCreateAPIRequest body:
        :return: InlineResponseDefault80
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_email_redirect_capture" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tokenization/email-redirect', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault80',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stripe_ach_bank_account_capture(self, **kwargs):  # noqa: E501
        """stripe_ach_bank_account_capture  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stripe_ach_bank_account_capture(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StripeACHCaptureRequest body:
        :return: InlineResponseDefault40
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stripe_ach_bank_account_capture_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.stripe_ach_bank_account_capture_with_http_info(**kwargs)  # noqa: E501
            return data

    def stripe_ach_bank_account_capture_with_http_info(self, **kwargs):  # noqa: E501
        """stripe_ach_bank_account_capture  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stripe_ach_bank_account_capture_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StripeACHCaptureRequest body:
        :return: InlineResponseDefault40
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stripe_ach_bank_account_capture" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tokenization/ach', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault40',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stripe_web_hook(self, **kwargs):  # noqa: E501
        """stripe_web_hook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stripe_web_hook(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stripe_web_hook_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.stripe_web_hook_with_http_info(**kwargs)  # noqa: E501
            return data

    def stripe_web_hook_with_http_info(self, **kwargs):  # noqa: E501
        """stripe_web_hook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stripe_web_hook_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stripe_web_hook" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/vaulted-gateways/stripe/webhook', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_email_redirect_capture(self, id, **kwargs):  # noqa: E501
        """update_email_redirect_capture  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_email_redirect_capture(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param EmailTokenizationUpdateAPIRequest body:
        :return: InlineResponseDefault80
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_email_redirect_capture_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_email_redirect_capture_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def update_email_redirect_capture_with_http_info(self, id, **kwargs):  # noqa: E501
        """update_email_redirect_capture  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_email_redirect_capture_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param EmailTokenizationUpdateAPIRequest body:
        :return: InlineResponseDefault80
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_email_redirect_capture" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_email_redirect_capture`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tokenization/email-redirect/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault80',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_profile_with_token(self, **kwargs):  # noqa: E501
        """update_profile_with_token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_profile_with_token(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Profile body:
        :param str request_token:
        :return: InlineResponseDefault83
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_profile_with_token_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.update_profile_with_token_with_http_info(**kwargs)  # noqa: E501
            return data

    def update_profile_with_token_with_http_info(self, **kwargs):  # noqa: E501
        """update_profile_with_token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_profile_with_token_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Profile body:
        :param str request_token:
        :return: InlineResponseDefault83
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'request_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_profile_with_token" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'request_token' in params:
            query_params.append(('request_token', params['request_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tokenization/profile', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault83',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_stripe_ach_token(self, **kwargs):  # noqa: E501
        """update_stripe_ach_token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_stripe_ach_token(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StripeAchToken body:
        :return: InlineResponseDefault95
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_stripe_ach_token_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.update_stripe_ach_token_with_http_info(**kwargs)  # noqa: E501
            return data

    def update_stripe_ach_token_with_http_info(self, **kwargs):  # noqa: E501
        """update_stripe_ach_token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_stripe_ach_token_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StripeAchToken body:
        :return: InlineResponseDefault95
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_stripe_ach_token" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/vaulted-gateways/stripe-ACH', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault95',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_stripe_token(self, **kwargs):  # noqa: E501
        """update_stripe_token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_stripe_token(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StripeToken body:
        :return: InlineResponseDefault96
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_stripe_token_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.update_stripe_token_with_http_info(**kwargs)  # noqa: E501
            return data

    def update_stripe_token_with_http_info(self, **kwargs):  # noqa: E501
        """update_stripe_token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_stripe_token_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StripeToken body:
        :return: InlineResponseDefault96
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_stripe_token" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/vaulted-gateways/stripe', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault96',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def zooz_card_capture(self, **kwargs):  # noqa: E501
        """zooz_card_capture  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.zooz_card_capture(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ZoozCaptureRequest body:
        :return: InlineResponseDefault40
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.zooz_card_capture_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.zooz_card_capture_with_http_info(**kwargs)  # noqa: E501
            return data

    def zooz_card_capture_with_http_info(self, **kwargs):  # noqa: E501
        """zooz_card_capture  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.zooz_card_capture_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ZoozCaptureRequest body:
        :return: InlineResponseDefault40
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method zooz_card_capture" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tokenization/zooz', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault40',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def zooz_web_hook(self, **kwargs):  # noqa: E501
        """zooz_web_hook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.zooz_web_hook(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.zooz_web_hook_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.zooz_web_hook_with_http_info(**kwargs)  # noqa: E501
            return data

    def zooz_web_hook_with_http_info(self, **kwargs):  # noqa: E501
        """zooz_web_hook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.zooz_web_hook_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method zooz_web_hook" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/vaulted-gateways/zooz/webhook', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
