# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from billforward.api_client import ApiClient


class CheckoutApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def build_subscription_checkout(self, checkout_definition_path, **kwargs):  # noqa: E501
        """build_subscription_checkout  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.build_subscription_checkout(checkout_definition_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str checkout_definition_path: (required)
        :param list[str] organizations:
        :return: InlineResponseDefault50
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.build_subscription_checkout_with_http_info(checkout_definition_path, **kwargs)  # noqa: E501
        else:
            (data) = self.build_subscription_checkout_with_http_info(checkout_definition_path, **kwargs)  # noqa: E501
            return data

    def build_subscription_checkout_with_http_info(self, checkout_definition_path, **kwargs):  # noqa: E501
        """build_subscription_checkout  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.build_subscription_checkout_with_http_info(checkout_definition_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str checkout_definition_path: (required)
        :param list[str] organizations:
        :return: InlineResponseDefault50
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['checkout_definition_path', 'organizations']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method build_subscription_checkout" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'checkout_definition_path' is set
        if ('checkout_definition_path' not in params or
                params['checkout_definition_path'] is None):
            raise ValueError("Missing the required parameter `checkout_definition_path` when calling `build_subscription_checkout`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'checkout_definition_path' in params:
            path_params['checkout-definition-path'] = params['checkout_definition_path']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/public/checkouts/subscriptions/{checkout-definition-path}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault50',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_account1(self, **kwargs):  # noqa: E501
        """create_account1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_account1(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Account body:
        :return: InlineResponseDefault6
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_account1_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_account1_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_account1_with_http_info(self, **kwargs):  # noqa: E501
        """create_account1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_account1_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Account body:
        :return: InlineResponseDefault6
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_account1" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/public/accounts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault6',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_subscription_checkout_definition(self, **kwargs):  # noqa: E501
        """create_subscription_checkout_definition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_subscription_checkout_definition(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateSubscriptionCheckoutDefinitionRequest body:
        :return: InlineResponseDefault17
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_subscription_checkout_definition_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_subscription_checkout_definition_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_subscription_checkout_definition_with_http_info(self, **kwargs):  # noqa: E501
        """create_subscription_checkout_definition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_subscription_checkout_definition_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateSubscriptionCheckoutDefinitionRequest body:
        :return: InlineResponseDefault17
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_subscription_checkout_definition" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/checkouts/subscriptions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault17',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_subscription_checkout_definition(self, checkout_definition_path, **kwargs):  # noqa: E501
        """get_subscription_checkout_definition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_subscription_checkout_definition(checkout_definition_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str checkout_definition_path: (required)
        :param list[str] organizations:
        :return: InlineResponseDefault17
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_subscription_checkout_definition_with_http_info(checkout_definition_path, **kwargs)  # noqa: E501
        else:
            (data) = self.get_subscription_checkout_definition_with_http_info(checkout_definition_path, **kwargs)  # noqa: E501
            return data

    def get_subscription_checkout_definition_with_http_info(self, checkout_definition_path, **kwargs):  # noqa: E501
        """get_subscription_checkout_definition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_subscription_checkout_definition_with_http_info(checkout_definition_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str checkout_definition_path: (required)
        :param list[str] organizations:
        :return: InlineResponseDefault17
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['checkout_definition_path', 'organizations']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subscription_checkout_definition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'checkout_definition_path' is set
        if ('checkout_definition_path' not in params or
                params['checkout_definition_path'] is None):
            raise ValueError("Missing the required parameter `checkout_definition_path` when calling `get_subscription_checkout_definition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'checkout_definition_path' in params:
            path_params['checkout-definition-path'] = params['checkout_definition_path']  # noqa: E501

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/checkouts/subscriptions/{checkout-definition-path}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault17',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def subscription_checkout(self, **kwargs):  # noqa: E501
        """subscription_checkout  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.subscription_checkout(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SubscriptionCheckoutActionRequest body:
        :return: InlineResponseDefault51
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.subscription_checkout_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.subscription_checkout_with_http_info(**kwargs)  # noqa: E501
            return data

    def subscription_checkout_with_http_info(self, **kwargs):  # noqa: E501
        """subscription_checkout  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.subscription_checkout_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SubscriptionCheckoutActionRequest body:
        :return: InlineResponseDefault51
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method subscription_checkout" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/public/checkouts/subscriptions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault51',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
