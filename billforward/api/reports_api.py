# coding: utf-8

"""
    Billforward API

    This is documentation for the Billforward API. You can find out more at billforward.io.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: team@billforward.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from billforward.api_client import ApiClient


class ReportsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_accounts_overview(self, **kwargs):  # noqa: E501
        """get_accounts_overview  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_accounts_overview(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param str date_discriminator:
        :param SimpleDateParam recognition_start:
        :param SimpleDateParam recognition_end:
        :param str date_interval_inclusivity:
        :param str date_time_format:
        :param str date_granularity:
        :param str boolean_format:
        :param str monetary_amount_format:
        :param list[str] meta_column_account:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_accounts_overview_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_accounts_overview_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_accounts_overview_with_http_info(self, **kwargs):  # noqa: E501
        """get_accounts_overview  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_accounts_overview_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param str date_discriminator:
        :param SimpleDateParam recognition_start:
        :param SimpleDateParam recognition_end:
        :param str date_interval_inclusivity:
        :param str date_time_format:
        :param str date_granularity:
        :param str boolean_format:
        :param str monetary_amount_format:
        :param list[str] meta_column_account:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'date_discriminator', 'recognition_start', 'recognition_end', 'date_interval_inclusivity', 'date_time_format', 'date_granularity', 'boolean_format', 'monetary_amount_format', 'meta_column_account']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_accounts_overview" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'date_discriminator' in params:
            query_params.append(('date_discriminator', params['date_discriminator']))  # noqa: E501
        if 'recognition_start' in params:
            query_params.append(('recognition_start', params['recognition_start']))  # noqa: E501
        if 'recognition_end' in params:
            query_params.append(('recognition_end', params['recognition_end']))  # noqa: E501
        if 'date_interval_inclusivity' in params:
            query_params.append(('date_interval_inclusivity', params['date_interval_inclusivity']))  # noqa: E501
        if 'date_time_format' in params:
            query_params.append(('date_time_format', params['date_time_format']))  # noqa: E501
        if 'date_granularity' in params:
            query_params.append(('date_granularity', params['date_granularity']))  # noqa: E501
        if 'boolean_format' in params:
            query_params.append(('boolean_format', params['boolean_format']))  # noqa: E501
        if 'monetary_amount_format' in params:
            query_params.append(('monetary_amount_format', params['monetary_amount_format']))  # noqa: E501
        if 'meta_column_account' in params:
            query_params.append(('meta_column_account[]', params['meta_column_account']))  # noqa: E501
            collection_formats['meta_column_account[]'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/reports/accounts/overview.csv', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_affiliate_charge_report(self, **kwargs):  # noqa: E501
        """get_affiliate_charge_report  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_affiliate_charge_report(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param SimpleDateParam recognition_start:
        :param SimpleDateParam recognition_end:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_affiliate_charge_report_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_affiliate_charge_report_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_affiliate_charge_report_with_http_info(self, **kwargs):  # noqa: E501
        """get_affiliate_charge_report  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_affiliate_charge_report_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param SimpleDateParam recognition_start:
        :param SimpleDateParam recognition_end:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'recognition_start', 'recognition_end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_affiliate_charge_report" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'recognition_start' in params:
            query_params.append(('recognition_start', params['recognition_start']))  # noqa: E501
        if 'recognition_end' in params:
            query_params.append(('recognition_end', params['recognition_end']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/reports/affiliate/overview.csv', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_coupon_report(self, **kwargs):  # noqa: E501
        """get_coupon_report  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_coupon_report(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param SimpleDateParam recognition_start:
        :param SimpleDateParam recognition_end:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_coupon_report_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_coupon_report_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_coupon_report_with_http_info(self, **kwargs):  # noqa: E501
        """get_coupon_report  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_coupon_report_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param SimpleDateParam recognition_start:
        :param SimpleDateParam recognition_end:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'recognition_start', 'recognition_end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_coupon_report" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'recognition_start' in params:
            query_params.append(('recognition_start', params['recognition_start']))  # noqa: E501
        if 'recognition_end' in params:
            query_params.append(('recognition_end', params['recognition_end']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/reports/coupons/overview.csv', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_csv_report_invoice_line_payments_bucketed(self, **kwargs):  # noqa: E501
        """get_csv_report_invoice_line_payments_bucketed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_csv_report_invoice_line_payments_bucketed(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param str payment_direction:
        :param str bucket_type:
        :param str date_discriminator:
        :param SimpleDateParam recognition_start:
        :param SimpleDateParam recognition_end:
        :param list[str] include_gateway:
        :param list[str] exclude_gateway:
        :param list[str] accounts:
        :param list[str] subscriptions:
        :param str date_interval_inclusivity:
        :param str date_time_format:
        :param str date_granularity:
        :param str boolean_format:
        :param str monetary_amount_format:
        :param list[str] meta_column_account:
        :param list[str] meta_column_sub_child:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_csv_report_invoice_line_payments_bucketed_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_csv_report_invoice_line_payments_bucketed_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_csv_report_invoice_line_payments_bucketed_with_http_info(self, **kwargs):  # noqa: E501
        """get_csv_report_invoice_line_payments_bucketed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_csv_report_invoice_line_payments_bucketed_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param str payment_direction:
        :param str bucket_type:
        :param str date_discriminator:
        :param SimpleDateParam recognition_start:
        :param SimpleDateParam recognition_end:
        :param list[str] include_gateway:
        :param list[str] exclude_gateway:
        :param list[str] accounts:
        :param list[str] subscriptions:
        :param str date_interval_inclusivity:
        :param str date_time_format:
        :param str date_granularity:
        :param str boolean_format:
        :param str monetary_amount_format:
        :param list[str] meta_column_account:
        :param list[str] meta_column_sub_child:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'payment_direction', 'bucket_type', 'date_discriminator', 'recognition_start', 'recognition_end', 'include_gateway', 'exclude_gateway', 'accounts', 'subscriptions', 'date_interval_inclusivity', 'date_time_format', 'date_granularity', 'boolean_format', 'monetary_amount_format', 'meta_column_account', 'meta_column_sub_child']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_csv_report_invoice_line_payments_bucketed" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'payment_direction' in params:
            query_params.append(('payment_direction', params['payment_direction']))  # noqa: E501
        if 'bucket_type' in params:
            query_params.append(('bucket_type', params['bucket_type']))  # noqa: E501
        if 'date_discriminator' in params:
            query_params.append(('date_discriminator', params['date_discriminator']))  # noqa: E501
        if 'recognition_start' in params:
            query_params.append(('recognition_start', params['recognition_start']))  # noqa: E501
        if 'recognition_end' in params:
            query_params.append(('recognition_end', params['recognition_end']))  # noqa: E501
        if 'include_gateway' in params:
            query_params.append(('include_gateway', params['include_gateway']))  # noqa: E501
            collection_formats['include_gateway'] = 'multi'  # noqa: E501
        if 'exclude_gateway' in params:
            query_params.append(('exclude_gateway', params['exclude_gateway']))  # noqa: E501
            collection_formats['exclude_gateway'] = 'multi'  # noqa: E501
        if 'accounts' in params:
            query_params.append(('accounts', params['accounts']))  # noqa: E501
            collection_formats['accounts'] = 'multi'  # noqa: E501
        if 'subscriptions' in params:
            query_params.append(('subscriptions', params['subscriptions']))  # noqa: E501
            collection_formats['subscriptions'] = 'multi'  # noqa: E501
        if 'date_interval_inclusivity' in params:
            query_params.append(('date_interval_inclusivity', params['date_interval_inclusivity']))  # noqa: E501
        if 'date_time_format' in params:
            query_params.append(('date_time_format', params['date_time_format']))  # noqa: E501
        if 'date_granularity' in params:
            query_params.append(('date_granularity', params['date_granularity']))  # noqa: E501
        if 'boolean_format' in params:
            query_params.append(('boolean_format', params['boolean_format']))  # noqa: E501
        if 'monetary_amount_format' in params:
            query_params.append(('monetary_amount_format', params['monetary_amount_format']))  # noqa: E501
        if 'meta_column_account' in params:
            query_params.append(('meta_column_account[]', params['meta_column_account']))  # noqa: E501
            collection_formats['meta_column_account[]'] = 'multi'  # noqa: E501
        if 'meta_column_sub_child' in params:
            query_params.append(('meta_column_sub_child[]', params['meta_column_sub_child']))  # noqa: E501
            collection_formats['meta_column_sub_child[]'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/reports/fulfilled/bucketed.csv', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_csv_report_invoice_line_payments_raw(self, **kwargs):  # noqa: E501
        """get_csv_report_invoice_line_payments_raw  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_csv_report_invoice_line_payments_raw(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param str payment_direction:
        :param str date_discriminator:
        :param SimpleDateParam recognition_start:
        :param SimpleDateParam recognition_end:
        :param list[str] include_gateway:
        :param list[str] exclude_gateway:
        :param list[str] accounts:
        :param list[str] subscriptions:
        :param str date_interval_inclusivity:
        :param str date_time_format:
        :param str date_granularity:
        :param str boolean_format:
        :param str monetary_amount_format:
        :param list[str] meta_column_account:
        :param list[str] meta_column_sub_child:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_csv_report_invoice_line_payments_raw_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_csv_report_invoice_line_payments_raw_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_csv_report_invoice_line_payments_raw_with_http_info(self, **kwargs):  # noqa: E501
        """get_csv_report_invoice_line_payments_raw  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_csv_report_invoice_line_payments_raw_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param str payment_direction:
        :param str date_discriminator:
        :param SimpleDateParam recognition_start:
        :param SimpleDateParam recognition_end:
        :param list[str] include_gateway:
        :param list[str] exclude_gateway:
        :param list[str] accounts:
        :param list[str] subscriptions:
        :param str date_interval_inclusivity:
        :param str date_time_format:
        :param str date_granularity:
        :param str boolean_format:
        :param str monetary_amount_format:
        :param list[str] meta_column_account:
        :param list[str] meta_column_sub_child:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'payment_direction', 'date_discriminator', 'recognition_start', 'recognition_end', 'include_gateway', 'exclude_gateway', 'accounts', 'subscriptions', 'date_interval_inclusivity', 'date_time_format', 'date_granularity', 'boolean_format', 'monetary_amount_format', 'meta_column_account', 'meta_column_sub_child']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_csv_report_invoice_line_payments_raw" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'payment_direction' in params:
            query_params.append(('payment_direction', params['payment_direction']))  # noqa: E501
        if 'date_discriminator' in params:
            query_params.append(('date_discriminator', params['date_discriminator']))  # noqa: E501
        if 'recognition_start' in params:
            query_params.append(('recognition_start', params['recognition_start']))  # noqa: E501
        if 'recognition_end' in params:
            query_params.append(('recognition_end', params['recognition_end']))  # noqa: E501
        if 'include_gateway' in params:
            query_params.append(('include_gateway', params['include_gateway']))  # noqa: E501
            collection_formats['include_gateway'] = 'multi'  # noqa: E501
        if 'exclude_gateway' in params:
            query_params.append(('exclude_gateway', params['exclude_gateway']))  # noqa: E501
            collection_formats['exclude_gateway'] = 'multi'  # noqa: E501
        if 'accounts' in params:
            query_params.append(('accounts', params['accounts']))  # noqa: E501
            collection_formats['accounts'] = 'multi'  # noqa: E501
        if 'subscriptions' in params:
            query_params.append(('subscriptions', params['subscriptions']))  # noqa: E501
            collection_formats['subscriptions'] = 'multi'  # noqa: E501
        if 'date_interval_inclusivity' in params:
            query_params.append(('date_interval_inclusivity', params['date_interval_inclusivity']))  # noqa: E501
        if 'date_time_format' in params:
            query_params.append(('date_time_format', params['date_time_format']))  # noqa: E501
        if 'date_granularity' in params:
            query_params.append(('date_granularity', params['date_granularity']))  # noqa: E501
        if 'boolean_format' in params:
            query_params.append(('boolean_format', params['boolean_format']))  # noqa: E501
        if 'monetary_amount_format' in params:
            query_params.append(('monetary_amount_format', params['monetary_amount_format']))  # noqa: E501
        if 'meta_column_account' in params:
            query_params.append(('meta_column_account[]', params['meta_column_account']))  # noqa: E501
            collection_formats['meta_column_account[]'] = 'multi'  # noqa: E501
        if 'meta_column_sub_child' in params:
            query_params.append(('meta_column_sub_child[]', params['meta_column_sub_child']))  # noqa: E501
            collection_formats['meta_column_sub_child[]'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/reports/fulfilled/raw.csv', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_csv_report_revenue_attributions_bucketed(self, **kwargs):  # noqa: E501
        """get_csv_report_revenue_attributions_bucketed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_csv_report_revenue_attributions_bucketed(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param str date_discriminator:
        :param SimpleDateParam recognition_start:
        :param SimpleDateParam recognition_end:
        :param str date_interval_inclusivity:
        :param str date_time_format:
        :param str date_granularity:
        :param str boolean_format:
        :param str monetary_amount_format:
        :param list[str] meta_column_account:
        :param list[str] meta_column_sub_child:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_csv_report_revenue_attributions_bucketed_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_csv_report_revenue_attributions_bucketed_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_csv_report_revenue_attributions_bucketed_with_http_info(self, **kwargs):  # noqa: E501
        """get_csv_report_revenue_attributions_bucketed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_csv_report_revenue_attributions_bucketed_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param str date_discriminator:
        :param SimpleDateParam recognition_start:
        :param SimpleDateParam recognition_end:
        :param str date_interval_inclusivity:
        :param str date_time_format:
        :param str date_granularity:
        :param str boolean_format:
        :param str monetary_amount_format:
        :param list[str] meta_column_account:
        :param list[str] meta_column_sub_child:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'date_discriminator', 'recognition_start', 'recognition_end', 'date_interval_inclusivity', 'date_time_format', 'date_granularity', 'boolean_format', 'monetary_amount_format', 'meta_column_account', 'meta_column_sub_child']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_csv_report_revenue_attributions_bucketed" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'date_discriminator' in params:
            query_params.append(('date_discriminator', params['date_discriminator']))  # noqa: E501
        if 'recognition_start' in params:
            query_params.append(('recognition_start', params['recognition_start']))  # noqa: E501
        if 'recognition_end' in params:
            query_params.append(('recognition_end', params['recognition_end']))  # noqa: E501
        if 'date_interval_inclusivity' in params:
            query_params.append(('date_interval_inclusivity', params['date_interval_inclusivity']))  # noqa: E501
        if 'date_time_format' in params:
            query_params.append(('date_time_format', params['date_time_format']))  # noqa: E501
        if 'date_granularity' in params:
            query_params.append(('date_granularity', params['date_granularity']))  # noqa: E501
        if 'boolean_format' in params:
            query_params.append(('boolean_format', params['boolean_format']))  # noqa: E501
        if 'monetary_amount_format' in params:
            query_params.append(('monetary_amount_format', params['monetary_amount_format']))  # noqa: E501
        if 'meta_column_account' in params:
            query_params.append(('meta_column_account[]', params['meta_column_account']))  # noqa: E501
            collection_formats['meta_column_account[]'] = 'multi'  # noqa: E501
        if 'meta_column_sub_child' in params:
            query_params.append(('meta_column_sub_child[]', params['meta_column_sub_child']))  # noqa: E501
            collection_formats['meta_column_sub_child[]'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/reports/invoiced/bucketed.csv', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_csv_report_revenue_attributions_raw(self, **kwargs):  # noqa: E501
        """get_csv_report_revenue_attributions_raw  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_csv_report_revenue_attributions_raw(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param str date_discriminator:
        :param SimpleDateParam recognition_start:
        :param SimpleDateParam recognition_end:
        :param str date_interval_inclusivity:
        :param str date_time_format:
        :param str date_granularity:
        :param str boolean_format:
        :param str monetary_amount_format:
        :param list[str] meta_column_account:
        :param list[str] meta_column_sub_child:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_csv_report_revenue_attributions_raw_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_csv_report_revenue_attributions_raw_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_csv_report_revenue_attributions_raw_with_http_info(self, **kwargs):  # noqa: E501
        """get_csv_report_revenue_attributions_raw  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_csv_report_revenue_attributions_raw_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param str date_discriminator:
        :param SimpleDateParam recognition_start:
        :param SimpleDateParam recognition_end:
        :param str date_interval_inclusivity:
        :param str date_time_format:
        :param str date_granularity:
        :param str boolean_format:
        :param str monetary_amount_format:
        :param list[str] meta_column_account:
        :param list[str] meta_column_sub_child:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'date_discriminator', 'recognition_start', 'recognition_end', 'date_interval_inclusivity', 'date_time_format', 'date_granularity', 'boolean_format', 'monetary_amount_format', 'meta_column_account', 'meta_column_sub_child']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_csv_report_revenue_attributions_raw" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'date_discriminator' in params:
            query_params.append(('date_discriminator', params['date_discriminator']))  # noqa: E501
        if 'recognition_start' in params:
            query_params.append(('recognition_start', params['recognition_start']))  # noqa: E501
        if 'recognition_end' in params:
            query_params.append(('recognition_end', params['recognition_end']))  # noqa: E501
        if 'date_interval_inclusivity' in params:
            query_params.append(('date_interval_inclusivity', params['date_interval_inclusivity']))  # noqa: E501
        if 'date_time_format' in params:
            query_params.append(('date_time_format', params['date_time_format']))  # noqa: E501
        if 'date_granularity' in params:
            query_params.append(('date_granularity', params['date_granularity']))  # noqa: E501
        if 'boolean_format' in params:
            query_params.append(('boolean_format', params['boolean_format']))  # noqa: E501
        if 'monetary_amount_format' in params:
            query_params.append(('monetary_amount_format', params['monetary_amount_format']))  # noqa: E501
        if 'meta_column_account' in params:
            query_params.append(('meta_column_account[]', params['meta_column_account']))  # noqa: E501
            collection_formats['meta_column_account[]'] = 'multi'  # noqa: E501
        if 'meta_column_sub_child' in params:
            query_params.append(('meta_column_sub_child[]', params['meta_column_sub_child']))  # noqa: E501
            collection_formats['meta_column_sub_child[]'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/reports/invoiced/raw.csv', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_csv_revenue_schedule(self, **kwargs):  # noqa: E501
        """get_csv_revenue_schedule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_csv_revenue_schedule(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param SimpleDateParam recognition_start:
        :param SimpleDateParam recognition_end:
        :param list[str] include_gateway:
        :param list[str] exclude_gateway:
        :param str bucket_by:
        :param list[str] group_by:
        :param bool pivot_by_dates:
        :param bool include_detailed_lines:
        :param list[str] accounts:
        :param list[str] subscriptions:
        :param list[str] plans:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_csv_revenue_schedule_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_csv_revenue_schedule_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_csv_revenue_schedule_with_http_info(self, **kwargs):  # noqa: E501
        """get_csv_revenue_schedule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_csv_revenue_schedule_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param SimpleDateParam recognition_start:
        :param SimpleDateParam recognition_end:
        :param list[str] include_gateway:
        :param list[str] exclude_gateway:
        :param str bucket_by:
        :param list[str] group_by:
        :param bool pivot_by_dates:
        :param bool include_detailed_lines:
        :param list[str] accounts:
        :param list[str] subscriptions:
        :param list[str] plans:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'recognition_start', 'recognition_end', 'include_gateway', 'exclude_gateway', 'bucket_by', 'group_by', 'pivot_by_dates', 'include_detailed_lines', 'accounts', 'subscriptions', 'plans']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_csv_revenue_schedule" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'recognition_start' in params:
            query_params.append(('recognition_start', params['recognition_start']))  # noqa: E501
        if 'recognition_end' in params:
            query_params.append(('recognition_end', params['recognition_end']))  # noqa: E501
        if 'include_gateway' in params:
            query_params.append(('include_gateway', params['include_gateway']))  # noqa: E501
            collection_formats['include_gateway'] = 'multi'  # noqa: E501
        if 'exclude_gateway' in params:
            query_params.append(('exclude_gateway', params['exclude_gateway']))  # noqa: E501
            collection_formats['exclude_gateway'] = 'multi'  # noqa: E501
        if 'bucket_by' in params:
            query_params.append(('bucket_by', params['bucket_by']))  # noqa: E501
        if 'group_by' in params:
            query_params.append(('group_by', params['group_by']))  # noqa: E501
            collection_formats['group_by'] = 'multi'  # noqa: E501
        if 'pivot_by_dates' in params:
            query_params.append(('pivot_by_dates', params['pivot_by_dates']))  # noqa: E501
        if 'include_detailed_lines' in params:
            query_params.append(('include_detailed_lines', params['include_detailed_lines']))  # noqa: E501
        if 'accounts' in params:
            query_params.append(('accounts', params['accounts']))  # noqa: E501
            collection_formats['accounts'] = 'multi'  # noqa: E501
        if 'subscriptions' in params:
            query_params.append(('subscriptions', params['subscriptions']))  # noqa: E501
            collection_formats['subscriptions'] = 'multi'  # noqa: E501
        if 'plans' in params:
            query_params.append(('plans', params['plans']))  # noqa: E501
            collection_formats['plans'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/reports/revenue-schedule/raw.csv', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_payment_transactions(self, **kwargs):  # noqa: E501
        """get_payment_transactions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment_transactions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param str date_discriminator:
        :param SimpleDateParam recognition_start:
        :param SimpleDateParam recognition_end:
        :param list[str] include_gateway:
        :param list[str] exclude_gateway:
        :param str date_interval_inclusivity:
        :param str date_time_format:
        :param str date_granularity:
        :param str boolean_format:
        :param str monetary_amount_format:
        :param list[str] meta_column_account:
        :param list[str] meta_column_sub_child:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_payment_transactions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_payment_transactions_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_payment_transactions_with_http_info(self, **kwargs):  # noqa: E501
        """get_payment_transactions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment_transactions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param str date_discriminator:
        :param SimpleDateParam recognition_start:
        :param SimpleDateParam recognition_end:
        :param list[str] include_gateway:
        :param list[str] exclude_gateway:
        :param str date_interval_inclusivity:
        :param str date_time_format:
        :param str date_granularity:
        :param str boolean_format:
        :param str monetary_amount_format:
        :param list[str] meta_column_account:
        :param list[str] meta_column_sub_child:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'date_discriminator', 'recognition_start', 'recognition_end', 'include_gateway', 'exclude_gateway', 'date_interval_inclusivity', 'date_time_format', 'date_granularity', 'boolean_format', 'monetary_amount_format', 'meta_column_account', 'meta_column_sub_child']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payment_transactions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'date_discriminator' in params:
            query_params.append(('date_discriminator', params['date_discriminator']))  # noqa: E501
        if 'recognition_start' in params:
            query_params.append(('recognition_start', params['recognition_start']))  # noqa: E501
        if 'recognition_end' in params:
            query_params.append(('recognition_end', params['recognition_end']))  # noqa: E501
        if 'include_gateway' in params:
            query_params.append(('include_gateway', params['include_gateway']))  # noqa: E501
            collection_formats['include_gateway'] = 'multi'  # noqa: E501
        if 'exclude_gateway' in params:
            query_params.append(('exclude_gateway', params['exclude_gateway']))  # noqa: E501
            collection_formats['exclude_gateway'] = 'multi'  # noqa: E501
        if 'date_interval_inclusivity' in params:
            query_params.append(('date_interval_inclusivity', params['date_interval_inclusivity']))  # noqa: E501
        if 'date_time_format' in params:
            query_params.append(('date_time_format', params['date_time_format']))  # noqa: E501
        if 'date_granularity' in params:
            query_params.append(('date_granularity', params['date_granularity']))  # noqa: E501
        if 'boolean_format' in params:
            query_params.append(('boolean_format', params['boolean_format']))  # noqa: E501
        if 'monetary_amount_format' in params:
            query_params.append(('monetary_amount_format', params['monetary_amount_format']))  # noqa: E501
        if 'meta_column_account' in params:
            query_params.append(('meta_column_account[]', params['meta_column_account']))  # noqa: E501
            collection_formats['meta_column_account[]'] = 'multi'  # noqa: E501
        if 'meta_column_sub_child' in params:
            query_params.append(('meta_column_sub_child[]', params['meta_column_sub_child']))  # noqa: E501
            collection_formats['meta_column_sub_child[]'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/reports/transactions/payments.csv', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_refunds_as_csv(self, **kwargs):  # noqa: E501
        """get_refunds_as_csv  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_refunds_as_csv(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param SimpleDateParam completed_start:
        :param SimpleDateParam completed_end:
        :param int offset:
        :param int records:
        :param str order_by:
        :param str order:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_refunds_as_csv_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_refunds_as_csv_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_refunds_as_csv_with_http_info(self, **kwargs):  # noqa: E501
        """get_refunds_as_csv  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_refunds_as_csv_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param SimpleDateParam completed_start:
        :param SimpleDateParam completed_end:
        :param int offset:
        :param int records:
        :param str order_by:
        :param str order:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'completed_start', 'completed_end', 'offset', 'records', 'order_by', 'order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_refunds_as_csv" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'completed_start' in params:
            query_params.append(('completed_start', params['completed_start']))  # noqa: E501
        if 'completed_end' in params:
            query_params.append(('completed_end', params['completed_end']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'records' in params:
            query_params.append(('records', params['records']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/refunds/csv', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_shipments_report(self, **kwargs):  # noqa: E501
        """get_shipments_report  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_shipments_report(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param SimpleDateParam recognition_start:
        :param SimpleDateParam recognition_end:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_shipments_report_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_shipments_report_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_shipments_report_with_http_info(self, **kwargs):  # noqa: E501
        """get_shipments_report  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_shipments_report_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param SimpleDateParam recognition_start:
        :param SimpleDateParam recognition_end:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'recognition_start', 'recognition_end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_shipments_report" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'recognition_start' in params:
            query_params.append(('recognition_start', params['recognition_start']))  # noqa: E501
        if 'recognition_end' in params:
            query_params.append(('recognition_end', params['recognition_end']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/reports/shipments/overview.csv', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_subscriptions_overview(self, **kwargs):  # noqa: E501
        """get_subscriptions_overview  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_subscriptions_overview(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param str date_discriminator:
        :param SimpleDateParam recognition_start:
        :param SimpleDateParam recognition_end:
        :param str date_interval_inclusivity:
        :param str date_time_format:
        :param str date_granularity:
        :param str boolean_format:
        :param str monetary_amount_format:
        :param list[str] meta_column_account:
        :param list[str] meta_column_sub:
        :param list[str] account_id:
        :param list[str] subscription_id:
        :param list[str] parent_sub_id:
        :param list[str] product_id:
        :param list[str] rate_plan_id:
        :param bool exclude_child_subs:
        :param bool exclude_parentless_subs:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_subscriptions_overview_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_subscriptions_overview_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_subscriptions_overview_with_http_info(self, **kwargs):  # noqa: E501
        """get_subscriptions_overview  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_subscriptions_overview_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] organizations:
        :param str date_discriminator:
        :param SimpleDateParam recognition_start:
        :param SimpleDateParam recognition_end:
        :param str date_interval_inclusivity:
        :param str date_time_format:
        :param str date_granularity:
        :param str boolean_format:
        :param str monetary_amount_format:
        :param list[str] meta_column_account:
        :param list[str] meta_column_sub:
        :param list[str] account_id:
        :param list[str] subscription_id:
        :param list[str] parent_sub_id:
        :param list[str] product_id:
        :param list[str] rate_plan_id:
        :param bool exclude_child_subs:
        :param bool exclude_parentless_subs:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'date_discriminator', 'recognition_start', 'recognition_end', 'date_interval_inclusivity', 'date_time_format', 'date_granularity', 'boolean_format', 'monetary_amount_format', 'meta_column_account', 'meta_column_sub', 'account_id', 'subscription_id', 'parent_sub_id', 'product_id', 'rate_plan_id', 'exclude_child_subs', 'exclude_parentless_subs']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subscriptions_overview" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
            collection_formats['organizations'] = 'multi'  # noqa: E501
        if 'date_discriminator' in params:
            query_params.append(('date_discriminator', params['date_discriminator']))  # noqa: E501
        if 'recognition_start' in params:
            query_params.append(('recognition_start', params['recognition_start']))  # noqa: E501
        if 'recognition_end' in params:
            query_params.append(('recognition_end', params['recognition_end']))  # noqa: E501
        if 'date_interval_inclusivity' in params:
            query_params.append(('date_interval_inclusivity', params['date_interval_inclusivity']))  # noqa: E501
        if 'date_time_format' in params:
            query_params.append(('date_time_format', params['date_time_format']))  # noqa: E501
        if 'date_granularity' in params:
            query_params.append(('date_granularity', params['date_granularity']))  # noqa: E501
        if 'boolean_format' in params:
            query_params.append(('boolean_format', params['boolean_format']))  # noqa: E501
        if 'monetary_amount_format' in params:
            query_params.append(('monetary_amount_format', params['monetary_amount_format']))  # noqa: E501
        if 'meta_column_account' in params:
            query_params.append(('meta_column_account[]', params['meta_column_account']))  # noqa: E501
            collection_formats['meta_column_account[]'] = 'multi'  # noqa: E501
        if 'meta_column_sub' in params:
            query_params.append(('meta_column_sub[]', params['meta_column_sub']))  # noqa: E501
            collection_formats['meta_column_sub[]'] = 'multi'  # noqa: E501
        if 'account_id' in params:
            query_params.append(('account_id[]', params['account_id']))  # noqa: E501
            collection_formats['account_id[]'] = 'multi'  # noqa: E501
        if 'subscription_id' in params:
            query_params.append(('subscription_id[]', params['subscription_id']))  # noqa: E501
            collection_formats['subscription_id[]'] = 'multi'  # noqa: E501
        if 'parent_sub_id' in params:
            query_params.append(('parent_sub_id[]', params['parent_sub_id']))  # noqa: E501
            collection_formats['parent_sub_id[]'] = 'multi'  # noqa: E501
        if 'product_id' in params:
            query_params.append(('product_id[]', params['product_id']))  # noqa: E501
            collection_formats['product_id[]'] = 'multi'  # noqa: E501
        if 'rate_plan_id' in params:
            query_params.append(('rate_plan_id[]', params['rate_plan_id']))  # noqa: E501
            collection_formats['rate_plan_id[]'] = 'multi'  # noqa: E501
        if 'exclude_child_subs' in params:
            query_params.append(('exclude_child_subs', params['exclude_child_subs']))  # noqa: E501
        if 'exclude_parentless_subs' in params:
            query_params.append(('exclude_parentless_subs', params['exclude_parentless_subs']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/reports/subscriptions/overview.csv', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
