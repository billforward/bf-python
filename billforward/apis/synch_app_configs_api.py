# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class SynchAppConfigsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_sync_app_config(self, synch_app_config, **kwargs):
        """
        Create a synch app configuration.
        {\"nickname\":\"Create a new synch app configuration\",\"request\":\"createSynchAppConfigurationRequest.html\",\"response\":\"createSynchAppConfigurationResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_sync_app_config(synch_app_config, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MutableBillingEntity synch_app_config: The data synch app config object to be created. (required)
        :return: DataSynchronisationAppConfigurationPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_sync_app_config_with_http_info(synch_app_config, **kwargs)
        else:
            (data) = self.create_sync_app_config_with_http_info(synch_app_config, **kwargs)
            return data

    def create_sync_app_config_with_http_info(self, synch_app_config, **kwargs):
        """
        Create a synch app configuration.
        {\"nickname\":\"Create a new synch app configuration\",\"request\":\"createSynchAppConfigurationRequest.html\",\"response\":\"createSynchAppConfigurationResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_sync_app_config_with_http_info(synch_app_config, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MutableBillingEntity synch_app_config: The data synch app config object to be created. (required)
        :return: DataSynchronisationAppConfigurationPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['synch_app_config']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_sync_app_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'synch_app_config' is set
        if ('synch_app_config' not in params) or (params['synch_app_config'] is None):
            raise ValueError("Missing the required parameter `synch_app_config` when calling `create_sync_app_config`")

        resource_path = '/synchAppConfigs'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'synch_app_config' in params:
            body_params = params['synch_app_config']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DataSynchronisationAppConfigurationPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_sync_app_config(self, synch_app_configs_id, **kwargs):
        """
        Returns a single config, specified by the ID parameter.
        { \"nickname\" : \"Retrieve an existing synch config\",\"response\" : \"getSynchAppConfigByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sync_app_config(synch_app_configs_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str synch_app_configs_id: ID of the Synch App Configuration. (required)
        :param list[str] organizations: A list of organization -IDs used to restrict the scope of API calls.
        :return: DataSynchronisationAppConfigurationPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_sync_app_config_with_http_info(synch_app_configs_id, **kwargs)
        else:
            (data) = self.get_sync_app_config_with_http_info(synch_app_configs_id, **kwargs)
            return data

    def get_sync_app_config_with_http_info(self, synch_app_configs_id, **kwargs):
        """
        Returns a single config, specified by the ID parameter.
        { \"nickname\" : \"Retrieve an existing synch config\",\"response\" : \"getSynchAppConfigByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sync_app_config_with_http_info(synch_app_configs_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str synch_app_configs_id: ID of the Synch App Configuration. (required)
        :param list[str] organizations: A list of organization -IDs used to restrict the scope of API calls.
        :return: DataSynchronisationAppConfigurationPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['synch_app_configs_id', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sync_app_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'synch_app_configs_id' is set
        if ('synch_app_configs_id' not in params) or (params['synch_app_configs_id'] is None):
            raise ValueError("Missing the required parameter `synch_app_configs_id` when calling `get_sync_app_config`")

        resource_path = '/synchAppConfigs/{synchAppConfigs-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'synch_app_configs_id' in params:
            path_params['synchAppConfigs-ID'] = params['synch_app_configs_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DataSynchronisationAppConfigurationPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_sync_app_config_by_platform(self, platform, **kwargs):
        """
        Returns a collection configurations, specified by the platform parameter.
        { \"nickname\" : \"Retrieve by platform\",\"response\" : \"getSynchAppConfigsByPlatform.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sync_app_config_by_platform(platform, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str platform: The type of the synch app configuration. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: DataSynchronisationAppConfigurationPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_sync_app_config_by_platform_with_http_info(platform, **kwargs)
        else:
            (data) = self.get_sync_app_config_by_platform_with_http_info(platform, **kwargs)
            return data

    def get_sync_app_config_by_platform_with_http_info(self, platform, **kwargs):
        """
        Returns a collection configurations, specified by the platform parameter.
        { \"nickname\" : \"Retrieve by platform\",\"response\" : \"getSynchAppConfigsByPlatform.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sync_app_config_by_platform_with_http_info(platform, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str platform: The type of the synch app configuration. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: DataSynchronisationAppConfigurationPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['platform', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sync_app_config_by_platform" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'platform' is set
        if ('platform' not in params) or (params['platform'] is None):
            raise ValueError("Missing the required parameter `platform` when calling `get_sync_app_config_by_platform`")

        resource_path = '/synchAppConfigs/platform/{platform}'.replace('{format}', 'json')
        path_params = {}
        if 'platform' in params:
            path_params['platform'] = params['platform']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DataSynchronisationAppConfigurationPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_sync_app_config(self, synch_app_config, **kwargs):
        """
        Update a synch app configuration.
        { \"nickname\" : \"Update a sync app configuration\", \"request\" : \"updateSyncAppConfigRequest.html\" ,\"response\" : \"updateSyncAppConfigResponse.html\" }

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_sync_app_config(synch_app_config, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MutableBillingEntity synch_app_config: The synch app configuration object to be updated. (required)
        :return: DataSynchronisationAppConfigurationPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_sync_app_config_with_http_info(synch_app_config, **kwargs)
        else:
            (data) = self.update_sync_app_config_with_http_info(synch_app_config, **kwargs)
            return data

    def update_sync_app_config_with_http_info(self, synch_app_config, **kwargs):
        """
        Update a synch app configuration.
        { \"nickname\" : \"Update a sync app configuration\", \"request\" : \"updateSyncAppConfigRequest.html\" ,\"response\" : \"updateSyncAppConfigResponse.html\" }

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_sync_app_config_with_http_info(synch_app_config, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MutableBillingEntity synch_app_config: The synch app configuration object to be updated. (required)
        :return: DataSynchronisationAppConfigurationPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['synch_app_config']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_sync_app_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'synch_app_config' is set
        if ('synch_app_config' not in params) or (params['synch_app_config'] is None):
            raise ValueError("Missing the required parameter `synch_app_config` when calling `update_sync_app_config`")

        resource_path = '/synchAppConfigs'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'synch_app_config' in params:
            body_params = params['synch_app_config']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DataSynchronisationAppConfigurationPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
