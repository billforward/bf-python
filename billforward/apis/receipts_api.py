# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ReceiptsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_receipt(self, receipt, **kwargs):
        """
        Create a receipt.
        {\"nickname\":\"Create a new receipt\",\"request\":\"createReceiptRequest.html\",\"response\":\"createReceiptResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_receipt(receipt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Receipt receipt: The receipt object to be created. (required)
        :return: ReceiptPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_receipt_with_http_info(receipt, **kwargs)
        else:
            (data) = self.create_receipt_with_http_info(receipt, **kwargs)
            return data

    def create_receipt_with_http_info(self, receipt, **kwargs):
        """
        Create a receipt.
        {\"nickname\":\"Create a new receipt\",\"request\":\"createReceiptRequest.html\",\"response\":\"createReceiptResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_receipt_with_http_info(receipt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Receipt receipt: The receipt object to be created. (required)
        :return: ReceiptPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['receipt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_receipt" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'receipt' is set
        if ('receipt' not in params) or (params['receipt'] is None):
            raise ValueError("Missing the required parameter `receipt` when calling `create_receipt`")

        resource_path = '/receipts'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'receipt' in params:
            body_params = params['receipt']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ReceiptPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_all_receipts(self, **kwargs):
        """
        Returns a collection of all receipts. By default 10 values are returned. receipts are returned in natural order
        {\"nickname\":\"Get all receipts\",\"response\":\"getreceiptsAll.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_receipts(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first receipt to return.
        :param int records: The maximum number of receipts to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param list[str] account_id: 
        :param list[str] invoice_id: 
        :param list[str] payment_method_id: 
        :param str type: 
        :param str gateway: 
        :param str decision: 
        :return: ReceiptPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_receipts_with_http_info(**kwargs)
        else:
            (data) = self.get_all_receipts_with_http_info(**kwargs)
            return data

    def get_all_receipts_with_http_info(self, **kwargs):
        """
        Returns a collection of all receipts. By default 10 values are returned. receipts are returned in natural order
        {\"nickname\":\"Get all receipts\",\"response\":\"getreceiptsAll.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_receipts_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first receipt to return.
        :param int records: The maximum number of receipts to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param list[str] account_id: 
        :param list[str] invoice_id: 
        :param list[str] payment_method_id: 
        :param str type: 
        :param str gateway: 
        :param str decision: 
        :return: ReceiptPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'offset', 'records', 'order_by', 'order', 'account_id', 'invoice_id', 'payment_method_id', 'type', 'gateway', 'decision']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_receipts" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/receipts'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'account_id' in params:
            query_params['account_id'] = params['account_id']
        if 'invoice_id' in params:
            query_params['invoice_id'] = params['invoice_id']
        if 'payment_method_id' in params:
            query_params['payment_method_id'] = params['payment_method_id']
        if 'type' in params:
            query_params['type'] = params['type']
        if 'gateway' in params:
            query_params['gateway'] = params['gateway']
        if 'decision' in params:
            query_params['decision'] = params['decision']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ReceiptPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_receipt_by_id(self, receipt_id, **kwargs):
        """
        Returns a single receipt, specified by the ID parameter.
        {\"nickname\":\"Retrieve an existing receipt\",\"response\":\"getreceiptByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_receipt_by_id(receipt_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str receipt_id: ID of the receipt. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: ReceiptPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_receipt_by_id_with_http_info(receipt_id, **kwargs)
        else:
            (data) = self.get_receipt_by_id_with_http_info(receipt_id, **kwargs)
            return data

    def get_receipt_by_id_with_http_info(self, receipt_id, **kwargs):
        """
        Returns a single receipt, specified by the ID parameter.
        {\"nickname\":\"Retrieve an existing receipt\",\"response\":\"getreceiptByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_receipt_by_id_with_http_info(receipt_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str receipt_id: ID of the receipt. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: ReceiptPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['receipt_id', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_receipt_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'receipt_id' is set
        if ('receipt_id' not in params) or (params['receipt_id'] is None):
            raise ValueError("Missing the required parameter `receipt_id` when calling `get_receipt_by_id`")

        resource_path = '/receipts/{receipt-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'receipt_id' in params:
            path_params['receipt-ID'] = params['receipt_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ReceiptPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_receipts_by_invoice(self, invoice_id, **kwargs):
        """
        Returns a receipt for the receipt payment.
        {\"nickname\":\"Retrieve by invoice\",\"response\":\"getreceiptsByInvoice.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_receipts_by_invoice(invoice_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str invoice_id: ID of the Invoice. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first receipt to return.
        :param int records: The maximum number of receipts to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :return: ReceiptPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_receipts_by_invoice_with_http_info(invoice_id, **kwargs)
        else:
            (data) = self.get_receipts_by_invoice_with_http_info(invoice_id, **kwargs)
            return data

    def get_receipts_by_invoice_with_http_info(self, invoice_id, **kwargs):
        """
        Returns a receipt for the receipt payment.
        {\"nickname\":\"Retrieve by invoice\",\"response\":\"getreceiptsByInvoice.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_receipts_by_invoice_with_http_info(invoice_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str invoice_id: ID of the Invoice. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first receipt to return.
        :param int records: The maximum number of receipts to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :return: ReceiptPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'organizations', 'offset', 'records', 'order_by', 'order']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_receipts_by_invoice" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params) or (params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `get_receipts_by_invoice`")

        resource_path = '/receipts/invoice/{invoice-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'invoice_id' in params:
            path_params['invoice-ID'] = params['invoice_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ReceiptPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_receipts_by_payment(self, payment_id, **kwargs):
        """
        Returns a collection of receipts for the payment.
        {\"nickname\":\"Retrieve by payment\",\"response\":\"getreceiptsByPayment.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_receipts_by_payment(payment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str payment_id: ID of the payment. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first receipt to return.
        :param int records: The maximum number of receipts to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :return: ReceiptPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_receipts_by_payment_with_http_info(payment_id, **kwargs)
        else:
            (data) = self.get_receipts_by_payment_with_http_info(payment_id, **kwargs)
            return data

    def get_receipts_by_payment_with_http_info(self, payment_id, **kwargs):
        """
        Returns a collection of receipts for the payment.
        {\"nickname\":\"Retrieve by payment\",\"response\":\"getreceiptsByPayment.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_receipts_by_payment_with_http_info(payment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str payment_id: ID of the payment. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first receipt to return.
        :param int records: The maximum number of receipts to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :return: ReceiptPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_id', 'organizations', 'offset', 'records', 'order_by', 'order']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_receipts_by_payment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_id' is set
        if ('payment_id' not in params) or (params['payment_id'] is None):
            raise ValueError("Missing the required parameter `payment_id` when calling `get_receipts_by_payment`")

        resource_path = '/receipts/payment/{payment-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'payment_id' in params:
            path_params['payment-ID'] = params['payment_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ReceiptPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_receipts_for_debit_payments_as_csv(self, **kwargs):
        """
        Retrieves debit payments in CSV format.
        { \"nickname\":\"Debit payments CSV\",\"response\":\"Debit payments.csv\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_receipts_for_debit_payments_as_csv(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param str received_start: The UTC DateTime specifying the start of the interval within which payments were received.
        :param str received_end: The UTC DateTime specifying the end of the interval within which payments were received.
        :param int offset: The offset from the first payment to return.
        :param int records: The maximum number of payments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: The direction of any ordering, either ASC or DESC.
        :param list[str] gateway: A list of payment gateways to include in the account.  If none are specified, all gateways will be included.
        :return: ReceiptPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_receipts_for_debit_payments_as_csv_with_http_info(**kwargs)
        else:
            (data) = self.get_receipts_for_debit_payments_as_csv_with_http_info(**kwargs)
            return data

    def get_receipts_for_debit_payments_as_csv_with_http_info(self, **kwargs):
        """
        Retrieves debit payments in CSV format.
        { \"nickname\":\"Debit payments CSV\",\"response\":\"Debit payments.csv\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_receipts_for_debit_payments_as_csv_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param str received_start: The UTC DateTime specifying the start of the interval within which payments were received.
        :param str received_end: The UTC DateTime specifying the end of the interval within which payments were received.
        :param int offset: The offset from the first payment to return.
        :param int records: The maximum number of payments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: The direction of any ordering, either ASC or DESC.
        :param list[str] gateway: A list of payment gateways to include in the account.  If none are specified, all gateways will be included.
        :return: ReceiptPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'received_start', 'received_end', 'offset', 'records', 'order_by', 'order', 'gateway']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_receipts_for_debit_payments_as_csv" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/receipts/debits.csv'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'received_start' in params:
            query_params['received_start'] = params['received_start']
        if 'received_end' in params:
            query_params['received_end'] = params['received_end']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'gateway' in params:
            query_params['gateway'] = params['gateway']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/csv'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ReceiptPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_receipts_for_refund_payments_as_csv(self, **kwargs):
        """
        Retrieves refunded payments in CSV format.
        { \"nickname\":\"Refunded payments CSV\",\"response\":\"Refunded payments.csv\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_receipts_for_refund_payments_as_csv(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param str completed_start: The UTC DateTime specifying the start of the interval within which payments were received.
        :param str completed_end: The UTC DateTime specifying the end of the interval within which payments were received.
        :param int offset: The offset from the first payment to return.
        :param int records: The maximum number of payments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: The direction of any ordering, either ASC or DESC.
        :return: ReceiptPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_receipts_for_refund_payments_as_csv_with_http_info(**kwargs)
        else:
            (data) = self.get_receipts_for_refund_payments_as_csv_with_http_info(**kwargs)
            return data

    def get_receipts_for_refund_payments_as_csv_with_http_info(self, **kwargs):
        """
        Retrieves refunded payments in CSV format.
        { \"nickname\":\"Refunded payments CSV\",\"response\":\"Refunded payments.csv\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_receipts_for_refund_payments_as_csv_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param str completed_start: The UTC DateTime specifying the start of the interval within which payments were received.
        :param str completed_end: The UTC DateTime specifying the end of the interval within which payments were received.
        :param int offset: The offset from the first payment to return.
        :param int records: The maximum number of payments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: The direction of any ordering, either ASC or DESC.
        :return: ReceiptPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'completed_start', 'completed_end', 'offset', 'records', 'order_by', 'order']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_receipts_for_refund_payments_as_csv" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/receipts/refunds.csv'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'completed_start' in params:
            query_params['completed_start'] = params['completed_start']
        if 'completed_end' in params:
            query_params['completed_end'] = params['completed_end']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/csv'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ReceiptPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
