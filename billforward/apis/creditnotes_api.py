# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CreditnotesApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_credit_note(self, credit_note, **kwargs):
        """
        Create a credit note.
        {\"nickname\":\"Create a new credit note\",\"request\":\"createCreditNoteRequest.html\",\"response\":\"createCreditNoteResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_credit_note(credit_note, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CreditNote credit_note: The credit note object to be created. (required)
        :return: CreditNotePagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_credit_note_with_http_info(credit_note, **kwargs)
        else:
            (data) = self.create_credit_note_with_http_info(credit_note, **kwargs)
            return data

    def create_credit_note_with_http_info(self, credit_note, **kwargs):
        """
        Create a credit note.
        {\"nickname\":\"Create a new credit note\",\"request\":\"createCreditNoteRequest.html\",\"response\":\"createCreditNoteResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_credit_note_with_http_info(credit_note, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CreditNote credit_note: The credit note object to be created. (required)
        :return: CreditNotePagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['credit_note']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_credit_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'credit_note' is set
        if ('credit_note' not in params) or (params['credit_note'] is None):
            raise ValueError("Missing the required parameter `credit_note` when calling `create_credit_note`")

        resource_path = '/credit-notes'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'credit_note' in params:
            body_params = params['credit_note']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreditNotePagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_credit_note_by_id(self, credit_note_id, **kwargs):
        """
        Returns a single credit-note, specified by the ID parameter.
        {\"nickname\":\"Retrieve an existing credit note\",\"response\":\"getCreditNoteByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_credit_note_by_id(credit_note_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str credit_note_id: ID of the credit-note. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: CreditNotePagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_credit_note_by_id_with_http_info(credit_note_id, **kwargs)
        else:
            (data) = self.get_credit_note_by_id_with_http_info(credit_note_id, **kwargs)
            return data

    def get_credit_note_by_id_with_http_info(self, credit_note_id, **kwargs):
        """
        Returns a single credit-note, specified by the ID parameter.
        {\"nickname\":\"Retrieve an existing credit note\",\"response\":\"getCreditNoteByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_credit_note_by_id_with_http_info(credit_note_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str credit_note_id: ID of the credit-note. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: CreditNotePagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['credit_note_id', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_credit_note_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'credit_note_id' is set
        if ('credit_note_id' not in params) or (params['credit_note_id'] is None):
            raise ValueError("Missing the required parameter `credit_note_id` when calling `get_credit_note_by_id`")

        resource_path = '/credit-notes/{credit-note-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'credit_note_id' in params:
            path_params['credit-note-ID'] = params['credit_note_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreditNotePagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_credit_note_for_account(self, account_id, **kwargs):
        """
        Returns credit notes for an account.
        {\"nickname\":\"Retrieve by account\",\"response\":\"getCreditNotesByAccount.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_credit_note_for_account(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: ID of the account. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first payment to return.
        :param int records: The maximum number of payments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :return: CreditNotePagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_credit_note_for_account_with_http_info(account_id, **kwargs)
        else:
            (data) = self.get_credit_note_for_account_with_http_info(account_id, **kwargs)
            return data

    def get_credit_note_for_account_with_http_info(self, account_id, **kwargs):
        """
        Returns credit notes for an account.
        {\"nickname\":\"Retrieve by account\",\"response\":\"getCreditNotesByAccount.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_credit_note_for_account_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: ID of the account. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first payment to return.
        :param int records: The maximum number of payments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :return: CreditNotePagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'organizations', 'offset', 'records', 'order_by', 'order']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_credit_note_for_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_credit_note_for_account`")

        resource_path = '/credit-notes/account/{account-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['account-ID'] = params['account_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreditNotePagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_credit_note_for_invoice(self, invoice_id, **kwargs):
        """
        Returns credit notes for an invoice.
        {\"nickname\":\"Retrieve by invoice\",\"response\":\"getCreditNotesByInvoice.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_credit_note_for_invoice(invoice_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str invoice_id: ID of the Invoice. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first payment to return.
        :param int records: The maximum number of payments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :return: CreditNotePagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_credit_note_for_invoice_with_http_info(invoice_id, **kwargs)
        else:
            (data) = self.get_credit_note_for_invoice_with_http_info(invoice_id, **kwargs)
            return data

    def get_credit_note_for_invoice_with_http_info(self, invoice_id, **kwargs):
        """
        Returns credit notes for an invoice.
        {\"nickname\":\"Retrieve by invoice\",\"response\":\"getCreditNotesByInvoice.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_credit_note_for_invoice_with_http_info(invoice_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str invoice_id: ID of the Invoice. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first payment to return.
        :param int records: The maximum number of payments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :return: CreditNotePagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'organizations', 'offset', 'records', 'order_by', 'order']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_credit_note_for_invoice" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params) or (params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `get_credit_note_for_invoice`")

        resource_path = '/credit-notes/invoice/{invoice-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'invoice_id' in params:
            path_params['invoice-ID'] = params['invoice_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreditNotePagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_credit_note_for_subscription(self, subscription_id, **kwargs):
        """
        Returns credit notes for an subscription.
        {\"nickname\":\"Retrieve by subscription\",\"response\":\"getCreditNotesSubscription.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_credit_note_for_subscription(subscription_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str subscription_id: ID of the subscription. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first payment to return.
        :param int records: The maximum number of payments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :return: CreditNotePagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_credit_note_for_subscription_with_http_info(subscription_id, **kwargs)
        else:
            (data) = self.get_credit_note_for_subscription_with_http_info(subscription_id, **kwargs)
            return data

    def get_credit_note_for_subscription_with_http_info(self, subscription_id, **kwargs):
        """
        Returns credit notes for an subscription.
        {\"nickname\":\"Retrieve by subscription\",\"response\":\"getCreditNotesSubscription.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_credit_note_for_subscription_with_http_info(subscription_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str subscription_id: ID of the subscription. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first payment to return.
        :param int records: The maximum number of payments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :return: CreditNotePagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subscription_id', 'organizations', 'offset', 'records', 'order_by', 'order']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_credit_note_for_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in params) or (params['subscription_id'] is None):
            raise ValueError("Missing the required parameter `subscription_id` when calling `get_credit_note_for_subscription`")

        resource_path = '/credit-notes/subscription/{subscription-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'subscription_id' in params:
            path_params['subscription-ID'] = params['subscription_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreditNotePagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def retire_credit_note(self, credit_note_id, organizations, **kwargs):
        """
        Removes any remaining value from credit note
        {\"nickname\":\"Removes remaining value from credit note\",\"response\":\"deleteCreditNote.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.retire_credit_note(credit_note_id, organizations, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str credit_note_id: ID of the credit-note. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls. (required)
        :return: CreditNotePagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.retire_credit_note_with_http_info(credit_note_id, organizations, **kwargs)
        else:
            (data) = self.retire_credit_note_with_http_info(credit_note_id, organizations, **kwargs)
            return data

    def retire_credit_note_with_http_info(self, credit_note_id, organizations, **kwargs):
        """
        Removes any remaining value from credit note
        {\"nickname\":\"Removes remaining value from credit note\",\"response\":\"deleteCreditNote.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.retire_credit_note_with_http_info(credit_note_id, organizations, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str credit_note_id: ID of the credit-note. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls. (required)
        :return: CreditNotePagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['credit_note_id', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retire_credit_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'credit_note_id' is set
        if ('credit_note_id' not in params) or (params['credit_note_id'] is None):
            raise ValueError("Missing the required parameter `credit_note_id` when calling `retire_credit_note`")
        # verify the required parameter 'organizations' is set
        if ('organizations' not in params) or (params['organizations'] is None):
            raise ValueError("Missing the required parameter `organizations` when calling `retire_credit_note`")

        resource_path = '/credit-notes/{credit-note-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'credit_note_id' in params:
            path_params['credit-note-ID'] = params['credit_note_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CreditNotePagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
