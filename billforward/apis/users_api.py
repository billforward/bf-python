# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class UsersApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_user(self, user, **kwargs):
        """
        Create a user.
        {\"nickname\":\"Create a new user\",\"request\":\"createUserRequest.html\",\"response\":\"createUserResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_user(user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param User user: The user object to be created. (required)
        :return: UserPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_user_with_http_info(user, **kwargs)
        else:
            (data) = self.create_user_with_http_info(user, **kwargs)
            return data

    def create_user_with_http_info(self, user, **kwargs):
        """
        Create a user.
        {\"nickname\":\"Create a new user\",\"request\":\"createUserRequest.html\",\"response\":\"createUserResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_user_with_http_info(user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param User user: The user object to be created. (required)
        :return: UserPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params) or (params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `create_user`")

        resource_path = '/users'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user' in params:
            body_params = params['user']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UserPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def create_user_login(self, user, **kwargs):
        """
        Create a user.
        {\"nickname\":\"Create a new user with login\",\"request\":\"createUserWithLoginRequest.html\",\"response\":\"createUserWithLoginResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_user_login(user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UserCreationRequest user: The user object to be created. (required)
        :return: UserCreationResponsePagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_user_login_with_http_info(user, **kwargs)
        else:
            (data) = self.create_user_login_with_http_info(user, **kwargs)
            return data

    def create_user_login_with_http_info(self, user, **kwargs):
        """
        Create a user.
        {\"nickname\":\"Create a new user with login\",\"request\":\"createUserWithLoginRequest.html\",\"response\":\"createUserWithLoginResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_user_login_with_http_info(user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UserCreationRequest user: The user object to be created. (required)
        :return: UserCreationResponsePagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_user_login" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params) or (params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `create_user_login`")

        resource_path = '/users/create-user-login'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user' in params:
            body_params = params['user']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UserCreationResponsePagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_all_users(self, **kwargs):
        """
        Returns a collection of Users. By default 10 values are returned. Records are returned in natural order.
        { \"nickname\" : \"Get all users\",\"response\" : \"getUserAll.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_users(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first user to return.
        :param int records: The maximum number of users to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :return: UserPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_users_with_http_info(**kwargs)
        else:
            (data) = self.get_all_users_with_http_info(**kwargs)
            return data

    def get_all_users_with_http_info(self, **kwargs):
        """
        Returns a collection of Users. By default 10 values are returned. Records are returned in natural order.
        { \"nickname\" : \"Get all users\",\"response\" : \"getUserAll.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_users_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first user to return.
        :param int records: The maximum number of users to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :return: UserPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'offset', 'records', 'order_by', 'order']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_users" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/users'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UserPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_user_by_id(self, user_id, **kwargs):
        """
        Returns a single User, specified by the ID parameter.
        { \"nickname\" : \"Retrieve an existing user\",\"response\" : \"getUserByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_by_id(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: ID of the User. (required)
        :param list[str] organizations: A list of organization -IDs used to restrict the scope of API calls.
        :return: UserPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_user_by_id_with_http_info(user_id, **kwargs)
        else:
            (data) = self.get_user_by_id_with_http_info(user_id, **kwargs)
            return data

    def get_user_by_id_with_http_info(self, user_id, **kwargs):
        """
        Returns a single User, specified by the ID parameter.
        { \"nickname\" : \"Retrieve an existing user\",\"response\" : \"getUserByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_by_id_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: ID of the User. (required)
        :param list[str] organizations: A list of organization -IDs used to restrict the scope of API calls.
        :return: UserPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_user_by_id`")

        resource_path = '/users/{user-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['user-ID'] = params['user_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UserPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_user_by_password_reset_code(self, password_reset_code, **kwargs):
        """
        Returns a single User, specified by the password-reset-code parameter.
        { \"nickname\" : \"Retrieve by reset code\",\"response\" : \"getUserByPasswordResetCode.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_by_password_reset_code(password_reset_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str password_reset_code: The unique password reset code of the User. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: UserPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_user_by_password_reset_code_with_http_info(password_reset_code, **kwargs)
        else:
            (data) = self.get_user_by_password_reset_code_with_http_info(password_reset_code, **kwargs)
            return data

    def get_user_by_password_reset_code_with_http_info(self, password_reset_code, **kwargs):
        """
        Returns a single User, specified by the password-reset-code parameter.
        { \"nickname\" : \"Retrieve by reset code\",\"response\" : \"getUserByPasswordResetCode.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_by_password_reset_code_with_http_info(password_reset_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str password_reset_code: The unique password reset code of the User. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: UserPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['password_reset_code', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_by_password_reset_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'password_reset_code' is set
        if ('password_reset_code' not in params) or (params['password_reset_code'] is None):
            raise ValueError("Missing the required parameter `password_reset_code` when calling `get_user_by_password_reset_code`")

        resource_path = '/users/password-reset-code/{password-reset-code}'.replace('{format}', 'json')
        path_params = {}
        if 'password_reset_code' in params:
            path_params['password-reset-code'] = params['password_reset_code']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UserPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_user_by_sms_password_reset_code(self, sms_password_reset_code, **kwargs):
        """
        Returns a single User, specified by the sms-password-reset-code parameter.
        { \"nickname\" : \"Retrieve by sms reset code\",\"response\" : \"getUserBySMSPasswordResetCode.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_by_sms_password_reset_code(sms_password_reset_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sms_password_reset_code: The unique SMS password reset code of the User. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: UserPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_user_by_sms_password_reset_code_with_http_info(sms_password_reset_code, **kwargs)
        else:
            (data) = self.get_user_by_sms_password_reset_code_with_http_info(sms_password_reset_code, **kwargs)
            return data

    def get_user_by_sms_password_reset_code_with_http_info(self, sms_password_reset_code, **kwargs):
        """
        Returns a single User, specified by the sms-password-reset-code parameter.
        { \"nickname\" : \"Retrieve by sms reset code\",\"response\" : \"getUserBySMSPasswordResetCode.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_by_sms_password_reset_code_with_http_info(sms_password_reset_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sms_password_reset_code: The unique SMS password reset code of the User. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: UserPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sms_password_reset_code', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_by_sms_password_reset_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sms_password_reset_code' is set
        if ('sms_password_reset_code' not in params) or (params['sms_password_reset_code'] is None):
            raise ValueError("Missing the required parameter `sms_password_reset_code` when calling `get_user_by_sms_password_reset_code`")

        resource_path = '/users/sms-password-reset-code/{sms-password-reset-code}'.replace('{format}', 'json')
        path_params = {}
        if 'sms_password_reset_code' in params:
            path_params['sms-password-reset-code'] = params['sms_password_reset_code']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UserPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_user_by_username(self, username, **kwargs):
        """
        Returns a single User, specified by the username parameter, this is by default the e-mail address of the user.
        { \"nickname\" : \"Retrieve by username\",\"response\" : \"getUserByUsername.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_by_username(username, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str username: The unique username of the User. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: UserPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_user_by_username_with_http_info(username, **kwargs)
        else:
            (data) = self.get_user_by_username_with_http_info(username, **kwargs)
            return data

    def get_user_by_username_with_http_info(self, username, **kwargs):
        """
        Returns a single User, specified by the username parameter, this is by default the e-mail address of the user.
        { \"nickname\" : \"Retrieve by username\",\"response\" : \"getUserByUsername.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_by_username_with_http_info(username, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str username: The unique username of the User. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: UserPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_by_username" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params) or (params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `get_user_by_username`")

        resource_path = '/users/username/{username}'.replace('{format}', 'json')
        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UserPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def reset_user_password(self, request, **kwargs):
        """
        Create a password reset request.
        {\"nickname\":\"Create a password reset request\",\"request\":\"PasswordResetRequest.html\",\"response\":\"PasswordResetResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.reset_user_password(request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PasswordResetRequest request:  (required)
        :return: UserPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.reset_user_password_with_http_info(request, **kwargs)
        else:
            (data) = self.reset_user_password_with_http_info(request, **kwargs)
            return data

    def reset_user_password_with_http_info(self, request, **kwargs):
        """
        Create a password reset request.
        {\"nickname\":\"Create a password reset request\",\"request\":\"PasswordResetRequest.html\",\"response\":\"PasswordResetResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.reset_user_password_with_http_info(request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PasswordResetRequest request:  (required)
        :return: UserPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_user_password" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params) or (params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `reset_user_password`")

        resource_path = '/users/password-reset'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UserPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def retire_user(self, user_id, organizations, **kwargs):
        """
        Retires the user with the specified user-ID.
        { \"nickname\" : \"Delete a user\",\"response\" : \"deleteUser.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.retire_user(user_id, organizations, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: ID of the User. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls. (required)
        :return: UserPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.retire_user_with_http_info(user_id, organizations, **kwargs)
        else:
            (data) = self.retire_user_with_http_info(user_id, organizations, **kwargs)
            return data

    def retire_user_with_http_info(self, user_id, organizations, **kwargs):
        """
        Retires the user with the specified user-ID.
        { \"nickname\" : \"Delete a user\",\"response\" : \"deleteUser.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.retire_user_with_http_info(user_id, organizations, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: ID of the User. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls. (required)
        :return: UserPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retire_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `retire_user`")
        # verify the required parameter 'organizations' is set
        if ('organizations' not in params) or (params['organizations'] is None):
            raise ValueError("Missing the required parameter `organizations` when calling `retire_user`")

        resource_path = '/users/{user-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['user-ID'] = params['user_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UserPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_user(self, user, **kwargs):
        """
        Update a user.
        { \"nickname\" : \"Update a user\", \"request\" : \"updateUserRequest.html\" ,\"response\" : \"updateUserResponse.html\" }

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_user(user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param User user: The user object to be updated. (required)
        :return: UserPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_user_with_http_info(user, **kwargs)
        else:
            (data) = self.update_user_with_http_info(user, **kwargs)
            return data

    def update_user_with_http_info(self, user, **kwargs):
        """
        Update a user.
        { \"nickname\" : \"Update a user\", \"request\" : \"updateUserRequest.html\" ,\"response\" : \"updateUserResponse.html\" }

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_user_with_http_info(user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param User user: The user object to be updated. (required)
        :return: UserPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params) or (params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `update_user`")

        resource_path = '/users'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user' in params:
            body_params = params['user']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UserPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_user_password(self, password_reset, **kwargs):
        """
        Update a user's password.
        { \"nickname\" : \"Update password using reset code\", \"request\" : \"updateUserPassword.html\" ,\"response\" : \"updateUserPasswordResponse.html\" }

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_user_password(password_reset, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param BillingEntityBase password_reset: The password reset object. (required)
        :return: UserPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_user_password_with_http_info(password_reset, **kwargs)
        else:
            (data) = self.update_user_password_with_http_info(password_reset, **kwargs)
            return data

    def update_user_password_with_http_info(self, password_reset, **kwargs):
        """
        Update a user's password.
        { \"nickname\" : \"Update password using reset code\", \"request\" : \"updateUserPassword.html\" ,\"response\" : \"updateUserPasswordResponse.html\" }

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_user_password_with_http_info(password_reset, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param BillingEntityBase password_reset: The password reset object. (required)
        :return: UserPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['password_reset']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_user_password" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'password_reset' is set
        if ('password_reset' not in params) or (params['password_reset'] is None):
            raise ValueError("Missing the required parameter `password_reset` when calling `update_user_password`")

        resource_path = '/users/password-update'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'password_reset' in params:
            body_params = params['password_reset']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UserPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
