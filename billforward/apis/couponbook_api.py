# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CouponbookApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_coupon_book(self, coupon_book, **kwargs):
        """
        Create a coupon-book.
        {\"nickname\":\"Create a new coupon book\",\"request\":\"createCouponBookRequest.html\",\"response\":\"createCouponBookResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_coupon_book(coupon_book, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CouponBook coupon_book: The coupon-book object to be created. (required)
        :return: CouponBookPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_coupon_book_with_http_info(coupon_book, **kwargs)
        else:
            (data) = self.create_coupon_book_with_http_info(coupon_book, **kwargs)
            return data

    def create_coupon_book_with_http_info(self, coupon_book, **kwargs):
        """
        Create a coupon-book.
        {\"nickname\":\"Create a new coupon book\",\"request\":\"createCouponBookRequest.html\",\"response\":\"createCouponBookResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_coupon_book_with_http_info(coupon_book, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CouponBook coupon_book: The coupon-book object to be created. (required)
        :return: CouponBookPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['coupon_book']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_coupon_book" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'coupon_book' is set
        if ('coupon_book' not in params) or (params['coupon_book'] is None):
            raise ValueError("Missing the required parameter `coupon_book` when calling `create_coupon_book`")

        resource_path = '/coupon-books'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'coupon_book' in params:
            body_params = params['coupon_book']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CouponBookPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_coupon_book(self, coupon_book_id, **kwargs):
        """
        Retire a coupon-book, specified by the coupon-book-ID parameter.
        {\"nickname\":\"Delete coupon book\",\"response\":\"deleteCouponBookByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_coupon_book(coupon_book_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str coupon_book_id: ID of the coupon-book. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: CouponBookPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_coupon_book_with_http_info(coupon_book_id, **kwargs)
        else:
            (data) = self.delete_coupon_book_with_http_info(coupon_book_id, **kwargs)
            return data

    def delete_coupon_book_with_http_info(self, coupon_book_id, **kwargs):
        """
        Retire a coupon-book, specified by the coupon-book-ID parameter.
        {\"nickname\":\"Delete coupon book\",\"response\":\"deleteCouponBookByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_coupon_book_with_http_info(coupon_book_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str coupon_book_id: ID of the coupon-book. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: CouponBookPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['coupon_book_id', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_coupon_book" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'coupon_book_id' is set
        if ('coupon_book_id' not in params) or (params['coupon_book_id'] is None):
            raise ValueError("Missing the required parameter `coupon_book_id` when calling `delete_coupon_book`")

        resource_path = '/coupon-books/{coupon-book-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'coupon_book_id' in params:
            path_params['coupon-book-ID'] = params['coupon_book_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CouponBookPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_all_attachable_coupon_books(self, attachableness, has_code, **kwargs):
        """
        Returns a collection of attachable coupon-books. An attachable coupon-book has at least one remaining use, and is not deleted. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Get all attachable coupon books\",\"response\":\"getCouponBookAllAttachable.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_attachable_coupon_books(attachableness, has_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool attachableness: The attachableness of the coupon-book. (required)
        :param bool has_code: Whether the coupon-books have book codes or not. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first coupon-book to return.
        :param int records: The maximum number of coupon-books to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :return: CouponBookPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_attachable_coupon_books_with_http_info(attachableness, has_code, **kwargs)
        else:
            (data) = self.get_all_attachable_coupon_books_with_http_info(attachableness, has_code, **kwargs)
            return data

    def get_all_attachable_coupon_books_with_http_info(self, attachableness, has_code, **kwargs):
        """
        Returns a collection of attachable coupon-books. An attachable coupon-book has at least one remaining use, and is not deleted. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Get all attachable coupon books\",\"response\":\"getCouponBookAllAttachable.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_attachable_coupon_books_with_http_info(attachableness, has_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool attachableness: The attachableness of the coupon-book. (required)
        :param bool has_code: Whether the coupon-books have book codes or not. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first coupon-book to return.
        :param int records: The maximum number of coupon-books to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :return: CouponBookPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['attachableness', 'has_code', 'organizations', 'offset', 'records', 'order_by', 'order']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_attachable_coupon_books" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'attachableness' is set
        if ('attachableness' not in params) or (params['attachableness'] is None):
            raise ValueError("Missing the required parameter `attachableness` when calling `get_all_attachable_coupon_books`")
        # verify the required parameter 'has_code' is set
        if ('has_code' not in params) or (params['has_code'] is None):
            raise ValueError("Missing the required parameter `has_code` when calling `get_all_attachable_coupon_books`")

        resource_path = '/coupon-books/attachable/{attachableness}/{has_code}'.replace('{format}', 'json')
        path_params = {}
        if 'attachableness' in params:
            path_params['attachableness'] = params['attachableness']
        if 'has_code' in params:
            path_params['has_code'] = params['has_code']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CouponBookPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_all_coupon_books(self, **kwargs):
        """
        Returns a collection of coupon-books. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Get all coupon books\",\"response\":\"getCouponBookAll.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_coupon_books(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first coupon-books to return.
        :param int records: The maximum number of coupon-books to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired coupon-books should be returned.
        :return: CouponBookPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_coupon_books_with_http_info(**kwargs)
        else:
            (data) = self.get_all_coupon_books_with_http_info(**kwargs)
            return data

    def get_all_coupon_books_with_http_info(self, **kwargs):
        """
        Returns a collection of coupon-books. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Get all coupon books\",\"response\":\"getCouponBookAll.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_coupon_books_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first coupon-books to return.
        :param int records: The maximum number of coupon-books to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired coupon-books should be returned.
        :return: CouponBookPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'offset', 'records', 'order_by', 'order', 'include_retired']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_coupon_books" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/coupon-books'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'include_retired' in params:
            query_params['include_retired'] = params['include_retired']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CouponBookPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_coupon_book_by_book_code(self, book_code, **kwargs):
        """
        Returns a single coupon-book, specified by the book-code parameter.
        {\"nickname\":\"Retrieve by book code\",\"response\":\"getCouponBookByBookCode.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_coupon_book_by_book_code(book_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str book_code: The unique coupon-book-code. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: CouponBookPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_coupon_book_by_book_code_with_http_info(book_code, **kwargs)
        else:
            (data) = self.get_coupon_book_by_book_code_with_http_info(book_code, **kwargs)
            return data

    def get_coupon_book_by_book_code_with_http_info(self, book_code, **kwargs):
        """
        Returns a single coupon-book, specified by the book-code parameter.
        {\"nickname\":\"Retrieve by book code\",\"response\":\"getCouponBookByBookCode.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_coupon_book_by_book_code_with_http_info(book_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str book_code: The unique coupon-book-code. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: CouponBookPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['book_code', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_coupon_book_by_book_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'book_code' is set
        if ('book_code' not in params) or (params['book_code'] is None):
            raise ValueError("Missing the required parameter `book_code` when calling `get_coupon_book_by_book_code`")

        resource_path = '/coupon-books/book-code/{book-code}'.replace('{format}', 'json')
        path_params = {}
        if 'book_code' in params:
            path_params['book-code'] = params['book_code']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CouponBookPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_coupon_book_by_coupon_book_definition_id(self, coupon_book_definition_id, **kwargs):
        """
        Returns a collection of coupon-books, specified by coupon-book-definition-ID parameter. By default 10 coupon-books are returned. Records are returned in natural order.
        {\"nickname\":\"Retrieve by coupon book definition\",\"response\":\"getCouponBookByCouponBookDefinitionID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_coupon_book_by_coupon_book_definition_id(coupon_book_definition_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str coupon_book_definition_id: The string coupon-book-definition-ID of the coupon-book. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first coupon-book to return.
        :param int records: The maximum number of coupon-books to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired coupon-books should be returned.
        :return: CouponBookPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_coupon_book_by_coupon_book_definition_id_with_http_info(coupon_book_definition_id, **kwargs)
        else:
            (data) = self.get_coupon_book_by_coupon_book_definition_id_with_http_info(coupon_book_definition_id, **kwargs)
            return data

    def get_coupon_book_by_coupon_book_definition_id_with_http_info(self, coupon_book_definition_id, **kwargs):
        """
        Returns a collection of coupon-books, specified by coupon-book-definition-ID parameter. By default 10 coupon-books are returned. Records are returned in natural order.
        {\"nickname\":\"Retrieve by coupon book definition\",\"response\":\"getCouponBookByCouponBookDefinitionID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_coupon_book_by_coupon_book_definition_id_with_http_info(coupon_book_definition_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str coupon_book_definition_id: The string coupon-book-definition-ID of the coupon-book. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first coupon-book to return.
        :param int records: The maximum number of coupon-books to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired coupon-books should be returned.
        :return: CouponBookPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['coupon_book_definition_id', 'organizations', 'offset', 'records', 'order_by', 'order', 'include_retired']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_coupon_book_by_coupon_book_definition_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'coupon_book_definition_id' is set
        if ('coupon_book_definition_id' not in params) or (params['coupon_book_definition_id'] is None):
            raise ValueError("Missing the required parameter `coupon_book_definition_id` when calling `get_coupon_book_by_coupon_book_definition_id`")

        resource_path = '/coupon-books/coupon-book-definition/{coupon-book-definition-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'coupon_book_definition_id' in params:
            path_params['coupon-book-definition-ID'] = params['coupon_book_definition_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'include_retired' in params:
            query_params['include_retired'] = params['include_retired']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CouponBookPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_coupon_book_by_coupon_code(self, coupon_code, **kwargs):
        """
        Returns a single coupon-book, specified by the coupon-code parameter.
        {\"nickname\":\"Retrieve by coupon code\",\"response\":\"getCouponBookByBookCode.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_coupon_book_by_coupon_code(coupon_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str coupon_code: The unique coupon-code. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: CouponBookPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_coupon_book_by_coupon_code_with_http_info(coupon_code, **kwargs)
        else:
            (data) = self.get_coupon_book_by_coupon_code_with_http_info(coupon_code, **kwargs)
            return data

    def get_coupon_book_by_coupon_code_with_http_info(self, coupon_code, **kwargs):
        """
        Returns a single coupon-book, specified by the coupon-code parameter.
        {\"nickname\":\"Retrieve by coupon code\",\"response\":\"getCouponBookByBookCode.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_coupon_book_by_coupon_code_with_http_info(coupon_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str coupon_code: The unique coupon-code. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: CouponBookPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['coupon_code', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_coupon_book_by_coupon_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'coupon_code' is set
        if ('coupon_code' not in params) or (params['coupon_code'] is None):
            raise ValueError("Missing the required parameter `coupon_code` when calling `get_coupon_book_by_coupon_code`")

        resource_path = '/coupon-books/coupon/{coupon-code}'.replace('{format}', 'json')
        path_params = {}
        if 'coupon_code' in params:
            path_params['coupon-code'] = params['coupon_code']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CouponBookPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_coupon_book_by_id(self, coupon_book_id, **kwargs):
        """
        Returns a single coupon-book, specified by the coupon-book-ID parameter.
        {\"nickname\":\"Retrieve an existing coupon book\",\"response\":\"getCouponBookByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_coupon_book_by_id(coupon_book_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str coupon_book_id: ID of the coupon-book. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: CouponBookPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_coupon_book_by_id_with_http_info(coupon_book_id, **kwargs)
        else:
            (data) = self.get_coupon_book_by_id_with_http_info(coupon_book_id, **kwargs)
            return data

    def get_coupon_book_by_id_with_http_info(self, coupon_book_id, **kwargs):
        """
        Returns a single coupon-book, specified by the coupon-book-ID parameter.
        {\"nickname\":\"Retrieve an existing coupon book\",\"response\":\"getCouponBookByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_coupon_book_by_id_with_http_info(coupon_book_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str coupon_book_id: ID of the coupon-book. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: CouponBookPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['coupon_book_id', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_coupon_book_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'coupon_book_id' is set
        if ('coupon_book_id' not in params) or (params['coupon_book_id'] is None):
            raise ValueError("Missing the required parameter `coupon_book_id` when calling `get_coupon_book_by_id`")

        resource_path = '/coupon-books/{coupon-book-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'coupon_book_id' in params:
            path_params['coupon-book-ID'] = params['coupon_book_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CouponBookPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_coupon_book(self, coupon_book, **kwargs):
        """
        Update a coupon-book.
        {\"nickname\":\"Update a coupon book\",\"request\":\"updateCouponBookRequest.html\",\"response\":\"updateCouponBookResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_coupon_book(coupon_book, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CouponBook coupon_book: The coupon-book object to be updated. (required)
        :return: CouponBookPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_coupon_book_with_http_info(coupon_book, **kwargs)
        else:
            (data) = self.update_coupon_book_with_http_info(coupon_book, **kwargs)
            return data

    def update_coupon_book_with_http_info(self, coupon_book, **kwargs):
        """
        Update a coupon-book.
        {\"nickname\":\"Update a coupon book\",\"request\":\"updateCouponBookRequest.html\",\"response\":\"updateCouponBookResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_coupon_book_with_http_info(coupon_book, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CouponBook coupon_book: The coupon-book object to be updated. (required)
        :return: CouponBookPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['coupon_book']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_coupon_book" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'coupon_book' is set
        if ('coupon_book' not in params) or (params['coupon_book'] is None):
            raise ValueError("Missing the required parameter `coupon_book` when calling `update_coupon_book`")

        resource_path = '/coupon-books'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'coupon_book' in params:
            body_params = params['coupon_book']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CouponBookPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
