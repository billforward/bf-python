# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class TaxationstrategiesApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_taxation_strategy(self, taxation_strategy, **kwargs):
        """
        <p>Add a new tax or schedule changes in an existing tax.</p><p>Add a new tax by providing the location and tax percentage. To schedule a tax change specify the ID of the current Tax. A new version of the will be created <i>validFrom</i> the specified date, the existing tax <i>validTill</i> the start of this new tax.</p>
        {\"nickname\":\"Create a tax\",\"request\":\"createTaxationStrategyRequest.html\",\"response\":\"createTaxationStrategyResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_taxation_strategy(taxation_strategy, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MutableBillingEntity taxation_strategy: The taxation-strategy object to be updated. (required)
        :return: TaxationStrategyPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_taxation_strategy_with_http_info(taxation_strategy, **kwargs)
        else:
            (data) = self.create_taxation_strategy_with_http_info(taxation_strategy, **kwargs)
            return data

    def create_taxation_strategy_with_http_info(self, taxation_strategy, **kwargs):
        """
        <p>Add a new tax or schedule changes in an existing tax.</p><p>Add a new tax by providing the location and tax percentage. To schedule a tax change specify the ID of the current Tax. A new version of the will be created <i>validFrom</i> the specified date, the existing tax <i>validTill</i> the start of this new tax.</p>
        {\"nickname\":\"Create a tax\",\"request\":\"createTaxationStrategyRequest.html\",\"response\":\"createTaxationStrategyResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_taxation_strategy_with_http_info(taxation_strategy, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MutableBillingEntity taxation_strategy: The taxation-strategy object to be updated. (required)
        :return: TaxationStrategyPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['taxation_strategy']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_taxation_strategy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'taxation_strategy' is set
        if ('taxation_strategy' not in params) or (params['taxation_strategy'] is None):
            raise ValueError("Missing the required parameter `taxation_strategy` when calling `create_taxation_strategy`")

        resource_path = '/taxation-strategies'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'taxation_strategy' in params:
            body_params = params['taxation_strategy']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TaxationStrategyPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_all_taxation_strategies(self, **kwargs):
        """
        Returns a collection of all taxation-strategies. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Get all tax\",\"response\":\"getTaxationStrategyAll.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_taxation_strategies(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first taxation-strategy to return.
        :param int records: The maximum number of taxation-strategies to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired products should be returned.
        :return: TaxationStrategyPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_taxation_strategies_with_http_info(**kwargs)
        else:
            (data) = self.get_all_taxation_strategies_with_http_info(**kwargs)
            return data

    def get_all_taxation_strategies_with_http_info(self, **kwargs):
        """
        Returns a collection of all taxation-strategies. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Get all tax\",\"response\":\"getTaxationStrategyAll.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_taxation_strategies_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first taxation-strategy to return.
        :param int records: The maximum number of taxation-strategies to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired products should be returned.
        :return: TaxationStrategyPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'offset', 'records', 'order_by', 'order', 'include_retired']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_taxation_strategies" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/taxation-strategies'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'include_retired' in params:
            query_params['include_retired'] = params['include_retired']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TaxationStrategyPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_taxation_strategy_by_consistent_id(self, taxation_strategy_id, **kwargs):
        """
        Returns the tax currently being applied for the taxation-strategy-ID. To return schedule or historic tax changes the include_retired query parameter should be set to true.
        {\"nickname\":\"Retrieve an existing tax \",\"response\":\"getTaxationStrategyByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_taxation_strategy_by_consistent_id(taxation_strategy_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str taxation_strategy_id:  (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first taxation-strategy to return.
        :param int records: The maximum number of taxation-strategies to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired products should be returned.
        :return: TaxationStrategyPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_taxation_strategy_by_consistent_id_with_http_info(taxation_strategy_id, **kwargs)
        else:
            (data) = self.get_taxation_strategy_by_consistent_id_with_http_info(taxation_strategy_id, **kwargs)
            return data

    def get_taxation_strategy_by_consistent_id_with_http_info(self, taxation_strategy_id, **kwargs):
        """
        Returns the tax currently being applied for the taxation-strategy-ID. To return schedule or historic tax changes the include_retired query parameter should be set to true.
        {\"nickname\":\"Retrieve an existing tax \",\"response\":\"getTaxationStrategyByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_taxation_strategy_by_consistent_id_with_http_info(taxation_strategy_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str taxation_strategy_id:  (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first taxation-strategy to return.
        :param int records: The maximum number of taxation-strategies to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired products should be returned.
        :return: TaxationStrategyPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['taxation_strategy_id', 'organizations', 'offset', 'records', 'order_by', 'order', 'include_retired']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_taxation_strategy_by_consistent_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'taxation_strategy_id' is set
        if ('taxation_strategy_id' not in params) or (params['taxation_strategy_id'] is None):
            raise ValueError("Missing the required parameter `taxation_strategy_id` when calling `get_taxation_strategy_by_consistent_id`")

        resource_path = '/taxation-strategies/{taxation-strategy-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'taxation_strategy_id' in params:
            path_params['taxation-strategy-ID'] = params['taxation_strategy_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'include_retired' in params:
            query_params['include_retired'] = params['include_retired']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TaxationStrategyPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_taxation_strategy_by_country(self, country, **kwargs):
        """
        Returns a collection of taxation-strategies, specified by the country parameter. By default 10 values are returned. Records are returned in natural order. To return schedule or historic tax changes the include_retired query parameter should be set to true.
        {\"nickname\":\"Retrieve by country\",\"response\":\"getTaxationStrategyByCountry.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_taxation_strategy_by_country(country, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str country: The country (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first taxation-strategy to return.
        :param int records: The maximum number of taxation-strategies to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired products should be returned.
        :return: TaxationStrategyPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_taxation_strategy_by_country_with_http_info(country, **kwargs)
        else:
            (data) = self.get_taxation_strategy_by_country_with_http_info(country, **kwargs)
            return data

    def get_taxation_strategy_by_country_with_http_info(self, country, **kwargs):
        """
        Returns a collection of taxation-strategies, specified by the country parameter. By default 10 values are returned. Records are returned in natural order. To return schedule or historic tax changes the include_retired query parameter should be set to true.
        {\"nickname\":\"Retrieve by country\",\"response\":\"getTaxationStrategyByCountry.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_taxation_strategy_by_country_with_http_info(country, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str country: The country (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first taxation-strategy to return.
        :param int records: The maximum number of taxation-strategies to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired products should be returned.
        :return: TaxationStrategyPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['country', 'organizations', 'offset', 'records', 'order_by', 'order', 'include_retired']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_taxation_strategy_by_country" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'country' is set
        if ('country' not in params) or (params['country'] is None):
            raise ValueError("Missing the required parameter `country` when calling `get_taxation_strategy_by_country`")

        resource_path = '/taxation-strategies/country/{country}'.replace('{format}', 'json')
        path_params = {}
        if 'country' in params:
            path_params['country'] = params['country']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'include_retired' in params:
            query_params['include_retired'] = params['include_retired']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TaxationStrategyPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_taxation_strategy_by_currency(self, currency, **kwargs):
        """
        Returns a collection of taxation-strategies, specified by the currency parameter. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Retrieve by currency\",\"response\":\"getTaxationStrategyByProvince.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_taxation_strategy_by_currency(currency, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str currency: The currency (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first taxation-strategy to return.
        :param int records: The maximum number of taxation-strategies to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired products should be returned.
        :return: TaxationStrategyPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_taxation_strategy_by_currency_with_http_info(currency, **kwargs)
        else:
            (data) = self.get_taxation_strategy_by_currency_with_http_info(currency, **kwargs)
            return data

    def get_taxation_strategy_by_currency_with_http_info(self, currency, **kwargs):
        """
        Returns a collection of taxation-strategies, specified by the currency parameter. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Retrieve by currency\",\"response\":\"getTaxationStrategyByProvince.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_taxation_strategy_by_currency_with_http_info(currency, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str currency: The currency (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first taxation-strategy to return.
        :param int records: The maximum number of taxation-strategies to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired products should be returned.
        :return: TaxationStrategyPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['currency', 'organizations', 'offset', 'records', 'order_by', 'order', 'include_retired']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_taxation_strategy_by_currency" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'currency' is set
        if ('currency' not in params) or (params['currency'] is None):
            raise ValueError("Missing the required parameter `currency` when calling `get_taxation_strategy_by_currency`")

        resource_path = '/taxation-strategies/currency/{currency}'.replace('{format}', 'json')
        path_params = {}
        if 'currency' in params:
            path_params['currency'] = params['currency']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'include_retired' in params:
            query_params['include_retired'] = params['include_retired']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TaxationStrategyPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_taxation_strategy_by_province(self, province, **kwargs):
        """
        Returns a collection of taxation-strategies, specified by the province parameter. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Retrieve by province\",\"response\":\"getTaxationStrategyByProvince.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_taxation_strategy_by_province(province, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str province: The province (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first taxation-strategy to return.
        :param int records: The maximum number of taxation-strategies to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired products should be returned.
        :return: TaxationStrategyPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_taxation_strategy_by_province_with_http_info(province, **kwargs)
        else:
            (data) = self.get_taxation_strategy_by_province_with_http_info(province, **kwargs)
            return data

    def get_taxation_strategy_by_province_with_http_info(self, province, **kwargs):
        """
        Returns a collection of taxation-strategies, specified by the province parameter. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Retrieve by province\",\"response\":\"getTaxationStrategyByProvince.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_taxation_strategy_by_province_with_http_info(province, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str province: The province (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first taxation-strategy to return.
        :param int records: The maximum number of taxation-strategies to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired products should be returned.
        :return: TaxationStrategyPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['province', 'organizations', 'offset', 'records', 'order_by', 'order', 'include_retired']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_taxation_strategy_by_province" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'province' is set
        if ('province' not in params) or (params['province'] is None):
            raise ValueError("Missing the required parameter `province` when calling `get_taxation_strategy_by_province`")

        resource_path = '/taxation-strategies/province/{province}'.replace('{format}', 'json')
        path_params = {}
        if 'province' in params:
            path_params['province'] = params['province']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'include_retired' in params:
            query_params['include_retired'] = params['include_retired']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TaxationStrategyPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_taxation_strategy_by_version_id(self, version_id, **kwargs):
        """
        Returns a single taxation-strategy, specified by the taxation-strategy-ID parameter.
        {\"nickname\":\"Retrieve by version\",\"response\":\"getTaxationStrategyByVersionID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_taxation_strategy_by_version_id(version_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str version_id:  (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: TaxationStrategyPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_taxation_strategy_by_version_id_with_http_info(version_id, **kwargs)
        else:
            (data) = self.get_taxation_strategy_by_version_id_with_http_info(version_id, **kwargs)
            return data

    def get_taxation_strategy_by_version_id_with_http_info(self, version_id, **kwargs):
        """
        Returns a single taxation-strategy, specified by the taxation-strategy-ID parameter.
        {\"nickname\":\"Retrieve by version\",\"response\":\"getTaxationStrategyByVersionID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_taxation_strategy_by_version_id_with_http_info(version_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str version_id:  (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: TaxationStrategyPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version_id', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_taxation_strategy_by_version_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version_id' is set
        if ('version_id' not in params) or (params['version_id'] is None):
            raise ValueError("Missing the required parameter `version_id` when calling `get_taxation_strategy_by_version_id`")

        resource_path = '/taxation-strategies/version/{version-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'version_id' in params:
            path_params['version-ID'] = params['version_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TaxationStrategyPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def retire_taxation_strategy(self, version_id, organizations, **kwargs):
        """
        Retires the taxation-strategy specified by taxation-strategy-ID parameter. Only the version of the tax which has an unbounded (null) validTill can be removed. Removing a tax change will make the previous tax come into effect. For example if you have a Tax in January and 5% and a new tax at 7% from February onwards, you can remove the February tax. Remove the February tax will re-instate the January tax.
        {\"nickname\":\"Remove a tax change\",\"response\":\"deleteSubscription.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.retire_taxation_strategy(version_id, organizations, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str version_id:  (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls. (required)
        :return: TaxationStrategyPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.retire_taxation_strategy_with_http_info(version_id, organizations, **kwargs)
        else:
            (data) = self.retire_taxation_strategy_with_http_info(version_id, organizations, **kwargs)
            return data

    def retire_taxation_strategy_with_http_info(self, version_id, organizations, **kwargs):
        """
        Retires the taxation-strategy specified by taxation-strategy-ID parameter. Only the version of the tax which has an unbounded (null) validTill can be removed. Removing a tax change will make the previous tax come into effect. For example if you have a Tax in January and 5% and a new tax at 7% from February onwards, you can remove the February tax. Remove the February tax will re-instate the January tax.
        {\"nickname\":\"Remove a tax change\",\"response\":\"deleteSubscription.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.retire_taxation_strategy_with_http_info(version_id, organizations, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str version_id:  (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls. (required)
        :return: TaxationStrategyPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version_id', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retire_taxation_strategy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version_id' is set
        if ('version_id' not in params) or (params['version_id'] is None):
            raise ValueError("Missing the required parameter `version_id` when calling `retire_taxation_strategy`")
        # verify the required parameter 'organizations' is set
        if ('organizations' not in params) or (params['organizations'] is None):
            raise ValueError("Missing the required parameter `organizations` when calling `retire_taxation_strategy`")

        resource_path = '/taxation-strategies/version/{version-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'version_id' in params:
            path_params['version-ID'] = params['version_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TaxationStrategyPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_taxation_strategy(self, taxation_strategy, **kwargs):
        """
        Update a tax.
        {\"nickname\":\"Update a tax\",\"request\":\"updateTaxationStrategyRequest.html\",\"response\":\"updateTaxationStrategyResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_taxation_strategy(taxation_strategy, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MutableBillingEntity taxation_strategy: The taxation-strategy object to be updated. (required)
        :return: TaxationStrategyPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_taxation_strategy_with_http_info(taxation_strategy, **kwargs)
        else:
            (data) = self.update_taxation_strategy_with_http_info(taxation_strategy, **kwargs)
            return data

    def update_taxation_strategy_with_http_info(self, taxation_strategy, **kwargs):
        """
        Update a tax.
        {\"nickname\":\"Update a tax\",\"request\":\"updateTaxationStrategyRequest.html\",\"response\":\"updateTaxationStrategyResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_taxation_strategy_with_http_info(taxation_strategy, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MutableBillingEntity taxation_strategy: The taxation-strategy object to be updated. (required)
        :return: TaxationStrategyPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['taxation_strategy']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_taxation_strategy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'taxation_strategy' is set
        if ('taxation_strategy' not in params) or (params['taxation_strategy'] is None):
            raise ValueError("Missing the required parameter `taxation_strategy` when calling `update_taxation_strategy`")

        resource_path = '/taxation-strategies'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'taxation_strategy' in params:
            body_params = params['taxation_strategy']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TaxationStrategyPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
