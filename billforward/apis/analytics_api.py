# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class AnalyticsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_account_debts(self, debts_per_account, **kwargs):
        """
        Gets outstanding debts per account, within a date range.
        {\"nickname\" : \"Get account debts\",\"response\" : \"getAccountDebts.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_account_debts(debts_per_account, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param BillingEntityBase debts_per_account: The payments-per-account object. (required)
        :return: AccountPaymentsResultPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_account_debts_with_http_info(debts_per_account, **kwargs)
        else:
            (data) = self.get_account_debts_with_http_info(debts_per_account, **kwargs)
            return data

    def get_account_debts_with_http_info(self, debts_per_account, **kwargs):
        """
        Gets outstanding debts per account, within a date range.
        {\"nickname\" : \"Get account debts\",\"response\" : \"getAccountDebts.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_account_debts_with_http_info(debts_per_account, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param BillingEntityBase debts_per_account: The payments-per-account object. (required)
        :return: AccountPaymentsResultPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['debts_per_account']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_debts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'debts_per_account' is set
        if ('debts_per_account' not in params) or (params['debts_per_account'] is None):
            raise ValueError("Missing the required parameter `debts_per_account` when calling `get_account_debts`")

        resource_path = '/analytics/payments/accounts/outstanding'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'debts_per_account' in params:
            body_params = params['debts_per_account']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AccountPaymentsResultPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_account_ltv(self, account_id, end_datetime, **kwargs):
        """
        Gets an account's life-time value, as of a given end date.
        {\"nickname\":\"Get account life-time value\",\"response\":\"getAccountLTV.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_account_ltv(account_id, end_datetime, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: The id of the account. (required)
        :param str end_datetime: The UTC DateTime specifying the end of the result period. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first amendment to return.
        :param int records: The maximum number of amendments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: The direction of any ordering, either ASC or DESC.
        :return: AccountLTVResultPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_account_ltv_with_http_info(account_id, end_datetime, **kwargs)
        else:
            (data) = self.get_account_ltv_with_http_info(account_id, end_datetime, **kwargs)
            return data

    def get_account_ltv_with_http_info(self, account_id, end_datetime, **kwargs):
        """
        Gets an account's life-time value, as of a given end date.
        {\"nickname\":\"Get account life-time value\",\"response\":\"getAccountLTV.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_account_ltv_with_http_info(account_id, end_datetime, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: The id of the account. (required)
        :param str end_datetime: The UTC DateTime specifying the end of the result period. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first amendment to return.
        :param int records: The maximum number of amendments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: The direction of any ordering, either ASC or DESC.
        :return: AccountLTVResultPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'end_datetime', 'organizations', 'offset', 'records', 'order_by', 'order']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_ltv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_account_ltv`")
        # verify the required parameter 'end_datetime' is set
        if ('end_datetime' not in params) or (params['end_datetime'] is None):
            raise ValueError("Missing the required parameter `end_datetime` when calling `get_account_ltv`")

        resource_path = '/analytics/account-ltv/{account-id}/{end-datetime}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['account-id'] = params['account_id']
        if 'end_datetime' in params:
            path_params['end-datetime'] = params['end_datetime']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AccountLTVResultPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_account_payments(self, payments_per_account, **kwargs):
        """
        Gets hourly payments per product, within a date range.
        {\"nickname\" : \"Get payments per account\",\"response\" : \"getAccountPayments.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_account_payments(payments_per_account, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param BillingEntityBase payments_per_account: The payments-per-account object. (required)
        :return: AccountPaymentsResultPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_account_payments_with_http_info(payments_per_account, **kwargs)
        else:
            (data) = self.get_account_payments_with_http_info(payments_per_account, **kwargs)
            return data

    def get_account_payments_with_http_info(self, payments_per_account, **kwargs):
        """
        Gets hourly payments per product, within a date range.
        {\"nickname\" : \"Get payments per account\",\"response\" : \"getAccountPayments.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_account_payments_with_http_info(payments_per_account, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param BillingEntityBase payments_per_account: The payments-per-account object. (required)
        :return: AccountPaymentsResultPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payments_per_account']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_payments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payments_per_account' is set
        if ('payments_per_account' not in params) or (params['payments_per_account'] is None):
            raise ValueError("Missing the required parameter `payments_per_account` when calling `get_account_payments`")

        resource_path = '/analytics/payments/accounts'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payments_per_account' in params:
            body_params = params['payments_per_account']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AccountPaymentsResultPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_billforward_managed_payments(self, start_datetime, end_datetime, **kwargs):
        """
        Gets all payments managed by BillForward, within a date range.
        {\"nickname\":\"Get managed payments\",\"response\":\"getManagedPayments.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_billforward_managed_payments(start_datetime, end_datetime, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str start_datetime: The UTC DateTime specifying the start of the result period. (required)
        :param str end_datetime: The UTC DateTime specifying the end of the result period. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first amendment to return.
        :param int records: The maximum number of amendments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: The direction of any ordering, either ASC or DESC.
        :return: BillforwardManagedPaymentsResultPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_billforward_managed_payments_with_http_info(start_datetime, end_datetime, **kwargs)
        else:
            (data) = self.get_billforward_managed_payments_with_http_info(start_datetime, end_datetime, **kwargs)
            return data

    def get_billforward_managed_payments_with_http_info(self, start_datetime, end_datetime, **kwargs):
        """
        Gets all payments managed by BillForward, within a date range.
        {\"nickname\":\"Get managed payments\",\"response\":\"getManagedPayments.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_billforward_managed_payments_with_http_info(start_datetime, end_datetime, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str start_datetime: The UTC DateTime specifying the start of the result period. (required)
        :param str end_datetime: The UTC DateTime specifying the end of the result period. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first amendment to return.
        :param int records: The maximum number of amendments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: The direction of any ordering, either ASC or DESC.
        :return: BillforwardManagedPaymentsResultPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_datetime', 'end_datetime', 'organizations', 'offset', 'records', 'order_by', 'order']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_billforward_managed_payments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_datetime' is set
        if ('start_datetime' not in params) or (params['start_datetime'] is None):
            raise ValueError("Missing the required parameter `start_datetime` when calling `get_billforward_managed_payments`")
        # verify the required parameter 'end_datetime' is set
        if ('end_datetime' not in params) or (params['end_datetime'] is None):
            raise ValueError("Missing the required parameter `end_datetime` when calling `get_billforward_managed_payments`")

        resource_path = '/analytics/billforward-managed-payments/{start-datetime}/{end-datetime}'.replace('{format}', 'json')
        path_params = {}
        if 'start_datetime' in params:
            path_params['start-datetime'] = params['start_datetime']
        if 'end_datetime' in params:
            path_params['end-datetime'] = params['end_datetime']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='BillforwardManagedPaymentsResultPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_churn(self, start_datetime, end_datetime, **kwargs):
        """
        Gets churn, within a date range.
        {\"nickname\":\"Get churn\",\"response\":\"getChurn.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_churn(start_datetime, end_datetime, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str start_datetime: The UTC DateTime specifying the start of the result period. (required)
        :param str end_datetime: The UTC DateTime specifying the end of the result period. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first amendment to return.
        :param int records: The maximum number of amendments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: The direction of any ordering, either ASC or DESC.
        :return: CassChurnResultPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_churn_with_http_info(start_datetime, end_datetime, **kwargs)
        else:
            (data) = self.get_churn_with_http_info(start_datetime, end_datetime, **kwargs)
            return data

    def get_churn_with_http_info(self, start_datetime, end_datetime, **kwargs):
        """
        Gets churn, within a date range.
        {\"nickname\":\"Get churn\",\"response\":\"getChurn.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_churn_with_http_info(start_datetime, end_datetime, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str start_datetime: The UTC DateTime specifying the start of the result period. (required)
        :param str end_datetime: The UTC DateTime specifying the end of the result period. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first amendment to return.
        :param int records: The maximum number of amendments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: The direction of any ordering, either ASC or DESC.
        :return: CassChurnResultPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_datetime', 'end_datetime', 'organizations', 'offset', 'records', 'order_by', 'order']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_churn" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_datetime' is set
        if ('start_datetime' not in params) or (params['start_datetime'] is None):
            raise ValueError("Missing the required parameter `start_datetime` when calling `get_churn`")
        # verify the required parameter 'end_datetime' is set
        if ('end_datetime' not in params) or (params['end_datetime'] is None):
            raise ValueError("Missing the required parameter `end_datetime` when calling `get_churn`")

        resource_path = '/analytics/churn/{start-datetime}/{end-datetime}'.replace('{format}', 'json')
        path_params = {}
        if 'start_datetime' in params:
            path_params['start-datetime'] = params['start_datetime']
        if 'end_datetime' in params:
            path_params['end-datetime'] = params['end_datetime']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CassChurnResultPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_debts(self, start_datetime, end_datetime, **kwargs):
        """
        Gets debts within a date range.
        {\"nickname\":\"Get debts\",\"response\":\"getDebts.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_debts(start_datetime, end_datetime, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str start_datetime: The UTC DateTime specifying the start of the result period. (required)
        :param str end_datetime: The UTC DateTime specifying the end of the result period. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first amendment to return.
        :param int records: The maximum number of amendments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: The direction of any ordering, either ASC or DESC.
        :return: DebtsResultPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_debts_with_http_info(start_datetime, end_datetime, **kwargs)
        else:
            (data) = self.get_debts_with_http_info(start_datetime, end_datetime, **kwargs)
            return data

    def get_debts_with_http_info(self, start_datetime, end_datetime, **kwargs):
        """
        Gets debts within a date range.
        {\"nickname\":\"Get debts\",\"response\":\"getDebts.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_debts_with_http_info(start_datetime, end_datetime, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str start_datetime: The UTC DateTime specifying the start of the result period. (required)
        :param str end_datetime: The UTC DateTime specifying the end of the result period. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first amendment to return.
        :param int records: The maximum number of amendments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: The direction of any ordering, either ASC or DESC.
        :return: DebtsResultPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_datetime', 'end_datetime', 'organizations', 'offset', 'records', 'order_by', 'order']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_debts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_datetime' is set
        if ('start_datetime' not in params) or (params['start_datetime'] is None):
            raise ValueError("Missing the required parameter `start_datetime` when calling `get_debts`")
        # verify the required parameter 'end_datetime' is set
        if ('end_datetime' not in params) or (params['end_datetime'] is None):
            raise ValueError("Missing the required parameter `end_datetime` when calling `get_debts`")

        resource_path = '/analytics/payments/outstanding/{start-datetime}/{end-datetime}'.replace('{format}', 'json')
        path_params = {}
        if 'start_datetime' in params:
            path_params['start-datetime'] = params['start_datetime']
        if 'end_datetime' in params:
            path_params['end-datetime'] = params['end_datetime']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DebtsResultPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_payments(self, start_datetime, end_datetime, **kwargs):
        """
        Gets payments within a date range.
        {\"nickname\":\"Get all payments\",\"response\":\"getPayments.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_payments(start_datetime, end_datetime, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str start_datetime: The UTC DateTime specifying the start of the result period. (required)
        :param str end_datetime: The UTC DateTime specifying the end of the result period. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first amendment to return.
        :param int records: The maximum number of amendments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: The direction of any ordering, either ASC or DESC.
        :return: CassPaymentResultPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_payments_with_http_info(start_datetime, end_datetime, **kwargs)
        else:
            (data) = self.get_payments_with_http_info(start_datetime, end_datetime, **kwargs)
            return data

    def get_payments_with_http_info(self, start_datetime, end_datetime, **kwargs):
        """
        Gets payments within a date range.
        {\"nickname\":\"Get all payments\",\"response\":\"getPayments.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_payments_with_http_info(start_datetime, end_datetime, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str start_datetime: The UTC DateTime specifying the start of the result period. (required)
        :param str end_datetime: The UTC DateTime specifying the end of the result period. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first amendment to return.
        :param int records: The maximum number of amendments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: The direction of any ordering, either ASC or DESC.
        :return: CassPaymentResultPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_datetime', 'end_datetime', 'organizations', 'offset', 'records', 'order_by', 'order']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_datetime' is set
        if ('start_datetime' not in params) or (params['start_datetime'] is None):
            raise ValueError("Missing the required parameter `start_datetime` when calling `get_payments`")
        # verify the required parameter 'end_datetime' is set
        if ('end_datetime' not in params) or (params['end_datetime'] is None):
            raise ValueError("Missing the required parameter `end_datetime` when calling `get_payments`")

        resource_path = '/analytics/payments/{start-datetime}/{end-datetime}'.replace('{format}', 'json')
        path_params = {}
        if 'start_datetime' in params:
            path_params['start-datetime'] = params['start_datetime']
        if 'end_datetime' in params:
            path_params['end-datetime'] = params['end_datetime']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CassPaymentResultPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_product_payments(self, payments_per_product, **kwargs):
        """
        Gets hourly payments per product, within a date range.
        {\"nickname\" : \"Get payments per product\",\"response\" : \"getProductPayments.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_product_payments(payments_per_product, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param BillingEntityBase payments_per_product: The payments-per-product object. (required)
        :return: ProductPaymentsResultPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_product_payments_with_http_info(payments_per_product, **kwargs)
        else:
            (data) = self.get_product_payments_with_http_info(payments_per_product, **kwargs)
            return data

    def get_product_payments_with_http_info(self, payments_per_product, **kwargs):
        """
        Gets hourly payments per product, within a date range.
        {\"nickname\" : \"Get payments per product\",\"response\" : \"getProductPayments.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_product_payments_with_http_info(payments_per_product, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param BillingEntityBase payments_per_product: The payments-per-product object. (required)
        :return: ProductPaymentsResultPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payments_per_product']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_product_payments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payments_per_product' is set
        if ('payments_per_product' not in params) or (params['payments_per_product'] is None):
            raise ValueError("Missing the required parameter `payments_per_product` when calling `get_product_payments`")

        resource_path = '/analytics/payments-per-product'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payments_per_product' in params:
            body_params = params['payments_per_product']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProductPaymentsResultPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_product_rate_plan_payments(self, payments_per_product_rate_plan, **kwargs):
        """
        Gets hourly payments per product, within a date range.
        {\"nickname\" : \"Get payments per rate plan\",\"response\" : \"getRatePlanPayments.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_product_rate_plan_payments(payments_per_product_rate_plan, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param BillingEntityBase payments_per_product_rate_plan: The payments-per-product-rate-plan object. (required)
        :return: ProductRatePlanPaymentsResultPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_product_rate_plan_payments_with_http_info(payments_per_product_rate_plan, **kwargs)
        else:
            (data) = self.get_product_rate_plan_payments_with_http_info(payments_per_product_rate_plan, **kwargs)
            return data

    def get_product_rate_plan_payments_with_http_info(self, payments_per_product_rate_plan, **kwargs):
        """
        Gets hourly payments per product, within a date range.
        {\"nickname\" : \"Get payments per rate plan\",\"response\" : \"getRatePlanPayments.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_product_rate_plan_payments_with_http_info(payments_per_product_rate_plan, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param BillingEntityBase payments_per_product_rate_plan: The payments-per-product-rate-plan object. (required)
        :return: ProductRatePlanPaymentsResultPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payments_per_product_rate_plan']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_product_rate_plan_payments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payments_per_product_rate_plan' is set
        if ('payments_per_product_rate_plan' not in params) or (params['payments_per_product_rate_plan'] is None):
            raise ValueError("Missing the required parameter `payments_per_product_rate_plan` when calling `get_product_rate_plan_payments`")

        resource_path = '/analytics/payments/product-rate-plan'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payments_per_product_rate_plan' in params:
            body_params = params['payments_per_product_rate_plan']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProductRatePlanPaymentsResultPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_subscription_ltv(self, subscription_id, end_datetime, **kwargs):
        """
        Gets a subscription's life-time value, as of a given end date.
        {\"nickname\":\"Get sub life-time value\",\"response\":\"getSubscriptionLTV.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_subscription_ltv(subscription_id, end_datetime, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str subscription_id: The id of the subscription. (required)
        :param str end_datetime: The UTC DateTime specifying the end of the result period. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first amendment to return.
        :param int records: The maximum number of amendments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: The direction of any ordering, either ASC or DESC.
        :return: SubscriptionLTVResultPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_subscription_ltv_with_http_info(subscription_id, end_datetime, **kwargs)
        else:
            (data) = self.get_subscription_ltv_with_http_info(subscription_id, end_datetime, **kwargs)
            return data

    def get_subscription_ltv_with_http_info(self, subscription_id, end_datetime, **kwargs):
        """
        Gets a subscription's life-time value, as of a given end date.
        {\"nickname\":\"Get sub life-time value\",\"response\":\"getSubscriptionLTV.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_subscription_ltv_with_http_info(subscription_id, end_datetime, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str subscription_id: The id of the subscription. (required)
        :param str end_datetime: The UTC DateTime specifying the end of the result period. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first amendment to return.
        :param int records: The maximum number of amendments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: The direction of any ordering, either ASC or DESC.
        :return: SubscriptionLTVResultPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subscription_id', 'end_datetime', 'organizations', 'offset', 'records', 'order_by', 'order']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subscription_ltv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in params) or (params['subscription_id'] is None):
            raise ValueError("Missing the required parameter `subscription_id` when calling `get_subscription_ltv`")
        # verify the required parameter 'end_datetime' is set
        if ('end_datetime' not in params) or (params['end_datetime'] is None):
            raise ValueError("Missing the required parameter `end_datetime` when calling `get_subscription_ltv`")

        resource_path = '/analytics/subscription-ltv/{subscription-id}/{end-datetime}'.replace('{format}', 'json')
        path_params = {}
        if 'subscription_id' in params:
            path_params['subscription-id'] = params['subscription_id']
        if 'end_datetime' in params:
            path_params['end-datetime'] = params['end_datetime']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SubscriptionLTVResultPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_upgrades(self, start_datetime, end_datetime, **kwargs):
        """
        Gets upgrades, within a date range.
        {\"nickname\":\"Get upgrades\",\"response\":\"getUpgrades.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_upgrades(start_datetime, end_datetime, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str start_datetime: The UTC DateTime specifying the start of the result period. (required)
        :param str end_datetime: The UTC DateTime specifying the end of the result period. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first amendment to return.
        :param int records: The maximum number of amendments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: The direction of any ordering, either ASC or DESC.
        :return: CassUpgradeResultPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_upgrades_with_http_info(start_datetime, end_datetime, **kwargs)
        else:
            (data) = self.get_upgrades_with_http_info(start_datetime, end_datetime, **kwargs)
            return data

    def get_upgrades_with_http_info(self, start_datetime, end_datetime, **kwargs):
        """
        Gets upgrades, within a date range.
        {\"nickname\":\"Get upgrades\",\"response\":\"getUpgrades.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_upgrades_with_http_info(start_datetime, end_datetime, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str start_datetime: The UTC DateTime specifying the start of the result period. (required)
        :param str end_datetime: The UTC DateTime specifying the end of the result period. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first amendment to return.
        :param int records: The maximum number of amendments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: The direction of any ordering, either ASC or DESC.
        :return: CassUpgradeResultPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_datetime', 'end_datetime', 'organizations', 'offset', 'records', 'order_by', 'order']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_upgrades" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_datetime' is set
        if ('start_datetime' not in params) or (params['start_datetime'] is None):
            raise ValueError("Missing the required parameter `start_datetime` when calling `get_upgrades`")
        # verify the required parameter 'end_datetime' is set
        if ('end_datetime' not in params) or (params['end_datetime'] is None):
            raise ValueError("Missing the required parameter `end_datetime` when calling `get_upgrades`")

        resource_path = '/analytics/upgrades/{start-datetime}/{end-datetime}'.replace('{format}', 'json')
        path_params = {}
        if 'start_datetime' in params:
            path_params['start-datetime'] = params['start_datetime']
        if 'end_datetime' in params:
            path_params['end-datetime'] = params['end_datetime']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CassUpgradeResultPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
