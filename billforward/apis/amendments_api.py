# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class AmendmentsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_amendment(self, amendment, **kwargs):
        """
        Create an amendment.
        {\"nickname\":\"Create a new amendment\",\"request\":\"createAmendmentRequest.html\",\"response\":\"createAmendmentResponse.html\" }

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_amendment(amendment, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Amendment amendment: The amendment object to be created. (required)
        :return: AmendmentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_amendment_with_http_info(amendment, **kwargs)
        else:
            (data) = self.create_amendment_with_http_info(amendment, **kwargs)
            return data

    def create_amendment_with_http_info(self, amendment, **kwargs):
        """
        Create an amendment.
        {\"nickname\":\"Create a new amendment\",\"request\":\"createAmendmentRequest.html\",\"response\":\"createAmendmentResponse.html\" }

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_amendment_with_http_info(amendment, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Amendment amendment: The amendment object to be created. (required)
        :return: AmendmentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['amendment']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_amendment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'amendment' is set
        if ('amendment' not in params) or (params['amendment'] is None):
            raise ValueError("Missing the required parameter `amendment` when calling `create_amendment`")

        resource_path = '/amendments'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'amendment' in params:
            body_params = params['amendment']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AmendmentPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_all_amendments(self, **kwargs):
        """
        Returns a collection of all amendments. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Get all amendments\",\"response\":\"getAmendmentAll.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_amendments(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first amendment to return.
        :param int records: The maximum number of amendments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param str invoice_id: Ihe invoice ID associated with the amendment.
        :param str state: Ihe state of the amendment.
        :param str type: Ihe type of amendment.
        :return: AmendmentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_amendments_with_http_info(**kwargs)
        else:
            (data) = self.get_all_amendments_with_http_info(**kwargs)
            return data

    def get_all_amendments_with_http_info(self, **kwargs):
        """
        Returns a collection of all amendments. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Get all amendments\",\"response\":\"getAmendmentAll.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_amendments_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first amendment to return.
        :param int records: The maximum number of amendments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param str invoice_id: Ihe invoice ID associated with the amendment.
        :param str state: Ihe state of the amendment.
        :param str type: Ihe type of amendment.
        :return: AmendmentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'offset', 'records', 'order_by', 'order', 'invoice_id', 'state', 'type']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_amendments" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/amendments'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'invoice_id' in params:
            query_params['invoice_id'] = params['invoice_id']
        if 'state' in params:
            query_params['state'] = params['state']
        if 'type' in params:
            query_params['type'] = params['type']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AmendmentPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_amendment_by_id(self, amendment_id, **kwargs):
        """
        Returns a single amendment, specified by the amendment-ID parameter.
        {\"nickname\":\"Retrieve an existing amendment\",\"response\":\"getAmendmentByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_amendment_by_id(amendment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str amendment_id: The unique string-ID of the amendment. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: AmendmentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_amendment_by_id_with_http_info(amendment_id, **kwargs)
        else:
            (data) = self.get_amendment_by_id_with_http_info(amendment_id, **kwargs)
            return data

    def get_amendment_by_id_with_http_info(self, amendment_id, **kwargs):
        """
        Returns a single amendment, specified by the amendment-ID parameter.
        {\"nickname\":\"Retrieve an existing amendment\",\"response\":\"getAmendmentByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_amendment_by_id_with_http_info(amendment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str amendment_id: The unique string-ID of the amendment. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: AmendmentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['amendment_id', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_amendment_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'amendment_id' is set
        if ('amendment_id' not in params) or (params['amendment_id'] is None):
            raise ValueError("Missing the required parameter `amendment_id` when calling `get_amendment_by_id`")

        resource_path = '/amendments/{amendment-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'amendment_id' in params:
            path_params['amendment-ID'] = params['amendment_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AmendmentPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_amendment_by_state(self, state, **kwargs):
        """
        Returns a collection of amendments, specified by the state parameter. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Retrieve by state\",\"response\":\"getAmendmentsByState.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_amendment_by_state(state, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str state: The current state of the amendment, either pending, succeeded, failed or discarded (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first amendment to return.
        :param int records: The maximum number of amendments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :return: AmendmentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_amendment_by_state_with_http_info(state, **kwargs)
        else:
            (data) = self.get_amendment_by_state_with_http_info(state, **kwargs)
            return data

    def get_amendment_by_state_with_http_info(self, state, **kwargs):
        """
        Returns a collection of amendments, specified by the state parameter. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Retrieve by state\",\"response\":\"getAmendmentsByState.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_amendment_by_state_with_http_info(state, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str state: The current state of the amendment, either pending, succeeded, failed or discarded (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first amendment to return.
        :param int records: The maximum number of amendments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :return: AmendmentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['state', 'organizations', 'offset', 'records', 'order_by', 'order']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_amendment_by_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'state' is set
        if ('state' not in params) or (params['state'] is None):
            raise ValueError("Missing the required parameter `state` when calling `get_amendment_by_state`")

        resource_path = '/amendments/state/{state}'.replace('{format}', 'json')
        path_params = {}
        if 'state' in params:
            path_params['state'] = params['state']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AmendmentPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_amendment_by_subscription_id(self, subscription_id, **kwargs):
        """
        Returns a collection of amendments, specified by the subscription-ID parameter. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Retrieve by subscription\",\"response\":\"getAmendmentsBySubscription.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_amendment_by_subscription_id(subscription_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str subscription_id: ID of the subscription (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first amendment to return.
        :param int records: The maximum number of amendments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: The direction of any ordering, either ASC or DESC.
        :return: AmendmentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_amendment_by_subscription_id_with_http_info(subscription_id, **kwargs)
        else:
            (data) = self.get_amendment_by_subscription_id_with_http_info(subscription_id, **kwargs)
            return data

    def get_amendment_by_subscription_id_with_http_info(self, subscription_id, **kwargs):
        """
        Returns a collection of amendments, specified by the subscription-ID parameter. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Retrieve by subscription\",\"response\":\"getAmendmentsBySubscription.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_amendment_by_subscription_id_with_http_info(subscription_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str subscription_id: ID of the subscription (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first amendment to return.
        :param int records: The maximum number of amendments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: The direction of any ordering, either ASC or DESC.
        :return: AmendmentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subscription_id', 'organizations', 'offset', 'records', 'order_by', 'order']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_amendment_by_subscription_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in params) or (params['subscription_id'] is None):
            raise ValueError("Missing the required parameter `subscription_id` when calling `get_amendment_by_subscription_id`")

        resource_path = '/amendments/subscription/{subscription-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'subscription_id' in params:
            path_params['subscription-ID'] = params['subscription_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AmendmentPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_amendment_swagger(self, query_string, **kwargs):
        """
        
        {\"nickname\":\"\",\"response\":\"\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_amendment_swagger(query_string, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str query_string: The query string used to search. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The starting index of the search results.
        :param int records: The number of search results to return.
        :param bool wildcard: Toggle if we search for full words or whether a wildcard is used.
        :param bool entity: Is an entity returned with the search results.
        :return: SwaggerTypeList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_amendment_swagger_with_http_info(query_string, **kwargs)
        else:
            (data) = self.get_amendment_swagger_with_http_info(query_string, **kwargs)
            return data

    def get_amendment_swagger_with_http_info(self, query_string, **kwargs):
        """
        
        {\"nickname\":\"\",\"response\":\"\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_amendment_swagger_with_http_info(query_string, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str query_string: The query string used to search. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The starting index of the search results.
        :param int records: The number of search results to return.
        :param bool wildcard: Toggle if we search for full words or whether a wildcard is used.
        :param bool entity: Is an entity returned with the search results.
        :return: SwaggerTypeList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query_string', 'organizations', 'offset', 'records', 'wildcard', 'entity']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_amendment_swagger" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'query_string' is set
        if ('query_string' not in params) or (params['query_string'] is None):
            raise ValueError("Missing the required parameter `query_string` when calling `get_amendment_swagger`")

        resource_path = '/amendments/swagger-end-point/{query-string}'.replace('{format}', 'json')
        path_params = {}
        if 'query_string' in params:
            path_params['query-string'] = params['query_string']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'wildcard' in params:
            query_params['wildcard'] = params['wildcard']
        if 'entity' in params:
            query_params['entity'] = params['entity']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SwaggerTypeList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_amendments_by_actioning_time(self, lower_threshold, upper_threshold, **kwargs):
        """
        Returns a collection of amendment objects with an actioning-time within the period specified by the lower-threshold and upper-threshold parameters. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Retrieve by actioning\",\"response\":\"getAmendmentByActioningTime.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_amendments_by_actioning_time(lower_threshold, upper_threshold, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str lower_threshold: The UTC DateTime specifying the start of the result period. (required)
        :param str upper_threshold: The UTC DateTime specifying the end of the result period. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first amendment to return.
        :param int records: The maximum number of amendments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :return: AmendmentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_amendments_by_actioning_time_with_http_info(lower_threshold, upper_threshold, **kwargs)
        else:
            (data) = self.get_amendments_by_actioning_time_with_http_info(lower_threshold, upper_threshold, **kwargs)
            return data

    def get_amendments_by_actioning_time_with_http_info(self, lower_threshold, upper_threshold, **kwargs):
        """
        Returns a collection of amendment objects with an actioning-time within the period specified by the lower-threshold and upper-threshold parameters. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Retrieve by actioning\",\"response\":\"getAmendmentByActioningTime.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_amendments_by_actioning_time_with_http_info(lower_threshold, upper_threshold, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str lower_threshold: The UTC DateTime specifying the start of the result period. (required)
        :param str upper_threshold: The UTC DateTime specifying the end of the result period. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first amendment to return.
        :param int records: The maximum number of amendments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :return: AmendmentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lower_threshold', 'upper_threshold', 'organizations', 'offset', 'records', 'order_by', 'order']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_amendments_by_actioning_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lower_threshold' is set
        if ('lower_threshold' not in params) or (params['lower_threshold'] is None):
            raise ValueError("Missing the required parameter `lower_threshold` when calling `get_amendments_by_actioning_time`")
        # verify the required parameter 'upper_threshold' is set
        if ('upper_threshold' not in params) or (params['upper_threshold'] is None):
            raise ValueError("Missing the required parameter `upper_threshold` when calling `get_amendments_by_actioning_time`")

        resource_path = '/amendments/actioning-time/{lower-threshold}/{upper-threshold}'.replace('{format}', 'json')
        path_params = {}
        if 'lower_threshold' in params:
            path_params['lower-threshold'] = params['lower_threshold']
        if 'upper_threshold' in params:
            path_params['upper-threshold'] = params['upper_threshold']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AmendmentPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_amendments_by_created_date(self, lower_threshold, upper_threshold, **kwargs):
        """
        Returns a collection of amendment objects with created times within the period specified by the lower-threshold and upper-threshold parameters. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Retrieve by creation\",\"response\":\"getAmendmentByCreated.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_amendments_by_created_date(lower_threshold, upper_threshold, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str lower_threshold: The UTC DateTime specifying the start of the result period. (required)
        :param str upper_threshold: The UTC DateTime specifying the end of the result period. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first amendment to return.
        :param int records: The maximum number of amendments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :return: AmendmentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_amendments_by_created_date_with_http_info(lower_threshold, upper_threshold, **kwargs)
        else:
            (data) = self.get_amendments_by_created_date_with_http_info(lower_threshold, upper_threshold, **kwargs)
            return data

    def get_amendments_by_created_date_with_http_info(self, lower_threshold, upper_threshold, **kwargs):
        """
        Returns a collection of amendment objects with created times within the period specified by the lower-threshold and upper-threshold parameters. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Retrieve by creation\",\"response\":\"getAmendmentByCreated.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_amendments_by_created_date_with_http_info(lower_threshold, upper_threshold, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str lower_threshold: The UTC DateTime specifying the start of the result period. (required)
        :param str upper_threshold: The UTC DateTime specifying the end of the result period. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first amendment to return.
        :param int records: The maximum number of amendments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :return: AmendmentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lower_threshold', 'upper_threshold', 'organizations', 'offset', 'records', 'order_by', 'order']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_amendments_by_created_date" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lower_threshold' is set
        if ('lower_threshold' not in params) or (params['lower_threshold'] is None):
            raise ValueError("Missing the required parameter `lower_threshold` when calling `get_amendments_by_created_date`")
        # verify the required parameter 'upper_threshold' is set
        if ('upper_threshold' not in params) or (params['upper_threshold'] is None):
            raise ValueError("Missing the required parameter `upper_threshold` when calling `get_amendments_by_created_date`")

        resource_path = '/amendments/created/{lower-threshold}/{upper-threshold}'.replace('{format}', 'json')
        path_params = {}
        if 'lower_threshold' in params:
            path_params['lower-threshold'] = params['lower_threshold']
        if 'upper_threshold' in params:
            path_params['upper-threshold'] = params['upper_threshold']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AmendmentPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_amendments_by_updated_date(self, lower_threshold, upper_threshold, **kwargs):
        """
        Returns a collection of amendment objects with updated times within the period specified by the lower-threshold and upper-threshold parameters. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Retrieve by updated\",\"response\":\"getAmendmentByUpdated.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_amendments_by_updated_date(lower_threshold, upper_threshold, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str lower_threshold: The UTC DateTime specifying the start of the result period. (required)
        :param str upper_threshold: The UTC DateTime specifying the end of the result period. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first amendment to return.
        :param int records: The maximum number of amendments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :return: AmendmentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_amendments_by_updated_date_with_http_info(lower_threshold, upper_threshold, **kwargs)
        else:
            (data) = self.get_amendments_by_updated_date_with_http_info(lower_threshold, upper_threshold, **kwargs)
            return data

    def get_amendments_by_updated_date_with_http_info(self, lower_threshold, upper_threshold, **kwargs):
        """
        Returns a collection of amendment objects with updated times within the period specified by the lower-threshold and upper-threshold parameters. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Retrieve by updated\",\"response\":\"getAmendmentByUpdated.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_amendments_by_updated_date_with_http_info(lower_threshold, upper_threshold, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str lower_threshold: The UTC DateTime specifying the start of the result period. (required)
        :param str upper_threshold: The UTC DateTime specifying the end of the result period. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first amendment to return.
        :param int records: The maximum number of amendments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :return: AmendmentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lower_threshold', 'upper_threshold', 'organizations', 'offset', 'records', 'order_by', 'order']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_amendments_by_updated_date" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lower_threshold' is set
        if ('lower_threshold' not in params) or (params['lower_threshold'] is None):
            raise ValueError("Missing the required parameter `lower_threshold` when calling `get_amendments_by_updated_date`")
        # verify the required parameter 'upper_threshold' is set
        if ('upper_threshold' not in params) or (params['upper_threshold'] is None):
            raise ValueError("Missing the required parameter `upper_threshold` when calling `get_amendments_by_updated_date`")

        resource_path = '/amendments/updated/{lower-threshold}/{upper-threshold}'.replace('{format}', 'json')
        path_params = {}
        if 'lower_threshold' in params:
            path_params['lower-threshold'] = params['lower_threshold']
        if 'upper_threshold' in params:
            path_params['upper-threshold'] = params['upper_threshold']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AmendmentPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def retire_amendment(self, amendment_id, organizations, **kwargs):
        """
        Retires the amendment specified by the amendment-ID parameter. Retiring a amendment causes it to cancel based on the specificed retirement settings for the product.
        {\"nickname\":\"Delete an amendment\",\"response\":\"deleteAmendment.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.retire_amendment(amendment_id, organizations, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str amendment_id: ID of the amendment. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls. (required)
        :return: AmendmentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.retire_amendment_with_http_info(amendment_id, organizations, **kwargs)
        else:
            (data) = self.retire_amendment_with_http_info(amendment_id, organizations, **kwargs)
            return data

    def retire_amendment_with_http_info(self, amendment_id, organizations, **kwargs):
        """
        Retires the amendment specified by the amendment-ID parameter. Retiring a amendment causes it to cancel based on the specificed retirement settings for the product.
        {\"nickname\":\"Delete an amendment\",\"response\":\"deleteAmendment.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.retire_amendment_with_http_info(amendment_id, organizations, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str amendment_id: ID of the amendment. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls. (required)
        :return: AmendmentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['amendment_id', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retire_amendment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'amendment_id' is set
        if ('amendment_id' not in params) or (params['amendment_id'] is None):
            raise ValueError("Missing the required parameter `amendment_id` when calling `retire_amendment`")
        # verify the required parameter 'organizations' is set
        if ('organizations' not in params) or (params['organizations'] is None):
            raise ValueError("Missing the required parameter `organizations` when calling `retire_amendment`")

        resource_path = '/amendments/{amendment-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'amendment_id' in params:
            path_params['amendment-ID'] = params['amendment_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AmendmentPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_amendment(self, amendment, **kwargs):
        """
        Update an amendment.
        {\"nickname\":\"Update an amendment\",\"request\":\"updateAmendmentRequest.html\",\"response\":\"updateAmendmentResponse.html\" }

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_amendment(amendment, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Amendment amendment: The amendment object to be updated. (required)
        :return: AmendmentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_amendment_with_http_info(amendment, **kwargs)
        else:
            (data) = self.update_amendment_with_http_info(amendment, **kwargs)
            return data

    def update_amendment_with_http_info(self, amendment, **kwargs):
        """
        Update an amendment.
        {\"nickname\":\"Update an amendment\",\"request\":\"updateAmendmentRequest.html\",\"response\":\"updateAmendmentResponse.html\" }

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_amendment_with_http_info(amendment, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Amendment amendment: The amendment object to be updated. (required)
        :return: AmendmentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['amendment']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_amendment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'amendment' is set
        if ('amendment' not in params) or (params['amendment'] is None):
            raise ValueError("Missing the required parameter `amendment` when calling `update_amendment`")

        resource_path = '/amendments'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'amendment' in params:
            body_params = params['amendment']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AmendmentPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
