# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class SynchConfigsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_sync_config(self, synch_config, **kwargs):
        """
        Create a synch configuration.
        {\"nickname\":\"Create a new synch configuration\",\"request\":\"createSynchConfigRequest.html\",\"response\":\"createSynchConfigResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_sync_config(synch_config, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DataSynchronisationConfiguration synch_config: The data synch config object to be created. (required)
        :return: DataSynchronisationConfigurationPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_sync_config_with_http_info(synch_config, **kwargs)
        else:
            (data) = self.create_sync_config_with_http_info(synch_config, **kwargs)
            return data

    def create_sync_config_with_http_info(self, synch_config, **kwargs):
        """
        Create a synch configuration.
        {\"nickname\":\"Create a new synch configuration\",\"request\":\"createSynchConfigRequest.html\",\"response\":\"createSynchConfigResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_sync_config_with_http_info(synch_config, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DataSynchronisationConfiguration synch_config: The data synch config object to be created. (required)
        :return: DataSynchronisationConfigurationPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['synch_config']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_sync_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'synch_config' is set
        if ('synch_config' not in params) or (params['synch_config'] is None):
            raise ValueError("Missing the required parameter `synch_config` when calling `create_sync_config`")

        resource_path = '/synchConfigs'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'synch_config' in params:
            body_params = params['synch_config']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DataSynchronisationConfigurationPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_all_sync_configs(self, **kwargs):
        """
        Returns a collection of Users. By default 10 values are returned. Records are returned in natural order.
        { \"nickname\" : \"Get all synch configs\",\"response\" : \"getSynchConfigsAll.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_sync_configs(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first synch configuration to return.
        :param int records: The maximum number of configs to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :return: DataSynchronisationConfigurationPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_sync_configs_with_http_info(**kwargs)
        else:
            (data) = self.get_all_sync_configs_with_http_info(**kwargs)
            return data

    def get_all_sync_configs_with_http_info(self, **kwargs):
        """
        Returns a collection of Users. By default 10 values are returned. Records are returned in natural order.
        { \"nickname\" : \"Get all synch configs\",\"response\" : \"getSynchConfigsAll.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_sync_configs_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first synch configuration to return.
        :param int records: The maximum number of configs to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :return: DataSynchronisationConfigurationPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'offset', 'records', 'order_by', 'order']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_sync_configs" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/synchConfigs'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DataSynchronisationConfigurationPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_sync_config(self, synch_configs_id, **kwargs):
        """
        Returns a single config, specified by the ID parameter.
        { \"nickname\" : \"Retrieve an existing synch config\",\"response\" : \"getSynchConfigByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sync_config(synch_configs_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str synch_configs_id: ID of the Synch Configuration. (required)
        :param list[str] organizations: A list of organization -IDs used to restrict the scope of API calls.
        :return: DataSynchronisationConfigurationPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_sync_config_with_http_info(synch_configs_id, **kwargs)
        else:
            (data) = self.get_sync_config_with_http_info(synch_configs_id, **kwargs)
            return data

    def get_sync_config_with_http_info(self, synch_configs_id, **kwargs):
        """
        Returns a single config, specified by the ID parameter.
        { \"nickname\" : \"Retrieve an existing synch config\",\"response\" : \"getSynchConfigByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sync_config_with_http_info(synch_configs_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str synch_configs_id: ID of the Synch Configuration. (required)
        :param list[str] organizations: A list of organization -IDs used to restrict the scope of API calls.
        :return: DataSynchronisationConfigurationPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['synch_configs_id', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sync_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'synch_configs_id' is set
        if ('synch_configs_id' not in params) or (params['synch_configs_id'] is None):
            raise ValueError("Missing the required parameter `synch_configs_id` when calling `get_sync_config`")

        resource_path = '/synchConfigs/{synchConfigs-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'synch_configs_id' in params:
            path_params['synchConfigs-ID'] = params['synch_configs_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DataSynchronisationConfigurationPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_sync_config_by_platform(self, platform, **kwargs):
        """
        Returns a collection configurations, specified by the platform parameter.
        { \"nickname\" : \"Retrieve by platform\",\"response\" : \"getSynchConfigsByPlatform.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sync_config_by_platform(platform, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str platform: The type of the synch configuration. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: DataSynchronisationConfigurationPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_sync_config_by_platform_with_http_info(platform, **kwargs)
        else:
            (data) = self.get_sync_config_by_platform_with_http_info(platform, **kwargs)
            return data

    def get_sync_config_by_platform_with_http_info(self, platform, **kwargs):
        """
        Returns a collection configurations, specified by the platform parameter.
        { \"nickname\" : \"Retrieve by platform\",\"response\" : \"getSynchConfigsByPlatform.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sync_config_by_platform_with_http_info(platform, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str platform: The type of the synch configuration. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: DataSynchronisationConfigurationPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['platform', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sync_config_by_platform" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'platform' is set
        if ('platform' not in params) or (params['platform'] is None):
            raise ValueError("Missing the required parameter `platform` when calling `get_sync_config_by_platform`")

        resource_path = '/synchConfigs/platform/{platform}'.replace('{format}', 'json')
        path_params = {}
        if 'platform' in params:
            path_params['platform'] = params['platform']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DataSynchronisationConfigurationPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_sync_config_by_username(self, username, **kwargs):
        """
        Returns a collection configurations, specified by the username parameter.
        { \"nickname\" : \"Retrieve by username\",\"response\" : \"getSynchConfigByUsername.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sync_config_by_username(username, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str username: The username in the synch configuration. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: DataSynchronisationConfigurationPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_sync_config_by_username_with_http_info(username, **kwargs)
        else:
            (data) = self.get_sync_config_by_username_with_http_info(username, **kwargs)
            return data

    def get_sync_config_by_username_with_http_info(self, username, **kwargs):
        """
        Returns a collection configurations, specified by the username parameter.
        { \"nickname\" : \"Retrieve by username\",\"response\" : \"getSynchConfigByUsername.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sync_config_by_username_with_http_info(username, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str username: The username in the synch configuration. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: DataSynchronisationConfigurationPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sync_config_by_username" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params) or (params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `get_sync_config_by_username`")

        resource_path = '/synchConfigs/username/{username}'.replace('{format}', 'json')
        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DataSynchronisationConfigurationPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_sync_config(self, synch_config, **kwargs):
        """
        Update a synch configuration.
        { \"nickname\" : \"Update a synch config\", \"request\" : \"updateSyncConfigRequest.html\" ,\"response\" : \"updateSyncConfigResponse.html\" }

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_sync_config(synch_config, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DataSynchronisationConfiguration synch_config: The synch configuration object to be updated. (required)
        :return: DataSynchronisationConfigurationPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_sync_config_with_http_info(synch_config, **kwargs)
        else:
            (data) = self.update_sync_config_with_http_info(synch_config, **kwargs)
            return data

    def update_sync_config_with_http_info(self, synch_config, **kwargs):
        """
        Update a synch configuration.
        { \"nickname\" : \"Update a synch config\", \"request\" : \"updateSyncConfigRequest.html\" ,\"response\" : \"updateSyncConfigResponse.html\" }

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_sync_config_with_http_info(synch_config, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DataSynchronisationConfiguration synch_config: The synch configuration object to be updated. (required)
        :return: DataSynchronisationConfigurationPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['synch_config']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_sync_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'synch_config' is set
        if ('synch_config' not in params) or (params['synch_config'] is None):
            raise ValueError("Missing the required parameter `synch_config` when calling `update_sync_config`")

        resource_path = '/synchConfigs'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'synch_config' in params:
            body_params = params['synch_config']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DataSynchronisationConfigurationPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
