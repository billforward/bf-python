# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class RefundsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_refund(self, refund, **kwargs):
        """
        <p>When creating a refund either the invoice, or invoice payment must be specified.</p><p>Creating a refund by specifying the invoiceID will refund any un-refunded value up to the full value of the payment. When refunding via the invoicePaymentID the same rules apply. Refunds will be processed by the same payment methods that took the payment.</p><p>Refunds can be for a partial amount of the payment. It is possible to create refunds up to the value of the total payment.</p><p>Once a payment or invoice is fully refunded, no more refunds can be created. Errors will be returned if the payment is greater than available refund funds.</p>
        {\"nickname\":\"Create a new refund\",\"request\":\"createRefundRequest.html\",\"response\":\"createRefundResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_refund(refund, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Refund refund: The refund object to be created. (required)
        :return: RefundPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_refund_with_http_info(refund, **kwargs)
        else:
            (data) = self.create_refund_with_http_info(refund, **kwargs)
            return data

    def create_refund_with_http_info(self, refund, **kwargs):
        """
        <p>When creating a refund either the invoice, or invoice payment must be specified.</p><p>Creating a refund by specifying the invoiceID will refund any un-refunded value up to the full value of the payment. When refunding via the invoicePaymentID the same rules apply. Refunds will be processed by the same payment methods that took the payment.</p><p>Refunds can be for a partial amount of the payment. It is possible to create refunds up to the value of the total payment.</p><p>Once a payment or invoice is fully refunded, no more refunds can be created. Errors will be returned if the payment is greater than available refund funds.</p>
        {\"nickname\":\"Create a new refund\",\"request\":\"createRefundRequest.html\",\"response\":\"createRefundResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_refund_with_http_info(refund, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Refund refund: The refund object to be created. (required)
        :return: RefundPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['refund']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_refund" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'refund' is set
        if ('refund' not in params) or (params['refund'] is None):
            raise ValueError("Missing the required parameter `refund` when calling `create_refund`")

        resource_path = '/refunds'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'refund' in params:
            body_params = params['refund']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='RefundPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_all_refunds(self, **kwargs):
        """
        Returns a collection of all refunds. By default 10 values are returned. Refunds are returned in natural order
        {\"nickname\":\"Get all refunds\",\"response\":\"getRefundsAll.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_refunds(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first refund to return.
        :param int records: The maximum number of refunds to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :return: RefundPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_refunds_with_http_info(**kwargs)
        else:
            (data) = self.get_all_refunds_with_http_info(**kwargs)
            return data

    def get_all_refunds_with_http_info(self, **kwargs):
        """
        Returns a collection of all refunds. By default 10 values are returned. Refunds are returned in natural order
        {\"nickname\":\"Get all refunds\",\"response\":\"getRefundsAll.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_refunds_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first refund to return.
        :param int records: The maximum number of refunds to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :return: RefundPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'offset', 'records', 'order_by', 'order']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_refunds" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/refunds'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='RefundPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_refund_by_id(self, refund_id, **kwargs):
        """
        Returns a single refund, specified by the ID parameter.
        {\"nickname\":\"Retrieve an existing refund\",\"response\":\"getRefundByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_refund_by_id(refund_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str refund_id: ID of the Refund. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: RefundPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_refund_by_id_with_http_info(refund_id, **kwargs)
        else:
            (data) = self.get_refund_by_id_with_http_info(refund_id, **kwargs)
            return data

    def get_refund_by_id_with_http_info(self, refund_id, **kwargs):
        """
        Returns a single refund, specified by the ID parameter.
        {\"nickname\":\"Retrieve an existing refund\",\"response\":\"getRefundByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_refund_by_id_with_http_info(refund_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str refund_id: ID of the Refund. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: RefundPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['refund_id', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_refund_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'refund_id' is set
        if ('refund_id' not in params) or (params['refund_id'] is None):
            raise ValueError("Missing the required parameter `refund_id` when calling `get_refund_by_id`")

        resource_path = '/refunds/{refund-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'refund_id' in params:
            path_params['refund-ID'] = params['refund_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='RefundPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_refund_for_original_payment(self, payment_id, **kwargs):
        """
        Returns a refund for the original payment.
        {\"nickname\":\"Retrieve by originating payment\",\"response\":\"getRefundsByPayment.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_refund_for_original_payment(payment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str payment_id: ID of the Payment. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: RefundPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_refund_for_original_payment_with_http_info(payment_id, **kwargs)
        else:
            (data) = self.get_refund_for_original_payment_with_http_info(payment_id, **kwargs)
            return data

    def get_refund_for_original_payment_with_http_info(self, payment_id, **kwargs):
        """
        Returns a refund for the original payment.
        {\"nickname\":\"Retrieve by originating payment\",\"response\":\"getRefundsByPayment.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_refund_for_original_payment_with_http_info(payment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str payment_id: ID of the Payment. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: RefundPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_id', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_refund_for_original_payment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_id' is set
        if ('payment_id' not in params) or (params['payment_id'] is None):
            raise ValueError("Missing the required parameter `payment_id` when calling `get_refund_for_original_payment`")

        resource_path = '/refunds/original-payment/{payment-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'payment_id' in params:
            path_params['payment-ID'] = params['payment_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='RefundPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_refund_for_refund_payment(self, payment_id, **kwargs):
        """
        Returns a refund for the refund payment.
        {\"nickname\":\"Retrieve by refund payment\",\"response\":\"getRefundsByPayment.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_refund_for_refund_payment(payment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str payment_id: ID of the Payment. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: RefundPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_refund_for_refund_payment_with_http_info(payment_id, **kwargs)
        else:
            (data) = self.get_refund_for_refund_payment_with_http_info(payment_id, **kwargs)
            return data

    def get_refund_for_refund_payment_with_http_info(self, payment_id, **kwargs):
        """
        Returns a refund for the refund payment.
        {\"nickname\":\"Retrieve by refund payment\",\"response\":\"getRefundsByPayment.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_refund_for_refund_payment_with_http_info(payment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str payment_id: ID of the Payment. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: RefundPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_id', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_refund_for_refund_payment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_id' is set
        if ('payment_id' not in params) or (params['payment_id'] is None):
            raise ValueError("Missing the required parameter `payment_id` when calling `get_refund_for_refund_payment`")

        resource_path = '/refunds/refund-payment/{payment-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'payment_id' in params:
            path_params['payment-ID'] = params['payment_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='RefundPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_refund_for_refunded_invoice(self, invoice_id, **kwargs):
        """
        Returns a refund for the refund payment.
        {\"nickname\":\"Retrieve by invoice\",\"response\":\"getRefundsByInvoice.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_refund_for_refunded_invoice(invoice_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str invoice_id: ID of the Invoice. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: RefundPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_refund_for_refunded_invoice_with_http_info(invoice_id, **kwargs)
        else:
            (data) = self.get_refund_for_refunded_invoice_with_http_info(invoice_id, **kwargs)
            return data

    def get_refund_for_refunded_invoice_with_http_info(self, invoice_id, **kwargs):
        """
        Returns a refund for the refund payment.
        {\"nickname\":\"Retrieve by invoice\",\"response\":\"getRefundsByInvoice.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_refund_for_refunded_invoice_with_http_info(invoice_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str invoice_id: ID of the Invoice. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: RefundPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_refund_for_refunded_invoice" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params) or (params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `get_refund_for_refunded_invoice`")

        resource_path = '/refunds/invoice/{invoice-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'invoice_id' in params:
            path_params['invoice-ID'] = params['invoice_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='RefundPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_refunds_as_csv(self, completed_start, completed_end, **kwargs):
        """
        Retrieves refunds in CSV format.
        { \"nickname\":\"Refunds CSV\",\"response\":\"refunds.csv\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_refunds_as_csv(completed_start, completed_end, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str completed_start: The UTC DateTime specifying the start of the interval within which refunds were completed. (required)
        :param str completed_end: The UTC DateTime specifying the end of the interval within which refunds were completed. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first refund to return.
        :param int records: The maximum number of refunds to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: The direction of any ordering, either ASC or DESC.
        :return: RefundPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_refunds_as_csv_with_http_info(completed_start, completed_end, **kwargs)
        else:
            (data) = self.get_refunds_as_csv_with_http_info(completed_start, completed_end, **kwargs)
            return data

    def get_refunds_as_csv_with_http_info(self, completed_start, completed_end, **kwargs):
        """
        Retrieves refunds in CSV format.
        { \"nickname\":\"Refunds CSV\",\"response\":\"refunds.csv\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_refunds_as_csv_with_http_info(completed_start, completed_end, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str completed_start: The UTC DateTime specifying the start of the interval within which refunds were completed. (required)
        :param str completed_end: The UTC DateTime specifying the end of the interval within which refunds were completed. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first refund to return.
        :param int records: The maximum number of refunds to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: The direction of any ordering, either ASC or DESC.
        :return: RefundPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['completed_start', 'completed_end', 'organizations', 'offset', 'records', 'order_by', 'order']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_refunds_as_csv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'completed_start' is set
        if ('completed_start' not in params) or (params['completed_start'] is None):
            raise ValueError("Missing the required parameter `completed_start` when calling `get_refunds_as_csv`")
        # verify the required parameter 'completed_end' is set
        if ('completed_end' not in params) or (params['completed_end'] is None):
            raise ValueError("Missing the required parameter `completed_end` when calling `get_refunds_as_csv`")

        resource_path = '/refunds/csv'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'completed_start' in params:
            query_params['completed_start'] = params['completed_start']
        if 'completed_end' in params:
            query_params['completed_end'] = params['completed_end']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/csv'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='RefundPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_refund(self, refund, **kwargs):
        """
        Update a refund
        {\"nickname\":\"Update a refund\",\"request\":\"updateRefundRequest.html\",\"response\":\"updateRefundResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_refund(refund, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Refund refund: The refund object to be update. (required)
        :return: RefundPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_refund_with_http_info(refund, **kwargs)
        else:
            (data) = self.update_refund_with_http_info(refund, **kwargs)
            return data

    def update_refund_with_http_info(self, refund, **kwargs):
        """
        Update a refund
        {\"nickname\":\"Update a refund\",\"request\":\"updateRefundRequest.html\",\"response\":\"updateRefundResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_refund_with_http_info(refund, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Refund refund: The refund object to be update. (required)
        :return: RefundPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['refund']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_refund" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'refund' is set
        if ('refund' not in params) or (params['refund'] is None):
            raise ValueError("Missing the required parameter `refund` when calling `update_refund`")

        resource_path = '/refunds'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'refund' in params:
            body_params = params['refund']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='RefundPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
