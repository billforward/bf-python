# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class VaultedgatewaysApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_authorize_net_token(self, authorize_net_token, **kwargs):
        """
        Create an authorize-net-token.
        {\"nickname\":\"Create a authorize-net-token\",\"request\":\"createAuthorizeNetTokenRequest.html\",\"response\":\"createAuthorizeNetTokenResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_authorize_net_token(authorize_net_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MutableBillingEntity authorize_net_token: The authorize-net-token object to be created. (required)
        :return: AuthorizeNetTokenPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_authorize_net_token_with_http_info(authorize_net_token, **kwargs)
        else:
            (data) = self.create_authorize_net_token_with_http_info(authorize_net_token, **kwargs)
            return data

    def create_authorize_net_token_with_http_info(self, authorize_net_token, **kwargs):
        """
        Create an authorize-net-token.
        {\"nickname\":\"Create a authorize-net-token\",\"request\":\"createAuthorizeNetTokenRequest.html\",\"response\":\"createAuthorizeNetTokenResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_authorize_net_token_with_http_info(authorize_net_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MutableBillingEntity authorize_net_token: The authorize-net-token object to be created. (required)
        :return: AuthorizeNetTokenPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorize_net_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_authorize_net_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorize_net_token' is set
        if ('authorize_net_token' not in params) or (params['authorize_net_token'] is None):
            raise ValueError("Missing the required parameter `authorize_net_token` when calling `create_authorize_net_token`")

        resource_path = '/vaulted-gateways/authorize-net'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'authorize_net_token' in params:
            body_params = params['authorize_net_token']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AuthorizeNetTokenPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def create_braintree_token(self, braintree_token, **kwargs):
        """
        Create a braintree-token.
        {\"nickname\":\"Create a braintree-token\",\"request\":\"createBraintreeTokenRequest.html\",\"response\":\"BraintreeTokenResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_braintree_token(braintree_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MutableBillingEntity braintree_token: The braintree-token object to be created. (required)
        :return: BraintreeTokenPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_braintree_token_with_http_info(braintree_token, **kwargs)
        else:
            (data) = self.create_braintree_token_with_http_info(braintree_token, **kwargs)
            return data

    def create_braintree_token_with_http_info(self, braintree_token, **kwargs):
        """
        Create a braintree-token.
        {\"nickname\":\"Create a braintree-token\",\"request\":\"createBraintreeTokenRequest.html\",\"response\":\"BraintreeTokenResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_braintree_token_with_http_info(braintree_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MutableBillingEntity braintree_token: The braintree-token object to be created. (required)
        :return: BraintreeTokenPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['braintree_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_braintree_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'braintree_token' is set
        if ('braintree_token' not in params) or (params['braintree_token'] is None):
            raise ValueError("Missing the required parameter `braintree_token` when calling `create_braintree_token`")

        resource_path = '/vaulted-gateways/braintree'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'braintree_token' in params:
            body_params = params['braintree_token']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='BraintreeTokenPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def create_stripe_ach_token(self, stripe_ach_token, **kwargs):
        """
        Create a stripe-ACH-token.
        {\"nickname\":\"Create a stripe-ACH-token\",\"request\":\"createstripeACHTokenRequest.html\",\"response\":\"createstripeACHTokenResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_stripe_ach_token(stripe_ach_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MutableBillingEntity stripe_ach_token: The stripe-ACH-token object to be created. (required)
        :return: StripeACHTokenPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_stripe_ach_token_with_http_info(stripe_ach_token, **kwargs)
        else:
            (data) = self.create_stripe_ach_token_with_http_info(stripe_ach_token, **kwargs)
            return data

    def create_stripe_ach_token_with_http_info(self, stripe_ach_token, **kwargs):
        """
        Create a stripe-ACH-token.
        {\"nickname\":\"Create a stripe-ACH-token\",\"request\":\"createstripeACHTokenRequest.html\",\"response\":\"createstripeACHTokenResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_stripe_ach_token_with_http_info(stripe_ach_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MutableBillingEntity stripe_ach_token: The stripe-ACH-token object to be created. (required)
        :return: StripeACHTokenPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stripe_ach_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_stripe_ach_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stripe_ach_token' is set
        if ('stripe_ach_token' not in params) or (params['stripe_ach_token'] is None):
            raise ValueError("Missing the required parameter `stripe_ach_token` when calling `create_stripe_ach_token`")

        resource_path = '/vaulted-gateways/stripe-ACH'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'stripe_ach_token' in params:
            body_params = params['stripe_ach_token']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='StripeACHTokenPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def create_stripe_token(self, stripe_token, **kwargs):
        """
        Create a stripe-token.
        {\"nickname\":\"Create a stripe-token\",\"request\":\"createstripeTokenRequest.html\",\"response\":\"createstripeTokenResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_stripe_token(stripe_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MutableBillingEntity stripe_token: The stripe-token object to be created. (required)
        :return: StripeTokenPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_stripe_token_with_http_info(stripe_token, **kwargs)
        else:
            (data) = self.create_stripe_token_with_http_info(stripe_token, **kwargs)
            return data

    def create_stripe_token_with_http_info(self, stripe_token, **kwargs):
        """
        Create a stripe-token.
        {\"nickname\":\"Create a stripe-token\",\"request\":\"createstripeTokenRequest.html\",\"response\":\"createstripeTokenResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_stripe_token_with_http_info(stripe_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MutableBillingEntity stripe_token: The stripe-token object to be created. (required)
        :return: StripeTokenPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stripe_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_stripe_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stripe_token' is set
        if ('stripe_token' not in params) or (params['stripe_token'] is None):
            raise ValueError("Missing the required parameter `stripe_token` when calling `create_stripe_token`")

        resource_path = '/vaulted-gateways/stripe'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'stripe_token' in params:
            body_params = params['stripe_token']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='StripeTokenPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def create_trust_commerce_token(self, trust_commerce_token, **kwargs):
        """
        Create a trust-commerce-token.
        {\"nickname\":\"Create a trust-commerce-token\",\"request\":\"createTrustCommerceTokenRequest.html\",\"response\":\"TrustCommerceTokenResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_trust_commerce_token(trust_commerce_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MutableBillingEntity trust_commerce_token: The trust-commerce-token object to be created. (required)
        :return: TrustCommerceTokenPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_trust_commerce_token_with_http_info(trust_commerce_token, **kwargs)
        else:
            (data) = self.create_trust_commerce_token_with_http_info(trust_commerce_token, **kwargs)
            return data

    def create_trust_commerce_token_with_http_info(self, trust_commerce_token, **kwargs):
        """
        Create a trust-commerce-token.
        {\"nickname\":\"Create a trust-commerce-token\",\"request\":\"createTrustCommerceTokenRequest.html\",\"response\":\"TrustCommerceTokenResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_trust_commerce_token_with_http_info(trust_commerce_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MutableBillingEntity trust_commerce_token: The trust-commerce-token object to be created. (required)
        :return: TrustCommerceTokenPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['trust_commerce_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_trust_commerce_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'trust_commerce_token' is set
        if ('trust_commerce_token' not in params) or (params['trust_commerce_token'] is None):
            raise ValueError("Missing the required parameter `trust_commerce_token` when calling `create_trust_commerce_token`")

        resource_path = '/vaulted-gateways/trustCommerce'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'trust_commerce_token' in params:
            body_params = params['trust_commerce_token']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TrustCommerceTokenPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_braintree_by_account_id(self, account_id, **kwargs):
        """
        Returns a list of braintree-tokens backing PaymentMethods belonging to the specified account parameter.
        {\"nickname\":\"Retrieve a list of braintree-token\",\"response\":\"getBraintreeByAccountID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_braintree_by_account_id(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: The string ID of the account-ID. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.Multiple organization-IDs may be specified by repeated use of the query parameter. Example: ...&organizations=org1&organizations=org2
        :return: BraintreeTokenPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_braintree_by_account_id_with_http_info(account_id, **kwargs)
        else:
            (data) = self.get_braintree_by_account_id_with_http_info(account_id, **kwargs)
            return data

    def get_braintree_by_account_id_with_http_info(self, account_id, **kwargs):
        """
        Returns a list of braintree-tokens backing PaymentMethods belonging to the specified account parameter.
        {\"nickname\":\"Retrieve a list of braintree-token\",\"response\":\"getBraintreeByAccountID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_braintree_by_account_id_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: The string ID of the account-ID. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.Multiple organization-IDs may be specified by repeated use of the query parameter. Example: ...&organizations=org1&organizations=org2
        :return: BraintreeTokenPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_braintree_by_account_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_braintree_by_account_id`")

        resource_path = '/vaulted-gateways/braintree/{accountID}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='BraintreeTokenPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_by_card_details_id(self, card_details_id, **kwargs):
        """
        Returns a single stripe-token, specified by the cardDetailsID parameter.
        {\"nickname\":\"Retrieve a stripe-token by cardDetailsID\",\"response\":\"getStripeTokenByCardDetailsID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_by_card_details_id(card_details_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str card_details_id: The card details id of the stripe-token. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: StripeTokenPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_by_card_details_id_with_http_info(card_details_id, **kwargs)
        else:
            (data) = self.get_by_card_details_id_with_http_info(card_details_id, **kwargs)
            return data

    def get_by_card_details_id_with_http_info(self, card_details_id, **kwargs):
        """
        Returns a single stripe-token, specified by the cardDetailsID parameter.
        {\"nickname\":\"Retrieve a stripe-token by cardDetailsID\",\"response\":\"getStripeTokenByCardDetailsID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_by_card_details_id_with_http_info(card_details_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str card_details_id: The card details id of the stripe-token. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: StripeTokenPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['card_details_id', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_by_card_details_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'card_details_id' is set
        if ('card_details_id' not in params) or (params['card_details_id'] is None):
            raise ValueError("Missing the required parameter `card_details_id` when calling `get_by_card_details_id`")

        resource_path = '/vaulted-gateways/stripe/card-details-id/{cardDetailsID}'.replace('{format}', 'json')
        path_params = {}
        if 'card_details_id' in params:
            path_params['cardDetailsID'] = params['card_details_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='StripeTokenPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_stripe_ach(self, stripe_ach_token_id, **kwargs):
        """
        Returns a single stripe-ACH-token, specified by the stripeACHTokenID parameter.
        {\"nickname\":\"Retrieve a stripe-ACH-token\",\"response\":\"getStripeACHTokenByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_stripe_ach(stripe_ach_token_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str stripe_ach_token_id: The string ID of the stripe-ACH-token. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.Multiple organization-IDs may be specified by repeated use of the query parameter. Example: ...&organizations=org1&organizations=org2
        :return: StripeACHTokenPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_stripe_ach_with_http_info(stripe_ach_token_id, **kwargs)
        else:
            (data) = self.get_stripe_ach_with_http_info(stripe_ach_token_id, **kwargs)
            return data

    def get_stripe_ach_with_http_info(self, stripe_ach_token_id, **kwargs):
        """
        Returns a single stripe-ACH-token, specified by the stripeACHTokenID parameter.
        {\"nickname\":\"Retrieve a stripe-ACH-token\",\"response\":\"getStripeACHTokenByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_stripe_ach_with_http_info(stripe_ach_token_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str stripe_ach_token_id: The string ID of the stripe-ACH-token. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.Multiple organization-IDs may be specified by repeated use of the query parameter. Example: ...&organizations=org1&organizations=org2
        :return: StripeACHTokenPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stripe_ach_token_id', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_stripe_ach" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stripe_ach_token_id' is set
        if ('stripe_ach_token_id' not in params) or (params['stripe_ach_token_id'] is None):
            raise ValueError("Missing the required parameter `stripe_ach_token_id` when calling `get_stripe_ach`")

        resource_path = '/vaulted-gateways/stripe-ACH/{stripeACHTokenID}'.replace('{format}', 'json')
        path_params = {}
        if 'stripe_ach_token_id' in params:
            path_params['stripeACHTokenID'] = params['stripe_ach_token_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='StripeACHTokenPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_stripe_token(self, stripe_token_id, **kwargs):
        """
        Returns a single stripe-token, specified by the stripeTokenID parameter.
        {\"nickname\":\"Retrieve a stripe-token\",\"response\":\"getStripeTokenByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_stripe_token(stripe_token_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str stripe_token_id: The string ID of the stripe-token. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.Multiple organization-IDs may be specified by repeated use of the query parameter. Example: ...&organizations=org1&organizations=org2
        :return: StripeTokenPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_stripe_token_with_http_info(stripe_token_id, **kwargs)
        else:
            (data) = self.get_stripe_token_with_http_info(stripe_token_id, **kwargs)
            return data

    def get_stripe_token_with_http_info(self, stripe_token_id, **kwargs):
        """
        Returns a single stripe-token, specified by the stripeTokenID parameter.
        {\"nickname\":\"Retrieve a stripe-token\",\"response\":\"getStripeTokenByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_stripe_token_with_http_info(stripe_token_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str stripe_token_id: The string ID of the stripe-token. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.Multiple organization-IDs may be specified by repeated use of the query parameter. Example: ...&organizations=org1&organizations=org2
        :return: StripeTokenPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stripe_token_id', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_stripe_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stripe_token_id' is set
        if ('stripe_token_id' not in params) or (params['stripe_token_id'] is None):
            raise ValueError("Missing the required parameter `stripe_token_id` when calling `get_stripe_token`")

        resource_path = '/vaulted-gateways/stripe/{stripeTokenID}'.replace('{format}', 'json')
        path_params = {}
        if 'stripe_token_id' in params:
            path_params['stripeTokenID'] = params['stripe_token_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='StripeTokenPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_stripe_ach_token(self, stripe_token, **kwargs):
        """
        Update a stripe-ACH-token.
        {\"nickname\":\"Update a stripe-ACH-token\",\"request\":\"updatestripeACHTokenRequest.html\",\"response\":\"updatestripeACHTokenResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_stripe_ach_token(stripe_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MutableBillingEntity stripe_token: The stripe-ACH-token object to be updated. (required)
        :return: StripeACHTokenPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_stripe_ach_token_with_http_info(stripe_token, **kwargs)
        else:
            (data) = self.update_stripe_ach_token_with_http_info(stripe_token, **kwargs)
            return data

    def update_stripe_ach_token_with_http_info(self, stripe_token, **kwargs):
        """
        Update a stripe-ACH-token.
        {\"nickname\":\"Update a stripe-ACH-token\",\"request\":\"updatestripeACHTokenRequest.html\",\"response\":\"updatestripeACHTokenResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_stripe_ach_token_with_http_info(stripe_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MutableBillingEntity stripe_token: The stripe-ACH-token object to be updated. (required)
        :return: StripeACHTokenPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stripe_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_stripe_ach_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stripe_token' is set
        if ('stripe_token' not in params) or (params['stripe_token'] is None):
            raise ValueError("Missing the required parameter `stripe_token` when calling `update_stripe_ach_token`")

        resource_path = '/vaulted-gateways/stripe-ACH'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'stripe_token' in params:
            body_params = params['stripe_token']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='StripeACHTokenPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_stripe_token(self, stripe_token, **kwargs):
        """
        Update a stripe-token.
        {\"nickname\":\"Update a stripe-token\",\"request\":\"updatestripeTokenRequest.html\",\"response\":\"updatestripeTokenResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_stripe_token(stripe_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MutableBillingEntity stripe_token: The stripe-token object to be updated. (required)
        :return: StripeTokenPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_stripe_token_with_http_info(stripe_token, **kwargs)
        else:
            (data) = self.update_stripe_token_with_http_info(stripe_token, **kwargs)
            return data

    def update_stripe_token_with_http_info(self, stripe_token, **kwargs):
        """
        Update a stripe-token.
        {\"nickname\":\"Update a stripe-token\",\"request\":\"updatestripeTokenRequest.html\",\"response\":\"updatestripeTokenResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_stripe_token_with_http_info(stripe_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MutableBillingEntity stripe_token: The stripe-token object to be updated. (required)
        :return: StripeTokenPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stripe_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_stripe_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stripe_token' is set
        if ('stripe_token' not in params) or (params['stripe_token'] is None):
            raise ValueError("Missing the required parameter `stripe_token` when calling `update_stripe_token`")

        resource_path = '/vaulted-gateways/stripe'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'stripe_token' in params:
            body_params = params['stripe_token']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='StripeTokenPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def verify_bank_account(self, bank_account_verification, **kwargs):
        """
        Verify Stripe bank account.
        {\"nickname\":\"Verify Stripe bank account\",\"response\":\"verifyStripeBankAccount.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.verify_bank_account(bank_account_verification, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param BillingEntityBase bank_account_verification: The Bank-Account-Verification object. (required)
        :return: BankAccountVerificationPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.verify_bank_account_with_http_info(bank_account_verification, **kwargs)
        else:
            (data) = self.verify_bank_account_with_http_info(bank_account_verification, **kwargs)
            return data

    def verify_bank_account_with_http_info(self, bank_account_verification, **kwargs):
        """
        Verify Stripe bank account.
        {\"nickname\":\"Verify Stripe bank account\",\"response\":\"verifyStripeBankAccount.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.verify_bank_account_with_http_info(bank_account_verification, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param BillingEntityBase bank_account_verification: The Bank-Account-Verification object. (required)
        :return: BankAccountVerificationPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bank_account_verification']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method verify_bank_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bank_account_verification' is set
        if ('bank_account_verification' not in params) or (params['bank_account_verification'] is None):
            raise ValueError("Missing the required parameter `bank_account_verification` when calling `verify_bank_account`")

        resource_path = '/vaulted-gateways/stripe/verify-bank-account'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bank_account_verification' in params:
            body_params = params['bank_account_verification']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='BankAccountVerificationPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def webhook(self, event, **kwargs):
        """
        Receive and handle webhook from Stripe.
        {\"nickname\":\"Receive Stripe webhook\",\"response\":\"receiveStripeWebhook.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.webhook(event, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Event event: The event received. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.webhook_with_http_info(event, **kwargs)
        else:
            (data) = self.webhook_with_http_info(event, **kwargs)
            return data

    def webhook_with_http_info(self, event, **kwargs):
        """
        Receive and handle webhook from Stripe.
        {\"nickname\":\"Receive Stripe webhook\",\"response\":\"receiveStripeWebhook.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.webhook_with_http_info(event, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Event event: The event received. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhook" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event' is set
        if ('event' not in params) or (params['event'] is None):
            raise ValueError("Missing the required parameter `event` when calling `webhook`")

        resource_path = '/vaulted-gateways/stripe/webhook'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'event' in params:
            body_params = params['event']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
