# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CouponUniqueCodesResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, coupon_code=None, organization_id=None):
        """
        CouponUniqueCodesResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'coupon_code': 'str',
            'organization_id': 'str'
        }

        self.attribute_map = {
            'created': 'created',
            'coupon_code': 'couponCode',
            'organization_id': 'organizationID'
        }

        self._created = created
        self._coupon_code = coupon_code
        self._organization_id = organization_id

    @property
    def created(self):
        """
        Gets the created of this CouponUniqueCodesResponse.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this CouponUniqueCodesResponse.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this CouponUniqueCodesResponse.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this CouponUniqueCodesResponse.
        :type: datetime
        """

        self._created = created

    @property
    def coupon_code(self):
        """
        Gets the coupon_code of this CouponUniqueCodesResponse.
        { \"description\" : \"A unique code that can be applied to a subscription.\", \"verbs\":[\"POST\"] }

        :return: The coupon_code of this CouponUniqueCodesResponse.
        :rtype: str
        """
        return self._coupon_code

    @coupon_code.setter
    def coupon_code(self, coupon_code):
        """
        Sets the coupon_code of this CouponUniqueCodesResponse.
        { \"description\" : \"A unique code that can be applied to a subscription.\", \"verbs\":[\"POST\"] }

        :param coupon_code: The coupon_code of this CouponUniqueCodesResponse.
        :type: str
        """

        self._coupon_code = coupon_code

    @property
    def organization_id(self):
        """
        Gets the organization_id of this CouponUniqueCodesResponse.


        :return: The organization_id of this CouponUniqueCodesResponse.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this CouponUniqueCodesResponse.


        :param organization_id: The organization_id of this CouponUniqueCodesResponse.
        :type: str
        """

        self._organization_id = organization_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
