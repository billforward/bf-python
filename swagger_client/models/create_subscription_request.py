# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CreateSubscriptionRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, account_id=None, product=None, product_rate_plan=None, organization_id=None, name=None, description=None, start=None, end=None, state=None, trial_end=None, type=None, parent_id=None, aggregate_all_subscriptions_on_account=False, align_period_with_aggregating_subscription=False, pricing_component_quantities=None, metadata=None, payment_terms=None, contract_start=None, failed_payment_behaviour=None):
        """
        CreateSubscriptionRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'account_id': 'str',
            'product': 'str',
            'product_rate_plan': 'str',
            'organization_id': 'str',
            'name': 'str',
            'description': 'str',
            'start': 'datetime',
            'end': 'datetime',
            'state': 'str',
            'trial_end': 'datetime',
            'type': 'str',
            'parent_id': 'str',
            'aggregate_all_subscriptions_on_account': 'bool',
            'align_period_with_aggregating_subscription': 'bool',
            'pricing_component_quantities': 'list[PricingComponentQuantityRequest]',
            'metadata': 'DynamicMetadata',
            'payment_terms': 'int',
            'contract_start': 'datetime',
            'failed_payment_behaviour': 'str'
        }

        self.attribute_map = {
            'account_id': 'accountID',
            'product': 'product',
            'product_rate_plan': 'productRatePlan',
            'organization_id': 'organizationID',
            'name': 'name',
            'description': 'description',
            'start': 'start',
            'end': 'end',
            'state': 'state',
            'trial_end': 'trialEnd',
            'type': 'type',
            'parent_id': 'parentID',
            'aggregate_all_subscriptions_on_account': 'aggregateAllSubscriptionsOnAccount',
            'align_period_with_aggregating_subscription': 'alignPeriodWithAggregatingSubscription',
            'pricing_component_quantities': 'pricingComponentQuantities',
            'metadata': 'metadata',
            'payment_terms': 'paymentTerms',
            'contract_start': 'contractStart',
            'failed_payment_behaviour': 'failedPaymentBehaviour'
        }

        self._account_id = account_id
        self._product = product
        self._product_rate_plan = product_rate_plan
        self._organization_id = organization_id
        self._name = name
        self._description = description
        self._start = start
        self._end = end
        self._state = state
        self._trial_end = trial_end
        self._type = type
        self._parent_id = parent_id
        self._aggregate_all_subscriptions_on_account = aggregate_all_subscriptions_on_account
        self._align_period_with_aggregating_subscription = align_period_with_aggregating_subscription
        self._pricing_component_quantities = pricing_component_quantities
        self._metadata = metadata
        self._payment_terms = payment_terms
        self._contract_start = contract_start
        self._failed_payment_behaviour = failed_payment_behaviour

    @property
    def account_id(self):
        """
        Gets the account_id of this CreateSubscriptionRequest.
        {\"description\":\"ID of the BillForward Account who will own this subscription. You should ensure beforehand that the customer has had a BillForward Account created for them.\",\"verbs\":[\"POST\"]}

        :return: The account_id of this CreateSubscriptionRequest.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """
        Sets the account_id of this CreateSubscriptionRequest.
        {\"description\":\"ID of the BillForward Account who will own this subscription. You should ensure beforehand that the customer has had a BillForward Account created for them.\",\"verbs\":[\"POST\"]}

        :param account_id: The account_id of this CreateSubscriptionRequest.
        :type: str
        """

        self._account_id = account_id

    @property
    def product(self):
        """
        Gets the product of this CreateSubscriptionRequest.
        {\"description\":\"Name or ID of the product.\",\"verbs\":[\"POST\"]}

        :return: The product of this CreateSubscriptionRequest.
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """
        Sets the product of this CreateSubscriptionRequest.
        {\"description\":\"Name or ID of the product.\",\"verbs\":[\"POST\"]}

        :param product: The product of this CreateSubscriptionRequest.
        :type: str
        """

        self._product = product

    @property
    def product_rate_plan(self):
        """
        Gets the product_rate_plan of this CreateSubscriptionRequest.
        {\"description\":\"ID or name of the rate plan to which the subscription will be subscribing. Lookup by name is only possible if a `productID` is specified.\",\"verbs\":[\"POST\"]}

        :return: The product_rate_plan of this CreateSubscriptionRequest.
        :rtype: str
        """
        return self._product_rate_plan

    @product_rate_plan.setter
    def product_rate_plan(self, product_rate_plan):
        """
        Sets the product_rate_plan of this CreateSubscriptionRequest.
        {\"description\":\"ID or name of the rate plan to which the subscription will be subscribing. Lookup by name is only possible if a `productID` is specified.\",\"verbs\":[\"POST\"]}

        :param product_rate_plan: The product_rate_plan of this CreateSubscriptionRequest.
        :type: str
        """

        self._product_rate_plan = product_rate_plan

    @property
    def organization_id(self):
        """
        Gets the organization_id of this CreateSubscriptionRequest.
        {\"default\":\"(Auto-populated using your authentication credentials)\",\"description\":\"ID of the BillForward Organization within which the requested Subscription should be created. If omitted, this will be auto-populated using your authentication credentials.\",\"verbs\":[\"POST\"]}

        :return: The organization_id of this CreateSubscriptionRequest.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this CreateSubscriptionRequest.
        {\"default\":\"(Auto-populated using your authentication credentials)\",\"description\":\"ID of the BillForward Organization within which the requested Subscription should be created. If omitted, this will be auto-populated using your authentication credentials.\",\"verbs\":[\"POST\"]}

        :param organization_id: The organization_id of this CreateSubscriptionRequest.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def name(self):
        """
        Gets the name of this CreateSubscriptionRequest.
        {\"default\":\"(Subscription will be named after the rate plan to which the subscription subscribes)\",\"description\":\"Name of the created subscription. This is primarily for your benefit &mdash; for example, to enable you to identify subscriptions at a glance in the BillForward web interface (e.g. 'Customer 1425, guy@mail.com, Premium membership').\",\"verbs\":[\"POST\"]}

        :return: The name of this CreateSubscriptionRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CreateSubscriptionRequest.
        {\"default\":\"(Subscription will be named after the rate plan to which the subscription subscribes)\",\"description\":\"Name of the created subscription. This is primarily for your benefit &mdash; for example, to enable you to identify subscriptions at a glance in the BillForward web interface (e.g. 'Customer 1425, guy@mail.com, Premium membership').\",\"verbs\":[\"POST\"]}

        :param name: The name of this CreateSubscriptionRequest.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this CreateSubscriptionRequest.
        {\"default\":\"(null)\",\"description\":\"Description of the created subscription. This is primarily for your benefit &mdash; for example, you could write here the mechanism through which you obtained this customer. (e.g. 'Customer obtained through Lazy Wednesdays promotion').\",\"verbs\":[\"POST\"]}

        :return: The description of this CreateSubscriptionRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this CreateSubscriptionRequest.
        {\"default\":\"(null)\",\"description\":\"Description of the created subscription. This is primarily for your benefit &mdash; for example, you could write here the mechanism through which you obtained this customer. (e.g. 'Customer obtained through Lazy Wednesdays promotion').\",\"verbs\":[\"POST\"]}

        :param description: The description of this CreateSubscriptionRequest.
        :type: str
        """

        self._description = description

    @property
    def start(self):
        """
        Gets the start of this CreateSubscriptionRequest.
        {\"default\":\"(ServerNow upon receiving request)\",\"description\":\"ISO 8601 UTC DateTime (e.g. 2015-06-16T11:58:41Z) describing the date at which the subscription should enter its first service period.\",\"verbs\":[\"POST\"]}

        :return: The start of this CreateSubscriptionRequest.
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """
        Sets the start of this CreateSubscriptionRequest.
        {\"default\":\"(ServerNow upon receiving request)\",\"description\":\"ISO 8601 UTC DateTime (e.g. 2015-06-16T11:58:41Z) describing the date at which the subscription should enter its first service period.\",\"verbs\":[\"POST\"]}

        :param start: The start of this CreateSubscriptionRequest.
        :type: datetime
        """

        self._start = start

    @property
    def end(self):
        """
        Gets the end of this CreateSubscriptionRequest.
        {\"default\":\"(1 period ahead of the `start` time)\",\"description\":\"ISO 8601 UTC DateTime (e.g. 2015-06-16T11:58:41Z) describing the date at which the subscription should finish its first service period.\",\"verbs\":[\"POST\"]}

        :return: The end of this CreateSubscriptionRequest.
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """
        Sets the end of this CreateSubscriptionRequest.
        {\"default\":\"(1 period ahead of the `start` time)\",\"description\":\"ISO 8601 UTC DateTime (e.g. 2015-06-16T11:58:41Z) describing the date at which the subscription should finish its first service period.\",\"verbs\":[\"POST\"]}

        :param end: The end of this CreateSubscriptionRequest.
        :type: datetime
        """

        self._end = end

    @property
    def state(self):
        """
        Gets the state of this CreateSubscriptionRequest.
        {\"default\":\"Provisioned\",\"description\":\"The state in which the created subscription will begin.<br><span class=\\\"label label-default\\\">Provisioned</span> &mdash; The subscription will wait (without raising any invoices or beginning its service) until explicit action is taken to change its state.<br><span class=\\\"label label-default\\\">AwaitingPayment</span> &mdash; The subscription is activated. After `start` time is surpassed, it will begin service and raise its first invoice.\",\"verbs\":[\"POST\"]}

        :return: The state of this CreateSubscriptionRequest.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this CreateSubscriptionRequest.
        {\"default\":\"Provisioned\",\"description\":\"The state in which the created subscription will begin.<br><span class=\\\"label label-default\\\">Provisioned</span> &mdash; The subscription will wait (without raising any invoices or beginning its service) until explicit action is taken to change its state.<br><span class=\\\"label label-default\\\">AwaitingPayment</span> &mdash; The subscription is activated. After `start` time is surpassed, it will begin service and raise its first invoice.\",\"verbs\":[\"POST\"]}

        :param state: The state of this CreateSubscriptionRequest.
        :type: str
        """
        allowed_values = ["Trial", "Provisioned", "Paid", "AwaitingPayment", "Cancelled", "Failed", "Expired"]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def trial_end(self):
        """
        Gets the trial_end of this CreateSubscriptionRequest.
        {\"default\":\"(null)\",\"description\":\"ISO 8601 UTC DateTime (e.g. 2015-06-16T11:58:41Z) describing the date at which the subscription should leave the trial period.\",\"verbs\":[\"POST\"]}

        :return: The trial_end of this CreateSubscriptionRequest.
        :rtype: datetime
        """
        return self._trial_end

    @trial_end.setter
    def trial_end(self, trial_end):
        """
        Sets the trial_end of this CreateSubscriptionRequest.
        {\"default\":\"(null)\",\"description\":\"ISO 8601 UTC DateTime (e.g. 2015-06-16T11:58:41Z) describing the date at which the subscription should leave the trial period.\",\"verbs\":[\"POST\"]}

        :param trial_end: The trial_end of this CreateSubscriptionRequest.
        :type: datetime
        """

        self._trial_end = trial_end

    @property
    def type(self):
        """
        Gets the type of this CreateSubscriptionRequest.


        :return: The type of this CreateSubscriptionRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this CreateSubscriptionRequest.


        :param type: The type of this CreateSubscriptionRequest.
        :type: str
        """
        allowed_values = ["Subscription", "FixedTerm", "Trial"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def parent_id(self):
        """
        Gets the parent_id of this CreateSubscriptionRequest.
        {\"default\":\"(If a subscription exists which 'aggregates all subscriptions belonging to this BillForward Account', refer to the ID of that subscription. Otherwise: null)\",\"description\":\"ID of a parent subscription which will collect the charges raised by this subscription. The parent becomes responsible for paying those charges. If a subscription exists which 'aggregates all subscriptions belonging to this BillForward Account', then that parent will override any parent specified here.\",\"verbs\":[\"POST\"]}

        :return: The parent_id of this CreateSubscriptionRequest.
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """
        Sets the parent_id of this CreateSubscriptionRequest.
        {\"default\":\"(If a subscription exists which 'aggregates all subscriptions belonging to this BillForward Account', refer to the ID of that subscription. Otherwise: null)\",\"description\":\"ID of a parent subscription which will collect the charges raised by this subscription. The parent becomes responsible for paying those charges. If a subscription exists which 'aggregates all subscriptions belonging to this BillForward Account', then that parent will override any parent specified here.\",\"verbs\":[\"POST\"]}

        :param parent_id: The parent_id of this CreateSubscriptionRequest.
        :type: str
        """

        self._parent_id = parent_id

    @property
    def aggregate_all_subscriptions_on_account(self):
        """
        Gets the aggregate_all_subscriptions_on_account of this CreateSubscriptionRequest.
        {\"default\":false,\"description\":\"Whether this subscription should become an 'aggregating subscription', collecting charges (starting now) from all other subscriptions (current and future) belonging to this BillForward Account.\",\"verbs\":[\"POST\"]}

        :return: The aggregate_all_subscriptions_on_account of this CreateSubscriptionRequest.
        :rtype: bool
        """
        return self._aggregate_all_subscriptions_on_account

    @aggregate_all_subscriptions_on_account.setter
    def aggregate_all_subscriptions_on_account(self, aggregate_all_subscriptions_on_account):
        """
        Sets the aggregate_all_subscriptions_on_account of this CreateSubscriptionRequest.
        {\"default\":false,\"description\":\"Whether this subscription should become an 'aggregating subscription', collecting charges (starting now) from all other subscriptions (current and future) belonging to this BillForward Account.\",\"verbs\":[\"POST\"]}

        :param aggregate_all_subscriptions_on_account: The aggregate_all_subscriptions_on_account of this CreateSubscriptionRequest.
        :type: bool
        """

        self._aggregate_all_subscriptions_on_account = aggregate_all_subscriptions_on_account

    @property
    def align_period_with_aggregating_subscription(self):
        """
        Gets the align_period_with_aggregating_subscription of this CreateSubscriptionRequest.
        {\"default\":true,\"description\":\"Whether to override the `end` date to line up with the current period end of the 'aggregating subscription' to which this subscription belongs.\",\"verbs\":[\"POST\"]}

        :return: The align_period_with_aggregating_subscription of this CreateSubscriptionRequest.
        :rtype: bool
        """
        return self._align_period_with_aggregating_subscription

    @align_period_with_aggregating_subscription.setter
    def align_period_with_aggregating_subscription(self, align_period_with_aggregating_subscription):
        """
        Sets the align_period_with_aggregating_subscription of this CreateSubscriptionRequest.
        {\"default\":true,\"description\":\"Whether to override the `end` date to line up with the current period end of the 'aggregating subscription' to which this subscription belongs.\",\"verbs\":[\"POST\"]}

        :param align_period_with_aggregating_subscription: The align_period_with_aggregating_subscription of this CreateSubscriptionRequest.
        :type: bool
        """

        self._align_period_with_aggregating_subscription = align_period_with_aggregating_subscription

    @property
    def pricing_component_quantities(self):
        """
        Gets the pricing_component_quantities of this CreateSubscriptionRequest.
        {\"default\":\"(empty list)\",\"description\":\"Quantities that this subscription possesses (upon beginning service), of pricing components upon the subscription's rate plan. For example: you can set the subscription to begin its service with '5 widgets' consumed. Otherwise the 'default quantity' will be observed instead, for each pricing component upon the rate plan.\",\"verbs\":[\"POST\"]}

        :return: The pricing_component_quantities of this CreateSubscriptionRequest.
        :rtype: list[PricingComponentQuantityRequest]
        """
        return self._pricing_component_quantities

    @pricing_component_quantities.setter
    def pricing_component_quantities(self, pricing_component_quantities):
        """
        Sets the pricing_component_quantities of this CreateSubscriptionRequest.
        {\"default\":\"(empty list)\",\"description\":\"Quantities that this subscription possesses (upon beginning service), of pricing components upon the subscription's rate plan. For example: you can set the subscription to begin its service with '5 widgets' consumed. Otherwise the 'default quantity' will be observed instead, for each pricing component upon the rate plan.\",\"verbs\":[\"POST\"]}

        :param pricing_component_quantities: The pricing_component_quantities of this CreateSubscriptionRequest.
        :type: list[PricingComponentQuantityRequest]
        """

        self._pricing_component_quantities = pricing_component_quantities

    @property
    def metadata(self):
        """
        Gets the metadata of this CreateSubscriptionRequest.
        { \"description\" : \"Add metadata.\", \"verbs\":[\"POST\"] }

        :return: The metadata of this CreateSubscriptionRequest.
        :rtype: DynamicMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """
        Sets the metadata of this CreateSubscriptionRequest.
        { \"description\" : \"Add metadata.\", \"verbs\":[\"POST\"] }

        :param metadata: The metadata of this CreateSubscriptionRequest.
        :type: DynamicMetadata
        """

        self._metadata = metadata

    @property
    def payment_terms(self):
        """
        Gets the payment_terms of this CreateSubscriptionRequest.


        :return: The payment_terms of this CreateSubscriptionRequest.
        :rtype: int
        """
        return self._payment_terms

    @payment_terms.setter
    def payment_terms(self, payment_terms):
        """
        Sets the payment_terms of this CreateSubscriptionRequest.


        :param payment_terms: The payment_terms of this CreateSubscriptionRequest.
        :type: int
        """

        self._payment_terms = payment_terms

    @property
    def contract_start(self):
        """
        Gets the contract_start of this CreateSubscriptionRequest.
        {\"description\":\"start of the contracted period.  This will be after a trial, if one exists\",\"verbs\":[\"GET\"]}

        :return: The contract_start of this CreateSubscriptionRequest.
        :rtype: datetime
        """
        return self._contract_start

    @contract_start.setter
    def contract_start(self, contract_start):
        """
        Sets the contract_start of this CreateSubscriptionRequest.
        {\"description\":\"start of the contracted period.  This will be after a trial, if one exists\",\"verbs\":[\"GET\"]}

        :param contract_start: The contract_start of this CreateSubscriptionRequest.
        :type: datetime
        """

        self._contract_start = contract_start

    @property
    def failed_payment_behaviour(self):
        """
        Gets the failed_payment_behaviour of this CreateSubscriptionRequest.
        {\"default\":\"None\",\"description\":\"The action that should be taken, should an invoice for some subscription to this rate plan remain unpaid despite the dunning period's being exceeded.<br><span class=\\\"label label-default\\\">CancelSubscription</span> &mdash; Demotes the subscription to the `Failed` state as soon as the dunning period is exceeded.<br><span class=\\\"label label-default\\\">None</span> &mdash; The subscription is allowed to continue in the `AwaitingPayment` state indefinitely even if the dunning period is exceeded.For slow payment cycles &mdash; or when manual invoice remediation is common &mdash; <span class=\\\"label label-default\\\">None</span> is recommended.<br>In a heavily-automated SaaS environment, automatic cancellation via <span class=\\\"label label-default\\\">CancelSubscription</span> is recommended.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :return: The failed_payment_behaviour of this CreateSubscriptionRequest.
        :rtype: str
        """
        return self._failed_payment_behaviour

    @failed_payment_behaviour.setter
    def failed_payment_behaviour(self, failed_payment_behaviour):
        """
        Sets the failed_payment_behaviour of this CreateSubscriptionRequest.
        {\"default\":\"None\",\"description\":\"The action that should be taken, should an invoice for some subscription to this rate plan remain unpaid despite the dunning period's being exceeded.<br><span class=\\\"label label-default\\\">CancelSubscription</span> &mdash; Demotes the subscription to the `Failed` state as soon as the dunning period is exceeded.<br><span class=\\\"label label-default\\\">None</span> &mdash; The subscription is allowed to continue in the `AwaitingPayment` state indefinitely even if the dunning period is exceeded.For slow payment cycles &mdash; or when manual invoice remediation is common &mdash; <span class=\\\"label label-default\\\">None</span> is recommended.<br>In a heavily-automated SaaS environment, automatic cancellation via <span class=\\\"label label-default\\\">CancelSubscription</span> is recommended.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :param failed_payment_behaviour: The failed_payment_behaviour of this CreateSubscriptionRequest.
        :type: str
        """
        allowed_values = ["CancelSubscription", "None"]
        if failed_payment_behaviour not in allowed_values:
            raise ValueError(
                "Invalid value for `failed_payment_behaviour` ({0}), must be one of {1}"
                .format(failed_payment_behaviour, allowed_values)
            )

        self._failed_payment_behaviour = failed_payment_behaviour

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
