# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class InvoiceRecalculationRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, recalculation_behaviour=None, new_state=None, only_invoice_associated_charges=False, dry_run=False):
        """
        InvoiceRecalculationRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'recalculation_behaviour': 'str',
            'new_state': 'str',
            'only_invoice_associated_charges': 'bool',
            'dry_run': 'bool'
        }

        self.attribute_map = {
            'created': 'created',
            'recalculation_behaviour': 'recalculationBehaviour',
            'new_state': 'newState',
            'only_invoice_associated_charges': 'onlyInvoiceAssociatedCharges',
            'dry_run': 'dryRun'
        }

        self._created = created
        self._recalculation_behaviour = recalculation_behaviour
        self._new_state = new_state
        self._only_invoice_associated_charges = only_invoice_associated_charges
        self._dry_run = dry_run

    @property
    def created(self):
        """
        Gets the created of this InvoiceRecalculationRequest.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this InvoiceRecalculationRequest.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this InvoiceRecalculationRequest.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this InvoiceRecalculationRequest.
        :type: datetime
        """

        self._created = created

    @property
    def recalculation_behaviour(self):
        """
        Gets the recalculation_behaviour of this InvoiceRecalculationRequest.
        {\"default\":\"RecalculateAsLatestSubscriptionVersion\",\"description\":\"On plan change a subscription may have outstanding invoices.If the value of the invoice needs to be changed it can either be calculated via the new or old plan. <span class=\\\"label label-default\\\">RecalculateAsLatestSubscriptionVersion</span> calculates as the original plan and <span class=\\\"label label-default\\\">RecalculateAsCurrentSubscriptionVersion</span> as the new plan\"verbs\":[\"POST\",\"GET\"]}

        :return: The recalculation_behaviour of this InvoiceRecalculationRequest.
        :rtype: str
        """
        return self._recalculation_behaviour

    @recalculation_behaviour.setter
    def recalculation_behaviour(self, recalculation_behaviour):
        """
        Sets the recalculation_behaviour of this InvoiceRecalculationRequest.
        {\"default\":\"RecalculateAsLatestSubscriptionVersion\",\"description\":\"On plan change a subscription may have outstanding invoices.If the value of the invoice needs to be changed it can either be calculated via the new or old plan. <span class=\\\"label label-default\\\">RecalculateAsLatestSubscriptionVersion</span> calculates as the original plan and <span class=\\\"label label-default\\\">RecalculateAsCurrentSubscriptionVersion</span> as the new plan\"verbs\":[\"POST\",\"GET\"]}

        :param recalculation_behaviour: The recalculation_behaviour of this InvoiceRecalculationRequest.
        :type: str
        """
        allowed_values = ["RecalculateAsLatestSubscriptionVersion", "RecalculateAsCurrentSubscriptionVersion"]
        if recalculation_behaviour not in allowed_values:
            raise ValueError(
                "Invalid value for `recalculation_behaviour` ({0}), must be one of {1}"
                .format(recalculation_behaviour, allowed_values)
            )

        self._recalculation_behaviour = recalculation_behaviour

    @property
    def new_state(self):
        """
        Gets the new_state of this InvoiceRecalculationRequest.
        {\"default\":\"Pending\",\"description\":\"State of the invoice once recalculated\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The new_state of this InvoiceRecalculationRequest.
        :rtype: str
        """
        return self._new_state

    @new_state.setter
    def new_state(self, new_state):
        """
        Sets the new_state of this InvoiceRecalculationRequest.
        {\"default\":\"Pending\",\"description\":\"State of the invoice once recalculated\",\"verbs\":[\"POST\",\"GET\"]}

        :param new_state: The new_state of this InvoiceRecalculationRequest.
        :type: str
        """
        allowed_values = ["Paid", "Unpaid", "Pending", "Voided"]
        if new_state not in allowed_values:
            raise ValueError(
                "Invalid value for `new_state` ({0}), must be one of {1}"
                .format(new_state, allowed_values)
            )

        self._new_state = new_state

    @property
    def only_invoice_associated_charges(self):
        """
        Gets the only_invoice_associated_charges of this InvoiceRecalculationRequest.
        {\"default\":true,\"description\":\"Only include charges which are already associated with the invoice. For example the subscription may have pending charges which can be added to the invoice on recalculation by setting this value to false. Note settings this value to true may cause new invoice line itemsto the invoice\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The only_invoice_associated_charges of this InvoiceRecalculationRequest.
        :rtype: bool
        """
        return self._only_invoice_associated_charges

    @only_invoice_associated_charges.setter
    def only_invoice_associated_charges(self, only_invoice_associated_charges):
        """
        Sets the only_invoice_associated_charges of this InvoiceRecalculationRequest.
        {\"default\":true,\"description\":\"Only include charges which are already associated with the invoice. For example the subscription may have pending charges which can be added to the invoice on recalculation by setting this value to false. Note settings this value to true may cause new invoice line itemsto the invoice\",\"verbs\":[\"POST\",\"GET\"]}

        :param only_invoice_associated_charges: The only_invoice_associated_charges of this InvoiceRecalculationRequest.
        :type: bool
        """

        self._only_invoice_associated_charges = only_invoice_associated_charges

    @property
    def dry_run(self):
        """
        Gets the dry_run of this InvoiceRecalculationRequest.
        {\"default\":\"false\",\"description\":\"Calculate the invoice but do not store or attempt payment\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The dry_run of this InvoiceRecalculationRequest.
        :rtype: bool
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """
        Sets the dry_run of this InvoiceRecalculationRequest.
        {\"default\":\"false\",\"description\":\"Calculate the invoice but do not store or attempt payment\",\"verbs\":[\"POST\",\"GET\"]}

        :param dry_run: The dry_run of this InvoiceRecalculationRequest.
        :type: bool
        """

        self._dry_run = dry_run

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
