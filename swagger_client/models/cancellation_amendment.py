# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CancellationAmendment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, changed_by=None, updated=None, type=None, id=None, organization_id=None, subscription_id=None, amendment_type=None, actioning_time=None, actioned_time=None, state=None, deleted=False, source=None, subscription_cancellation_id=None, service_end=None, cancellation_credit=None, subscription_cancellation=None):
        """
        CancellationAmendment - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'changed_by': 'str',
            'updated': 'datetime',
            'type': 'str',
            'id': 'str',
            'organization_id': 'str',
            'subscription_id': 'str',
            'amendment_type': 'str',
            'actioning_time': 'datetime',
            'actioned_time': 'datetime',
            'state': 'str',
            'deleted': 'bool',
            'source': 'str',
            'subscription_cancellation_id': 'str',
            'service_end': 'str',
            'cancellation_credit': 'str',
            'subscription_cancellation': 'MutableBillingEntity'
        }

        self.attribute_map = {
            'created': 'created',
            'changed_by': 'changedBy',
            'updated': 'updated',
            'type': '@type',
            'id': 'id',
            'organization_id': 'organizationID',
            'subscription_id': 'subscriptionID',
            'amendment_type': 'amendmentType',
            'actioning_time': 'actioningTime',
            'actioned_time': 'actionedTime',
            'state': 'state',
            'deleted': 'deleted',
            'source': 'source',
            'subscription_cancellation_id': 'subscriptionCancellationID',
            'service_end': 'serviceEnd',
            'cancellation_credit': 'cancellationCredit',
            'subscription_cancellation': 'subscriptionCancellation'
        }

        self._created = created
        self._changed_by = changed_by
        self._updated = updated
        self._type = type
        self._id = id
        self._organization_id = organization_id
        self._subscription_id = subscription_id
        self._amendment_type = amendment_type
        self._actioning_time = actioning_time
        self._actioned_time = actioned_time
        self._state = state
        self._deleted = deleted
        self._source = source
        self._subscription_cancellation_id = subscription_cancellation_id
        self._service_end = service_end
        self._cancellation_credit = cancellation_credit
        self._subscription_cancellation = subscription_cancellation

    @property
    def created(self):
        """
        Gets the created of this CancellationAmendment.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this CancellationAmendment.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this CancellationAmendment.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this CancellationAmendment.
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """
        Gets the changed_by of this CancellationAmendment.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :return: The changed_by of this CancellationAmendment.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """
        Sets the changed_by of this CancellationAmendment.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :param changed_by: The changed_by of this CancellationAmendment.
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """
        Gets the updated of this CancellationAmendment.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :return: The updated of this CancellationAmendment.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this CancellationAmendment.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :param updated: The updated of this CancellationAmendment.
        :type: datetime
        """

        self._updated = updated

    @property
    def type(self):
        """
        Gets the type of this CancellationAmendment.
        { \"description\" : \"\", \"default\" : \"\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The type of this CancellationAmendment.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this CancellationAmendment.
        { \"description\" : \"\", \"default\" : \"\", \"verbs\":[\"POST\",\"GET\"] }

        :param type: The type of this CancellationAmendment.
        :type: str
        """
        allowed_values = ["InvoiceOutstandingChargesAmendment", "IssueInvoiceAmendment", "PricingComponentValueAmendment", "InvoiceRecalculationAmendment", "CancellationAmendment", "InvoiceNextExecutionAttemptAmendment", "FixedTermExpiryAmendment", "EndTrialAmendment", "ProductRatePlanMigrationAmendment", "AmendmentDiscardAmendment", "UpdateComponentValueAmendment", "ServiceEndAmendment", "ResumeSubscriptionAmendment", "CreateSubscriptionChargeAmendment", "TimerAmendment"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def id(self):
        """
        Gets the id of this CancellationAmendment.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :return: The id of this CancellationAmendment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CancellationAmendment.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :param id: The id of this CancellationAmendment.
        :type: str
        """

        self._id = id

    @property
    def organization_id(self):
        """
        Gets the organization_id of this CancellationAmendment.
        { \"description\" : \"\", \"verbs\":[\"\"] }

        :return: The organization_id of this CancellationAmendment.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this CancellationAmendment.
        { \"description\" : \"\", \"verbs\":[\"\"] }

        :param organization_id: The organization_id of this CancellationAmendment.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def subscription_id(self):
        """
        Gets the subscription_id of this CancellationAmendment.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The subscription_id of this CancellationAmendment.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """
        Sets the subscription_id of this CancellationAmendment.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param subscription_id: The subscription_id of this CancellationAmendment.
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def amendment_type(self):
        """
        Gets the amendment_type of this CancellationAmendment.
        { \"description\" : \"Type of amendment\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The amendment_type of this CancellationAmendment.
        :rtype: str
        """
        return self._amendment_type

    @amendment_type.setter
    def amendment_type(self, amendment_type):
        """
        Sets the amendment_type of this CancellationAmendment.
        { \"description\" : \"Type of amendment\", \"verbs\":[\"POST\",\"GET\"] }

        :param amendment_type: The amendment_type of this CancellationAmendment.
        :type: str
        """
        allowed_values = ["InvoiceNextExecutionAttempt", "Cancellation", "PricingComponentValue", "AmendmentDiscard", "Compound", "FixedTermExpiry", "InvoiceRecalculation", "EndTrial", "InvoiceOutstandingCharges", "IssueInvoice", "ProductRatePlanMigration", "UpdateComponentValue", "ServiceEnd", "ResumeSubscription", "CreateSubscriptionCharge", "Timer"]
        if amendment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `amendment_type` ({0}), must be one of {1}"
                .format(amendment_type, allowed_values)
            )

        self._amendment_type = amendment_type

    @property
    def actioning_time(self):
        """
        Gets the actioning_time of this CancellationAmendment.
        { \"description\" : \"When the amendment will run\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The actioning_time of this CancellationAmendment.
        :rtype: datetime
        """
        return self._actioning_time

    @actioning_time.setter
    def actioning_time(self, actioning_time):
        """
        Sets the actioning_time of this CancellationAmendment.
        { \"description\" : \"When the amendment will run\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param actioning_time: The actioning_time of this CancellationAmendment.
        :type: datetime
        """

        self._actioning_time = actioning_time

    @property
    def actioned_time(self):
        """
        Gets the actioned_time of this CancellationAmendment.
        { \"description\" : \"The time the amendment completed.\", \"verbs\":[\"GET\"] }

        :return: The actioned_time of this CancellationAmendment.
        :rtype: datetime
        """
        return self._actioned_time

    @actioned_time.setter
    def actioned_time(self, actioned_time):
        """
        Sets the actioned_time of this CancellationAmendment.
        { \"description\" : \"The time the amendment completed.\", \"verbs\":[\"GET\"] }

        :param actioned_time: The actioned_time of this CancellationAmendment.
        :type: datetime
        """

        self._actioned_time = actioned_time

    @property
    def state(self):
        """
        Gets the state of this CancellationAmendment.
        Whether the subscription-amendment is: pending (to be actioned in the future), succeeded (actioning completed), failed (actioning was attempted but no effect was made) or discarded (the amendment had been cancelled before being actioned). Default: Pending

        :return: The state of this CancellationAmendment.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this CancellationAmendment.
        Whether the subscription-amendment is: pending (to be actioned in the future), succeeded (actioning completed), failed (actioning was attempted but no effect was made) or discarded (the amendment had been cancelled before being actioned). Default: Pending

        :param state: The state of this CancellationAmendment.
        :type: str
        """
        allowed_values = ["Pending", "Succeeded", "Failed", "Discarded"]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def deleted(self):
        """
        Gets the deleted of this CancellationAmendment.
        { \"description\" : \"Is the amendment deleted.\", \"verbs\":[\"GET\"] }

        :return: The deleted of this CancellationAmendment.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """
        Sets the deleted of this CancellationAmendment.
        { \"description\" : \"Is the amendment deleted.\", \"verbs\":[\"GET\"] }

        :param deleted: The deleted of this CancellationAmendment.
        :type: bool
        """

        self._deleted = deleted

    @property
    def source(self):
        """
        Gets the source of this CancellationAmendment.
        { \"description\" : \"Explanation for cancellation\", \"default\" : \"API\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The source of this CancellationAmendment.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this CancellationAmendment.
        { \"description\" : \"Explanation for cancellation\", \"default\" : \"API\", \"verbs\":[\"POST\",\"GET\"] }

        :param source: The source of this CancellationAmendment.
        :type: str
        """

        self._source = source

    @property
    def subscription_cancellation_id(self):
        """
        Gets the subscription_cancellation_id of this CancellationAmendment.
        { \"description\" : \"\", \"verbs\":[] }

        :return: The subscription_cancellation_id of this CancellationAmendment.
        :rtype: str
        """
        return self._subscription_cancellation_id

    @subscription_cancellation_id.setter
    def subscription_cancellation_id(self, subscription_cancellation_id):
        """
        Sets the subscription_cancellation_id of this CancellationAmendment.
        { \"description\" : \"\", \"verbs\":[] }

        :param subscription_cancellation_id: The subscription_cancellation_id of this CancellationAmendment.
        :type: str
        """

        self._subscription_cancellation_id = subscription_cancellation_id

    @property
    def service_end(self):
        """
        Gets the service_end of this CancellationAmendment.
        { \"description\" : \"If the serviceEnd parameter is <span class=\\\"label label-default\\\">AtPeriodEnd</span> the cancellation will be delayed till the end of the current period.\", \"default\" : \"AtPeriodEnd\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The service_end of this CancellationAmendment.
        :rtype: str
        """
        return self._service_end

    @service_end.setter
    def service_end(self, service_end):
        """
        Sets the service_end of this CancellationAmendment.
        { \"description\" : \"If the serviceEnd parameter is <span class=\\\"label label-default\\\">AtPeriodEnd</span> the cancellation will be delayed till the end of the current period.\", \"default\" : \"AtPeriodEnd\", \"verbs\":[\"POST\",\"GET\"] }

        :param service_end: The service_end of this CancellationAmendment.
        :type: str
        """
        allowed_values = ["Immediate", "AtPeriodEnd"]
        if service_end not in allowed_values:
            raise ValueError(
                "Invalid value for `service_end` ({0}), must be one of {1}"
                .format(service_end, allowed_values)
            )

        self._service_end = service_end

    @property
    def cancellation_credit(self):
        """
        Gets the cancellation_credit of this CancellationAmendment.
        Specifies whether the service will end immediately on cancellation or if it will continue until the end of the current period. Default: AtPeriodEnd

        :return: The cancellation_credit of this CancellationAmendment.
        :rtype: str
        """
        return self._cancellation_credit

    @cancellation_credit.setter
    def cancellation_credit(self, cancellation_credit):
        """
        Sets the cancellation_credit of this CancellationAmendment.
        Specifies whether the service will end immediately on cancellation or if it will continue until the end of the current period. Default: AtPeriodEnd

        :param cancellation_credit: The cancellation_credit of this CancellationAmendment.
        :type: str
        """
        allowed_values = ["Credit", "None"]
        if cancellation_credit not in allowed_values:
            raise ValueError(
                "Invalid value for `cancellation_credit` ({0}), must be one of {1}"
                .format(cancellation_credit, allowed_values)
            )

        self._cancellation_credit = cancellation_credit

    @property
    def subscription_cancellation(self):
        """
        Gets the subscription_cancellation of this CancellationAmendment.
        { \"description\" : \"\", \"verbs\":[] }

        :return: The subscription_cancellation of this CancellationAmendment.
        :rtype: MutableBillingEntity
        """
        return self._subscription_cancellation

    @subscription_cancellation.setter
    def subscription_cancellation(self, subscription_cancellation):
        """
        Sets the subscription_cancellation of this CancellationAmendment.
        { \"description\" : \"\", \"verbs\":[] }

        :param subscription_cancellation: The subscription_cancellation of this CancellationAmendment.
        :type: MutableBillingEntity
        """

        self._subscription_cancellation = subscription_cancellation

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
