# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class RuleSatisfaction(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, satisfied=False, broken_rules=None, coupon_instance_being_initialised=False, new_user=False):
        """
        RuleSatisfaction - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'satisfied': 'bool',
            'broken_rules': 'list[CouponRule]',
            'coupon_instance_being_initialised': 'bool',
            'new_user': 'bool'
        }

        self.attribute_map = {
            'satisfied': 'satisfied',
            'broken_rules': 'brokenRules',
            'coupon_instance_being_initialised': 'couponInstanceBeingInitialised',
            'new_user': 'newUser'
        }

        self._satisfied = satisfied
        self._broken_rules = broken_rules
        self._coupon_instance_being_initialised = coupon_instance_being_initialised
        self._new_user = new_user

    @property
    def satisfied(self):
        """
        Gets the satisfied of this RuleSatisfaction.


        :return: The satisfied of this RuleSatisfaction.
        :rtype: bool
        """
        return self._satisfied

    @satisfied.setter
    def satisfied(self, satisfied):
        """
        Sets the satisfied of this RuleSatisfaction.


        :param satisfied: The satisfied of this RuleSatisfaction.
        :type: bool
        """

        self._satisfied = satisfied

    @property
    def broken_rules(self):
        """
        Gets the broken_rules of this RuleSatisfaction.


        :return: The broken_rules of this RuleSatisfaction.
        :rtype: list[CouponRule]
        """
        return self._broken_rules

    @broken_rules.setter
    def broken_rules(self, broken_rules):
        """
        Sets the broken_rules of this RuleSatisfaction.


        :param broken_rules: The broken_rules of this RuleSatisfaction.
        :type: list[CouponRule]
        """

        self._broken_rules = broken_rules

    @property
    def coupon_instance_being_initialised(self):
        """
        Gets the coupon_instance_being_initialised of this RuleSatisfaction.


        :return: The coupon_instance_being_initialised of this RuleSatisfaction.
        :rtype: bool
        """
        return self._coupon_instance_being_initialised

    @coupon_instance_being_initialised.setter
    def coupon_instance_being_initialised(self, coupon_instance_being_initialised):
        """
        Sets the coupon_instance_being_initialised of this RuleSatisfaction.


        :param coupon_instance_being_initialised: The coupon_instance_being_initialised of this RuleSatisfaction.
        :type: bool
        """

        self._coupon_instance_being_initialised = coupon_instance_being_initialised

    @property
    def new_user(self):
        """
        Gets the new_user of this RuleSatisfaction.


        :return: The new_user of this RuleSatisfaction.
        :rtype: bool
        """
        return self._new_user

    @new_user.setter
    def new_user(self, new_user):
        """
        Sets the new_user of this RuleSatisfaction.


        :param new_user: The new_user of this RuleSatisfaction.
        :type: bool
        """

        self._new_user = new_user

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
