# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CreateAccountRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, profile=None, organization_id=None, user_id=None, aggregating_product_rate_plan_id=None, aggregating_subscription_id=None, metadata=None):
        """
        CreateAccountRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'profile': 'CreateAccountProfileRequest',
            'organization_id': 'str',
            'user_id': 'str',
            'aggregating_product_rate_plan_id': 'str',
            'aggregating_subscription_id': 'str',
            'metadata': 'DynamicMetadata'
        }

        self.attribute_map = {
            'profile': 'profile',
            'organization_id': 'organizationID',
            'user_id': 'userID',
            'aggregating_product_rate_plan_id': 'aggregatingProductRatePlanID',
            'aggregating_subscription_id': 'aggregatingSubscriptionID',
            'metadata': 'metadata'
        }

        self._profile = profile
        self._organization_id = organization_id
        self._user_id = user_id
        self._aggregating_product_rate_plan_id = aggregating_product_rate_plan_id
        self._aggregating_subscription_id = aggregating_subscription_id
        self._metadata = metadata

    @property
    def profile(self):
        """
        Gets the profile of this CreateAccountRequest.


        :return: The profile of this CreateAccountRequest.
        :rtype: CreateAccountProfileRequest
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """
        Sets the profile of this CreateAccountRequest.


        :param profile: The profile of this CreateAccountRequest.
        :type: CreateAccountProfileRequest
        """

        self._profile = profile

    @property
    def organization_id(self):
        """
        Gets the organization_id of this CreateAccountRequest.
        { \"description\" : \"Organization associated with the account.\", \"verbs\":[] }

        :return: The organization_id of this CreateAccountRequest.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this CreateAccountRequest.
        { \"description\" : \"Organization associated with the account.\", \"verbs\":[] }

        :param organization_id: The organization_id of this CreateAccountRequest.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def user_id(self):
        """
        Gets the user_id of this CreateAccountRequest.
        { \"description\" : \"User associated with the account. If this is null, no user is currently assocaited with the account. A user is only set when an account is associated with a user account.\", \"verbs\":[] }

        :return: The user_id of this CreateAccountRequest.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this CreateAccountRequest.
        { \"description\" : \"User associated with the account. If this is null, no user is currently assocaited with the account. A user is only set when an account is associated with a user account.\", \"verbs\":[] }

        :param user_id: The user_id of this CreateAccountRequest.
        :type: str
        """

        self._user_id = user_id

    @property
    def aggregating_product_rate_plan_id(self):
        """
        Gets the aggregating_product_rate_plan_id of this CreateAccountRequest.
        { \"description\" : \"If present, this will be the product rate plan to use when creating an aggregating subscription.  An account level aggregating subscription will be created when the first subscription is created against the account.\", \"verbs\":[] }

        :return: The aggregating_product_rate_plan_id of this CreateAccountRequest.
        :rtype: str
        """
        return self._aggregating_product_rate_plan_id

    @aggregating_product_rate_plan_id.setter
    def aggregating_product_rate_plan_id(self, aggregating_product_rate_plan_id):
        """
        Sets the aggregating_product_rate_plan_id of this CreateAccountRequest.
        { \"description\" : \"If present, this will be the product rate plan to use when creating an aggregating subscription.  An account level aggregating subscription will be created when the first subscription is created against the account.\", \"verbs\":[] }

        :param aggregating_product_rate_plan_id: The aggregating_product_rate_plan_id of this CreateAccountRequest.
        :type: str
        """

        self._aggregating_product_rate_plan_id = aggregating_product_rate_plan_id

    @property
    def aggregating_subscription_id(self):
        """
        Gets the aggregating_subscription_id of this CreateAccountRequest.
        { \"description\" : \"The consistent ID of the account level aggregating subscription, if one exists.\", \"verbs\":[] }

        :return: The aggregating_subscription_id of this CreateAccountRequest.
        :rtype: str
        """
        return self._aggregating_subscription_id

    @aggregating_subscription_id.setter
    def aggregating_subscription_id(self, aggregating_subscription_id):
        """
        Sets the aggregating_subscription_id of this CreateAccountRequest.
        { \"description\" : \"The consistent ID of the account level aggregating subscription, if one exists.\", \"verbs\":[] }

        :param aggregating_subscription_id: The aggregating_subscription_id of this CreateAccountRequest.
        :type: str
        """

        self._aggregating_subscription_id = aggregating_subscription_id

    @property
    def metadata(self):
        """
        Gets the metadata of this CreateAccountRequest.


        :return: The metadata of this CreateAccountRequest.
        :rtype: DynamicMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """
        Sets the metadata of this CreateAccountRequest.


        :param metadata: The metadata of this CreateAccountRequest.
        :type: DynamicMetadata
        """

        self._metadata = metadata

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
