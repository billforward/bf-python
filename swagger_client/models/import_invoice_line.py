# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ImportInvoiceLine(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, description=None, calculation=None, pricing_component=None, organization_id=None, cost=None, tax=None, period_start=None, period_end=None):
        """
        ImportInvoiceLine - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'description': 'str',
            'calculation': 'str',
            'pricing_component': 'str',
            'organization_id': 'str',
            'cost': 'float',
            'tax': 'float',
            'period_start': 'datetime',
            'period_end': 'datetime'
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'calculation': 'calculation',
            'pricing_component': 'pricingComponent',
            'organization_id': 'organizationID',
            'cost': 'cost',
            'tax': 'tax',
            'period_start': 'periodStart',
            'period_end': 'periodEnd'
        }

        self._name = name
        self._description = description
        self._calculation = calculation
        self._pricing_component = pricing_component
        self._organization_id = organization_id
        self._cost = cost
        self._tax = tax
        self._period_start = period_start
        self._period_end = period_end

    @property
    def name(self):
        """
        Gets the name of this ImportInvoiceLine.


        :return: The name of this ImportInvoiceLine.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ImportInvoiceLine.


        :param name: The name of this ImportInvoiceLine.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this ImportInvoiceLine.


        :return: The description of this ImportInvoiceLine.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ImportInvoiceLine.


        :param description: The description of this ImportInvoiceLine.
        :type: str
        """

        self._description = description

    @property
    def calculation(self):
        """
        Gets the calculation of this ImportInvoiceLine.


        :return: The calculation of this ImportInvoiceLine.
        :rtype: str
        """
        return self._calculation

    @calculation.setter
    def calculation(self, calculation):
        """
        Sets the calculation of this ImportInvoiceLine.


        :param calculation: The calculation of this ImportInvoiceLine.
        :type: str
        """

        self._calculation = calculation

    @property
    def pricing_component(self):
        """
        Gets the pricing_component of this ImportInvoiceLine.


        :return: The pricing_component of this ImportInvoiceLine.
        :rtype: str
        """
        return self._pricing_component

    @pricing_component.setter
    def pricing_component(self, pricing_component):
        """
        Sets the pricing_component of this ImportInvoiceLine.


        :param pricing_component: The pricing_component of this ImportInvoiceLine.
        :type: str
        """

        self._pricing_component = pricing_component

    @property
    def organization_id(self):
        """
        Gets the organization_id of this ImportInvoiceLine.


        :return: The organization_id of this ImportInvoiceLine.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this ImportInvoiceLine.


        :param organization_id: The organization_id of this ImportInvoiceLine.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def cost(self):
        """
        Gets the cost of this ImportInvoiceLine.


        :return: The cost of this ImportInvoiceLine.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """
        Sets the cost of this ImportInvoiceLine.


        :param cost: The cost of this ImportInvoiceLine.
        :type: float
        """

        self._cost = cost

    @property
    def tax(self):
        """
        Gets the tax of this ImportInvoiceLine.


        :return: The tax of this ImportInvoiceLine.
        :rtype: float
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """
        Sets the tax of this ImportInvoiceLine.


        :param tax: The tax of this ImportInvoiceLine.
        :type: float
        """

        self._tax = tax

    @property
    def period_start(self):
        """
        Gets the period_start of this ImportInvoiceLine.


        :return: The period_start of this ImportInvoiceLine.
        :rtype: datetime
        """
        return self._period_start

    @period_start.setter
    def period_start(self, period_start):
        """
        Sets the period_start of this ImportInvoiceLine.


        :param period_start: The period_start of this ImportInvoiceLine.
        :type: datetime
        """

        self._period_start = period_start

    @property
    def period_end(self):
        """
        Gets the period_end of this ImportInvoiceLine.


        :return: The period_end of this ImportInvoiceLine.
        :rtype: datetime
        """
        return self._period_end

    @period_end.setter
    def period_end(self, period_end):
        """
        Sets the period_end of this ImportInvoiceLine.


        :param period_end: The period_end of this ImportInvoiceLine.
        :type: datetime
        """

        self._period_end = period_end

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
