# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Product(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, changed_by=None, updated=None, id=None, crm_id=None, account_id=None, name=None, public_name=None, description=None, duration=None, duration_period=None, metadata=None, trial=None, trial_period=None, product_type=None, deleted=False, start_date=None, payment_terms=None):
        """
        Product - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'changed_by': 'str',
            'updated': 'datetime',
            'id': 'str',
            'crm_id': 'str',
            'account_id': 'str',
            'name': 'str',
            'public_name': 'str',
            'description': 'str',
            'duration': 'int',
            'duration_period': 'str',
            'metadata': 'DynamicMetadata',
            'trial': 'int',
            'trial_period': 'str',
            'product_type': 'str',
            'deleted': 'bool',
            'start_date': 'datetime',
            'payment_terms': 'int'
        }

        self.attribute_map = {
            'created': 'created',
            'changed_by': 'changedBy',
            'updated': 'updated',
            'id': 'id',
            'crm_id': 'crmID',
            'account_id': 'accountID',
            'name': 'name',
            'public_name': 'publicName',
            'description': 'description',
            'duration': 'duration',
            'duration_period': 'durationPeriod',
            'metadata': 'metadata',
            'trial': 'trial',
            'trial_period': 'trialPeriod',
            'product_type': 'productType',
            'deleted': 'deleted',
            'start_date': 'startDate',
            'payment_terms': 'paymentTerms'
        }

        self._created = created
        self._changed_by = changed_by
        self._updated = updated
        self._id = id
        self._crm_id = crm_id
        self._account_id = account_id
        self._name = name
        self._public_name = public_name
        self._description = description
        self._duration = duration
        self._duration_period = duration_period
        self._metadata = metadata
        self._trial = trial
        self._trial_period = trial_period
        self._product_type = product_type
        self._deleted = deleted
        self._start_date = start_date
        self._payment_terms = payment_terms

    @property
    def created(self):
        """
        Gets the created of this Product.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this Product.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this Product.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this Product.
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """
        Gets the changed_by of this Product.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :return: The changed_by of this Product.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """
        Sets the changed_by of this Product.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :param changed_by: The changed_by of this Product.
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """
        Gets the updated of this Product.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :return: The updated of this Product.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this Product.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :param updated: The updated of this Product.
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """
        Gets the id of this Product.
        {\"description\":\"ID uniquely identifying this product.\",\"verbs\":[\"GET\"]}

        :return: The id of this Product.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Product.
        {\"description\":\"ID uniquely identifying this product.\",\"verbs\":[\"GET\"]}

        :param id: The id of this Product.
        :type: str
        """

        self._id = id

    @property
    def crm_id(self):
        """
        Gets the crm_id of this Product.
        {\"description\":\"Customer-relationship-management ID of the product.\",\"verbs\":[\"GET\",\"PUT\",\"POST\"]}

        :return: The crm_id of this Product.
        :rtype: str
        """
        return self._crm_id

    @crm_id.setter
    def crm_id(self, crm_id):
        """
        Sets the crm_id of this Product.
        {\"description\":\"Customer-relationship-management ID of the product.\",\"verbs\":[\"GET\",\"PUT\",\"POST\"]}

        :param crm_id: The crm_id of this Product.
        :type: str
        """

        self._crm_id = crm_id

    @property
    def account_id(self):
        """
        Gets the account_id of this Product.
        {\"description\":\"\",\"verbs\":[]}

        :return: The account_id of this Product.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """
        Sets the account_id of this Product.
        {\"description\":\"\",\"verbs\":[]}

        :param account_id: The account_id of this Product.
        :type: str
        """

        self._account_id = account_id

    @property
    def name(self):
        """
        Gets the name of this Product.
        {\"description\":\"A unique name &mdash; for your benefit &mdash; used to identify this product within BillForward. It should reflect the fact that this product confers some service to a customer (e.g. \\\"Gold membership\\\").<br>The product can also be defined by the frequency with which it recurs (e.g. \\\"Monthly Gold membership\\\").<br>Remember also that rate plans can override the timing prescribed by their product. If you intend to override that timing, you may consider the product's period duration to be an unimportant factor when it comes to naming it.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :return: The name of this Product.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Product.
        {\"description\":\"A unique name &mdash; for your benefit &mdash; used to identify this product within BillForward. It should reflect the fact that this product confers some service to a customer (e.g. \\\"Gold membership\\\").<br>The product can also be defined by the frequency with which it recurs (e.g. \\\"Monthly Gold membership\\\").<br>Remember also that rate plans can override the timing prescribed by their product. If you intend to override that timing, you may consider the product's period duration to be an unimportant factor when it comes to naming it.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :param name: The name of this Product.
        :type: str
        """

        self._name = name

    @property
    def public_name(self):
        """
        Gets the public_name of this Product.
        {\"description\":\"A friendly non-unique name used to identify this product\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :return: The public_name of this Product.
        :rtype: str
        """
        return self._public_name

    @public_name.setter
    def public_name(self, public_name):
        """
        Sets the public_name of this Product.
        {\"description\":\"A friendly non-unique name used to identify this product\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :param public_name: The public_name of this Product.
        :type: str
        """

        self._public_name = public_name

    @property
    def description(self):
        """
        Gets the description of this Product.
        {\"description\":\"A description &mdash; for your benefit &mdash; of the product. For example: you could explain what service this product entitles a customer to.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :return: The description of this Product.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Product.
        {\"description\":\"A description &mdash; for your benefit &mdash; of the product. For example: you could explain what service this product entitles a customer to.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :param description: The description of this Product.
        :type: str
        """

        self._description = description

    @property
    def duration(self):
        """
        Gets the duration of this Product.
        {\"description\":\"Number of length-measures which constitute the product's period.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :return: The duration of this Product.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """
        Sets the duration of this Product.
        {\"description\":\"Number of length-measures which constitute the product's period.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :param duration: The duration of this Product.
        :type: int
        """

        self._duration = duration

    @property
    def duration_period(self):
        """
        Gets the duration_period of this Product.
        {\"description\":\"Measure describing the magnitude of the product's period.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :return: The duration_period of this Product.
        :rtype: str
        """
        return self._duration_period

    @duration_period.setter
    def duration_period(self, duration_period):
        """
        Sets the duration_period of this Product.
        {\"description\":\"Measure describing the magnitude of the product's period.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :param duration_period: The duration_period of this Product.
        :type: str
        """
        allowed_values = ["minutes", "days", "months", "years"]
        if duration_period not in allowed_values:
            raise ValueError(
                "Invalid value for `duration_period` ({0}), must be one of {1}"
                .format(duration_period, allowed_values)
            )

        self._duration_period = duration_period

    @property
    def metadata(self):
        """
        Gets the metadata of this Product.


        :return: The metadata of this Product.
        :rtype: DynamicMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """
        Sets the metadata of this Product.


        :param metadata: The metadata of this Product.
        :type: DynamicMetadata
        """

        self._metadata = metadata

    @property
    def trial(self):
        """
        Gets the trial of this Product.
        {\"default\":0,\"description\":\"Number of trial-length-measures which constitute the product's trial period\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :return: The trial of this Product.
        :rtype: int
        """
        return self._trial

    @trial.setter
    def trial(self, trial):
        """
        Sets the trial of this Product.
        {\"default\":0,\"description\":\"Number of trial-length-measures which constitute the product's trial period\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :param trial: The trial of this Product.
        :type: int
        """

        self._trial = trial

    @property
    def trial_period(self):
        """
        Gets the trial_period of this Product.
        {\"default\":\"none\",\"description\":\"Measure describing the magnitude of the product's trial period.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :return: The trial_period of this Product.
        :rtype: str
        """
        return self._trial_period

    @trial_period.setter
    def trial_period(self, trial_period):
        """
        Sets the trial_period of this Product.
        {\"default\":\"none\",\"description\":\"Measure describing the magnitude of the product's trial period.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :param trial_period: The trial_period of this Product.
        :type: str
        """
        allowed_values = ["none", "minutes", "days", "months"]
        if trial_period not in allowed_values:
            raise ValueError(
                "Invalid value for `trial_period` ({0}), must be one of {1}"
                .format(trial_period, allowed_values)
            )

        self._trial_period = trial_period

    @property
    def product_type(self):
        """
        Gets the product_type of this Product.
        {\"default\":\"recurring\",\"description\":\"The frequency of the product &mdash; either recurring or non-recurring.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :return: The product_type of this Product.
        :rtype: str
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """
        Sets the product_type of this Product.
        {\"default\":\"recurring\",\"description\":\"The frequency of the product &mdash; either recurring or non-recurring.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :param product_type: The product_type of this Product.
        :type: str
        """
        allowed_values = ["nonrecurring", "recurring"]
        if product_type not in allowed_values:
            raise ValueError(
                "Invalid value for `product_type` ({0}), must be one of {1}"
                .format(product_type, allowed_values)
            )

        self._product_type = product_type

    @property
    def deleted(self):
        """
        Gets the deleted of this Product.
        {\"description\":\"\",\"verbs\":[\"GET\"]}

        :return: The deleted of this Product.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """
        Sets the deleted of this Product.
        {\"description\":\"\",\"verbs\":[\"GET\"]}

        :param deleted: The deleted of this Product.
        :type: bool
        """

        self._deleted = deleted

    @property
    def start_date(self):
        """
        Gets the start_date of this Product.
        {\"description\":\"\",\"verbs\":[]}

        :return: The start_date of this Product.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """
        Sets the start_date of this Product.
        {\"description\":\"\",\"verbs\":[]}

        :param start_date: The start_date of this Product.
        :type: datetime
        """

        self._start_date = start_date

    @property
    def payment_terms(self):
        """
        Gets the payment_terms of this Product.


        :return: The payment_terms of this Product.
        :rtype: int
        """
        return self._payment_terms

    @payment_terms.setter
    def payment_terms(self, payment_terms):
        """
        Sets the payment_terms of this Product.


        :param payment_terms: The payment_terms of this Product.
        :type: int
        """

        self._payment_terms = payment_terms

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
