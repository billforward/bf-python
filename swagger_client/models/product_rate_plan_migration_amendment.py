# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ProductRatePlanMigrationAmendment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, changed_by=None, updated=None, type=None, id=None, organization_id=None, subscription_id=None, amendment_type=None, actioning_time=None, actioned_time=None, state=None, deleted=False, product_rate_plan_id=None, invoicing_type=None, mappings=None, previous_subscription_id=None, next_subscription_id=None, next_subscription_name=None, next_subscription_description=None, pricing_behaviour=None):
        """
        ProductRatePlanMigrationAmendment - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'changed_by': 'str',
            'updated': 'datetime',
            'type': 'str',
            'id': 'str',
            'organization_id': 'str',
            'subscription_id': 'str',
            'amendment_type': 'str',
            'actioning_time': 'datetime',
            'actioned_time': 'datetime',
            'state': 'str',
            'deleted': 'bool',
            'product_rate_plan_id': 'str',
            'invoicing_type': 'str',
            'mappings': 'list[PricingComponentValueMigrationAmendmentMapping]',
            'previous_subscription_id': 'str',
            'next_subscription_id': 'str',
            'next_subscription_name': 'str',
            'next_subscription_description': 'str',
            'pricing_behaviour': 'str'
        }

        self.attribute_map = {
            'created': 'created',
            'changed_by': 'changedBy',
            'updated': 'updated',
            'type': '@type',
            'id': 'id',
            'organization_id': 'organizationID',
            'subscription_id': 'subscriptionID',
            'amendment_type': 'amendmentType',
            'actioning_time': 'actioningTime',
            'actioned_time': 'actionedTime',
            'state': 'state',
            'deleted': 'deleted',
            'product_rate_plan_id': 'productRatePlanID',
            'invoicing_type': 'invoicingType',
            'mappings': 'mappings',
            'previous_subscription_id': 'previousSubscriptionID',
            'next_subscription_id': 'nextSubscriptionID',
            'next_subscription_name': 'nextSubscriptionName',
            'next_subscription_description': 'nextSubscriptionDescription',
            'pricing_behaviour': 'pricingBehaviour'
        }

        self._created = created
        self._changed_by = changed_by
        self._updated = updated
        self._type = type
        self._id = id
        self._organization_id = organization_id
        self._subscription_id = subscription_id
        self._amendment_type = amendment_type
        self._actioning_time = actioning_time
        self._actioned_time = actioned_time
        self._state = state
        self._deleted = deleted
        self._product_rate_plan_id = product_rate_plan_id
        self._invoicing_type = invoicing_type
        self._mappings = mappings
        self._previous_subscription_id = previous_subscription_id
        self._next_subscription_id = next_subscription_id
        self._next_subscription_name = next_subscription_name
        self._next_subscription_description = next_subscription_description
        self._pricing_behaviour = pricing_behaviour

    @property
    def created(self):
        """
        Gets the created of this ProductRatePlanMigrationAmendment.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this ProductRatePlanMigrationAmendment.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this ProductRatePlanMigrationAmendment.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this ProductRatePlanMigrationAmendment.
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """
        Gets the changed_by of this ProductRatePlanMigrationAmendment.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :return: The changed_by of this ProductRatePlanMigrationAmendment.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """
        Sets the changed_by of this ProductRatePlanMigrationAmendment.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :param changed_by: The changed_by of this ProductRatePlanMigrationAmendment.
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """
        Gets the updated of this ProductRatePlanMigrationAmendment.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :return: The updated of this ProductRatePlanMigrationAmendment.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this ProductRatePlanMigrationAmendment.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :param updated: The updated of this ProductRatePlanMigrationAmendment.
        :type: datetime
        """

        self._updated = updated

    @property
    def type(self):
        """
        Gets the type of this ProductRatePlanMigrationAmendment.
        { \"description\" : \"\", \"default\" : \"\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The type of this ProductRatePlanMigrationAmendment.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ProductRatePlanMigrationAmendment.
        { \"description\" : \"\", \"default\" : \"\", \"verbs\":[\"POST\",\"GET\"] }

        :param type: The type of this ProductRatePlanMigrationAmendment.
        :type: str
        """
        allowed_values = ["InvoiceOutstandingChargesAmendment", "IssueInvoiceAmendment", "PricingComponentValueAmendment", "InvoiceRecalculationAmendment", "CancellationAmendment", "InvoiceNextExecutionAttemptAmendment", "FixedTermExpiryAmendment", "EndTrialAmendment", "ProductRatePlanMigrationAmendment", "AmendmentDiscardAmendment", "UpdateComponentValueAmendment", "ServiceEndAmendment", "ResumeSubscriptionAmendment", "CreateSubscriptionChargeAmendment", "TimerAmendment"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def id(self):
        """
        Gets the id of this ProductRatePlanMigrationAmendment.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :return: The id of this ProductRatePlanMigrationAmendment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ProductRatePlanMigrationAmendment.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :param id: The id of this ProductRatePlanMigrationAmendment.
        :type: str
        """

        self._id = id

    @property
    def organization_id(self):
        """
        Gets the organization_id of this ProductRatePlanMigrationAmendment.
        { \"description\" : \"\", \"verbs\":[\"\"] }

        :return: The organization_id of this ProductRatePlanMigrationAmendment.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this ProductRatePlanMigrationAmendment.
        { \"description\" : \"\", \"verbs\":[\"\"] }

        :param organization_id: The organization_id of this ProductRatePlanMigrationAmendment.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def subscription_id(self):
        """
        Gets the subscription_id of this ProductRatePlanMigrationAmendment.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The subscription_id of this ProductRatePlanMigrationAmendment.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """
        Sets the subscription_id of this ProductRatePlanMigrationAmendment.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param subscription_id: The subscription_id of this ProductRatePlanMigrationAmendment.
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def amendment_type(self):
        """
        Gets the amendment_type of this ProductRatePlanMigrationAmendment.
        { \"description\" : \"Type of amendment\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The amendment_type of this ProductRatePlanMigrationAmendment.
        :rtype: str
        """
        return self._amendment_type

    @amendment_type.setter
    def amendment_type(self, amendment_type):
        """
        Sets the amendment_type of this ProductRatePlanMigrationAmendment.
        { \"description\" : \"Type of amendment\", \"verbs\":[\"POST\",\"GET\"] }

        :param amendment_type: The amendment_type of this ProductRatePlanMigrationAmendment.
        :type: str
        """
        allowed_values = ["InvoiceNextExecutionAttempt", "Cancellation", "PricingComponentValue", "AmendmentDiscard", "Compound", "FixedTermExpiry", "InvoiceRecalculation", "EndTrial", "InvoiceOutstandingCharges", "IssueInvoice", "ProductRatePlanMigration", "UpdateComponentValue", "ServiceEnd", "ResumeSubscription", "CreateSubscriptionCharge", "Timer"]
        if amendment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `amendment_type` ({0}), must be one of {1}"
                .format(amendment_type, allowed_values)
            )

        self._amendment_type = amendment_type

    @property
    def actioning_time(self):
        """
        Gets the actioning_time of this ProductRatePlanMigrationAmendment.
        { \"description\" : \"When the amendment will run\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The actioning_time of this ProductRatePlanMigrationAmendment.
        :rtype: datetime
        """
        return self._actioning_time

    @actioning_time.setter
    def actioning_time(self, actioning_time):
        """
        Sets the actioning_time of this ProductRatePlanMigrationAmendment.
        { \"description\" : \"When the amendment will run\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param actioning_time: The actioning_time of this ProductRatePlanMigrationAmendment.
        :type: datetime
        """

        self._actioning_time = actioning_time

    @property
    def actioned_time(self):
        """
        Gets the actioned_time of this ProductRatePlanMigrationAmendment.
        { \"description\" : \"The time the amendment completed.\", \"verbs\":[\"GET\"] }

        :return: The actioned_time of this ProductRatePlanMigrationAmendment.
        :rtype: datetime
        """
        return self._actioned_time

    @actioned_time.setter
    def actioned_time(self, actioned_time):
        """
        Sets the actioned_time of this ProductRatePlanMigrationAmendment.
        { \"description\" : \"The time the amendment completed.\", \"verbs\":[\"GET\"] }

        :param actioned_time: The actioned_time of this ProductRatePlanMigrationAmendment.
        :type: datetime
        """

        self._actioned_time = actioned_time

    @property
    def state(self):
        """
        Gets the state of this ProductRatePlanMigrationAmendment.
        Whether the subscription-amendment is: pending (to be actioned in the future), succeeded (actioning completed), failed (actioning was attempted but no effect was made) or discarded (the amendment had been cancelled before being actioned). Default: Pending

        :return: The state of this ProductRatePlanMigrationAmendment.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this ProductRatePlanMigrationAmendment.
        Whether the subscription-amendment is: pending (to be actioned in the future), succeeded (actioning completed), failed (actioning was attempted but no effect was made) or discarded (the amendment had been cancelled before being actioned). Default: Pending

        :param state: The state of this ProductRatePlanMigrationAmendment.
        :type: str
        """
        allowed_values = ["Pending", "Succeeded", "Failed", "Discarded"]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def deleted(self):
        """
        Gets the deleted of this ProductRatePlanMigrationAmendment.
        { \"description\" : \"Is the amendment deleted.\", \"verbs\":[\"GET\"] }

        :return: The deleted of this ProductRatePlanMigrationAmendment.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """
        Sets the deleted of this ProductRatePlanMigrationAmendment.
        { \"description\" : \"Is the amendment deleted.\", \"verbs\":[\"GET\"] }

        :param deleted: The deleted of this ProductRatePlanMigrationAmendment.
        :type: bool
        """

        self._deleted = deleted

    @property
    def product_rate_plan_id(self):
        """
        Gets the product_rate_plan_id of this ProductRatePlanMigrationAmendment.
        { \"description\" : \"Identifier of the rate-plan the subscription to migrate to\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The product_rate_plan_id of this ProductRatePlanMigrationAmendment.
        :rtype: str
        """
        return self._product_rate_plan_id

    @product_rate_plan_id.setter
    def product_rate_plan_id(self, product_rate_plan_id):
        """
        Sets the product_rate_plan_id of this ProductRatePlanMigrationAmendment.
        { \"description\" : \"Identifier of the rate-plan the subscription to migrate to\", \"verbs\":[\"POST\",\"GET\"] }

        :param product_rate_plan_id: The product_rate_plan_id of this ProductRatePlanMigrationAmendment.
        :type: str
        """

        self._product_rate_plan_id = product_rate_plan_id

    @property
    def invoicing_type(self):
        """
        Gets the invoicing_type of this ProductRatePlanMigrationAmendment.
        { \"description\" : \"<span class=\\\"label label-default\\\">Immediate</span> invoicing will result in an invoice being issued immediately for migration charges. <span class=\\\"label label-default\\\">Aggregated</span> invoicing will generate a charge to be added to the next issued invoice, for example at the current billing period end.\",  \"default\" : \"Immediate\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The invoicing_type of this ProductRatePlanMigrationAmendment.
        :rtype: str
        """
        return self._invoicing_type

    @invoicing_type.setter
    def invoicing_type(self, invoicing_type):
        """
        Sets the invoicing_type of this ProductRatePlanMigrationAmendment.
        { \"description\" : \"<span class=\\\"label label-default\\\">Immediate</span> invoicing will result in an invoice being issued immediately for migration charges. <span class=\\\"label label-default\\\">Aggregated</span> invoicing will generate a charge to be added to the next issued invoice, for example at the current billing period end.\",  \"default\" : \"Immediate\", \"verbs\":[\"POST\",\"GET\"] }

        :param invoicing_type: The invoicing_type of this ProductRatePlanMigrationAmendment.
        :type: str
        """
        allowed_values = ["Immediate", "Aggregated"]
        if invoicing_type not in allowed_values:
            raise ValueError(
                "Invalid value for `invoicing_type` ({0}), must be one of {1}"
                .format(invoicing_type, allowed_values)
            )

        self._invoicing_type = invoicing_type

    @property
    def mappings(self):
        """
        Gets the mappings of this ProductRatePlanMigrationAmendment.
        { \"description\" : \"Mapping  of new rate-plans pricing-components to values\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The mappings of this ProductRatePlanMigrationAmendment.
        :rtype: list[PricingComponentValueMigrationAmendmentMapping]
        """
        return self._mappings

    @mappings.setter
    def mappings(self, mappings):
        """
        Sets the mappings of this ProductRatePlanMigrationAmendment.
        { \"description\" : \"Mapping  of new rate-plans pricing-components to values\", \"verbs\":[\"POST\",\"GET\"] }

        :param mappings: The mappings of this ProductRatePlanMigrationAmendment.
        :type: list[PricingComponentValueMigrationAmendmentMapping]
        """

        self._mappings = mappings

    @property
    def previous_subscription_id(self):
        """
        Gets the previous_subscription_id of this ProductRatePlanMigrationAmendment.
        { \"description\" : \"ID of the previous subscription.\", \"verbs\":[\"GET\"] }

        :return: The previous_subscription_id of this ProductRatePlanMigrationAmendment.
        :rtype: str
        """
        return self._previous_subscription_id

    @previous_subscription_id.setter
    def previous_subscription_id(self, previous_subscription_id):
        """
        Sets the previous_subscription_id of this ProductRatePlanMigrationAmendment.
        { \"description\" : \"ID of the previous subscription.\", \"verbs\":[\"GET\"] }

        :param previous_subscription_id: The previous_subscription_id of this ProductRatePlanMigrationAmendment.
        :type: str
        """

        self._previous_subscription_id = previous_subscription_id

    @property
    def next_subscription_id(self):
        """
        Gets the next_subscription_id of this ProductRatePlanMigrationAmendment.
        { \"description\" : \"ID of the next subscription.\", \"verbs\":[\"GET\"] }

        :return: The next_subscription_id of this ProductRatePlanMigrationAmendment.
        :rtype: str
        """
        return self._next_subscription_id

    @next_subscription_id.setter
    def next_subscription_id(self, next_subscription_id):
        """
        Sets the next_subscription_id of this ProductRatePlanMigrationAmendment.
        { \"description\" : \"ID of the next subscription.\", \"verbs\":[\"GET\"] }

        :param next_subscription_id: The next_subscription_id of this ProductRatePlanMigrationAmendment.
        :type: str
        """

        self._next_subscription_id = next_subscription_id

    @property
    def next_subscription_name(self):
        """
        Gets the next_subscription_name of this ProductRatePlanMigrationAmendment.
        { \"description\" : \"User definable friendly name for the migrated subscription.\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The next_subscription_name of this ProductRatePlanMigrationAmendment.
        :rtype: str
        """
        return self._next_subscription_name

    @next_subscription_name.setter
    def next_subscription_name(self, next_subscription_name):
        """
        Sets the next_subscription_name of this ProductRatePlanMigrationAmendment.
        { \"description\" : \"User definable friendly name for the migrated subscription.\", \"verbs\":[\"POST\",\"GET\"] }

        :param next_subscription_name: The next_subscription_name of this ProductRatePlanMigrationAmendment.
        :type: str
        """

        self._next_subscription_name = next_subscription_name

    @property
    def next_subscription_description(self):
        """
        Gets the next_subscription_description of this ProductRatePlanMigrationAmendment.
        { \"description\" : \"User definable description for the migrated subscription.\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The next_subscription_description of this ProductRatePlanMigrationAmendment.
        :rtype: str
        """
        return self._next_subscription_description

    @next_subscription_description.setter
    def next_subscription_description(self, next_subscription_description):
        """
        Sets the next_subscription_description of this ProductRatePlanMigrationAmendment.
        { \"description\" : \"User definable description for the migrated subscription.\", \"verbs\":[\"POST\",\"GET\"] }

        :param next_subscription_description: The next_subscription_description of this ProductRatePlanMigrationAmendment.
        :type: str
        """

        self._next_subscription_description = next_subscription_description

    @property
    def pricing_behaviour(self):
        """
        Gets the pricing_behaviour of this ProductRatePlanMigrationAmendment.
        { \"description\" : \"Pricing behaviour defines how migration charges are calculated. <span class=\\\"label label-default\\\">DifferenceProRated</span> calculates the difference between in-advance charges of the existing and new rate-plan, then pro-rates based on time remaining. <span class=\\\"label label-default\\\">None</span> sets the migration charge as zero cost. <span class=\\\"label label-default\\\">Full</span> sets the costs as the total of the new rate-plans in-advance charges.  <span class=\\\"label label-default\\\">Difference</span> is the same calculation as <span class=\\\"label label-default\\\">DifferenceProRated</span> but no pro-ration is applied.  <span class=\\\"label label-default\\\">ProRated</span> differs depending on two cases; when moving to a rate-plan of the same duration it pro-rates the in-advance charges of the new rate-plan. If the duration is different, a credit-note will be issued any remaining time on the existing plans billing period.\", \"default\" : \"DifferenceProRated\",  \"verbs\":[\"POST\",\"GET\"] }

        :return: The pricing_behaviour of this ProductRatePlanMigrationAmendment.
        :rtype: str
        """
        return self._pricing_behaviour

    @pricing_behaviour.setter
    def pricing_behaviour(self, pricing_behaviour):
        """
        Sets the pricing_behaviour of this ProductRatePlanMigrationAmendment.
        { \"description\" : \"Pricing behaviour defines how migration charges are calculated. <span class=\\\"label label-default\\\">DifferenceProRated</span> calculates the difference between in-advance charges of the existing and new rate-plan, then pro-rates based on time remaining. <span class=\\\"label label-default\\\">None</span> sets the migration charge as zero cost. <span class=\\\"label label-default\\\">Full</span> sets the costs as the total of the new rate-plans in-advance charges.  <span class=\\\"label label-default\\\">Difference</span> is the same calculation as <span class=\\\"label label-default\\\">DifferenceProRated</span> but no pro-ration is applied.  <span class=\\\"label label-default\\\">ProRated</span> differs depending on two cases; when moving to a rate-plan of the same duration it pro-rates the in-advance charges of the new rate-plan. If the duration is different, a credit-note will be issued any remaining time on the existing plans billing period.\", \"default\" : \"DifferenceProRated\",  \"verbs\":[\"POST\",\"GET\"] }

        :param pricing_behaviour: The pricing_behaviour of this ProductRatePlanMigrationAmendment.
        :type: str
        """
        allowed_values = ["None", "Full", "Difference", "DifferenceProRated", "ProRated"]
        if pricing_behaviour not in allowed_values:
            raise ValueError(
                "Invalid value for `pricing_behaviour` ({0}), must be one of {1}"
                .format(pricing_behaviour, allowed_values)
            )

        self._pricing_behaviour = pricing_behaviour

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
