# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class UserCreationRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, changed_by=None, organization_id=None, email=None, first_name=None, last_name=None, company_name=None, password=None, roles=None, send_email=False):
        """
        UserCreationRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'changed_by': 'str',
            'organization_id': 'str',
            'email': 'str',
            'first_name': 'str',
            'last_name': 'str',
            'company_name': 'str',
            'password': 'str',
            'roles': 'list[str]',
            'send_email': 'bool'
        }

        self.attribute_map = {
            'created': 'created',
            'changed_by': 'changedBy',
            'organization_id': 'organizationID',
            'email': 'email',
            'first_name': 'firstName',
            'last_name': 'lastName',
            'company_name': 'companyName',
            'password': 'password',
            'roles': 'roles',
            'send_email': 'sendEmail'
        }

        self._created = created
        self._changed_by = changed_by
        self._organization_id = organization_id
        self._email = email
        self._first_name = first_name
        self._last_name = last_name
        self._company_name = company_name
        self._password = password
        self._roles = roles
        self._send_email = send_email

    @property
    def created(self):
        """
        Gets the created of this UserCreationRequest.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this UserCreationRequest.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this UserCreationRequest.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this UserCreationRequest.
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """
        Gets the changed_by of this UserCreationRequest.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :return: The changed_by of this UserCreationRequest.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """
        Sets the changed_by of this UserCreationRequest.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :param changed_by: The changed_by of this UserCreationRequest.
        :type: str
        """

        self._changed_by = changed_by

    @property
    def organization_id(self):
        """
        Gets the organization_id of this UserCreationRequest.
        {\"description\":\"Organization for which the User is created.\",\"verbs\":[\"GET\",\"POST\"]}

        :return: The organization_id of this UserCreationRequest.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this UserCreationRequest.
        {\"description\":\"Organization for which the User is created.\",\"verbs\":[\"GET\",\"POST\"]}

        :param organization_id: The organization_id of this UserCreationRequest.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def email(self):
        """
        Gets the email of this UserCreationRequest.
        {\"description\":\"Login E-mail address of the User.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :return: The email of this UserCreationRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this UserCreationRequest.
        {\"description\":\"Login E-mail address of the User.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :param email: The email of this UserCreationRequest.
        :type: str
        """

        self._email = email

    @property
    def first_name(self):
        """
        Gets the first_name of this UserCreationRequest.
        {\"description\":\"First Name of the User.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :return: The first_name of this UserCreationRequest.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this UserCreationRequest.
        {\"description\":\"First Name of the User.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :param first_name: The first_name of this UserCreationRequest.
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """
        Gets the last_name of this UserCreationRequest.
        {\"description\":\"Last Name of the User.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :return: The last_name of this UserCreationRequest.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this UserCreationRequest.
        {\"description\":\"Last Name of the User.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :param last_name: The last_name of this UserCreationRequest.
        :type: str
        """

        self._last_name = last_name

    @property
    def company_name(self):
        """
        Gets the company_name of this UserCreationRequest.
        {\"description\":\"User's Company.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :return: The company_name of this UserCreationRequest.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """
        Sets the company_name of this UserCreationRequest.
        {\"description\":\"User's Company.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :param company_name: The company_name of this UserCreationRequest.
        :type: str
        """

        self._company_name = company_name

    @property
    def password(self):
        """
        Gets the password of this UserCreationRequest.
        {\"description\":\"Login Password for the User.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :return: The password of this UserCreationRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this UserCreationRequest.
        {\"description\":\"Login Password for the User.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :param password: The password of this UserCreationRequest.
        :type: str
        """

        self._password = password

    @property
    def roles(self):
        """
        Gets the roles of this UserCreationRequest.
        {\"description\":\"The permission groups the user will belong to.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :return: The roles of this UserCreationRequest.
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """
        Sets the roles of this UserCreationRequest.
        {\"description\":\"The permission groups the user will belong to.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :param roles: The roles of this UserCreationRequest.
        :type: list[str]
        """

        self._roles = roles

    @property
    def send_email(self):
        """
        Gets the send_email of this UserCreationRequest.
        {\"description\":\"When an email should be sent upon creation.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :return: The send_email of this UserCreationRequest.
        :rtype: bool
        """
        return self._send_email

    @send_email.setter
    def send_email(self, send_email):
        """
        Sets the send_email of this UserCreationRequest.
        {\"description\":\"When an email should be sent upon creation.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}

        :param send_email: The send_email of this UserCreationRequest.
        :type: bool
        """

        self._send_email = send_email

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
