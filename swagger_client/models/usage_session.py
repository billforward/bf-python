# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class UsageSession(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, changed_by=None, organization_id=None, subscription_id=None, session_id=None, pricing_component_id=None, pricing_component_name=None, uom=None, description=None, sessionix=None, start=None, stop=None, state=None, uduration=None):
        """
        UsageSession - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'changed_by': 'str',
            'organization_id': 'str',
            'subscription_id': 'str',
            'session_id': 'str',
            'pricing_component_id': 'str',
            'pricing_component_name': 'str',
            'uom': 'str',
            'description': 'str',
            'sessionix': 'int',
            'start': 'datetime',
            'stop': 'datetime',
            'state': 'str',
            'uduration': 'int'
        }

        self.attribute_map = {
            'created': 'created',
            'changed_by': 'changedBy',
            'organization_id': 'organizationID',
            'subscription_id': 'subscriptionID',
            'session_id': 'sessionID',
            'pricing_component_id': 'pricingComponentID',
            'pricing_component_name': 'pricingComponentName',
            'uom': 'uom',
            'description': 'description',
            'sessionix': 'sessionix',
            'start': 'start',
            'stop': 'stop',
            'state': 'state',
            'uduration': 'uduration'
        }

        self._created = created
        self._changed_by = changed_by
        self._organization_id = organization_id
        self._subscription_id = subscription_id
        self._session_id = session_id
        self._pricing_component_id = pricing_component_id
        self._pricing_component_name = pricing_component_name
        self._uom = uom
        self._description = description
        self._sessionix = sessionix
        self._start = start
        self._stop = stop
        self._state = state
        self._uduration = uduration

    @property
    def created(self):
        """
        Gets the created of this UsageSession.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this UsageSession.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this UsageSession.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this UsageSession.
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """
        Gets the changed_by of this UsageSession.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :return: The changed_by of this UsageSession.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """
        Sets the changed_by of this UsageSession.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :param changed_by: The changed_by of this UsageSession.
        :type: str
        """

        self._changed_by = changed_by

    @property
    def organization_id(self):
        """
        Gets the organization_id of this UsageSession.
        { \"description\" : \"Organization associated with this session.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The organization_id of this UsageSession.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this UsageSession.
        { \"description\" : \"Organization associated with this session.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param organization_id: The organization_id of this UsageSession.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def subscription_id(self):
        """
        Gets the subscription_id of this UsageSession.
        { \"description\" : \"ID of the subscription to which this session pertains.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The subscription_id of this UsageSession.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """
        Sets the subscription_id of this UsageSession.
        { \"description\" : \"ID of the subscription to which this session pertains.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param subscription_id: The subscription_id of this UsageSession.
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def session_id(self):
        """
        Gets the session_id of this UsageSession.
        { \"description\" : \"A (not guaranteed unique) identifier for this session, provided by the user. This, when combined with the subscription ID and unit of measure, uniquely identify a session.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The session_id of this UsageSession.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """
        Sets the session_id of this UsageSession.
        { \"description\" : \"A (not guaranteed unique) identifier for this session, provided by the user. This, when combined with the subscription ID and unit of measure, uniquely identify a session.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param session_id: The session_id of this UsageSession.
        :type: str
        """

        self._session_id = session_id

    @property
    def pricing_component_id(self):
        """
        Gets the pricing_component_id of this UsageSession.
        { \"description\" : \"ID of the pricing-component to which this usage session applies\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The pricing_component_id of this UsageSession.
        :rtype: str
        """
        return self._pricing_component_id

    @pricing_component_id.setter
    def pricing_component_id(self, pricing_component_id):
        """
        Sets the pricing_component_id of this UsageSession.
        { \"description\" : \"ID of the pricing-component to which this usage session applies\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param pricing_component_id: The pricing_component_id of this UsageSession.
        :type: str
        """

        self._pricing_component_id = pricing_component_id

    @property
    def pricing_component_name(self):
        """
        Gets the pricing_component_name of this UsageSession.
        { \"description\" : \"Name of the pricing-component to which this usage session applies\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The pricing_component_name of this UsageSession.
        :rtype: str
        """
        return self._pricing_component_name

    @pricing_component_name.setter
    def pricing_component_name(self, pricing_component_name):
        """
        Sets the pricing_component_name of this UsageSession.
        { \"description\" : \"Name of the pricing-component to which this usage session applies\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param pricing_component_name: The pricing_component_name of this UsageSession.
        :type: str
        """

        self._pricing_component_name = pricing_component_name

    @property
    def uom(self):
        """
        Gets the uom of this UsageSession.
        { \"description\" : \"Unit-of-measure to which this usage session applies\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The uom of this UsageSession.
        :rtype: str
        """
        return self._uom

    @uom.setter
    def uom(self, uom):
        """
        Sets the uom of this UsageSession.
        { \"description\" : \"Unit-of-measure to which this usage session applies\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param uom: The uom of this UsageSession.
        :type: str
        """

        self._uom = uom

    @property
    def description(self):
        """
        Gets the description of this UsageSession.
        { \"description\" : \"A description provided by the user, to record details about this session.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The description of this UsageSession.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this UsageSession.
        { \"description\" : \"A description provided by the user, to record details about this session.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param description: The description of this UsageSession.
        :type: str
        """

        self._description = description

    @property
    def sessionix(self):
        """
        Gets the sessionix of this UsageSession.
        { \"description\" : \"The current incarnation of the session. Initially 0, this number increments every time the session is 'cut' without ending. For example, a cut is taken of a session if it outlasts the end date of the billing period it started in. The session reincarnates with an incremented sessionix, in the next billing period (that is, if some period indeed follows the current one).\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The sessionix of this UsageSession.
        :rtype: int
        """
        return self._sessionix

    @sessionix.setter
    def sessionix(self, sessionix):
        """
        Sets the sessionix of this UsageSession.
        { \"description\" : \"The current incarnation of the session. Initially 0, this number increments every time the session is 'cut' without ending. For example, a cut is taken of a session if it outlasts the end date of the billing period it started in. The session reincarnates with an incremented sessionix, in the next billing period (that is, if some period indeed follows the current one).\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param sessionix: The sessionix of this UsageSession.
        :type: int
        """

        self._sessionix = sessionix

    @property
    def start(self):
        """
        Gets the start of this UsageSession.
        { \"description\" : \"The start date of this session, UTC DateTime\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The start of this UsageSession.
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """
        Sets the start of this UsageSession.
        { \"description\" : \"The start date of this session, UTC DateTime\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param start: The start of this UsageSession.
        :type: datetime
        """

        self._start = start

    @property
    def stop(self):
        """
        Gets the stop of this UsageSession.
        { \"description\" : \"The end date of this session, UTC DateTime\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The stop of this UsageSession.
        :rtype: datetime
        """
        return self._stop

    @stop.setter
    def stop(self, stop):
        """
        Sets the stop of this UsageSession.
        { \"description\" : \"The end date of this session, UTC DateTime\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param stop: The stop of this UsageSession.
        :type: datetime
        """

        self._stop = stop

    @property
    def state(self):
        """
        Gets the state of this UsageSession.
        { \"description\" : \"The type of usage measured within this billing period. Options are '\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }Active', Which refers to a session that is currently running 'Historic', Which refers to a session that has terminated.

        :return: The state of this UsageSession.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this UsageSession.
        { \"description\" : \"The type of usage measured within this billing period. Options are '\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }Active', Which refers to a session that is currently running 'Historic', Which refers to a session that has terminated.

        :param state: The state of this UsageSession.
        :type: str
        """
        allowed_values = ["Active", "Historic"]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def uduration(self):
        """
        Gets the uduration of this UsageSession.
        { \"description\" : \"The amount of time that elapsed (in milliseconds?) during this session. Initially 0. Presently updated only when a cut is taken of the session (for example if the session or billnig period ends).\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The uduration of this UsageSession.
        :rtype: int
        """
        return self._uduration

    @uduration.setter
    def uduration(self, uduration):
        """
        Sets the uduration of this UsageSession.
        { \"description\" : \"The amount of time that elapsed (in milliseconds?) during this session. Initially 0. Presently updated only when a cut is taken of the session (for example if the session or billnig period ends).\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param uduration: The uduration of this UsageSession.
        :type: int
        """

        self._uduration = uduration

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
