# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class SubscriptionCharge(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, changed_by=None, updated=None, id=None, crm_id=None, account_id=None, subscription_id=None, subscription_version_id=None, invoice_id=None, name=None, description=None, amount=None, amount_excluding_tax=None, currency=None, period_start=None, period_end=None, type=None, invoicing_type=None, state=None, charge_type=None, calculation=None, remaining_credit_behaviour=None, trial=False, version_id=None, version_number=None):
        """
        SubscriptionCharge - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'changed_by': 'str',
            'updated': 'datetime',
            'id': 'str',
            'crm_id': 'str',
            'account_id': 'str',
            'subscription_id': 'str',
            'subscription_version_id': 'str',
            'invoice_id': 'str',
            'name': 'str',
            'description': 'str',
            'amount': 'float',
            'amount_excluding_tax': 'float',
            'currency': 'str',
            'period_start': 'datetime',
            'period_end': 'datetime',
            'type': 'str',
            'invoicing_type': 'str',
            'state': 'str',
            'charge_type': 'str',
            'calculation': 'str',
            'remaining_credit_behaviour': 'str',
            'trial': 'bool',
            'version_id': 'str',
            'version_number': 'int'
        }

        self.attribute_map = {
            'created': 'created',
            'changed_by': 'changedBy',
            'updated': 'updated',
            'id': 'id',
            'crm_id': 'crmID',
            'account_id': 'accountID',
            'subscription_id': 'subscriptionID',
            'subscription_version_id': 'subscriptionVersionID',
            'invoice_id': 'invoiceID',
            'name': 'name',
            'description': 'description',
            'amount': 'amount',
            'amount_excluding_tax': 'amountExcludingTax',
            'currency': 'currency',
            'period_start': 'periodStart',
            'period_end': 'periodEnd',
            'type': 'type',
            'invoicing_type': 'invoicingType',
            'state': 'state',
            'charge_type': 'chargeType',
            'calculation': 'calculation',
            'remaining_credit_behaviour': 'remainingCreditBehaviour',
            'trial': 'trial',
            'version_id': 'versionID',
            'version_number': 'versionNumber'
        }

        self._created = created
        self._changed_by = changed_by
        self._updated = updated
        self._id = id
        self._crm_id = crm_id
        self._account_id = account_id
        self._subscription_id = subscription_id
        self._subscription_version_id = subscription_version_id
        self._invoice_id = invoice_id
        self._name = name
        self._description = description
        self._amount = amount
        self._amount_excluding_tax = amount_excluding_tax
        self._currency = currency
        self._period_start = period_start
        self._period_end = period_end
        self._type = type
        self._invoicing_type = invoicing_type
        self._state = state
        self._charge_type = charge_type
        self._calculation = calculation
        self._remaining_credit_behaviour = remaining_credit_behaviour
        self._trial = trial
        self._version_id = version_id
        self._version_number = version_number

    @property
    def created(self):
        """
        Gets the created of this SubscriptionCharge.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this SubscriptionCharge.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this SubscriptionCharge.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this SubscriptionCharge.
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """
        Gets the changed_by of this SubscriptionCharge.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :return: The changed_by of this SubscriptionCharge.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """
        Sets the changed_by of this SubscriptionCharge.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :param changed_by: The changed_by of this SubscriptionCharge.
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """
        Gets the updated of this SubscriptionCharge.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :return: The updated of this SubscriptionCharge.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this SubscriptionCharge.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :param updated: The updated of this SubscriptionCharge.
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """
        Gets the id of this SubscriptionCharge.
        {\"description\":\"The ID of the charge.\",\"verbs\":[\"GET\"]}

        :return: The id of this SubscriptionCharge.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this SubscriptionCharge.
        {\"description\":\"The ID of the charge.\",\"verbs\":[\"GET\"]}

        :param id: The id of this SubscriptionCharge.
        :type: str
        """

        self._id = id

    @property
    def crm_id(self):
        """
        Gets the crm_id of this SubscriptionCharge.
        {\"description\":\"Customer-relationship-management ID of the charge.\",\"verbs\":[\"GET\",\"PUT\",\"POST\"]}

        :return: The crm_id of this SubscriptionCharge.
        :rtype: str
        """
        return self._crm_id

    @crm_id.setter
    def crm_id(self, crm_id):
        """
        Sets the crm_id of this SubscriptionCharge.
        {\"description\":\"Customer-relationship-management ID of the charge.\",\"verbs\":[\"GET\",\"PUT\",\"POST\"]}

        :param crm_id: The crm_id of this SubscriptionCharge.
        :type: str
        """

        self._crm_id = crm_id

    @property
    def account_id(self):
        """
        Gets the account_id of this SubscriptionCharge.
        {\"description\":\"ID of the account owning the subscription for which the charge was generated.\",\"verbs\":[\"GET\",\"POST\"]}

        :return: The account_id of this SubscriptionCharge.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """
        Sets the account_id of this SubscriptionCharge.
        {\"description\":\"ID of the account owning the subscription for which the charge was generated.\",\"verbs\":[\"GET\",\"POST\"]}

        :param account_id: The account_id of this SubscriptionCharge.
        :type: str
        """

        self._account_id = account_id

    @property
    def subscription_id(self):
        """
        Gets the subscription_id of this SubscriptionCharge.
        {\"description\":\"ID of the subscription for which the charge was generated.\",\"verbs\":[\"GET\",\"POST\"]}

        :return: The subscription_id of this SubscriptionCharge.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """
        Sets the subscription_id of this SubscriptionCharge.
        {\"description\":\"ID of the subscription for which the charge was generated.\",\"verbs\":[\"GET\",\"POST\"]}

        :param subscription_id: The subscription_id of this SubscriptionCharge.
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def subscription_version_id(self):
        """
        Gets the subscription_version_id of this SubscriptionCharge.
        {\"description\":\"Version ID of the subscription for which the charge was generated.\",\"verbs\":[\"GET\",\"POST\"]}

        :return: The subscription_version_id of this SubscriptionCharge.
        :rtype: str
        """
        return self._subscription_version_id

    @subscription_version_id.setter
    def subscription_version_id(self, subscription_version_id):
        """
        Sets the subscription_version_id of this SubscriptionCharge.
        {\"description\":\"Version ID of the subscription for which the charge was generated.\",\"verbs\":[\"GET\",\"POST\"]}

        :param subscription_version_id: The subscription_version_id of this SubscriptionCharge.
        :type: str
        """

        self._subscription_version_id = subscription_version_id

    @property
    def invoice_id(self):
        """
        Gets the invoice_id of this SubscriptionCharge.
        {\"description\":\"ID of the invoice to which this charge applies (if the charge targets a specific invoice).\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The invoice_id of this SubscriptionCharge.
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """
        Sets the invoice_id of this SubscriptionCharge.
        {\"description\":\"ID of the invoice to which this charge applies (if the charge targets a specific invoice).\",\"verbs\":[\"POST\",\"GET\"]}

        :param invoice_id: The invoice_id of this SubscriptionCharge.
        :type: str
        """

        self._invoice_id = invoice_id

    @property
    def name(self):
        """
        Gets the name of this SubscriptionCharge.
        {\"description\":\"Friendly name given to the charge to help identify it.\",\"verbs\":[\"POST\",\"GET\",\"PUT\"]}

        :return: The name of this SubscriptionCharge.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this SubscriptionCharge.
        {\"description\":\"Friendly name given to the charge to help identify it.\",\"verbs\":[\"POST\",\"GET\",\"PUT\"]}

        :param name: The name of this SubscriptionCharge.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this SubscriptionCharge.
        {\"description\":\"Description given to the charge.\",\"verbs\":[\"POST\",\"GET\",\"PUT\"]}

        :return: The description of this SubscriptionCharge.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this SubscriptionCharge.
        {\"description\":\"Description given to the charge.\",\"verbs\":[\"POST\",\"GET\",\"PUT\"]}

        :param description: The description of this SubscriptionCharge.
        :type: str
        """

        self._description = description

    @property
    def amount(self):
        """
        Gets the amount of this SubscriptionCharge.
        {\"description\":\"Monetary amount of the charge &mdash; including any tax applied to the final amount.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The amount of this SubscriptionCharge.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this SubscriptionCharge.
        {\"description\":\"Monetary amount of the charge &mdash; including any tax applied to the final amount.\",\"verbs\":[\"POST\",\"GET\"]}

        :param amount: The amount of this SubscriptionCharge.
        :type: float
        """

        self._amount = amount

    @property
    def amount_excluding_tax(self):
        """
        Gets the amount_excluding_tax of this SubscriptionCharge.
        {\"description\":\"Monetary amount of the charge &mdash; excluding any tax applied to the final amount.\",\"verbs\":[\"GET\"]}

        :return: The amount_excluding_tax of this SubscriptionCharge.
        :rtype: float
        """
        return self._amount_excluding_tax

    @amount_excluding_tax.setter
    def amount_excluding_tax(self, amount_excluding_tax):
        """
        Sets the amount_excluding_tax of this SubscriptionCharge.
        {\"description\":\"Monetary amount of the charge &mdash; excluding any tax applied to the final amount.\",\"verbs\":[\"GET\"]}

        :param amount_excluding_tax: The amount_excluding_tax of this SubscriptionCharge.
        :type: float
        """

        self._amount_excluding_tax = amount_excluding_tax

    @property
    def currency(self):
        """
        Gets the currency of this SubscriptionCharge.
        { \"description\" : \"Currency of the invoice specified by a three character ISO 4217 currency code.\", \"verbs\":[\"GET\"] }

        :return: The currency of this SubscriptionCharge.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """
        Sets the currency of this SubscriptionCharge.
        { \"description\" : \"Currency of the invoice specified by a three character ISO 4217 currency code.\", \"verbs\":[\"GET\"] }

        :param currency: The currency of this SubscriptionCharge.
        :type: str
        """

        self._currency = currency

    @property
    def period_start(self):
        """
        Gets the period_start of this SubscriptionCharge.
        {\"default\":\"(Now)\",\"description\":\"The time-beginning of the interval to which the charge applies. This can be used to apply a charge across partial or multiple periods,to pro-rate its price.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The period_start of this SubscriptionCharge.
        :rtype: datetime
        """
        return self._period_start

    @period_start.setter
    def period_start(self, period_start):
        """
        Sets the period_start of this SubscriptionCharge.
        {\"default\":\"(Now)\",\"description\":\"The time-beginning of the interval to which the charge applies. This can be used to apply a charge across partial or multiple periods,to pro-rate its price.\",\"verbs\":[\"POST\",\"GET\"]}

        :param period_start: The period_start of this SubscriptionCharge.
        :type: datetime
        """

        self._period_start = period_start

    @property
    def period_end(self):
        """
        Gets the period_end of this SubscriptionCharge.
        {\"default\":\"(End of current period)\",\"description\":\"The time-ending of the interval to which the charge applies. This can be used to apply a charge across partial or multiple periods,to pro-rate its price.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The period_end of this SubscriptionCharge.
        :rtype: datetime
        """
        return self._period_end

    @period_end.setter
    def period_end(self, period_end):
        """
        Sets the period_end of this SubscriptionCharge.
        {\"default\":\"(End of current period)\",\"description\":\"The time-ending of the interval to which the charge applies. This can be used to apply a charge across partial or multiple periods,to pro-rate its price.\",\"verbs\":[\"POST\",\"GET\"]}

        :param period_end: The period_end of this SubscriptionCharge.
        :type: datetime
        """

        self._period_end = period_end

    @property
    def type(self):
        """
        Gets the type of this SubscriptionCharge.
        {\"description\":\"A type describing the nature of the charge.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The type of this SubscriptionCharge.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this SubscriptionCharge.
        {\"description\":\"A type describing the nature of the charge.\",\"verbs\":[\"POST\",\"GET\"]}

        :param type: The type of this SubscriptionCharge.
        :type: str
        """
        allowed_values = ["Setup", "Upgrade", "Manual", "ProductRatePlanMigration", "Arrears", "Advance", "Coupon", "Usage", "PricingComponent"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def invoicing_type(self):
        """
        Gets the invoicing_type of this SubscriptionCharge.
        {\"default\":\"<span class=\\\"label label-default\\\">Aggregated</span>\",\"description\":\"The strategy for how this charge will raise invoices.<br><span class=\\\"label label-default\\\">Immediate</span> &mdash; Generate straight-away an invoice containing this charge.<br><span class=\\\"label label-default\\\">Aggregated</span> &mdash; Add this charge to the next invoice which is generated naturally &mdash; i.e. the invoice raised at the current period's end.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The invoicing_type of this SubscriptionCharge.
        :rtype: str
        """
        return self._invoicing_type

    @invoicing_type.setter
    def invoicing_type(self, invoicing_type):
        """
        Sets the invoicing_type of this SubscriptionCharge.
        {\"default\":\"<span class=\\\"label label-default\\\">Aggregated</span>\",\"description\":\"The strategy for how this charge will raise invoices.<br><span class=\\\"label label-default\\\">Immediate</span> &mdash; Generate straight-away an invoice containing this charge.<br><span class=\\\"label label-default\\\">Aggregated</span> &mdash; Add this charge to the next invoice which is generated naturally &mdash; i.e. the invoice raised at the current period's end.\",\"verbs\":[\"POST\",\"GET\"]}

        :param invoicing_type: The invoicing_type of this SubscriptionCharge.
        :type: str
        """
        allowed_values = ["Immediate", "Aggregated"]
        if invoicing_type not in allowed_values:
            raise ValueError(
                "Invalid value for `invoicing_type` ({0}), must be one of {1}"
                .format(invoicing_type, allowed_values)
            )

        self._invoicing_type = invoicing_type

    @property
    def state(self):
        """
        Gets the state of this SubscriptionCharge.
        {\"default\":\"<span class=\\\"label label-default\\\">Pending</span>\",\"description\":\"The current state of the charge.\",\"verbs\":[\"POST\",\"GET\",\"PUT\"]}

        :return: The state of this SubscriptionCharge.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this SubscriptionCharge.
        {\"default\":\"<span class=\\\"label label-default\\\">Pending</span>\",\"description\":\"The current state of the charge.\",\"verbs\":[\"POST\",\"GET\",\"PUT\"]}

        :param state: The state of this SubscriptionCharge.
        :type: str
        """
        allowed_values = ["Voided", "Pending", "AwaitingPayment", "Paid", "Failed"]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def charge_type(self):
        """
        Gets the charge_type of this SubscriptionCharge.
        {\"default\":\"<span class=\\\"label label-default\\\">Debit</span>\",\"description\":\"Whether this charge represents money given to or taken from the customer.<br><span class=\\\"label label-default\\\">Credit</span> &mdash; This is a charge for money given to the customer.<br><span class=\\\"label label-default\\\">Debit</span> &mdash; This is a charge for money taken from the customer.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The charge_type of this SubscriptionCharge.
        :rtype: str
        """
        return self._charge_type

    @charge_type.setter
    def charge_type(self, charge_type):
        """
        Sets the charge_type of this SubscriptionCharge.
        {\"default\":\"<span class=\\\"label label-default\\\">Debit</span>\",\"description\":\"Whether this charge represents money given to or taken from the customer.<br><span class=\\\"label label-default\\\">Credit</span> &mdash; This is a charge for money given to the customer.<br><span class=\\\"label label-default\\\">Debit</span> &mdash; This is a charge for money taken from the customer.\",\"verbs\":[\"POST\",\"GET\"]}

        :param charge_type: The charge_type of this SubscriptionCharge.
        :type: str
        """
        allowed_values = ["Credit", "Debit"]
        if charge_type not in allowed_values:
            raise ValueError(
                "Invalid value for `charge_type` ({0}), must be one of {1}"
                .format(charge_type, allowed_values)
            )

        self._charge_type = charge_type

    @property
    def calculation(self):
        """
        Gets the calculation of this SubscriptionCharge.
        {\"default\":\"(Empty string)\",\"description\":\"A human-readable explanation of how the value of the charge was calculated.\",\"verbs\":[\"GET\"]}

        :return: The calculation of this SubscriptionCharge.
        :rtype: str
        """
        return self._calculation

    @calculation.setter
    def calculation(self, calculation):
        """
        Sets the calculation of this SubscriptionCharge.
        {\"default\":\"(Empty string)\",\"description\":\"A human-readable explanation of how the value of the charge was calculated.\",\"verbs\":[\"GET\"]}

        :param calculation: The calculation of this SubscriptionCharge.
        :type: str
        """

        self._calculation = calculation

    @property
    def remaining_credit_behaviour(self):
        """
        Gets the remaining_credit_behaviour of this SubscriptionCharge.
        {\"default\":\"<span class=\\\"label label-default\\\">Rollover</span>\",\"description\":\"Defines the behaviour applied to any outstanding credit resulting from the application of the charge..<br><span class=\\\"label label-default\\\">Rollover</span> &mdash; Outstanding credit is returned to the accounts credit pool.<br><span class=\\\"label label-default\\\">Discard</span> &mdash; Outstanding credit is lost.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The remaining_credit_behaviour of this SubscriptionCharge.
        :rtype: str
        """
        return self._remaining_credit_behaviour

    @remaining_credit_behaviour.setter
    def remaining_credit_behaviour(self, remaining_credit_behaviour):
        """
        Sets the remaining_credit_behaviour of this SubscriptionCharge.
        {\"default\":\"<span class=\\\"label label-default\\\">Rollover</span>\",\"description\":\"Defines the behaviour applied to any outstanding credit resulting from the application of the charge..<br><span class=\\\"label label-default\\\">Rollover</span> &mdash; Outstanding credit is returned to the accounts credit pool.<br><span class=\\\"label label-default\\\">Discard</span> &mdash; Outstanding credit is lost.\",\"verbs\":[\"POST\",\"GET\"]}

        :param remaining_credit_behaviour: The remaining_credit_behaviour of this SubscriptionCharge.
        :type: str
        """
        allowed_values = ["Rollover", "Discard"]
        if remaining_credit_behaviour not in allowed_values:
            raise ValueError(
                "Invalid value for `remaining_credit_behaviour` ({0}), must be one of {1}"
                .format(remaining_credit_behaviour, allowed_values)
            )

        self._remaining_credit_behaviour = remaining_credit_behaviour

    @property
    def trial(self):
        """
        Gets the trial of this SubscriptionCharge.
        {\"default\":\"false\",\"description\":\"(Applicable only if any of [`pricingComponentName`, `pricingComponentID`] are defined)<br>Whether the charge was created for a subscription whilst in a trial period.<br><span class=\\\"label label-default\\\">false</span> &mdash; This is a non-trial charge, so funds will be sought from the customer.<br><span class=\\\"label label-default\\\">true</span> &mdash; This is a trial charge, soThe charge can be considered 'Paid' without taking any funds from the customer.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The trial of this SubscriptionCharge.
        :rtype: bool
        """
        return self._trial

    @trial.setter
    def trial(self, trial):
        """
        Sets the trial of this SubscriptionCharge.
        {\"default\":\"false\",\"description\":\"(Applicable only if any of [`pricingComponentName`, `pricingComponentID`] are defined)<br>Whether the charge was created for a subscription whilst in a trial period.<br><span class=\\\"label label-default\\\">false</span> &mdash; This is a non-trial charge, so funds will be sought from the customer.<br><span class=\\\"label label-default\\\">true</span> &mdash; This is a trial charge, soThe charge can be considered 'Paid' without taking any funds from the customer.\",\"verbs\":[\"POST\",\"GET\"]}

        :param trial: The trial of this SubscriptionCharge.
        :type: bool
        """

        self._trial = trial

    @property
    def version_id(self):
        """
        Gets the version_id of this SubscriptionCharge.
        {\"description\":\"The version ID of the charge.\",\"verbs\":[\"GET\"]}

        :return: The version_id of this SubscriptionCharge.
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """
        Sets the version_id of this SubscriptionCharge.
        {\"description\":\"The version ID of the charge.\",\"verbs\":[\"GET\"]}

        :param version_id: The version_id of this SubscriptionCharge.
        :type: str
        """

        self._version_id = version_id

    @property
    def version_number(self):
        """
        Gets the version_number of this SubscriptionCharge.
        {\"description\":\"The version number of the charge. The first version of a charge is version number 1.\",\"verbs\":[\"GET\"]}

        :return: The version_number of this SubscriptionCharge.
        :rtype: int
        """
        return self._version_number

    @version_number.setter
    def version_number(self, version_number):
        """
        Sets the version_number of this SubscriptionCharge.
        {\"description\":\"The version number of the charge. The first version of a charge is version number 1.\",\"verbs\":[\"GET\"]}

        :param version_number: The version_number of this SubscriptionCharge.
        :type: int
        """

        self._version_number = version_number

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
