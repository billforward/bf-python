# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class PricingComponentMigrationValue(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, changed_by=None, id=None, pricing_component=None, value=None):
        """
        PricingComponentMigrationValue - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'changed_by': 'str',
            'id': 'str',
            'pricing_component': 'str',
            'value': 'int'
        }

        self.attribute_map = {
            'created': 'created',
            'changed_by': 'changedBy',
            'id': 'id',
            'pricing_component': 'pricingComponent',
            'value': 'value'
        }

        self._created = created
        self._changed_by = changed_by
        self._id = id
        self._pricing_component = pricing_component
        self._value = value

    @property
    def created(self):
        """
        Gets the created of this PricingComponentMigrationValue.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this PricingComponentMigrationValue.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this PricingComponentMigrationValue.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this PricingComponentMigrationValue.
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """
        Gets the changed_by of this PricingComponentMigrationValue.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :return: The changed_by of this PricingComponentMigrationValue.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """
        Sets the changed_by of this PricingComponentMigrationValue.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :param changed_by: The changed_by of this PricingComponentMigrationValue.
        :type: str
        """

        self._changed_by = changed_by

    @property
    def id(self):
        """
        Gets the id of this PricingComponentMigrationValue.
        {\"description\":\"The ID of the charge.\",\"verbs\":[\"GET\"]}

        :return: The id of this PricingComponentMigrationValue.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PricingComponentMigrationValue.
        {\"description\":\"The ID of the charge.\",\"verbs\":[\"GET\"]}

        :param id: The id of this PricingComponentMigrationValue.
        :type: str
        """

        self._id = id

    @property
    def pricing_component(self):
        """
        Gets the pricing_component of this PricingComponentMigrationValue.
        {\"description\":\"ID or name of the pricing component whose migration value is being described.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The pricing_component of this PricingComponentMigrationValue.
        :rtype: str
        """
        return self._pricing_component

    @pricing_component.setter
    def pricing_component(self, pricing_component):
        """
        Sets the pricing_component of this PricingComponentMigrationValue.
        {\"description\":\"ID or name of the pricing component whose migration value is being described.\",\"verbs\":[\"POST\",\"GET\"]}

        :param pricing_component: The pricing_component of this PricingComponentMigrationValue.
        :type: str
        """

        self._pricing_component = pricing_component

    @property
    def value(self):
        """
        Gets the value of this PricingComponentMigrationValue.
        {\"description\":\"Amount consumed of the pricing component whose migration value is being described.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The value of this PricingComponentMigrationValue.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this PricingComponentMigrationValue.
        {\"description\":\"Amount consumed of the pricing component whose migration value is being described.\",\"verbs\":[\"POST\",\"GET\"]}

        :param value: The value of this PricingComponentMigrationValue.
        :type: int
        """

        self._value = value

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
