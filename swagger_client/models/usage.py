# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Usage(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, session_id=None, subscription_id=None, pricing_component_id=None, pricing_component_name=None, uom=None, organization_id=None, usage_period=None, usage_duration=None, usage_type=None, usage_value=None, detailed=False, created_by=None, updated_by=None, start=None, stop=None, updated=None, occurred_on=None, billing_date=None):
        """
        Usage - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'session_id': 'str',
            'subscription_id': 'str',
            'pricing_component_id': 'str',
            'pricing_component_name': 'str',
            'uom': 'str',
            'organization_id': 'str',
            'usage_period': 'int',
            'usage_duration': 'int',
            'usage_type': 'str',
            'usage_value': 'int',
            'detailed': 'bool',
            'created_by': 'str',
            'updated_by': 'str',
            'start': 'datetime',
            'stop': 'datetime',
            'updated': 'datetime',
            'occurred_on': 'datetime',
            'billing_date': 'datetime'
        }

        self.attribute_map = {
            'created': 'created',
            'session_id': 'sessionID',
            'subscription_id': 'subscriptionID',
            'pricing_component_id': 'pricingComponentID',
            'pricing_component_name': 'pricingComponentName',
            'uom': 'uom',
            'organization_id': 'organizationID',
            'usage_period': 'usagePeriod',
            'usage_duration': 'usageDuration',
            'usage_type': 'usageType',
            'usage_value': 'usageValue',
            'detailed': 'detailed',
            'created_by': 'createdBy',
            'updated_by': 'updatedBy',
            'start': 'start',
            'stop': 'stop',
            'updated': 'updated',
            'occurred_on': 'occurred_on',
            'billing_date': 'billing_date'
        }

        self._created = created
        self._session_id = session_id
        self._subscription_id = subscription_id
        self._pricing_component_id = pricing_component_id
        self._pricing_component_name = pricing_component_name
        self._uom = uom
        self._organization_id = organization_id
        self._usage_period = usage_period
        self._usage_duration = usage_duration
        self._usage_type = usage_type
        self._usage_value = usage_value
        self._detailed = detailed
        self._created_by = created_by
        self._updated_by = updated_by
        self._start = start
        self._stop = stop
        self._updated = updated
        self._occurred_on = occurred_on
        self._billing_date = billing_date

    @property
    def created(self):
        """
        Gets the created of this Usage.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The created of this Usage.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this Usage.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param created: The created of this Usage.
        :type: datetime
        """

        self._created = created

    @property
    def session_id(self):
        """
        Gets the session_id of this Usage.
        { \"description\" : \"A (not guaranteed unique) identifier for the session from which this usage was generated.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The session_id of this Usage.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """
        Sets the session_id of this Usage.
        { \"description\" : \"A (not guaranteed unique) identifier for the session from which this usage was generated.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param session_id: The session_id of this Usage.
        :type: str
        """

        self._session_id = session_id

    @property
    def subscription_id(self):
        """
        Gets the subscription_id of this Usage.
        { \"description\" : \"ID of the subscription to which this usage instance pertains.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The subscription_id of this Usage.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """
        Sets the subscription_id of this Usage.
        { \"description\" : \"ID of the subscription to which this usage instance pertains.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param subscription_id: The subscription_id of this Usage.
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def pricing_component_id(self):
        """
        Gets the pricing_component_id of this Usage.
        { \"description\" : \"The ID of the pricing component this usage is for.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The pricing_component_id of this Usage.
        :rtype: str
        """
        return self._pricing_component_id

    @pricing_component_id.setter
    def pricing_component_id(self, pricing_component_id):
        """
        Sets the pricing_component_id of this Usage.
        { \"description\" : \"The ID of the pricing component this usage is for.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param pricing_component_id: The pricing_component_id of this Usage.
        :type: str
        """

        self._pricing_component_id = pricing_component_id

    @property
    def pricing_component_name(self):
        """
        Gets the pricing_component_name of this Usage.
        { \"description\" : \"The name of the pricing component this usage is for.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The pricing_component_name of this Usage.
        :rtype: str
        """
        return self._pricing_component_name

    @pricing_component_name.setter
    def pricing_component_name(self, pricing_component_name):
        """
        Sets the pricing_component_name of this Usage.
        { \"description\" : \"The name of the pricing component this usage is for.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param pricing_component_name: The pricing_component_name of this Usage.
        :type: str
        """

        self._pricing_component_name = pricing_component_name

    @property
    def uom(self):
        """
        Gets the uom of this Usage.
        { \"description\" : \"The unit-of-measure that this usage is for.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The uom of this Usage.
        :rtype: str
        """
        return self._uom

    @uom.setter
    def uom(self, uom):
        """
        Sets the uom of this Usage.
        { \"description\" : \"The unit-of-measure that this usage is for.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param uom: The uom of this Usage.
        :type: str
        """

        self._uom = uom

    @property
    def organization_id(self):
        """
        Gets the organization_id of this Usage.
        { \"description\" : \"The organization associated with this usage instance.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The organization_id of this Usage.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this Usage.
        { \"description\" : \"The organization associated with this usage instance.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param organization_id: The organization_id of this Usage.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def usage_period(self):
        """
        Gets the usage_period of this Usage.
        { \"description\" : \"The usage period during which this usage occurred.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The usage_period of this Usage.
        :rtype: int
        """
        return self._usage_period

    @usage_period.setter
    def usage_period(self, usage_period):
        """
        Sets the usage_period of this Usage.
        { \"description\" : \"The usage period during which this usage occurred.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param usage_period: The usage_period of this Usage.
        :type: int
        """

        self._usage_period = usage_period

    @property
    def usage_duration(self):
        """
        Gets the usage_duration of this Usage.
        { \"description\" : \"The amount of time over which usage occurred (in milliseconds?). Relevant for 'temporal' usage only.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The usage_duration of this Usage.
        :rtype: int
        """
        return self._usage_duration

    @usage_duration.setter
    def usage_duration(self, usage_duration):
        """
        Sets the usage_duration of this Usage.
        { \"description\" : \"The amount of time over which usage occurred (in milliseconds?). Relevant for 'temporal' usage only.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param usage_duration: The usage_duration of this Usage.
        :type: int
        """

        self._usage_duration = usage_duration

    @property
    def usage_type(self):
        """
        Gets the usage_type of this Usage.
        { \"description\" : \"The type of usage ('Temporal' or 'Itemized').\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The usage_type of this Usage.
        :rtype: str
        """
        return self._usage_type

    @usage_type.setter
    def usage_type(self, usage_type):
        """
        Sets the usage_type of this Usage.
        { \"description\" : \"The type of usage ('Temporal' or 'Itemized').\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param usage_type: The usage_type of this Usage.
        :type: str
        """
        allowed_values = ["Temporal", "Itemized"]
        if usage_type not in allowed_values:
            raise ValueError(
                "Invalid value for `usage_type` ({0}), must be one of {1}"
                .format(usage_type, allowed_values)
            )

        self._usage_type = usage_type

    @property
    def usage_value(self):
        """
        Gets the usage_value of this Usage.
        { \"description\" : \"The quantity of product consumed by this usage. Relevant for 'itemized' usage only.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The usage_value of this Usage.
        :rtype: int
        """
        return self._usage_value

    @usage_value.setter
    def usage_value(self, usage_value):
        """
        Sets the usage_value of this Usage.
        { \"description\" : \"The quantity of product consumed by this usage. Relevant for 'itemized' usage only.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param usage_value: The usage_value of this Usage.
        :type: int
        """

        self._usage_value = usage_value

    @property
    def detailed(self):
        """
        Gets the detailed of this Usage.
        { \"description\" : \"Is this usage a detailed entry?\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The detailed of this Usage.
        :rtype: bool
        """
        return self._detailed

    @detailed.setter
    def detailed(self, detailed):
        """
        Sets the detailed of this Usage.
        { \"description\" : \"Is this usage a detailed entry?\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param detailed: The detailed of this Usage.
        :type: bool
        """

        self._detailed = detailed

    @property
    def created_by(self):
        """
        Gets the created_by of this Usage.
        { \"description\" : \"Some identifying information about who created this object.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The created_by of this Usage.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """
        Sets the created_by of this Usage.
        { \"description\" : \"Some identifying information about who created this object.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param created_by: The created_by of this Usage.
        :type: str
        """

        self._created_by = created_by

    @property
    def updated_by(self):
        """
        Gets the updated_by of this Usage.
        { \"description\" : \"Some identifying information about who updated this object.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The updated_by of this Usage.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """
        Sets the updated_by of this Usage.
        { \"description\" : \"Some identifying information about who updated this object.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param updated_by: The updated_by of this Usage.
        :type: str
        """

        self._updated_by = updated_by

    @property
    def start(self):
        """
        Gets the start of this Usage.
        { \"description\" : \"The start date of this usage instance, UTC DateTime\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The start of this Usage.
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """
        Sets the start of this Usage.
        { \"description\" : \"The start date of this usage instance, UTC DateTime\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param start: The start of this Usage.
        :type: datetime
        """

        self._start = start

    @property
    def stop(self):
        """
        Gets the stop of this Usage.
        { \"description\" : \"The end date of this usage instance, UTC DateTime\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The stop of this Usage.
        :rtype: datetime
        """
        return self._stop

    @stop.setter
    def stop(self, stop):
        """
        Sets the stop of this Usage.
        { \"description\" : \"The end date of this usage instance, UTC DateTime\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param stop: The stop of this Usage.
        :type: datetime
        """

        self._stop = stop

    @property
    def updated(self):
        """
        Gets the updated of this Usage.
        { \"description\" : \"The UTC DateTime when the object was updated.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The updated of this Usage.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this Usage.
        { \"description\" : \"The UTC DateTime when the object was updated.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param updated: The updated of this Usage.
        :type: datetime
        """

        self._updated = updated

    @property
    def occurred_on(self):
        """
        Gets the occurred_on of this Usage.
        { \"description\" : \"The UTC DateTime when the usage occurred.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The occurred_on of this Usage.
        :rtype: datetime
        """
        return self._occurred_on

    @occurred_on.setter
    def occurred_on(self, occurred_on):
        """
        Sets the occurred_on of this Usage.
        { \"description\" : \"The UTC DateTime when the usage occurred.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param occurred_on: The occurred_on of this Usage.
        :type: datetime
        """

        self._occurred_on = occurred_on

    @property
    def billing_date(self):
        """
        Gets the billing_date of this Usage.
        { \"description\" : \"The UTC DateTime when the usage is to be billed.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The billing_date of this Usage.
        :rtype: datetime
        """
        return self._billing_date

    @billing_date.setter
    def billing_date(self, billing_date):
        """
        Sets the billing_date of this Usage.
        { \"description\" : \"The UTC DateTime when the usage is to be billed.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param billing_date: The billing_date of this Usage.
        :type: datetime
        """

        self._billing_date = billing_date

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
