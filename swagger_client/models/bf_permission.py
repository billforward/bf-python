# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class BFPermission(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, changed_by=None, updated=None, id=None, role_id=None, role_name=None, resource=None, action=None, revoked=None, deleted=False):
        """
        BFPermission - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'changed_by': 'str',
            'updated': 'datetime',
            'id': 'str',
            'role_id': 'str',
            'role_name': 'str',
            'resource': 'str',
            'action': 'str',
            'revoked': 'datetime',
            'deleted': 'bool'
        }

        self.attribute_map = {
            'created': 'created',
            'changed_by': 'changedBy',
            'updated': 'updated',
            'id': 'id',
            'role_id': 'roleID',
            'role_name': 'roleName',
            'resource': 'resource',
            'action': 'action',
            'revoked': 'revoked',
            'deleted': 'deleted'
        }

        self._created = created
        self._changed_by = changed_by
        self._updated = updated
        self._id = id
        self._role_id = role_id
        self._role_name = role_name
        self._resource = resource
        self._action = action
        self._revoked = revoked
        self._deleted = deleted

    @property
    def created(self):
        """
        Gets the created of this BFPermission.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this BFPermission.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this BFPermission.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this BFPermission.
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """
        Gets the changed_by of this BFPermission.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :return: The changed_by of this BFPermission.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """
        Sets the changed_by of this BFPermission.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :param changed_by: The changed_by of this BFPermission.
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """
        Gets the updated of this BFPermission.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :return: The updated of this BFPermission.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this BFPermission.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :param updated: The updated of this BFPermission.
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """
        Gets the id of this BFPermission.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :return: The id of this BFPermission.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this BFPermission.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :param id: The id of this BFPermission.
        :type: str
        """

        self._id = id

    @property
    def role_id(self):
        """
        Gets the role_id of this BFPermission.
        { \"description\" : \"\", \"verbs\":[\"GET\", \"POST\"] }

        :return: The role_id of this BFPermission.
        :rtype: str
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """
        Sets the role_id of this BFPermission.
        { \"description\" : \"\", \"verbs\":[\"GET\", \"POST\"] }

        :param role_id: The role_id of this BFPermission.
        :type: str
        """

        self._role_id = role_id

    @property
    def role_name(self):
        """
        Gets the role_name of this BFPermission.
        { \"description\" : \"\", \"verbs\":[\"GET\", \"POST\"] }

        :return: The role_name of this BFPermission.
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """
        Sets the role_name of this BFPermission.
        { \"description\" : \"\", \"verbs\":[\"GET\", \"POST\"] }

        :param role_name: The role_name of this BFPermission.
        :type: str
        """

        self._role_name = role_name

    @property
    def resource(self):
        """
        Gets the resource of this BFPermission.
        { \"description\" : \"BillForward resource associated with this permission.\", \"verbs\":[\"GET\",\"POST\",\"PUT\"] }

        :return: The resource of this BFPermission.
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """
        Sets the resource of this BFPermission.
        { \"description\" : \"BillForward resource associated with this permission.\", \"verbs\":[\"GET\",\"POST\",\"PUT\"] }

        :param resource: The resource of this BFPermission.
        :type: str
        """
        allowed_values = ["All", "Account", "Address", "Amendment", "Analytics", "Audit", "BFAdmin", "BFJS", "Charge", "Client", "Configuration", "CouponBook", "CouponBookDefinition", "CouponDefinition", "CouponInstance", "CouponModifier", "CouponRule", "Coupon", "Credit", "CybersourceToken", "Dunning", "Email", "FixedTerm", "Gateway", "Invoice", "Notification", "Organization", "Password", "PaymentMethod", "Payment", "Permission", "PricingComponent", "PricingComponentTier", "PricingComponentValueChange", "PricingComponentValue", "ProductRatePlan", "Product", "ProductResources", "Profile", "Quote", "Receipt", "Refund", "Salesforce", "Search", "Subscription", "Tax", "UnitOfMeasure", "Usage", "Username", "User", "UserResources", "Webhook"]
        if resource not in allowed_values:
            raise ValueError(
                "Invalid value for `resource` ({0}), must be one of {1}"
                .format(resource, allowed_values)
            )

        self._resource = resource

    @property
    def action(self):
        """
        Gets the action of this BFPermission.
        { \"description\" : \"Action they may be performed on the associated resource.\", \"verbs\":[\"GET\",\"POST\",\"PUT\"] }

        :return: The action of this BFPermission.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """
        Sets the action of this BFPermission.
        { \"description\" : \"Action they may be performed on the associated resource.\", \"verbs\":[\"GET\",\"POST\",\"PUT\"] }

        :param action: The action of this BFPermission.
        :type: str
        """
        allowed_values = ["All", "AddToInvoice", "AddToProductRatePlan", "AddToSubscription", "Advance", "Aggregate", "RemoveFromInvoice", "RemoveFromProductRatePlan", "RemoveFromSubscription", "Cancel", "Create", "Delete", "Edit", "Execute", "Freeze", "Import", "InvoiceCharges", "Issue", "Migrate", "Read", "Recalculate", "Reset", "Resume", "Revive", "Stop", "Tokenize", "Void"]
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def revoked(self):
        """
        Gets the revoked of this BFPermission.
        { \"description\" : \"If a permission is deleted it is set as revoked from this date. The role with this permission will no longer have its applied.\", \"verbs\":[\"GET\",\"POST\",\"PUT\"] }

        :return: The revoked of this BFPermission.
        :rtype: datetime
        """
        return self._revoked

    @revoked.setter
    def revoked(self, revoked):
        """
        Sets the revoked of this BFPermission.
        { \"description\" : \"If a permission is deleted it is set as revoked from this date. The role with this permission will no longer have its applied.\", \"verbs\":[\"GET\",\"POST\",\"PUT\"] }

        :param revoked: The revoked of this BFPermission.
        :type: datetime
        """

        self._revoked = revoked

    @property
    def deleted(self):
        """
        Gets the deleted of this BFPermission.
        { \"default\" : \"false\", \"description\" : \"If a permission is deleted the role with this permission will no longer have its applied.\", \"verbs\":[\"GET\",\"POST\",\"PUT\"] }

        :return: The deleted of this BFPermission.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """
        Sets the deleted of this BFPermission.
        { \"default\" : \"false\", \"description\" : \"If a permission is deleted the role with this permission will no longer have its applied.\", \"verbs\":[\"GET\",\"POST\",\"PUT\"] }

        :param deleted: The deleted of this BFPermission.
        :type: bool
        """

        self._deleted = deleted

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
