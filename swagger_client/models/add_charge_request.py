# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class AddChargeRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, id=None, name=None, description=None, currency=None, amount=None, tax_amount=False, period_start=None, period_end=None, invoicing_type=None, charge_type=None, trial=False, remaining_credit_behaviour=None, pricing_component=None, pricing_component_value=None, dry_run=False):
        """
        AddChargeRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'id': 'str',
            'name': 'str',
            'description': 'str',
            'currency': 'str',
            'amount': 'float',
            'tax_amount': 'bool',
            'period_start': 'datetime',
            'period_end': 'datetime',
            'invoicing_type': 'str',
            'charge_type': 'str',
            'trial': 'bool',
            'remaining_credit_behaviour': 'str',
            'pricing_component': 'str',
            'pricing_component_value': 'int',
            'dry_run': 'bool'
        }

        self.attribute_map = {
            'created': 'created',
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'currency': 'currency',
            'amount': 'amount',
            'tax_amount': 'taxAmount',
            'period_start': 'periodStart',
            'period_end': 'periodEnd',
            'invoicing_type': 'invoicingType',
            'charge_type': 'chargeType',
            'trial': 'trial',
            'remaining_credit_behaviour': 'remainingCreditBehaviour',
            'pricing_component': 'pricingComponent',
            'pricing_component_value': 'pricingComponentValue',
            'dry_run': 'dryRun'
        }

        self._created = created
        self._id = id
        self._name = name
        self._description = description
        self._currency = currency
        self._amount = amount
        self._tax_amount = tax_amount
        self._period_start = period_start
        self._period_end = period_end
        self._invoicing_type = invoicing_type
        self._charge_type = charge_type
        self._trial = trial
        self._remaining_credit_behaviour = remaining_credit_behaviour
        self._pricing_component = pricing_component
        self._pricing_component_value = pricing_component_value
        self._dry_run = dry_run

    @property
    def created(self):
        """
        Gets the created of this AddChargeRequest.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this AddChargeRequest.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this AddChargeRequest.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this AddChargeRequest.
        :type: datetime
        """

        self._created = created

    @property
    def id(self):
        """
        Gets the id of this AddChargeRequest.
        {\"description\":\"ID of an existing charge to add to the invoice \",\"verbs\":[\"POST\",\"GET\"]}

        :return: The id of this AddChargeRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AddChargeRequest.
        {\"description\":\"ID of an existing charge to add to the invoice \",\"verbs\":[\"POST\",\"GET\"]}

        :param id: The id of this AddChargeRequest.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this AddChargeRequest.
        {\"description\":\"Friendly name given to the charge to help identify it.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The name of this AddChargeRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this AddChargeRequest.
        {\"description\":\"Friendly name given to the charge to help identify it.\",\"verbs\":[\"POST\",\"GET\"]}

        :param name: The name of this AddChargeRequest.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this AddChargeRequest.
        {\"description\":\"\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The description of this AddChargeRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this AddChargeRequest.
        {\"description\":\"\",\"verbs\":[\"POST\",\"GET\"]}

        :param description: The description of this AddChargeRequest.
        :type: str
        """

        self._description = description

    @property
    def currency(self):
        """
        Gets the currency of this AddChargeRequest.
        { \"description\" : \"Currency of the invoice specified by a three character ISO 4217 currency code.\", \"verbs\":[\"GET\"] }

        :return: The currency of this AddChargeRequest.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """
        Sets the currency of this AddChargeRequest.
        { \"description\" : \"Currency of the invoice specified by a three character ISO 4217 currency code.\", \"verbs\":[\"GET\"] }

        :param currency: The currency of this AddChargeRequest.
        :type: str
        """

        self._currency = currency

    @property
    def amount(self):
        """
        Gets the amount of this AddChargeRequest.
        {\"description\":\"Monetary amount for which to charge. Used only for ad-hoc charges i.e charges not associated with any pricing component. Applicable if pricingComponent is NOT defined\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The amount of this AddChargeRequest.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this AddChargeRequest.
        {\"description\":\"Monetary amount for which to charge. Used only for ad-hoc charges i.e charges not associated with any pricing component. Applicable if pricingComponent is NOT defined\",\"verbs\":[\"POST\",\"GET\"]}

        :param amount: The amount of this AddChargeRequest.
        :type: float
        """

        self._amount = amount

    @property
    def tax_amount(self):
        """
        Gets the tax_amount of this AddChargeRequest.
        {\"default\":false,\"description\":\"Applicable if amount is specified and indicates whether or not to apply tax in addition to the value specified.<br><span class=\\\"label label-default\\\">true</span> &mdash; Tax will be added on top of the nominal price specified in amount &mdash; in accordance with any taxation strategies you have defined.<br><span class=\\\"label label-default\\\">false</span> &mdash; No tax will be applied on top of the price specified in amount.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The tax_amount of this AddChargeRequest.
        :rtype: bool
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """
        Sets the tax_amount of this AddChargeRequest.
        {\"default\":false,\"description\":\"Applicable if amount is specified and indicates whether or not to apply tax in addition to the value specified.<br><span class=\\\"label label-default\\\">true</span> &mdash; Tax will be added on top of the nominal price specified in amount &mdash; in accordance with any taxation strategies you have defined.<br><span class=\\\"label label-default\\\">false</span> &mdash; No tax will be applied on top of the price specified in amount.\",\"verbs\":[\"POST\",\"GET\"]}

        :param tax_amount: The tax_amount of this AddChargeRequest.
        :type: bool
        """

        self._tax_amount = tax_amount

    @property
    def period_start(self):
        """
        Gets the period_start of this AddChargeRequest.
        {\"default\":\"Now\",\"description\":\"Start of the interval to which the charge applies. This can be used to apply a charge across partial or multiple periods. Pro-rating the price of pricingComponents purchased\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The period_start of this AddChargeRequest.
        :rtype: datetime
        """
        return self._period_start

    @period_start.setter
    def period_start(self, period_start):
        """
        Sets the period_start of this AddChargeRequest.
        {\"default\":\"Now\",\"description\":\"Start of the interval to which the charge applies. This can be used to apply a charge across partial or multiple periods. Pro-rating the price of pricingComponents purchased\",\"verbs\":[\"POST\",\"GET\"]}

        :param period_start: The period_start of this AddChargeRequest.
        :type: datetime
        """

        self._period_start = period_start

    @property
    def period_end(self):
        """
        Gets the period_end of this AddChargeRequest.
        {\"default\":\"(End of current period)\",\"description\":\"(Applicable only if `pricingComponent` is defined)<br>End of the interval to which the charge applies. Used in pro-rata calculation\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The period_end of this AddChargeRequest.
        :rtype: datetime
        """
        return self._period_end

    @period_end.setter
    def period_end(self, period_end):
        """
        Sets the period_end of this AddChargeRequest.
        {\"default\":\"(End of current period)\",\"description\":\"(Applicable only if `pricingComponent` is defined)<br>End of the interval to which the charge applies. Used in pro-rata calculation\",\"verbs\":[\"POST\",\"GET\"]}

        :param period_end: The period_end of this AddChargeRequest.
        :type: datetime
        """

        self._period_end = period_end

    @property
    def invoicing_type(self):
        """
        Gets the invoicing_type of this AddChargeRequest.
        {\"default\":\"<span class=\\\"label label-default\\\">Aggregated</span>\",\"description\":\"Applicable if adding a charge to the subscription.<br><span class=\\\"label label-default\\\">Immediate</span> &mdash; Generate straight-away an invoice containing these charges.<br><span class=\\\"label label-default\\\">Aggregated</span> &mdash; Add these charges to the next invoice &mdash; for example the invoice raised at the current period's end.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The invoicing_type of this AddChargeRequest.
        :rtype: str
        """
        return self._invoicing_type

    @invoicing_type.setter
    def invoicing_type(self, invoicing_type):
        """
        Sets the invoicing_type of this AddChargeRequest.
        {\"default\":\"<span class=\\\"label label-default\\\">Aggregated</span>\",\"description\":\"Applicable if adding a charge to the subscription.<br><span class=\\\"label label-default\\\">Immediate</span> &mdash; Generate straight-away an invoice containing these charges.<br><span class=\\\"label label-default\\\">Aggregated</span> &mdash; Add these charges to the next invoice &mdash; for example the invoice raised at the current period's end.\",\"verbs\":[\"POST\",\"GET\"]}

        :param invoicing_type: The invoicing_type of this AddChargeRequest.
        :type: str
        """
        allowed_values = ["Immediate", "Aggregated"]
        if invoicing_type not in allowed_values:
            raise ValueError(
                "Invalid value for `invoicing_type` ({0}), must be one of {1}"
                .format(invoicing_type, allowed_values)
            )

        self._invoicing_type = invoicing_type

    @property
    def charge_type(self):
        """
        Gets the charge_type of this AddChargeRequest.
        {\"default\":\"<span class=\\\"label label-default\\\">Debit</span>\",\"description\":\"Whether this charge represents an increase or decrease in invoice cost<br><span class=\\\"label label-default\\\">Credit</span> &mdash; This results in a reduction to the invoice cost<br><span class=\\\"label label-default\\\">Debit</span> &mdash; This will increase the invoice cost\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The charge_type of this AddChargeRequest.
        :rtype: str
        """
        return self._charge_type

    @charge_type.setter
    def charge_type(self, charge_type):
        """
        Sets the charge_type of this AddChargeRequest.
        {\"default\":\"<span class=\\\"label label-default\\\">Debit</span>\",\"description\":\"Whether this charge represents an increase or decrease in invoice cost<br><span class=\\\"label label-default\\\">Credit</span> &mdash; This results in a reduction to the invoice cost<br><span class=\\\"label label-default\\\">Debit</span> &mdash; This will increase the invoice cost\",\"verbs\":[\"POST\",\"GET\"]}

        :param charge_type: The charge_type of this AddChargeRequest.
        :type: str
        """
        allowed_values = ["Credit", "Debit"]
        if charge_type not in allowed_values:
            raise ValueError(
                "Invalid value for `charge_type` ({0}), must be one of {1}"
                .format(charge_type, allowed_values)
            )

        self._charge_type = charge_type

    @property
    def trial(self):
        """
        Gets the trial of this AddChargeRequest.
        {\"default\":\"false\",\"description\":\"Whether the charge is meant in the context of a trial.<br><span class=\\\"label label-default\\\">false</span> &mdash; This is a non-trial charge, so funds will be sought from the customer.<br><span class=\\\"label label-default\\\">true</span> &mdash; This is a trial charge, soThe charge can be considered 'Paid' without taking any funds from the customer.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The trial of this AddChargeRequest.
        :rtype: bool
        """
        return self._trial

    @trial.setter
    def trial(self, trial):
        """
        Sets the trial of this AddChargeRequest.
        {\"default\":\"false\",\"description\":\"Whether the charge is meant in the context of a trial.<br><span class=\\\"label label-default\\\">false</span> &mdash; This is a non-trial charge, so funds will be sought from the customer.<br><span class=\\\"label label-default\\\">true</span> &mdash; This is a trial charge, soThe charge can be considered 'Paid' without taking any funds from the customer.\",\"verbs\":[\"POST\",\"GET\"]}

        :param trial: The trial of this AddChargeRequest.
        :type: bool
        """

        self._trial = trial

    @property
    def remaining_credit_behaviour(self):
        """
        Gets the remaining_credit_behaviour of this AddChargeRequest.
        {\"default\":\"<span class=\\\"label label-default\\\">Rollover</span>\",\"description\":\"Defines the behaviour applied to any outstanding credit resulting from the application of the charge.<br><span class=\\\"label label-default\\\">Rollover</span> &mdash; Outstanding credit is returned to the accounts credit pool.<br><span class=\\\"label label-default\\\">Discard</span> &mdash; Outstanding credit is lost.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The remaining_credit_behaviour of this AddChargeRequest.
        :rtype: str
        """
        return self._remaining_credit_behaviour

    @remaining_credit_behaviour.setter
    def remaining_credit_behaviour(self, remaining_credit_behaviour):
        """
        Sets the remaining_credit_behaviour of this AddChargeRequest.
        {\"default\":\"<span class=\\\"label label-default\\\">Rollover</span>\",\"description\":\"Defines the behaviour applied to any outstanding credit resulting from the application of the charge.<br><span class=\\\"label label-default\\\">Rollover</span> &mdash; Outstanding credit is returned to the accounts credit pool.<br><span class=\\\"label label-default\\\">Discard</span> &mdash; Outstanding credit is lost.\",\"verbs\":[\"POST\",\"GET\"]}

        :param remaining_credit_behaviour: The remaining_credit_behaviour of this AddChargeRequest.
        :type: str
        """
        allowed_values = ["Rollover", "Discard"]
        if remaining_credit_behaviour not in allowed_values:
            raise ValueError(
                "Invalid value for `remaining_credit_behaviour` ({0}), must be one of {1}"
                .format(remaining_credit_behaviour, allowed_values)
            )

        self._remaining_credit_behaviour = remaining_credit_behaviour

    @property
    def pricing_component(self):
        """
        Gets the pricing_component of this AddChargeRequest.
        {\"description\":\"Specifies that this charge is for consumption of some quantity of this pricing component (whose name or ID can be provided).<br>If left blank:<br>The charge will be created as 'ad-hoc'. That is: a monetary lump sum, associated with no pricing component\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The pricing_component of this AddChargeRequest.
        :rtype: str
        """
        return self._pricing_component

    @pricing_component.setter
    def pricing_component(self, pricing_component):
        """
        Sets the pricing_component of this AddChargeRequest.
        {\"description\":\"Specifies that this charge is for consumption of some quantity of this pricing component (whose name or ID can be provided).<br>If left blank:<br>The charge will be created as 'ad-hoc'. That is: a monetary lump sum, associated with no pricing component\",\"verbs\":[\"POST\",\"GET\"]}

        :param pricing_component: The pricing_component of this AddChargeRequest.
        :type: str
        """

        self._pricing_component = pricing_component

    @property
    def pricing_component_value(self):
        """
        Gets the pricing_component_value of this AddChargeRequest.
        {\"description\":\"The value consumed of the pricing component which this charge concerns.Required if pricingComponent is defined\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The pricing_component_value of this AddChargeRequest.
        :rtype: int
        """
        return self._pricing_component_value

    @pricing_component_value.setter
    def pricing_component_value(self, pricing_component_value):
        """
        Sets the pricing_component_value of this AddChargeRequest.
        {\"description\":\"The value consumed of the pricing component which this charge concerns.Required if pricingComponent is defined\",\"verbs\":[\"POST\",\"GET\"]}

        :param pricing_component_value: The pricing_component_value of this AddChargeRequest.
        :type: int
        """

        self._pricing_component_value = pricing_component_value

    @property
    def dry_run(self):
        """
        Gets the dry_run of this AddChargeRequest.
        {\"default\":false,\"description\":\"Changes described in the response:<br><span class=\\\"label label-default\\\">true</span> &mdash; Are not actually performed; your subscription remains unchanged, no billing events run, and no invoices are executed.<br><span class=\\\"label label-default\\\">false</span> &mdash; Are actually performed and committed.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The dry_run of this AddChargeRequest.
        :rtype: bool
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """
        Sets the dry_run of this AddChargeRequest.
        {\"default\":false,\"description\":\"Changes described in the response:<br><span class=\\\"label label-default\\\">true</span> &mdash; Are not actually performed; your subscription remains unchanged, no billing events run, and no invoices are executed.<br><span class=\\\"label label-default\\\">false</span> &mdash; Are actually performed and committed.\",\"verbs\":[\"POST\",\"GET\"]}

        :param dry_run: The dry_run of this AddChargeRequest.
        :type: bool
        """

        self._dry_run = dry_run

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
