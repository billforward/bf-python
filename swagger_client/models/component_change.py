# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ComponentChange(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, organization_id=None, amendment_id=None, update_pricing_component_value_id=None, pricing_component_id=None, pricing_component_name=None, state=None, change_mode=None, new_value=None, created=None, changed_by=None, updated=None, value_effective=None):
        """
        ComponentChange - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'organization_id': 'str',
            'amendment_id': 'str',
            'update_pricing_component_value_id': 'str',
            'pricing_component_id': 'str',
            'pricing_component_name': 'str',
            'state': 'str',
            'change_mode': 'str',
            'new_value': 'int',
            'created': 'datetime',
            'changed_by': 'str',
            'updated': 'datetime',
            'value_effective': 'datetime'
        }

        self.attribute_map = {
            'id': 'id',
            'organization_id': 'organizationID',
            'amendment_id': 'amendmentID',
            'update_pricing_component_value_id': 'updatePricingComponentValueID',
            'pricing_component_id': 'pricingComponentID',
            'pricing_component_name': 'pricingComponentName',
            'state': 'state',
            'change_mode': 'changeMode',
            'new_value': 'newValue',
            'created': 'created',
            'changed_by': 'changedBy',
            'updated': 'updated',
            'value_effective': 'valueEffective'
        }

        self._id = id
        self._organization_id = organization_id
        self._amendment_id = amendment_id
        self._update_pricing_component_value_id = update_pricing_component_value_id
        self._pricing_component_id = pricing_component_id
        self._pricing_component_name = pricing_component_name
        self._state = state
        self._change_mode = change_mode
        self._new_value = new_value
        self._created = created
        self._changed_by = changed_by
        self._updated = updated
        self._value_effective = value_effective

    @property
    def id(self):
        """
        Gets the id of this ComponentChange.
        id

        :return: The id of this ComponentChange.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ComponentChange.
        id

        :param id: The id of this ComponentChange.
        :type: str
        """

        self._id = id

    @property
    def organization_id(self):
        """
        Gets the organization_id of this ComponentChange.
        { \"description\" : \"\", \"verbs\":[] }

        :return: The organization_id of this ComponentChange.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this ComponentChange.
        { \"description\" : \"\", \"verbs\":[] }

        :param organization_id: The organization_id of this ComponentChange.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def amendment_id(self):
        """
        Gets the amendment_id of this ComponentChange.
        { \"description\" : \"\", \"verbs\":[] }

        :return: The amendment_id of this ComponentChange.
        :rtype: str
        """
        return self._amendment_id

    @amendment_id.setter
    def amendment_id(self, amendment_id):
        """
        Sets the amendment_id of this ComponentChange.
        { \"description\" : \"\", \"verbs\":[] }

        :param amendment_id: The amendment_id of this ComponentChange.
        :type: str
        """

        self._amendment_id = amendment_id

    @property
    def update_pricing_component_value_id(self):
        """
        Gets the update_pricing_component_value_id of this ComponentChange.
        { \"description\" : \"ID of the updateComponentValueAmendment object that is responsible for actioning the change.\", \"verbs\":[\"GET\"] }

        :return: The update_pricing_component_value_id of this ComponentChange.
        :rtype: str
        """
        return self._update_pricing_component_value_id

    @update_pricing_component_value_id.setter
    def update_pricing_component_value_id(self, update_pricing_component_value_id):
        """
        Sets the update_pricing_component_value_id of this ComponentChange.
        { \"description\" : \"ID of the updateComponentValueAmendment object that is responsible for actioning the change.\", \"verbs\":[\"GET\"] }

        :param update_pricing_component_value_id: The update_pricing_component_value_id of this ComponentChange.
        :type: str
        """

        self._update_pricing_component_value_id = update_pricing_component_value_id

    @property
    def pricing_component_id(self):
        """
        Gets the pricing_component_id of this ComponentChange.
        { \"description\" : \"ID of the pricing component, that will not change with versioning. (Must be provided if pricingComponentName is empty)\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The pricing_component_id of this ComponentChange.
        :rtype: str
        """
        return self._pricing_component_id

    @pricing_component_id.setter
    def pricing_component_id(self, pricing_component_id):
        """
        Sets the pricing_component_id of this ComponentChange.
        { \"description\" : \"ID of the pricing component, that will not change with versioning. (Must be provided if pricingComponentName is empty)\", \"verbs\":[\"POST\",\"GET\"] }

        :param pricing_component_id: The pricing_component_id of this ComponentChange.
        :type: str
        """

        self._pricing_component_id = pricing_component_id

    @property
    def pricing_component_name(self):
        """
        Gets the pricing_component_name of this ComponentChange.
        { \"description\" : \"Name of the pricing component. (Must be provided if pricingComponentID is empty)\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The pricing_component_name of this ComponentChange.
        :rtype: str
        """
        return self._pricing_component_name

    @pricing_component_name.setter
    def pricing_component_name(self, pricing_component_name):
        """
        Sets the pricing_component_name of this ComponentChange.
        { \"description\" : \"Name of the pricing component. (Must be provided if pricingComponentID is empty)\", \"verbs\":[\"POST\",\"GET\"] }

        :param pricing_component_name: The pricing_component_name of this ComponentChange.
        :type: str
        """

        self._pricing_component_name = pricing_component_name

    @property
    def state(self):
        """
        Gets the state of this ComponentChange.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :return: The state of this ComponentChange.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this ComponentChange.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :param state: The state of this ComponentChange.
        :type: str
        """
        allowed_values = ["Failed", "Pending", "Succeeded"]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def change_mode(self):
        """
        Gets the change_mode of this ComponentChange.
        { \"description\" : \"<span class=\\\"label label-default\\\">immediate</span> applies the changes to the subscription straight away. <span class=\\\"label label-default\\\">delayed</span> applies the changes to the subscription at the start of the next billing period\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The change_mode of this ComponentChange.
        :rtype: str
        """
        return self._change_mode

    @change_mode.setter
    def change_mode(self, change_mode):
        """
        Sets the change_mode of this ComponentChange.
        { \"description\" : \"<span class=\\\"label label-default\\\">immediate</span> applies the changes to the subscription straight away. <span class=\\\"label label-default\\\">delayed</span> applies the changes to the subscription at the start of the next billing period\", \"verbs\":[\"POST\",\"GET\"] }

        :param change_mode: The change_mode of this ComponentChange.
        :type: str
        """
        allowed_values = ["immediate", "delayed"]
        if change_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `change_mode` ({0}), must be one of {1}"
                .format(change_mode, allowed_values)
            )

        self._change_mode = change_mode

    @property
    def new_value(self):
        """
        Gets the new_value of this ComponentChange.
        { \"description\" : \"Value of the pricing component that the subscription is moving to\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The new_value of this ComponentChange.
        :rtype: int
        """
        return self._new_value

    @new_value.setter
    def new_value(self, new_value):
        """
        Sets the new_value of this ComponentChange.
        { \"description\" : \"Value of the pricing component that the subscription is moving to\", \"verbs\":[\"POST\",\"GET\"] }

        :param new_value: The new_value of this ComponentChange.
        :type: int
        """

        self._new_value = new_value

    @property
    def created(self):
        """
        Gets the created of this ComponentChange.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this ComponentChange.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this ComponentChange.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this ComponentChange.
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """
        Gets the changed_by of this ComponentChange.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :return: The changed_by of this ComponentChange.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """
        Sets the changed_by of this ComponentChange.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :param changed_by: The changed_by of this ComponentChange.
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """
        Gets the updated of this ComponentChange.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :return: The updated of this ComponentChange.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this ComponentChange.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :param updated: The updated of this ComponentChange.
        :type: datetime
        """

        self._updated = updated

    @property
    def value_effective(self):
        """
        Gets the value_effective of this ComponentChange.
        { \"description\" : \"Date when the value becomes active. For example when an upgrade will come into effect.\", \"verbs\":[\"GET\"] }

        :return: The value_effective of this ComponentChange.
        :rtype: datetime
        """
        return self._value_effective

    @value_effective.setter
    def value_effective(self, value_effective):
        """
        Sets the value_effective of this ComponentChange.
        { \"description\" : \"Date when the value becomes active. For example when an upgrade will come into effect.\", \"verbs\":[\"GET\"] }

        :param value_effective: The value_effective of this ComponentChange.
        :type: datetime
        """

        self._value_effective = value_effective

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
