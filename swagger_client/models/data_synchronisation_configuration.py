# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class DataSynchronisationConfiguration(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, changed_by=None, updated=None, id=None, organization_id=None, username=None, access_token=None, refresh_token=None, instance_url=None, platform=None, max_failed_retry=None, synch_interval=None, deleted=False):
        """
        DataSynchronisationConfiguration - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'changed_by': 'str',
            'updated': 'datetime',
            'id': 'str',
            'organization_id': 'str',
            'username': 'str',
            'access_token': 'str',
            'refresh_token': 'str',
            'instance_url': 'str',
            'platform': 'str',
            'max_failed_retry': 'int',
            'synch_interval': 'int',
            'deleted': 'bool'
        }

        self.attribute_map = {
            'created': 'created',
            'changed_by': 'changedBy',
            'updated': 'updated',
            'id': 'id',
            'organization_id': 'organizationID',
            'username': 'username',
            'access_token': 'accessToken',
            'refresh_token': 'refreshToken',
            'instance_url': 'instanceUrl',
            'platform': 'platform',
            'max_failed_retry': 'maxFailedRetry',
            'synch_interval': 'synchInterval',
            'deleted': 'deleted'
        }

        self._created = created
        self._changed_by = changed_by
        self._updated = updated
        self._id = id
        self._organization_id = organization_id
        self._username = username
        self._access_token = access_token
        self._refresh_token = refresh_token
        self._instance_url = instance_url
        self._platform = platform
        self._max_failed_retry = max_failed_retry
        self._synch_interval = synch_interval
        self._deleted = deleted

    @property
    def created(self):
        """
        Gets the created of this DataSynchronisationConfiguration.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this DataSynchronisationConfiguration.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this DataSynchronisationConfiguration.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this DataSynchronisationConfiguration.
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """
        Gets the changed_by of this DataSynchronisationConfiguration.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :return: The changed_by of this DataSynchronisationConfiguration.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """
        Sets the changed_by of this DataSynchronisationConfiguration.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :param changed_by: The changed_by of this DataSynchronisationConfiguration.
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """
        Gets the updated of this DataSynchronisationConfiguration.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :return: The updated of this DataSynchronisationConfiguration.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this DataSynchronisationConfiguration.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :param updated: The updated of this DataSynchronisationConfiguration.
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """
        Gets the id of this DataSynchronisationConfiguration.
        ID of the Synchronization Configuration.

        :return: The id of this DataSynchronisationConfiguration.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DataSynchronisationConfiguration.
        ID of the Synchronization Configuration.

        :param id: The id of this DataSynchronisationConfiguration.
        :type: str
        """

        self._id = id

    @property
    def organization_id(self):
        """
        Gets the organization_id of this DataSynchronisationConfiguration.
        Organization associated with Synchronization Configuration.

        :return: The organization_id of this DataSynchronisationConfiguration.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this DataSynchronisationConfiguration.
        Organization associated with Synchronization Configuration.

        :param organization_id: The organization_id of this DataSynchronisationConfiguration.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def username(self):
        """
        Gets the username of this DataSynchronisationConfiguration.
        This is the username for the platform.

        :return: The username of this DataSynchronisationConfiguration.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this DataSynchronisationConfiguration.
        This is the username for the platform.

        :param username: The username of this DataSynchronisationConfiguration.
        :type: str
        """

        self._username = username

    @property
    def access_token(self):
        """
        Gets the access_token of this DataSynchronisationConfiguration.
        This is the token for the platform.

        :return: The access_token of this DataSynchronisationConfiguration.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """
        Sets the access_token of this DataSynchronisationConfiguration.
        This is the token for the platform.

        :param access_token: The access_token of this DataSynchronisationConfiguration.
        :type: str
        """

        self._access_token = access_token

    @property
    def refresh_token(self):
        """
        Gets the refresh_token of this DataSynchronisationConfiguration.
        This is the refresh token for the platform.

        :return: The refresh_token of this DataSynchronisationConfiguration.
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """
        Sets the refresh_token of this DataSynchronisationConfiguration.
        This is the refresh token for the platform.

        :param refresh_token: The refresh_token of this DataSynchronisationConfiguration.
        :type: str
        """

        self._refresh_token = refresh_token

    @property
    def instance_url(self):
        """
        Gets the instance_url of this DataSynchronisationConfiguration.
        This is the instance url for client's salesforce instance.

        :return: The instance_url of this DataSynchronisationConfiguration.
        :rtype: str
        """
        return self._instance_url

    @instance_url.setter
    def instance_url(self, instance_url):
        """
        Sets the instance_url of this DataSynchronisationConfiguration.
        This is the instance url for client's salesforce instance.

        :param instance_url: The instance_url of this DataSynchronisationConfiguration.
        :type: str
        """

        self._instance_url = instance_url

    @property
    def platform(self):
        """
        Gets the platform of this DataSynchronisationConfiguration.
        This is the platform of the job.

        :return: The platform of this DataSynchronisationConfiguration.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """
        Sets the platform of this DataSynchronisationConfiguration.
        This is the platform of the job.

        :param platform: The platform of this DataSynchronisationConfiguration.
        :type: str
        """
        allowed_values = ["Salesforce"]
        if platform not in allowed_values:
            raise ValueError(
                "Invalid value for `platform` ({0}), must be one of {1}"
                .format(platform, allowed_values)
            )

        self._platform = platform

    @property
    def max_failed_retry(self):
        """
        Gets the max_failed_retry of this DataSynchronisationConfiguration.
        This is maximum of the retry attempts when a synch is failed.

        :return: The max_failed_retry of this DataSynchronisationConfiguration.
        :rtype: int
        """
        return self._max_failed_retry

    @max_failed_retry.setter
    def max_failed_retry(self, max_failed_retry):
        """
        Sets the max_failed_retry of this DataSynchronisationConfiguration.
        This is maximum of the retry attempts when a synch is failed.

        :param max_failed_retry: The max_failed_retry of this DataSynchronisationConfiguration.
        :type: int
        """

        self._max_failed_retry = max_failed_retry

    @property
    def synch_interval(self):
        """
        Gets the synch_interval of this DataSynchronisationConfiguration.
        This is interval between each sync.

        :return: The synch_interval of this DataSynchronisationConfiguration.
        :rtype: int
        """
        return self._synch_interval

    @synch_interval.setter
    def synch_interval(self, synch_interval):
        """
        Sets the synch_interval of this DataSynchronisationConfiguration.
        This is interval between each sync.

        :param synch_interval: The synch_interval of this DataSynchronisationConfiguration.
        :type: int
        """

        self._synch_interval = synch_interval

    @property
    def deleted(self):
        """
        Gets the deleted of this DataSynchronisationConfiguration.
        Is the sync job deleted.

        :return: The deleted of this DataSynchronisationConfiguration.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """
        Sets the deleted of this DataSynchronisationConfiguration.
        Is the sync job deleted.

        :param deleted: The deleted of this DataSynchronisationConfiguration.
        :type: bool
        """

        self._deleted = deleted

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
