# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class AuditEntry(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, changed_by=None, id=None, organization_id=None, entity=None, entity_id=None, audit_action=None, field_changes=None, new_entity=None, state=None, created=None):
        """
        AuditEntry - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'changed_by': 'str',
            'id': 'str',
            'organization_id': 'str',
            'entity': 'str',
            'entity_id': 'str',
            'audit_action': 'str',
            'field_changes': 'list[str]',
            'new_entity': 'list[str]',
            'state': 'str',
            'created': 'datetime'
        }

        self.attribute_map = {
            'changed_by': 'changedBy',
            'id': 'id',
            'organization_id': 'organizationID',
            'entity': 'entity',
            'entity_id': 'entityID',
            'audit_action': 'auditAction',
            'field_changes': 'fieldChanges',
            'new_entity': 'newEntity',
            'state': 'state',
            'created': 'created'
        }

        self._changed_by = changed_by
        self._id = id
        self._organization_id = organization_id
        self._entity = entity
        self._entity_id = entity_id
        self._audit_action = audit_action
        self._field_changes = field_changes
        self._new_entity = new_entity
        self._state = state
        self._created = created

    @property
    def changed_by(self):
        """
        Gets the changed_by of this AuditEntry.
        { \"description\" : \"ID of the user who made the change.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The changed_by of this AuditEntry.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """
        Sets the changed_by of this AuditEntry.
        { \"description\" : \"ID of the user who made the change.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param changed_by: The changed_by of this AuditEntry.
        :type: str
        """

        self._changed_by = changed_by

    @property
    def id(self):
        """
        Gets the id of this AuditEntry.
        { \"description\" : \"ID of the audit-entry.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The id of this AuditEntry.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AuditEntry.
        { \"description\" : \"ID of the audit-entry.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param id: The id of this AuditEntry.
        :type: str
        """

        self._id = id

    @property
    def organization_id(self):
        """
        Gets the organization_id of this AuditEntry.
        { \"description\" : \"ID of the organization associated with the audit-entry.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The organization_id of this AuditEntry.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this AuditEntry.
        { \"description\" : \"ID of the organization associated with the audit-entry.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param organization_id: The organization_id of this AuditEntry.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def entity(self):
        """
        Gets the entity of this AuditEntry.
        { \"description\" : \"The entity type.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The entity of this AuditEntry.
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """
        Sets the entity of this AuditEntry.
        { \"description\" : \"The entity type.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param entity: The entity of this AuditEntry.
        :type: str
        """
        allowed_values = ["Notification", "Organization", "OrganizationGateway", "Product", "User", "Subscription", "Profile", "ProductRatePlan", "Client", "Invoice", "PricingComponentValue", "Account", "PricingComponentValueChange", "PricingComponentTier", "PricingComponent", "PricingCalculation", "CouponDefinition", "CouponInstance", "CouponModifier", "CouponRule", "CouponBookDefinition", "CouponBook", "InvoiceLine", "Webhook", "SubscriptionCancellation", "NotificationSnapshot", "InvoicePayment", "InvoiceLinePayment", "Payment", "PaymentMethod", "PaymentMethodSubscriptionLink", "DunningLine", "CybersourceToken", "Card", "Alias", "PaypalSimplePaymentReconciliation", "FreePaymentReconciliation", "LocustworldPaymentReconciliation", "CouponInstanceExistingValue", "TaxLine", "TaxationStrategy", "TaxationLink", "Address", "AmendmentPriceNTime", "Authority", "UnitOfMeasure", "SearchResult", "Amendment", "AuditLog", "Password", "Username", "FixedTermDefinition", "FixedTerm", "Refund", "CreditNote", "Receipt", "AmendmentCompoundConstituent", "APIConfiguration", "StripeToken", "BraintreeToken", "BalancedToken", "PaypalToken", "AuthorizeNetToken", "SpreedlyToken", "GatewayRevenue", "AmendmentDiscardAmendment", "CancellationAmendment", "CompoundAmendment", "CompoundAmendmentConstituent", "FixedTermExpiryAmendment", "InvoiceNextExecutionAttemptAmendment", "PricingComponentValueAmendment", "BraintreeMerchantAccount", "WebhookSubscription", "Migration", "CassResult", "CassPaymentResult", "CassProductRatePlanResult", "CassChurnResult", "CassUpgradeResult", "SubscriptionCharge", "CassPaymentPProductResult", "ProductPaymentsArgs", "StripeACHToken", "UsageAmount", "UsageSession", "Usage", "UsagePeriod", "Period", "OfflinePayment", "CreditNotePayment", "CardVaultPayment", "FreePayment", "BraintreePayment", "BalancedPayment", "CybersourcePayment", "PaypalPayment", "PaypalSimplePayment", "LocustWorldPayment", "StripeOnlyPayment", "ProductPaymentsResult", "StripeACHPayment", "AuthorizeNetPayment", "CompoundUsageSession", "CompoundUsage", "UsageRoundingStrategies", "BillforwardManagedPaymentsResult", "PricingComponentValueMigrationChargeAmendmentMapping", "SubscriptionLTVResult", "AccountLTVResult", "ProductRatePlanPaymentsResult", "DebtsResult", "AccountPaymentsResult", "ComponentChange", "QuoteRequest", "Quote", "CouponCharge", "CouponInstanceInvoiceLink", "Coupon", "CouponDiscount", "CouponUniqueCodesRequest", "CouponUniqueCodesResponse", "GetCouponsResponse", "AddCouponCodeRequest", "AddCouponCodeResponse", "RemoveCouponFromSubscriptionRequest", "TokenizationPreAuth", "StripeTokenizationPreAuth", "BraintreeTokenizationPreAuth", "SpreedlyTokenizationPreAuth", "SagePayTokenizationPreAuth", "PayVisionTokenizationPreAuth", "TokenizationPreAuthRequest", "AuthCaptureRequest", "StripeACHBankAccountVerification", "PasswordReset", "PricingRequest", "AddTaxationStrategyRequest", "AddPaymentMethodRequest", "APIRequest", "SagePayToken", "SagePayNotificationRequest", "SagePayNotificationResponse", "SagePayOutstandingTransaction", "SagePayEnabledCardType", "TrustCommerceToken", "SagePayTransaction", "PricingComponentValueResponse", "MigrationResponse", "TimeResponse", "EntityTime", "Email", "AggregationLink", "BFPermission", "Role", "PermissionLink", "PayVisionToken", "PayVisionTransaction", "KashToken", "EmailProvider", "DataSynchronizationJob", "DataSynchronizationJobError", "DataSynchronizationConfiguration", "DataSynchronizationAppConfiguration", "AggregationChildrenResponse", "MetadataKeyValue", "Metadata", "AggregatingComponent", "PricingComponentMigrationValue", "InvoiceRecalculationAmendment", "IssueInvoiceAmendment", "EmailSubscription", "RevenueAttribution"]
        if entity not in allowed_values:
            raise ValueError(
                "Invalid value for `entity` ({0}), must be one of {1}"
                .format(entity, allowed_values)
            )

        self._entity = entity

    @property
    def entity_id(self):
        """
        Gets the entity_id of this AuditEntry.
        { \"description\" : \"ID of the entity.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The entity_id of this AuditEntry.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """
        Sets the entity_id of this AuditEntry.
        { \"description\" : \"ID of the entity.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param entity_id: The entity_id of this AuditEntry.
        :type: str
        """

        self._entity_id = entity_id

    @property
    def audit_action(self):
        """
        Gets the audit_action of this AuditEntry.
        { \"description\" : \"update, insert\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The audit_action of this AuditEntry.
        :rtype: str
        """
        return self._audit_action

    @audit_action.setter
    def audit_action(self, audit_action):
        """
        Sets the audit_action of this AuditEntry.
        { \"description\" : \"update, insert\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param audit_action: The audit_action of this AuditEntry.
        :type: str
        """
        allowed_values = ["Accept", "Active", "AwaitingPayment", "AwaitingRefund", "Cancelled", "Completed", "Created", "Error", "Expiring", "Expired", "Failed", "Migrated", "NeedsAmendments", "Paid", "Pending", "Provisioned", "Refunded", "Reject", "Trial", "Unknown", "Unpaid", "Updated", "Voided", "PaymentFailed"]
        if audit_action not in allowed_values:
            raise ValueError(
                "Invalid value for `audit_action` ({0}), must be one of {1}"
                .format(audit_action, allowed_values)
            )

        self._audit_action = audit_action

    @property
    def field_changes(self):
        """
        Gets the field_changes of this AuditEntry.
        { \"description\" : \"A description of the changes.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The field_changes of this AuditEntry.
        :rtype: list[str]
        """
        return self._field_changes

    @field_changes.setter
    def field_changes(self, field_changes):
        """
        Sets the field_changes of this AuditEntry.
        { \"description\" : \"A description of the changes.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param field_changes: The field_changes of this AuditEntry.
        :type: list[str]
        """

        self._field_changes = field_changes

    @property
    def new_entity(self):
        """
        Gets the new_entity of this AuditEntry.


        :return: The new_entity of this AuditEntry.
        :rtype: list[str]
        """
        return self._new_entity

    @new_entity.setter
    def new_entity(self, new_entity):
        """
        Sets the new_entity of this AuditEntry.


        :param new_entity: The new_entity of this AuditEntry.
        :type: list[str]
        """

        self._new_entity = new_entity

    @property
    def state(self):
        """
        Gets the state of this AuditEntry.
        { \"description\" : \"The state of the audit entry.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The state of this AuditEntry.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this AuditEntry.
        { \"description\" : \"The state of the audit entry.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param state: The state of this AuditEntry.
        :type: str
        """
        allowed_values = ["New", "Processed"]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def created(self):
        """
        Gets the created of this AuditEntry.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this AuditEntry.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this AuditEntry.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this AuditEntry.
        :type: datetime
        """

        self._created = created

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
