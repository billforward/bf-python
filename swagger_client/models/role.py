# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Role(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, changed_by=None, updated=None, id=None, organization_id=None, name=None, description=None, revoked=None, deleted=False, default_role=False, default_returned=False, permissions=None):
        """
        Role - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'changed_by': 'str',
            'updated': 'datetime',
            'id': 'str',
            'organization_id': 'str',
            'name': 'str',
            'description': 'str',
            'revoked': 'datetime',
            'deleted': 'bool',
            'default_role': 'bool',
            'default_returned': 'bool',
            'permissions': 'list[BFPermission]'
        }

        self.attribute_map = {
            'created': 'created',
            'changed_by': 'changedBy',
            'updated': 'updated',
            'id': 'id',
            'organization_id': 'organizationID',
            'name': 'name',
            'description': 'description',
            'revoked': 'revoked',
            'deleted': 'deleted',
            'default_role': 'defaultRole',
            'default_returned': 'defaultReturned',
            'permissions': 'permissions'
        }

        self._created = created
        self._changed_by = changed_by
        self._updated = updated
        self._id = id
        self._organization_id = organization_id
        self._name = name
        self._description = description
        self._revoked = revoked
        self._deleted = deleted
        self._default_role = default_role
        self._default_returned = default_returned
        self._permissions = permissions

    @property
    def created(self):
        """
        Gets the created of this Role.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this Role.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this Role.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this Role.
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """
        Gets the changed_by of this Role.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :return: The changed_by of this Role.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """
        Sets the changed_by of this Role.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :param changed_by: The changed_by of this Role.
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """
        Gets the updated of this Role.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :return: The updated of this Role.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this Role.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :param updated: The updated of this Role.
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """
        Gets the id of this Role.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :return: The id of this Role.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Role.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :param id: The id of this Role.
        :type: str
        """

        self._id = id

    @property
    def organization_id(self):
        """
        Gets the organization_id of this Role.
        { \"description\" : \"\", \"verbs\":[\"\"] }

        :return: The organization_id of this Role.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this Role.
        { \"description\" : \"\", \"verbs\":[\"\"] }

        :param organization_id: The organization_id of this Role.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def name(self):
        """
        Gets the name of this Role.
        { \"description\" : \"Friendly name of the role.\", \"verbs\":[\"GET\",\"POST\",\"PUT\"] }

        :return: The name of this Role.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Role.
        { \"description\" : \"Friendly name of the role.\", \"verbs\":[\"GET\",\"POST\",\"PUT\"] }

        :param name: The name of this Role.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this Role.
        { \"description\" : \"Friendly description of the role.\", \"verbs\":[\"GET\",\"POST\",\"PUT\"] }

        :return: The description of this Role.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Role.
        { \"description\" : \"Friendly description of the role.\", \"verbs\":[\"GET\",\"POST\",\"PUT\"] }

        :param description: The description of this Role.
        :type: str
        """

        self._description = description

    @property
    def revoked(self):
        """
        Gets the revoked of this Role.
        { \"description\" : \"If a role is deleted it is set as revoked from this date. Any account in the role will no longer have its permissions.\", \"verbs\":[\"GET\",\"POST\",\"PUT\"] }

        :return: The revoked of this Role.
        :rtype: datetime
        """
        return self._revoked

    @revoked.setter
    def revoked(self, revoked):
        """
        Sets the revoked of this Role.
        { \"description\" : \"If a role is deleted it is set as revoked from this date. Any account in the role will no longer have its permissions.\", \"verbs\":[\"GET\",\"POST\",\"PUT\"] }

        :param revoked: The revoked of this Role.
        :type: datetime
        """

        self._revoked = revoked

    @property
    def deleted(self):
        """
        Gets the deleted of this Role.
        { \"default\" : \"false\", \"description\" : \"If a role is deleted any account in the role will no longer have its permissions.\", \"verbs\":[\"GET\",\"POST\",\"PUT\"] }

        :return: The deleted of this Role.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """
        Sets the deleted of this Role.
        { \"default\" : \"false\", \"description\" : \"If a role is deleted any account in the role will no longer have its permissions.\", \"verbs\":[\"GET\",\"POST\",\"PUT\"] }

        :param deleted: The deleted of this Role.
        :type: bool
        """

        self._deleted = deleted

    @property
    def default_role(self):
        """
        Gets the default_role of this Role.
        { \"default\" : \"false\", \"description\" : \"If set this role will become the default role for the organization. Any accounts without an explicitly set role will have this applied.\", \"verbs\":[\"GET\",\"POST\",\"PUT\"] }

        :return: The default_role of this Role.
        :rtype: bool
        """
        return self._default_role

    @default_role.setter
    def default_role(self, default_role):
        """
        Sets the default_role of this Role.
        { \"default\" : \"false\", \"description\" : \"If set this role will become the default role for the organization. Any accounts without an explicitly set role will have this applied.\", \"verbs\":[\"GET\",\"POST\",\"PUT\"] }

        :param default_role: The default_role of this Role.
        :type: bool
        """

        self._default_role = default_role

    @property
    def default_returned(self):
        """
        Gets the default_returned of this Role.
        { \"default\" : \"false\", \"description\" : \"When returning the list of roles for an account, this indicates if the role was returned due to defaulting.\", \"verbs\":[\"GET\",\"POST\",\"PUT\"] }

        :return: The default_returned of this Role.
        :rtype: bool
        """
        return self._default_returned

    @default_returned.setter
    def default_returned(self, default_returned):
        """
        Sets the default_returned of this Role.
        { \"default\" : \"false\", \"description\" : \"When returning the list of roles for an account, this indicates if the role was returned due to defaulting.\", \"verbs\":[\"GET\",\"POST\",\"PUT\"] }

        :param default_returned: The default_returned of this Role.
        :type: bool
        """

        self._default_returned = default_returned

    @property
    def permissions(self):
        """
        Gets the permissions of this Role.
        { \"description\" : \"List of permissions in this role.\", \"verbs\":[\"GET\",\"POST\",\"PUT\"] }

        :return: The permissions of this Role.
        :rtype: list[BFPermission]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """
        Sets the permissions of this Role.
        { \"description\" : \"List of permissions in this role.\", \"verbs\":[\"GET\",\"POST\",\"PUT\"] }

        :param permissions: The permissions of this Role.
        :type: list[BFPermission]
        """

        self._permissions = permissions

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
