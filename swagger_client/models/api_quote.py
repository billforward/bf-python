# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class APIQuote(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, changed_by=None, subtotal=None, subtotal_excluding_tax=None, total=None, total_excluding_tax=None, tax=None, discount=None, discount_excluding_tax=None, currency=None, product_name=None, public_product_name=None, product_rate_plan_name=None, public_product_rate_plan_name=None, product_id=None, product_rate_plan_id=None, subscription_id=None, account_id=None, quantities=None, discounts=None, quote_for=None, period_start=None, period_end=None, total_periods=None, proration_enabled=False, uplift=None, coupon_codes=None, organization_id=None, same_product_period=False):
        """
        APIQuote - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'changed_by': 'str',
            'subtotal': 'float',
            'subtotal_excluding_tax': 'float',
            'total': 'float',
            'total_excluding_tax': 'float',
            'tax': 'float',
            'discount': 'float',
            'discount_excluding_tax': 'float',
            'currency': 'str',
            'product_name': 'str',
            'public_product_name': 'str',
            'product_rate_plan_name': 'str',
            'public_product_rate_plan_name': 'str',
            'product_id': 'str',
            'product_rate_plan_id': 'str',
            'subscription_id': 'str',
            'account_id': 'str',
            'quantities': 'list[APIQuoteResponseQuantity]',
            'discounts': 'list[CouponWrapperResponse]',
            'quote_for': 'str',
            'period_start': 'datetime',
            'period_end': 'datetime',
            'total_periods': 'float',
            'proration_enabled': 'bool',
            'uplift': 'float',
            'coupon_codes': 'list[str]',
            'organization_id': 'str',
            'same_product_period': 'bool'
        }

        self.attribute_map = {
            'created': 'created',
            'changed_by': 'changedBy',
            'subtotal': 'subtotal',
            'subtotal_excluding_tax': 'subtotalExcludingTax',
            'total': 'total',
            'total_excluding_tax': 'totalExcludingTax',
            'tax': 'tax',
            'discount': 'discount',
            'discount_excluding_tax': 'discountExcludingTax',
            'currency': 'currency',
            'product_name': 'productName',
            'public_product_name': 'publicProductName',
            'product_rate_plan_name': 'productRatePlanName',
            'public_product_rate_plan_name': 'publicProductRatePlanName',
            'product_id': 'productID',
            'product_rate_plan_id': 'productRatePlanID',
            'subscription_id': 'subscriptionID',
            'account_id': 'accountID',
            'quantities': 'quantities',
            'discounts': 'discounts',
            'quote_for': 'quoteFor',
            'period_start': 'periodStart',
            'period_end': 'periodEnd',
            'total_periods': 'totalPeriods',
            'proration_enabled': 'prorationEnabled',
            'uplift': 'uplift',
            'coupon_codes': 'couponCodes',
            'organization_id': 'organizationID',
            'same_product_period': 'sameProductPeriod'
        }

        self._created = created
        self._changed_by = changed_by
        self._subtotal = subtotal
        self._subtotal_excluding_tax = subtotal_excluding_tax
        self._total = total
        self._total_excluding_tax = total_excluding_tax
        self._tax = tax
        self._discount = discount
        self._discount_excluding_tax = discount_excluding_tax
        self._currency = currency
        self._product_name = product_name
        self._public_product_name = public_product_name
        self._product_rate_plan_name = product_rate_plan_name
        self._public_product_rate_plan_name = public_product_rate_plan_name
        self._product_id = product_id
        self._product_rate_plan_id = product_rate_plan_id
        self._subscription_id = subscription_id
        self._account_id = account_id
        self._quantities = quantities
        self._discounts = discounts
        self._quote_for = quote_for
        self._period_start = period_start
        self._period_end = period_end
        self._total_periods = total_periods
        self._proration_enabled = proration_enabled
        self._uplift = uplift
        self._coupon_codes = coupon_codes
        self._organization_id = organization_id
        self._same_product_period = same_product_period

    @property
    def created(self):
        """
        Gets the created of this APIQuote.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this APIQuote.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this APIQuote.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this APIQuote.
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """
        Gets the changed_by of this APIQuote.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :return: The changed_by of this APIQuote.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """
        Sets the changed_by of this APIQuote.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :param changed_by: The changed_by of this APIQuote.
        :type: str
        """

        self._changed_by = changed_by

    @property
    def subtotal(self):
        """
        Gets the subtotal of this APIQuote.
        {\"description\":\"The cost &mdash; including tax, but excluding discounts &mdash; of all items described in the quote.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The subtotal of this APIQuote.
        :rtype: float
        """
        return self._subtotal

    @subtotal.setter
    def subtotal(self, subtotal):
        """
        Sets the subtotal of this APIQuote.
        {\"description\":\"The cost &mdash; including tax, but excluding discounts &mdash; of all items described in the quote.\",\"verbs\":[\"POST\",\"GET\"]}

        :param subtotal: The subtotal of this APIQuote.
        :type: float
        """

        self._subtotal = subtotal

    @property
    def subtotal_excluding_tax(self):
        """
        Gets the subtotal_excluding_tax of this APIQuote.
        {\"description\":\"The cost &mdash; excluding tax, and excluding discounts &mdash; of all items described in the quote.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The subtotal_excluding_tax of this APIQuote.
        :rtype: float
        """
        return self._subtotal_excluding_tax

    @subtotal_excluding_tax.setter
    def subtotal_excluding_tax(self, subtotal_excluding_tax):
        """
        Sets the subtotal_excluding_tax of this APIQuote.
        {\"description\":\"The cost &mdash; excluding tax, and excluding discounts &mdash; of all items described in the quote.\",\"verbs\":[\"POST\",\"GET\"]}

        :param subtotal_excluding_tax: The subtotal_excluding_tax of this APIQuote.
        :type: float
        """

        self._subtotal_excluding_tax = subtotal_excluding_tax

    @property
    def total(self):
        """
        Gets the total of this APIQuote.
        {\"description\":\"The cost &mdash; including tax, and with discounts (themselves including tax) applied &mdash; of all items described in the quote.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The total of this APIQuote.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """
        Sets the total of this APIQuote.
        {\"description\":\"The cost &mdash; including tax, and with discounts (themselves including tax) applied &mdash; of all items described in the quote.\",\"verbs\":[\"POST\",\"GET\"]}

        :param total: The total of this APIQuote.
        :type: float
        """

        self._total = total

    @property
    def total_excluding_tax(self):
        """
        Gets the total_excluding_tax of this APIQuote.
        {\"description\":\"The cost &mdash; excluding tax, and with discounts (themselves excluding tax) applied &mdash; of all items described in the quote.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The total_excluding_tax of this APIQuote.
        :rtype: float
        """
        return self._total_excluding_tax

    @total_excluding_tax.setter
    def total_excluding_tax(self, total_excluding_tax):
        """
        Sets the total_excluding_tax of this APIQuote.
        {\"description\":\"The cost &mdash; excluding tax, and with discounts (themselves excluding tax) applied &mdash; of all items described in the quote.\",\"verbs\":[\"POST\",\"GET\"]}

        :param total_excluding_tax: The total_excluding_tax of this APIQuote.
        :type: float
        """

        self._total_excluding_tax = total_excluding_tax

    @property
    def tax(self):
        """
        Gets the tax of this APIQuote.
        {\"description\":\"The portion of this quote's cost which is comprised of tax.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The tax of this APIQuote.
        :rtype: float
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """
        Sets the tax of this APIQuote.
        {\"description\":\"The portion of this quote's cost which is comprised of tax.\",\"verbs\":[\"POST\",\"GET\"]}

        :param tax: The tax of this APIQuote.
        :type: float
        """

        self._tax = tax

    @property
    def discount(self):
        """
        Gets the discount of this APIQuote.
        {\"description\":\"Total amount deducted from price via discounts &mdash; includes any tax upon the discounts themselves.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The discount of this APIQuote.
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """
        Sets the discount of this APIQuote.
        {\"description\":\"Total amount deducted from price via discounts &mdash; includes any tax upon the discounts themselves.\",\"verbs\":[\"POST\",\"GET\"]}

        :param discount: The discount of this APIQuote.
        :type: float
        """

        self._discount = discount

    @property
    def discount_excluding_tax(self):
        """
        Gets the discount_excluding_tax of this APIQuote.
        {\"description\":\"Total amount deducted from price via discounts &mdash; excludes any tax upon the discounts themselves.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The discount_excluding_tax of this APIQuote.
        :rtype: float
        """
        return self._discount_excluding_tax

    @discount_excluding_tax.setter
    def discount_excluding_tax(self, discount_excluding_tax):
        """
        Sets the discount_excluding_tax of this APIQuote.
        {\"description\":\"Total amount deducted from price via discounts &mdash; excludes any tax upon the discounts themselves.\",\"verbs\":[\"POST\",\"GET\"]}

        :param discount_excluding_tax: The discount_excluding_tax of this APIQuote.
        :type: float
        """

        self._discount_excluding_tax = discount_excluding_tax

    @property
    def currency(self):
        """
        Gets the currency of this APIQuote.
        {\"description\":\"The currency of any quoted prices &mdash; as specified by a three-character ISO 4217 currency code (i.e. USD).\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The currency of this APIQuote.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """
        Sets the currency of this APIQuote.
        {\"description\":\"The currency of any quoted prices &mdash; as specified by a three-character ISO 4217 currency code (i.e. USD).\",\"verbs\":[\"POST\",\"GET\"]}

        :param currency: The currency of this APIQuote.
        :type: str
        """

        self._currency = currency

    @property
    def product_name(self):
        """
        Gets the product_name of this APIQuote.
        {\"description\":\"Name of the product for which a price quote is requested.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The product_name of this APIQuote.
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """
        Sets the product_name of this APIQuote.
        {\"description\":\"Name of the product for which a price quote is requested.\",\"verbs\":[\"POST\",\"GET\"]}

        :param product_name: The product_name of this APIQuote.
        :type: str
        """

        self._product_name = product_name

    @property
    def public_product_name(self):
        """
        Gets the public_product_name of this APIQuote.
        {\"description\":\"Public name of the product for which a price quote is requested.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The public_product_name of this APIQuote.
        :rtype: str
        """
        return self._public_product_name

    @public_product_name.setter
    def public_product_name(self, public_product_name):
        """
        Sets the public_product_name of this APIQuote.
        {\"description\":\"Public name of the product for which a price quote is requested.\",\"verbs\":[\"POST\",\"GET\"]}

        :param public_product_name: The public_product_name of this APIQuote.
        :type: str
        """

        self._public_product_name = public_product_name

    @property
    def product_rate_plan_name(self):
        """
        Gets the product_rate_plan_name of this APIQuote.
        {\"description\":\"Name of the rate plan (of some product) for which a price quote is requested.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The product_rate_plan_name of this APIQuote.
        :rtype: str
        """
        return self._product_rate_plan_name

    @product_rate_plan_name.setter
    def product_rate_plan_name(self, product_rate_plan_name):
        """
        Sets the product_rate_plan_name of this APIQuote.
        {\"description\":\"Name of the rate plan (of some product) for which a price quote is requested.\",\"verbs\":[\"POST\",\"GET\"]}

        :param product_rate_plan_name: The product_rate_plan_name of this APIQuote.
        :type: str
        """

        self._product_rate_plan_name = product_rate_plan_name

    @property
    def public_product_rate_plan_name(self):
        """
        Gets the public_product_rate_plan_name of this APIQuote.
        {\"description\":\"Public name of the rate plan (of some product) for which a price quote is requested.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The public_product_rate_plan_name of this APIQuote.
        :rtype: str
        """
        return self._public_product_rate_plan_name

    @public_product_rate_plan_name.setter
    def public_product_rate_plan_name(self, public_product_rate_plan_name):
        """
        Sets the public_product_rate_plan_name of this APIQuote.
        {\"description\":\"Public name of the rate plan (of some product) for which a price quote is requested.\",\"verbs\":[\"POST\",\"GET\"]}

        :param public_product_rate_plan_name: The public_product_rate_plan_name of this APIQuote.
        :type: str
        """

        self._public_product_rate_plan_name = public_product_rate_plan_name

    @property
    def product_id(self):
        """
        Gets the product_id of this APIQuote.
        {\"description\":\"ID of the product for which a price quote is requested.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The product_id of this APIQuote.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """
        Sets the product_id of this APIQuote.
        {\"description\":\"ID of the product for which a price quote is requested.\",\"verbs\":[\"POST\",\"GET\"]}

        :param product_id: The product_id of this APIQuote.
        :type: str
        """

        self._product_id = product_id

    @property
    def product_rate_plan_id(self):
        """
        Gets the product_rate_plan_id of this APIQuote.
        {\"description\":\"ID of the rate plan (of some product) for which a price quote is requested.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The product_rate_plan_id of this APIQuote.
        :rtype: str
        """
        return self._product_rate_plan_id

    @product_rate_plan_id.setter
    def product_rate_plan_id(self, product_rate_plan_id):
        """
        Sets the product_rate_plan_id of this APIQuote.
        {\"description\":\"ID of the rate plan (of some product) for which a price quote is requested.\",\"verbs\":[\"POST\",\"GET\"]}

        :param product_rate_plan_id: The product_rate_plan_id of this APIQuote.
        :type: str
        """

        self._product_rate_plan_id = product_rate_plan_id

    @property
    def subscription_id(self):
        """
        Gets the subscription_id of this APIQuote.
        {\"description\":\"ID of the subscription for which a price quote is requested.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The subscription_id of this APIQuote.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """
        Sets the subscription_id of this APIQuote.
        {\"description\":\"ID of the subscription for which a price quote is requested.\",\"verbs\":[\"POST\",\"GET\"]}

        :param subscription_id: The subscription_id of this APIQuote.
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def account_id(self):
        """
        Gets the account_id of this APIQuote.
        {\"description\":\"ID of the account for which a price quote is requested.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The account_id of this APIQuote.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """
        Sets the account_id of this APIQuote.
        {\"description\":\"ID of the account for which a price quote is requested.\",\"verbs\":[\"POST\",\"GET\"]}

        :param account_id: The account_id of this APIQuote.
        :type: str
        """

        self._account_id = account_id

    @property
    def quantities(self):
        """
        Gets the quantities of this APIQuote.
        {\"description\":\"A list of calculated prices for each pricing component described in the quote request.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The quantities of this APIQuote.
        :rtype: list[APIQuoteResponseQuantity]
        """
        return self._quantities

    @quantities.setter
    def quantities(self, quantities):
        """
        Sets the quantities of this APIQuote.
        {\"description\":\"A list of calculated prices for each pricing component described in the quote request.\",\"verbs\":[\"POST\",\"GET\"]}

        :param quantities: The quantities of this APIQuote.
        :type: list[APIQuoteResponseQuantity]
        """

        self._quantities = quantities

    @property
    def discounts(self):
        """
        Gets the discounts of this APIQuote.
        {\"description\":\"A list of discounts applied in calculating the quote.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The discounts of this APIQuote.
        :rtype: list[CouponWrapperResponse]
        """
        return self._discounts

    @discounts.setter
    def discounts(self, discounts):
        """
        Sets the discounts of this APIQuote.
        {\"description\":\"A list of discounts applied in calculating the quote.\",\"verbs\":[\"POST\",\"GET\"]}

        :param discounts: The discounts of this APIQuote.
        :type: list[CouponWrapperResponse]
        """

        self._discounts = discounts

    @property
    def quote_for(self):
        """
        Gets the quote_for of this APIQuote.
        {\"default\":\"RecurringPeriod\",\"description\":\"Subscription scenario with which the quote is concerned.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The quote_for of this APIQuote.
        :rtype: str
        """
        return self._quote_for

    @quote_for.setter
    def quote_for(self, quote_for):
        """
        Sets the quote_for of this APIQuote.
        {\"default\":\"RecurringPeriod\",\"description\":\"Subscription scenario with which the quote is concerned.\",\"verbs\":[\"POST\",\"GET\"]}

        :param quote_for: The quote_for of this APIQuote.
        :type: str
        """
        allowed_values = ["InitialPeriod", "RecurringPeriod", "Upgrade", "Migration"]
        if quote_for not in allowed_values:
            raise ValueError(
                "Invalid value for `quote_for` ({0}), must be one of {1}"
                .format(quote_for, allowed_values)
            )

        self._quote_for = quote_for

    @property
    def period_start(self):
        """
        Gets the period_start of this APIQuote.
        {\"default\":\"(Time at which quote is requested)\",\"description\":\"The start date-time of the interval for which a price quote is requested.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The period_start of this APIQuote.
        :rtype: datetime
        """
        return self._period_start

    @period_start.setter
    def period_start(self, period_start):
        """
        Sets the period_start of this APIQuote.
        {\"default\":\"(Time at which quote is requested)\",\"description\":\"The start date-time of the interval for which a price quote is requested.\",\"verbs\":[\"POST\",\"GET\"]}

        :param period_start: The period_start of this APIQuote.
        :type: datetime
        """

        self._period_start = period_start

    @property
    def period_end(self):
        """
        Gets the period_end of this APIQuote.
        {\"default\":\"(End of period described in `periodStart`)\",\"description\":\"The end date-time of the interval for which a price quote is requested.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The period_end of this APIQuote.
        :rtype: datetime
        """
        return self._period_end

    @period_end.setter
    def period_end(self, period_end):
        """
        Sets the period_end of this APIQuote.
        {\"default\":\"(End of period described in `periodStart`)\",\"description\":\"The end date-time of the interval for which a price quote is requested.\",\"verbs\":[\"POST\",\"GET\"]}

        :param period_end: The period_end of this APIQuote.
        :type: datetime
        """

        self._period_end = period_end

    @property
    def total_periods(self):
        """
        Gets the total_periods of this APIQuote.
        {\"default\":\"ZERO\",\"description\":\"\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The total_periods of this APIQuote.
        :rtype: float
        """
        return self._total_periods

    @total_periods.setter
    def total_periods(self, total_periods):
        """
        Sets the total_periods of this APIQuote.
        {\"default\":\"ZERO\",\"description\":\"\",\"verbs\":[\"POST\",\"GET\"]}

        :param total_periods: The total_periods of this APIQuote.
        :type: float
        """

        self._total_periods = total_periods

    @property
    def proration_enabled(self):
        """
        Gets the proration_enabled of this APIQuote.
        {\"default\":true,\"description\":\"Whether consumption for fractions/multiples of periods is calculated as a fraction/multiple of the cost of consumption for a whole period.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The proration_enabled of this APIQuote.
        :rtype: bool
        """
        return self._proration_enabled

    @proration_enabled.setter
    def proration_enabled(self, proration_enabled):
        """
        Sets the proration_enabled of this APIQuote.
        {\"default\":true,\"description\":\"Whether consumption for fractions/multiples of periods is calculated as a fraction/multiple of the cost of consumption for a whole period.\",\"verbs\":[\"POST\",\"GET\"]}

        :param proration_enabled: The proration_enabled of this APIQuote.
        :type: bool
        """

        self._proration_enabled = proration_enabled

    @property
    def uplift(self):
        """
        Gets the uplift of this APIQuote.
        {\"description\":\"\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The uplift of this APIQuote.
        :rtype: float
        """
        return self._uplift

    @uplift.setter
    def uplift(self, uplift):
        """
        Sets the uplift of this APIQuote.
        {\"description\":\"\",\"verbs\":[\"POST\",\"GET\"]}

        :param uplift: The uplift of this APIQuote.
        :type: float
        """

        self._uplift = uplift

    @property
    def coupon_codes(self):
        """
        Gets the coupon_codes of this APIQuote.
        {\"description\":\"A list of coupon codes to consider in calculating the quote.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The coupon_codes of this APIQuote.
        :rtype: list[str]
        """
        return self._coupon_codes

    @coupon_codes.setter
    def coupon_codes(self, coupon_codes):
        """
        Sets the coupon_codes of this APIQuote.
        {\"description\":\"A list of coupon codes to consider in calculating the quote.\",\"verbs\":[\"POST\",\"GET\"]}

        :param coupon_codes: The coupon_codes of this APIQuote.
        :type: list[str]
        """

        self._coupon_codes = coupon_codes

    @property
    def organization_id(self):
        """
        Gets the organization_id of this APIQuote.
        {\"description\":\"ID of the organization in whose name the quote was generated.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The organization_id of this APIQuote.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this APIQuote.
        {\"description\":\"ID of the organization in whose name the quote was generated.\",\"verbs\":[\"POST\",\"GET\"]}

        :param organization_id: The organization_id of this APIQuote.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def same_product_period(self):
        """
        Gets the same_product_period of this APIQuote.
        {\"description\":\"If migration quote whether or not the rate plans have the same duration\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The same_product_period of this APIQuote.
        :rtype: bool
        """
        return self._same_product_period

    @same_product_period.setter
    def same_product_period(self, same_product_period):
        """
        Sets the same_product_period of this APIQuote.
        {\"description\":\"If migration quote whether or not the rate plans have the same duration\",\"verbs\":[\"POST\",\"GET\"]}

        :param same_product_period: The same_product_period of this APIQuote.
        :type: bool
        """

        self._same_product_period = same_product_period

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
