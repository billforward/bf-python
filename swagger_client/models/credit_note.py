# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CreditNote(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, changed_by=None, updated=None, id=None, account_id=None, invoice_id=None, subscription_id=None, organization_id=None, type=None, currency=None, description=None, value=None, remaining_value=None, created_by=None):
        """
        CreditNote - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'changed_by': 'str',
            'updated': 'datetime',
            'id': 'str',
            'account_id': 'str',
            'invoice_id': 'str',
            'subscription_id': 'str',
            'organization_id': 'str',
            'type': 'str',
            'currency': 'str',
            'description': 'str',
            'value': 'float',
            'remaining_value': 'float',
            'created_by': 'str'
        }

        self.attribute_map = {
            'created': 'created',
            'changed_by': 'changedBy',
            'updated': 'updated',
            'id': 'id',
            'account_id': 'accountID',
            'invoice_id': 'invoiceID',
            'subscription_id': 'subscriptionID',
            'organization_id': 'organizationID',
            'type': 'type',
            'currency': 'currency',
            'description': 'description',
            'value': 'value',
            'remaining_value': 'remainingValue',
            'created_by': 'createdBy'
        }

        self._created = created
        self._changed_by = changed_by
        self._updated = updated
        self._id = id
        self._account_id = account_id
        self._invoice_id = invoice_id
        self._subscription_id = subscription_id
        self._organization_id = organization_id
        self._type = type
        self._currency = currency
        self._description = description
        self._value = value
        self._remaining_value = remaining_value
        self._created_by = created_by

    @property
    def created(self):
        """
        Gets the created of this CreditNote.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this CreditNote.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this CreditNote.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this CreditNote.
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """
        Gets the changed_by of this CreditNote.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :return: The changed_by of this CreditNote.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """
        Sets the changed_by of this CreditNote.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :param changed_by: The changed_by of this CreditNote.
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """
        Gets the updated of this CreditNote.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :return: The updated of this CreditNote.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this CreditNote.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :param updated: The updated of this CreditNote.
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """
        Gets the id of this CreditNote.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :return: The id of this CreditNote.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CreditNote.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :param id: The id of this CreditNote.
        :type: str
        """

        self._id = id

    @property
    def account_id(self):
        """
        Gets the account_id of this CreditNote.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The account_id of this CreditNote.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """
        Sets the account_id of this CreditNote.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"GET\"] }

        :param account_id: The account_id of this CreditNote.
        :type: str
        """

        self._account_id = account_id

    @property
    def invoice_id(self):
        """
        Gets the invoice_id of this CreditNote.
        { \"description\" : \"References an invoice from this credit note. This has no side-effects, such as limited scope of credit note.\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The invoice_id of this CreditNote.
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """
        Sets the invoice_id of this CreditNote.
        { \"description\" : \"References an invoice from this credit note. This has no side-effects, such as limited scope of credit note.\", \"verbs\":[\"POST\",\"GET\"] }

        :param invoice_id: The invoice_id of this CreditNote.
        :type: str
        """

        self._invoice_id = invoice_id

    @property
    def subscription_id(self):
        """
        Gets the subscription_id of this CreditNote.
        { \"description\" : \"Subscription to apply the credit note to. By default credit notes are owned by the account an can be used on any subscription. Providing this value limits the credit-note to only being used on the specified subscription.\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The subscription_id of this CreditNote.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """
        Sets the subscription_id of this CreditNote.
        { \"description\" : \"Subscription to apply the credit note to. By default credit notes are owned by the account an can be used on any subscription. Providing this value limits the credit-note to only being used on the specified subscription.\", \"verbs\":[\"POST\",\"GET\"] }

        :param subscription_id: The subscription_id of this CreditNote.
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def organization_id(self):
        """
        Gets the organization_id of this CreditNote.
        { \"description\" : \"\", \"verbs\":[] }

        :return: The organization_id of this CreditNote.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this CreditNote.
        { \"description\" : \"\", \"verbs\":[] }

        :param organization_id: The organization_id of this CreditNote.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def type(self):
        """
        Gets the type of this CreditNote.
        { \"description\" : \"\", \"verbs\":[] }

        :return: The type of this CreditNote.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this CreditNote.
        { \"description\" : \"\", \"verbs\":[] }

        :param type: The type of this CreditNote.
        :type: str
        """
        allowed_values = ["invoice", "manual"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def currency(self):
        """
        Gets the currency of this CreditNote.
        { \"description\" : \"Currency of the credit-note specified by a three character ISO 4217 currency code.\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The currency of this CreditNote.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """
        Sets the currency of this CreditNote.
        { \"description\" : \"Currency of the credit-note specified by a three character ISO 4217 currency code.\", \"verbs\":[\"POST\",\"GET\"] }

        :param currency: The currency of this CreditNote.
        :type: str
        """

        self._currency = currency

    @property
    def description(self):
        """
        Gets the description of this CreditNote.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The description of this CreditNote.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this CreditNote.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"GET\"] }

        :param description: The description of this CreditNote.
        :type: str
        """

        self._description = description

    @property
    def value(self):
        """
        Gets the value of this CreditNote.
        { \"description\" : \" Monetary value of the credit-note\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The value of this CreditNote.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this CreditNote.
        { \"description\" : \" Monetary value of the credit-note\", \"verbs\":[\"POST\",\"GET\"] }

        :param value: The value of this CreditNote.
        :type: float
        """

        self._value = value

    @property
    def remaining_value(self):
        """
        Gets the remaining_value of this CreditNote.
        { \"description\" : \"Remaining value of the payment not used. In the case when a credit-note is used across a range of invoices, each use reducing the available blance of the credit note.\", \"verbs\":[\"GET\"] }

        :return: The remaining_value of this CreditNote.
        :rtype: float
        """
        return self._remaining_value

    @remaining_value.setter
    def remaining_value(self, remaining_value):
        """
        Sets the remaining_value of this CreditNote.
        { \"description\" : \"Remaining value of the payment not used. In the case when a credit-note is used across a range of invoices, each use reducing the available blance of the credit note.\", \"verbs\":[\"GET\"] }

        :param remaining_value: The remaining_value of this CreditNote.
        :type: float
        """

        self._remaining_value = remaining_value

    @property
    def created_by(self):
        """
        Gets the created_by of this CreditNote.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :return: The created_by of this CreditNote.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """
        Sets the created_by of this CreditNote.
        { \"description\" : \"\", \"verbs\":[\"GET\"] }

        :param created_by: The created_by of this CreditNote.
        :type: str
        """

        self._created_by = created_by

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
