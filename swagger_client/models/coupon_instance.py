# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CouponInstance(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, target_id=None, coupon_code=None, date_initialised=None, valid_till=None, created=None, changed_by=None, updated=None, id=None, crm_id=None, organization_id=None, book_id=None, coupon_definition_id=None, target=None, periods_valid_for=None, total_periods=None, remaining_uses=None, instance_discount_value=None, max_remaining_uses=None, coupon_instance_existing_values=None):
        """
        CouponInstance - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'target_id': 'str',
            'coupon_code': 'str',
            'date_initialised': 'datetime',
            'valid_till': 'datetime',
            'created': 'datetime',
            'changed_by': 'str',
            'updated': 'datetime',
            'id': 'str',
            'crm_id': 'str',
            'organization_id': 'str',
            'book_id': 'str',
            'coupon_definition_id': 'str',
            'target': 'str',
            'periods_valid_for': 'int',
            'total_periods': 'int',
            'remaining_uses': 'int',
            'instance_discount_value': 'float',
            'max_remaining_uses': 'int',
            'coupon_instance_existing_values': 'list[CouponInstanceExistingValue]'
        }

        self.attribute_map = {
            'target_id': 'targetID',
            'coupon_code': 'couponCode',
            'date_initialised': 'dateInitialised',
            'valid_till': 'validTill',
            'created': 'created',
            'changed_by': 'changedBy',
            'updated': 'updated',
            'id': 'id',
            'crm_id': 'crmID',
            'organization_id': 'organizationID',
            'book_id': 'bookID',
            'coupon_definition_id': 'couponDefinitionID',
            'target': 'target',
            'periods_valid_for': 'periodsValidFor',
            'total_periods': 'totalPeriods',
            'remaining_uses': 'remainingUses',
            'instance_discount_value': 'instanceDiscountValue',
            'max_remaining_uses': 'maxRemainingUses',
            'coupon_instance_existing_values': 'couponInstanceExistingValues'
        }

        self._target_id = target_id
        self._coupon_code = coupon_code
        self._date_initialised = date_initialised
        self._valid_till = valid_till
        self._created = created
        self._changed_by = changed_by
        self._updated = updated
        self._id = id
        self._crm_id = crm_id
        self._organization_id = organization_id
        self._book_id = book_id
        self._coupon_definition_id = coupon_definition_id
        self._target = target
        self._periods_valid_for = periods_valid_for
        self._total_periods = total_periods
        self._remaining_uses = remaining_uses
        self._instance_discount_value = instance_discount_value
        self._max_remaining_uses = max_remaining_uses
        self._coupon_instance_existing_values = coupon_instance_existing_values

    @property
    def target_id(self):
        """
        Gets the target_id of this CouponInstance.
        { \"description\" : \"Target ID of the coupon-instance. If the target is subscription, this is the subscription's ID. If the target is account, this is the account's ID.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The target_id of this CouponInstance.
        :rtype: str
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """
        Sets the target_id of this CouponInstance.
        { \"description\" : \"Target ID of the coupon-instance. If the target is subscription, this is the subscription's ID. If the target is account, this is the account's ID.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param target_id: The target_id of this CouponInstance.
        :type: str
        """

        self._target_id = target_id

    @property
    def coupon_code(self):
        """
        Gets the coupon_code of this CouponInstance.
        { \"description\" : \"Code for the coupon. This code can be used to apply coupon-instances to subscriptions or accounts.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The coupon_code of this CouponInstance.
        :rtype: str
        """
        return self._coupon_code

    @coupon_code.setter
    def coupon_code(self, coupon_code):
        """
        Sets the coupon_code of this CouponInstance.
        { \"description\" : \"Code for the coupon. This code can be used to apply coupon-instances to subscriptions or accounts.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param coupon_code: The coupon_code of this CouponInstance.
        :type: str
        """

        self._coupon_code = coupon_code

    @property
    def date_initialised(self):
        """
        Gets the date_initialised of this CouponInstance.
        { \"description\" : \"The UTC DateTime the coupon was initialised.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The date_initialised of this CouponInstance.
        :rtype: datetime
        """
        return self._date_initialised

    @date_initialised.setter
    def date_initialised(self, date_initialised):
        """
        Sets the date_initialised of this CouponInstance.
        { \"description\" : \"The UTC DateTime the coupon was initialised.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param date_initialised: The date_initialised of this CouponInstance.
        :type: datetime
        """

        self._date_initialised = date_initialised

    @property
    def valid_till(self):
        """
        Gets the valid_till of this CouponInstance.
        { \"description\" : \"The UTC DateTime the coupon-instance is valid until.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The valid_till of this CouponInstance.
        :rtype: datetime
        """
        return self._valid_till

    @valid_till.setter
    def valid_till(self, valid_till):
        """
        Sets the valid_till of this CouponInstance.
        { \"description\" : \"The UTC DateTime the coupon-instance is valid until.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param valid_till: The valid_till of this CouponInstance.
        :type: datetime
        """

        self._valid_till = valid_till

    @property
    def created(self):
        """
        Gets the created of this CouponInstance.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this CouponInstance.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this CouponInstance.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this CouponInstance.
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """
        Gets the changed_by of this CouponInstance.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :return: The changed_by of this CouponInstance.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """
        Sets the changed_by of this CouponInstance.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :param changed_by: The changed_by of this CouponInstance.
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """
        Gets the updated of this CouponInstance.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :return: The updated of this CouponInstance.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this CouponInstance.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :param updated: The updated of this CouponInstance.
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """
        Gets the id of this CouponInstance.
        { \"description\" : \"ID of the coupon-instance.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The id of this CouponInstance.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CouponInstance.
        { \"description\" : \"ID of the coupon-instance.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param id: The id of this CouponInstance.
        :type: str
        """

        self._id = id

    @property
    def crm_id(self):
        """
        Gets the crm_id of this CouponInstance.
        { \"description\" : \"CRM ID of the product-rate-plan.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The crm_id of this CouponInstance.
        :rtype: str
        """
        return self._crm_id

    @crm_id.setter
    def crm_id(self, crm_id):
        """
        Sets the crm_id of this CouponInstance.
        { \"description\" : \"CRM ID of the product-rate-plan.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param crm_id: The crm_id of this CouponInstance.
        :type: str
        """

        self._crm_id = crm_id

    @property
    def organization_id(self):
        """
        Gets the organization_id of this CouponInstance.
        { \"description\" : \"Organization associated with the\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The organization_id of this CouponInstance.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this CouponInstance.
        { \"description\" : \"Organization associated with the\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param organization_id: The organization_id of this CouponInstance.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def book_id(self):
        """
        Gets the book_id of this CouponInstance.
        { \"description\" : \"ID of the coupon-book associated with the coupon-instance.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The book_id of this CouponInstance.
        :rtype: str
        """
        return self._book_id

    @book_id.setter
    def book_id(self, book_id):
        """
        Sets the book_id of this CouponInstance.
        { \"description\" : \"ID of the coupon-book associated with the coupon-instance.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param book_id: The book_id of this CouponInstance.
        :type: str
        """

        self._book_id = book_id

    @property
    def coupon_definition_id(self):
        """
        Gets the coupon_definition_id of this CouponInstance.
        { \"description\" : \"ID of the coupon-definition associated with the coupon-instance.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The coupon_definition_id of this CouponInstance.
        :rtype: str
        """
        return self._coupon_definition_id

    @coupon_definition_id.setter
    def coupon_definition_id(self, coupon_definition_id):
        """
        Sets the coupon_definition_id of this CouponInstance.
        { \"description\" : \"ID of the coupon-definition associated with the coupon-instance.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param coupon_definition_id: The coupon_definition_id of this CouponInstance.
        :type: str
        """

        self._coupon_definition_id = coupon_definition_id

    @property
    def target(self):
        """
        Gets the target of this CouponInstance.
        { \"description\" : \"Ttype of the target for the coupon-instance. Used in combination with the targetID.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The target of this CouponInstance.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """
        Sets the target of this CouponInstance.
        { \"description\" : \"Ttype of the target for the coupon-instance. Used in combination with the targetID.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param target: The target of this CouponInstance.
        :type: str
        """
        allowed_values = ["none", "subscription", "account"]
        if target not in allowed_values:
            raise ValueError(
                "Invalid value for `target` ({0}), must be one of {1}"
                .format(target, allowed_values)
            )

        self._target = target

    @property
    def periods_valid_for(self):
        """
        Gets the periods_valid_for of this CouponInstance.
        { \"description\" : \"Number of subscription periods the coupon is valid for. Unused.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The periods_valid_for of this CouponInstance.
        :rtype: int
        """
        return self._periods_valid_for

    @periods_valid_for.setter
    def periods_valid_for(self, periods_valid_for):
        """
        Sets the periods_valid_for of this CouponInstance.
        { \"description\" : \"Number of subscription periods the coupon is valid for. Unused.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param periods_valid_for: The periods_valid_for of this CouponInstance.
        :type: int
        """

        self._periods_valid_for = periods_valid_for

    @property
    def total_periods(self):
        """
        Gets the total_periods of this CouponInstance.
        { \"description\" : \"Unused.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The total_periods of this CouponInstance.
        :rtype: int
        """
        return self._total_periods

    @total_periods.setter
    def total_periods(self, total_periods):
        """
        Sets the total_periods of this CouponInstance.
        { \"description\" : \"Unused.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param total_periods: The total_periods of this CouponInstance.
        :type: int
        """

        self._total_periods = total_periods

    @property
    def remaining_uses(self):
        """
        Gets the remaining_uses of this CouponInstance.
        { \"description\" : \"The number of remaining uses the coupon-instance has left.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The remaining_uses of this CouponInstance.
        :rtype: int
        """
        return self._remaining_uses

    @remaining_uses.setter
    def remaining_uses(self, remaining_uses):
        """
        Sets the remaining_uses of this CouponInstance.
        { \"description\" : \"The number of remaining uses the coupon-instance has left.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param remaining_uses: The remaining_uses of this CouponInstance.
        :type: int
        """

        self._remaining_uses = remaining_uses

    @property
    def instance_discount_value(self):
        """
        Gets the instance_discount_value of this CouponInstance.
        { \"description\" : \"(Optional) The value to be used for dynamic price calculation, if the coupon definition has an 'instance' or 'instance_percent' coupon modifier. If it is not set, the effect amount of the coupon modifier will be used.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The instance_discount_value of this CouponInstance.
        :rtype: float
        """
        return self._instance_discount_value

    @instance_discount_value.setter
    def instance_discount_value(self, instance_discount_value):
        """
        Sets the instance_discount_value of this CouponInstance.
        { \"description\" : \"(Optional) The value to be used for dynamic price calculation, if the coupon definition has an 'instance' or 'instance_percent' coupon modifier. If it is not set, the effect amount of the coupon modifier will be used.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param instance_discount_value: The instance_discount_value of this CouponInstance.
        :type: float
        """

        self._instance_discount_value = instance_discount_value

    @property
    def max_remaining_uses(self):
        """
        Gets the max_remaining_uses of this CouponInstance.
        { \"description\" : \"The number of remaining uses the coupon-instance had upon initialisation.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The max_remaining_uses of this CouponInstance.
        :rtype: int
        """
        return self._max_remaining_uses

    @max_remaining_uses.setter
    def max_remaining_uses(self, max_remaining_uses):
        """
        Sets the max_remaining_uses of this CouponInstance.
        { \"description\" : \"The number of remaining uses the coupon-instance had upon initialisation.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param max_remaining_uses: The max_remaining_uses of this CouponInstance.
        :type: int
        """

        self._max_remaining_uses = max_remaining_uses

    @property
    def coupon_instance_existing_values(self):
        """
        Gets the coupon_instance_existing_values of this CouponInstance.
        { \"description\" : \"The collection of coupon-instance-existing-value objects associated with the coupon-instance.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The coupon_instance_existing_values of this CouponInstance.
        :rtype: list[CouponInstanceExistingValue]
        """
        return self._coupon_instance_existing_values

    @coupon_instance_existing_values.setter
    def coupon_instance_existing_values(self, coupon_instance_existing_values):
        """
        Sets the coupon_instance_existing_values of this CouponInstance.
        { \"description\" : \"The collection of coupon-instance-existing-value objects associated with the coupon-instance.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param coupon_instance_existing_values: The coupon_instance_existing_values of this CouponInstance.
        :type: list[CouponInstanceExistingValue]
        """

        self._coupon_instance_existing_values = coupon_instance_existing_values

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
