# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class QuoteRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, changed_by=None, product=None, product_rate_plan=None, account_id=None, subscription_id=None, subscription_version_id=None, quote_for=None, prorated=False, free=False, include_applied_coupons=False, period_start=None, period_end=None, remaining_credit_behaviour=None, quantities=None, coupon_codes=None, pricing_behaviour=None):
        """
        QuoteRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'changed_by': 'str',
            'product': 'str',
            'product_rate_plan': 'str',
            'account_id': 'str',
            'subscription_id': 'str',
            'subscription_version_id': 'str',
            'quote_for': 'str',
            'prorated': 'bool',
            'free': 'bool',
            'include_applied_coupons': 'bool',
            'period_start': 'datetime',
            'period_end': 'datetime',
            'remaining_credit_behaviour': 'str',
            'quantities': 'list[QuoteRequestValue]',
            'coupon_codes': 'list[str]',
            'pricing_behaviour': 'str'
        }

        self.attribute_map = {
            'created': 'created',
            'changed_by': 'changedBy',
            'product': 'product',
            'product_rate_plan': 'productRatePlan',
            'account_id': 'accountID',
            'subscription_id': 'subscriptionID',
            'subscription_version_id': 'subscriptionVersionID',
            'quote_for': 'quoteFor',
            'prorated': 'prorated',
            'free': 'free',
            'include_applied_coupons': 'includeAppliedCoupons',
            'period_start': 'periodStart',
            'period_end': 'periodEnd',
            'remaining_credit_behaviour': 'remainingCreditBehaviour',
            'quantities': 'quantities',
            'coupon_codes': 'couponCodes',
            'pricing_behaviour': 'pricingBehaviour'
        }

        self._created = created
        self._changed_by = changed_by
        self._product = product
        self._product_rate_plan = product_rate_plan
        self._account_id = account_id
        self._subscription_id = subscription_id
        self._subscription_version_id = subscription_version_id
        self._quote_for = quote_for
        self._prorated = prorated
        self._free = free
        self._include_applied_coupons = include_applied_coupons
        self._period_start = period_start
        self._period_end = period_end
        self._remaining_credit_behaviour = remaining_credit_behaviour
        self._quantities = quantities
        self._coupon_codes = coupon_codes
        self._pricing_behaviour = pricing_behaviour

    @property
    def created(self):
        """
        Gets the created of this QuoteRequest.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this QuoteRequest.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this QuoteRequest.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this QuoteRequest.
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """
        Gets the changed_by of this QuoteRequest.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :return: The changed_by of this QuoteRequest.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """
        Sets the changed_by of this QuoteRequest.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :param changed_by: The changed_by of this QuoteRequest.
        :type: str
        """

        self._changed_by = changed_by

    @property
    def product(self):
        """
        Gets the product of this QuoteRequest.
        {\"description\":\"The product for which a price quote is requested.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The product of this QuoteRequest.
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """
        Sets the product of this QuoteRequest.
        {\"description\":\"The product for which a price quote is requested.\",\"verbs\":[\"POST\",\"GET\"]}

        :param product: The product of this QuoteRequest.
        :type: str
        """

        self._product = product

    @property
    def product_rate_plan(self):
        """
        Gets the product_rate_plan of this QuoteRequest.
        {\"description\":\"The rate plan (of some product) for which a price quote is requested.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The product_rate_plan of this QuoteRequest.
        :rtype: str
        """
        return self._product_rate_plan

    @product_rate_plan.setter
    def product_rate_plan(self, product_rate_plan):
        """
        Sets the product_rate_plan of this QuoteRequest.
        {\"description\":\"The rate plan (of some product) for which a price quote is requested.\",\"verbs\":[\"POST\",\"GET\"]}

        :param product_rate_plan: The product_rate_plan of this QuoteRequest.
        :type: str
        """

        self._product_rate_plan = product_rate_plan

    @property
    def account_id(self):
        """
        Gets the account_id of this QuoteRequest.
        {\"description\":\"ID of the account for which a price quote is requested.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The account_id of this QuoteRequest.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """
        Sets the account_id of this QuoteRequest.
        {\"description\":\"ID of the account for which a price quote is requested.\",\"verbs\":[\"POST\",\"GET\"]}

        :param account_id: The account_id of this QuoteRequest.
        :type: str
        """

        self._account_id = account_id

    @property
    def subscription_id(self):
        """
        Gets the subscription_id of this QuoteRequest.
        {\"description\":\"ID of the subscription for which a price quote is requested.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The subscription_id of this QuoteRequest.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """
        Sets the subscription_id of this QuoteRequest.
        {\"description\":\"ID of the subscription for which a price quote is requested.\",\"verbs\":[\"POST\",\"GET\"]}

        :param subscription_id: The subscription_id of this QuoteRequest.
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def subscription_version_id(self):
        """
        Gets the subscription_version_id of this QuoteRequest.
        {\"description\":\"version ID of the subscription for which a price quote is requested.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The subscription_version_id of this QuoteRequest.
        :rtype: str
        """
        return self._subscription_version_id

    @subscription_version_id.setter
    def subscription_version_id(self, subscription_version_id):
        """
        Sets the subscription_version_id of this QuoteRequest.
        {\"description\":\"version ID of the subscription for which a price quote is requested.\",\"verbs\":[\"POST\",\"GET\"]}

        :param subscription_version_id: The subscription_version_id of this QuoteRequest.
        :type: str
        """

        self._subscription_version_id = subscription_version_id

    @property
    def quote_for(self):
        """
        Gets the quote_for of this QuoteRequest.
        {\"default\":\"RecurringPeriod\",\"description\":\"Subscription scenario with which the quote is concerned.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The quote_for of this QuoteRequest.
        :rtype: str
        """
        return self._quote_for

    @quote_for.setter
    def quote_for(self, quote_for):
        """
        Sets the quote_for of this QuoteRequest.
        {\"default\":\"RecurringPeriod\",\"description\":\"Subscription scenario with which the quote is concerned.\",\"verbs\":[\"POST\",\"GET\"]}

        :param quote_for: The quote_for of this QuoteRequest.
        :type: str
        """
        allowed_values = ["InitialPeriod", "RecurringPeriod", "Upgrade", "Migration"]
        if quote_for not in allowed_values:
            raise ValueError(
                "Invalid value for `quote_for` ({0}), must be one of {1}"
                .format(quote_for, allowed_values)
            )

        self._quote_for = quote_for

    @property
    def prorated(self):
        """
        Gets the prorated of this QuoteRequest.
        {\"default\":true,\"description\":\"Whether or not to pro-rate the price (if the quote concerns a time interval containing a partial period).\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The prorated of this QuoteRequest.
        :rtype: bool
        """
        return self._prorated

    @prorated.setter
    def prorated(self, prorated):
        """
        Sets the prorated of this QuoteRequest.
        {\"default\":true,\"description\":\"Whether or not to pro-rate the price (if the quote concerns a time interval containing a partial period).\",\"verbs\":[\"POST\",\"GET\"]}

        :param prorated: The prorated of this QuoteRequest.
        :type: bool
        """

        self._prorated = prorated

    @property
    def free(self):
        """
        Gets the free of this QuoteRequest.
        {\"default\":false,\"description\":\"Whether or not to present a waived final price in the quote.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The free of this QuoteRequest.
        :rtype: bool
        """
        return self._free

    @free.setter
    def free(self, free):
        """
        Sets the free of this QuoteRequest.
        {\"default\":false,\"description\":\"Whether or not to present a waived final price in the quote.\",\"verbs\":[\"POST\",\"GET\"]}

        :param free: The free of this QuoteRequest.
        :type: bool
        """

        self._free = free

    @property
    def include_applied_coupons(self):
        """
        Gets the include_applied_coupons of this QuoteRequest.
        {\"default\":true,\"description\":\"Whether or not to include coupons which have already been applied to the subscription.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The include_applied_coupons of this QuoteRequest.
        :rtype: bool
        """
        return self._include_applied_coupons

    @include_applied_coupons.setter
    def include_applied_coupons(self, include_applied_coupons):
        """
        Sets the include_applied_coupons of this QuoteRequest.
        {\"default\":true,\"description\":\"Whether or not to include coupons which have already been applied to the subscription.\",\"verbs\":[\"POST\",\"GET\"]}

        :param include_applied_coupons: The include_applied_coupons of this QuoteRequest.
        :type: bool
        """

        self._include_applied_coupons = include_applied_coupons

    @property
    def period_start(self):
        """
        Gets the period_start of this QuoteRequest.
        {\"default\":\"(Now)\",\"description\":\"The time-beginning of the interval with which the quote is concerned. This can be used to request a quote across partial or multiple periods &mdash; potentially pro-rating its price.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The period_start of this QuoteRequest.
        :rtype: datetime
        """
        return self._period_start

    @period_start.setter
    def period_start(self, period_start):
        """
        Sets the period_start of this QuoteRequest.
        {\"default\":\"(Now)\",\"description\":\"The time-beginning of the interval with which the quote is concerned. This can be used to request a quote across partial or multiple periods &mdash; potentially pro-rating its price.\",\"verbs\":[\"POST\",\"GET\"]}

        :param period_start: The period_start of this QuoteRequest.
        :type: datetime
        """

        self._period_start = period_start

    @property
    def period_end(self):
        """
        Gets the period_end of this QuoteRequest.
        {\"default\":\"(End of current period)\",\"description\":\"The time-ending of the interval with which the quote is concerned. This can be used to request a quote across partial or multiple periods &mdash; potentially pro-rating its price.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The period_end of this QuoteRequest.
        :rtype: datetime
        """
        return self._period_end

    @period_end.setter
    def period_end(self, period_end):
        """
        Sets the period_end of this QuoteRequest.
        {\"default\":\"(End of current period)\",\"description\":\"The time-ending of the interval with which the quote is concerned. This can be used to request a quote across partial or multiple periods &mdash; potentially pro-rating its price.\",\"verbs\":[\"POST\",\"GET\"]}

        :param period_end: The period_end of this QuoteRequest.
        :type: datetime
        """

        self._period_end = period_end

    @property
    def remaining_credit_behaviour(self):
        """
        Gets the remaining_credit_behaviour of this QuoteRequest.
        {\"default\":\"<span class=\\\"label label-default\\\">Rollover</span>\",\"description\":\"Defines the behaviour applied to any outstanding credit resulting from the application of the charge..<br><span class=\\\"label label-default\\\">Rollover</span> &mdash; Outstanding credit is returned to the accounts credit pool.<br><span class=\\\"label label-default\\\">Discard</span> &mdash; Outstanding credit is lost.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The remaining_credit_behaviour of this QuoteRequest.
        :rtype: str
        """
        return self._remaining_credit_behaviour

    @remaining_credit_behaviour.setter
    def remaining_credit_behaviour(self, remaining_credit_behaviour):
        """
        Sets the remaining_credit_behaviour of this QuoteRequest.
        {\"default\":\"<span class=\\\"label label-default\\\">Rollover</span>\",\"description\":\"Defines the behaviour applied to any outstanding credit resulting from the application of the charge..<br><span class=\\\"label label-default\\\">Rollover</span> &mdash; Outstanding credit is returned to the accounts credit pool.<br><span class=\\\"label label-default\\\">Discard</span> &mdash; Outstanding credit is lost.\",\"verbs\":[\"POST\",\"GET\"]}

        :param remaining_credit_behaviour: The remaining_credit_behaviour of this QuoteRequest.
        :type: str
        """
        allowed_values = ["Rollover", "Discard"]
        if remaining_credit_behaviour not in allowed_values:
            raise ValueError(
                "Invalid value for `remaining_credit_behaviour` ({0}), must be one of {1}"
                .format(remaining_credit_behaviour, allowed_values)
            )

        self._remaining_credit_behaviour = remaining_credit_behaviour

    @property
    def quantities(self):
        """
        Gets the quantities of this QuoteRequest.
        {\"description\":\"A list of pricing components (and their values) to consider in calculating the quote.\",\"verbs\":[\"POST\"]}

        :return: The quantities of this QuoteRequest.
        :rtype: list[QuoteRequestValue]
        """
        return self._quantities

    @quantities.setter
    def quantities(self, quantities):
        """
        Sets the quantities of this QuoteRequest.
        {\"description\":\"A list of pricing components (and their values) to consider in calculating the quote.\",\"verbs\":[\"POST\"]}

        :param quantities: The quantities of this QuoteRequest.
        :type: list[QuoteRequestValue]
        """

        self._quantities = quantities

    @property
    def coupon_codes(self):
        """
        Gets the coupon_codes of this QuoteRequest.
        {\"description\":\"A list of coupon codes to consider in calculating the quote.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The coupon_codes of this QuoteRequest.
        :rtype: list[str]
        """
        return self._coupon_codes

    @coupon_codes.setter
    def coupon_codes(self, coupon_codes):
        """
        Sets the coupon_codes of this QuoteRequest.
        {\"description\":\"A list of coupon codes to consider in calculating the quote.\",\"verbs\":[\"POST\",\"GET\"]}

        :param coupon_codes: The coupon_codes of this QuoteRequest.
        :type: list[str]
        """

        self._coupon_codes = coupon_codes

    @property
    def pricing_behaviour(self):
        """
        Gets the pricing_behaviour of this QuoteRequest.
        { \"description\" : \"Pricing behaviour defines how migration charges are calculated. <span class=\\\"label label-default\\\">DifferenceProRated</span> calculates the difference between in-advance charges of the existing and new rate-plan, then pro-rates based on time remaining. <span class=\\\"label label-default\\\">None</span> sets the migration charge as zero cost. <span class=\\\"label label-default\\\">Full</span> sets the costs as the total of the new rate-plans in-advance charges.  <span class=\\\"label label-default\\\">Difference</span> is the same calculation as <span class=\\\"label label-default\\\">DifferenceProRated</span> but no pro-ration is applied.  <span class=\\\"label label-default\\\">ProRated</span> differs depending on two cases; when moving to a rate-plan of the same duration it pro-rates the in-advance charges of the new rate-plan. If the duration is different, a credit-note will be issued any remaining time on the existing plans billing period.\", \"default\" : \"DifferenceProRated\",  \"verbs\":[\"POST\",\"GET\"] }

        :return: The pricing_behaviour of this QuoteRequest.
        :rtype: str
        """
        return self._pricing_behaviour

    @pricing_behaviour.setter
    def pricing_behaviour(self, pricing_behaviour):
        """
        Sets the pricing_behaviour of this QuoteRequest.
        { \"description\" : \"Pricing behaviour defines how migration charges are calculated. <span class=\\\"label label-default\\\">DifferenceProRated</span> calculates the difference between in-advance charges of the existing and new rate-plan, then pro-rates based on time remaining. <span class=\\\"label label-default\\\">None</span> sets the migration charge as zero cost. <span class=\\\"label label-default\\\">Full</span> sets the costs as the total of the new rate-plans in-advance charges.  <span class=\\\"label label-default\\\">Difference</span> is the same calculation as <span class=\\\"label label-default\\\">DifferenceProRated</span> but no pro-ration is applied.  <span class=\\\"label label-default\\\">ProRated</span> differs depending on two cases; when moving to a rate-plan of the same duration it pro-rates the in-advance charges of the new rate-plan. If the duration is different, a credit-note will be issued any remaining time on the existing plans billing period.\", \"default\" : \"DifferenceProRated\",  \"verbs\":[\"POST\",\"GET\"] }

        :param pricing_behaviour: The pricing_behaviour of this QuoteRequest.
        :type: str
        """
        allowed_values = ["None", "Full", "Difference", "DifferenceProRated", "ProRated"]
        if pricing_behaviour not in allowed_values:
            raise ValueError(
                "Invalid value for `pricing_behaviour` ({0}), must be one of {1}"
                .format(pricing_behaviour, allowed_values)
            )

        self._pricing_behaviour = pricing_behaviour

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
