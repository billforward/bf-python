# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Refund(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, changed_by=None, updated=None, id=None, organization_id=None, account_id=None, reason=None, nominal_value=None, value=None, refunded=None, actual_value=None, nominal_refunded_value=None, actual_refunded_value=None, refund_state=None, refund_type=None, refund_nature=None, refund_completed=None, currency=None, payment_method_id=None, invoice_payment_id=None, refund_invoice_payment_id=None, original_payment_id=None, original_gateway_payment_reference=None, refund_payment_id=None, invoice_id=None, receipt_id=None, original_receipt_id=None, created_by=None):
        """
        Refund - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'changed_by': 'str',
            'updated': 'datetime',
            'id': 'str',
            'organization_id': 'str',
            'account_id': 'str',
            'reason': 'str',
            'nominal_value': 'float',
            'value': 'float',
            'refunded': 'float',
            'actual_value': 'float',
            'nominal_refunded_value': 'float',
            'actual_refunded_value': 'float',
            'refund_state': 'str',
            'refund_type': 'str',
            'refund_nature': 'str',
            'refund_completed': 'datetime',
            'currency': 'str',
            'payment_method_id': 'str',
            'invoice_payment_id': 'str',
            'refund_invoice_payment_id': 'str',
            'original_payment_id': 'str',
            'original_gateway_payment_reference': 'str',
            'refund_payment_id': 'str',
            'invoice_id': 'str',
            'receipt_id': 'str',
            'original_receipt_id': 'str',
            'created_by': 'str'
        }

        self.attribute_map = {
            'created': 'created',
            'changed_by': 'changedBy',
            'updated': 'updated',
            'id': 'id',
            'organization_id': 'organizationID',
            'account_id': 'accountID',
            'reason': 'reason',
            'nominal_value': 'nominalValue',
            'value': 'value',
            'refunded': 'refunded',
            'actual_value': 'actualValue',
            'nominal_refunded_value': 'nominalRefundedValue',
            'actual_refunded_value': 'actualRefundedValue',
            'refund_state': 'refundState',
            'refund_type': 'refundType',
            'refund_nature': 'refundNature',
            'refund_completed': 'refundCompleted',
            'currency': 'currency',
            'payment_method_id': 'paymentMethodID',
            'invoice_payment_id': 'invoicePaymentID',
            'refund_invoice_payment_id': 'refundInvoicePaymentID',
            'original_payment_id': 'originalPaymentID',
            'original_gateway_payment_reference': 'originalGatewayPaymentReference',
            'refund_payment_id': 'refundPaymentID',
            'invoice_id': 'invoiceID',
            'receipt_id': 'receiptID',
            'original_receipt_id': 'originalReceiptID',
            'created_by': 'createdBy'
        }

        self._created = created
        self._changed_by = changed_by
        self._updated = updated
        self._id = id
        self._organization_id = organization_id
        self._account_id = account_id
        self._reason = reason
        self._nominal_value = nominal_value
        self._value = value
        self._refunded = refunded
        self._actual_value = actual_value
        self._nominal_refunded_value = nominal_refunded_value
        self._actual_refunded_value = actual_refunded_value
        self._refund_state = refund_state
        self._refund_type = refund_type
        self._refund_nature = refund_nature
        self._refund_completed = refund_completed
        self._currency = currency
        self._payment_method_id = payment_method_id
        self._invoice_payment_id = invoice_payment_id
        self._refund_invoice_payment_id = refund_invoice_payment_id
        self._original_payment_id = original_payment_id
        self._original_gateway_payment_reference = original_gateway_payment_reference
        self._refund_payment_id = refund_payment_id
        self._invoice_id = invoice_id
        self._receipt_id = receipt_id
        self._original_receipt_id = original_receipt_id
        self._created_by = created_by

    @property
    def created(self):
        """
        Gets the created of this Refund.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this Refund.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this Refund.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this Refund.
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """
        Gets the changed_by of this Refund.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :return: The changed_by of this Refund.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """
        Sets the changed_by of this Refund.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :param changed_by: The changed_by of this Refund.
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """
        Gets the updated of this Refund.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :return: The updated of this Refund.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this Refund.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :param updated: The updated of this Refund.
        :type: datetime
        """

        self._updated = updated

    @property
    def id(self):
        """
        Gets the id of this Refund.
        { \"description\" : \"\", \"verbs\":[\"GET\", \"PUT\"] }

        :return: The id of this Refund.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Refund.
        { \"description\" : \"\", \"verbs\":[\"GET\", \"PUT\"] }

        :param id: The id of this Refund.
        :type: str
        """

        self._id = id

    @property
    def organization_id(self):
        """
        Gets the organization_id of this Refund.
        { \"description\" : \"\", \"verbs\":[] }

        :return: The organization_id of this Refund.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this Refund.
        { \"description\" : \"\", \"verbs\":[] }

        :param organization_id: The organization_id of this Refund.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def account_id(self):
        """
        Gets the account_id of this Refund.
        { \"description\" : \"Identifier of account to refund.\", \"verbs\":[\"GET\"] }

        :return: The account_id of this Refund.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """
        Sets the account_id of this Refund.
        { \"description\" : \"Identifier of account to refund.\", \"verbs\":[\"GET\"] }

        :param account_id: The account_id of this Refund.
        :type: str
        """

        self._account_id = account_id

    @property
    def reason(self):
        """
        Gets the reason of this Refund.
        { \"description\" : \"The reason for the refund.\", \"verbs\":[\"GET\"] }

        :return: The reason of this Refund.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """
        Sets the reason of this Refund.
        { \"description\" : \"The reason for the refund.\", \"verbs\":[\"GET\"] }

        :param reason: The reason of this Refund.
        :type: str
        """

        self._reason = reason

    @property
    def nominal_value(self):
        """
        Gets the nominal_value of this Refund.
        { \"description\" : \"\", \"verbs\":[] }

        :return: The nominal_value of this Refund.
        :rtype: float
        """
        return self._nominal_value

    @nominal_value.setter
    def nominal_value(self, nominal_value):
        """
        Sets the nominal_value of this Refund.
        { \"description\" : \"\", \"verbs\":[] }

        :param nominal_value: The nominal_value of this Refund.
        :type: float
        """

        self._nominal_value = nominal_value

    @property
    def value(self):
        """
        Gets the value of this Refund.
        { \"description\" : \"Positive decimal representing the total value to refund. This is at most the amount un-refunded on the payment. If amount is the total payment amount is refunded.\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The value of this Refund.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this Refund.
        { \"description\" : \"Positive decimal representing the total value to refund. This is at most the amount un-refunded on the payment. If amount is the total payment amount is refunded.\", \"verbs\":[\"POST\",\"GET\"] }

        :param value: The value of this Refund.
        :type: float
        """

        self._value = value

    @property
    def refunded(self):
        """
        Gets the refunded of this Refund.
        { \"description\" : \"Value refunded\", \"verbs\":[\"GET\"] }

        :return: The refunded of this Refund.
        :rtype: float
        """
        return self._refunded

    @refunded.setter
    def refunded(self, refunded):
        """
        Sets the refunded of this Refund.
        { \"description\" : \"Value refunded\", \"verbs\":[\"GET\"] }

        :param refunded: The refunded of this Refund.
        :type: float
        """

        self._refunded = refunded

    @property
    def actual_value(self):
        """
        Gets the actual_value of this Refund.
        { \"description\" : \"\", \"verbs\":[] }

        :return: The actual_value of this Refund.
        :rtype: float
        """
        return self._actual_value

    @actual_value.setter
    def actual_value(self, actual_value):
        """
        Sets the actual_value of this Refund.
        { \"description\" : \"\", \"verbs\":[] }

        :param actual_value: The actual_value of this Refund.
        :type: float
        """

        self._actual_value = actual_value

    @property
    def nominal_refunded_value(self):
        """
        Gets the nominal_refunded_value of this Refund.
        { \"description\" : \"Nominal value refunded.\", \"verbs\":[] }

        :return: The nominal_refunded_value of this Refund.
        :rtype: float
        """
        return self._nominal_refunded_value

    @nominal_refunded_value.setter
    def nominal_refunded_value(self, nominal_refunded_value):
        """
        Sets the nominal_refunded_value of this Refund.
        { \"description\" : \"Nominal value refunded.\", \"verbs\":[] }

        :param nominal_refunded_value: The nominal_refunded_value of this Refund.
        :type: float
        """

        self._nominal_refunded_value = nominal_refunded_value

    @property
    def actual_refunded_value(self):
        """
        Gets the actual_refunded_value of this Refund.
        { \"description\" : \"Refunded amount\", \"verbs\":[] }

        :return: The actual_refunded_value of this Refund.
        :rtype: float
        """
        return self._actual_refunded_value

    @actual_refunded_value.setter
    def actual_refunded_value(self, actual_refunded_value):
        """
        Sets the actual_refunded_value of this Refund.
        { \"description\" : \"Refunded amount\", \"verbs\":[] }

        :param actual_refunded_value: The actual_refunded_value of this Refund.
        :type: float
        """

        self._actual_refunded_value = actual_refunded_value

    @property
    def refund_state(self):
        """
        Gets the refund_state of this Refund.
        { \"default\" : \"AwaitingRefund\", \"PUT_description\" : \"<span class=\\\"label label-default\\\">Pending</span> refunds can be set to <span class=\\\"label label-default\\\">AwaitingRefund</span> to initiate the refund or <span class=\\\"label label-default\\\">Cancelled</span> to stop the refund.\", \"description\" : \"Initially a refund is in the <span class=\\\"label label-default\\\">AwaitingRefund</span> state. Once the funds are successfully returned the state is <span class=\\\"label label-default\\\">Refunded</span>. If the refund fails or is rejected is it set as <span class=\\\"label label-default\\\">Failed</span>. Refunds can be set to a <span class=\\\"label label-default\\\">Pending</span> state to support authorization flows, and will leave the refund pending until updated to <span class=\\\"label label-default\\\">AwaitingRefund</span>. <span class=\\\"label label-default\\\">Cancelled</span> is when a refund will not be executed.\", \"verbs\":[\"GET\", \"POST\", \"PUT\"] }

        :return: The refund_state of this Refund.
        :rtype: str
        """
        return self._refund_state

    @refund_state.setter
    def refund_state(self, refund_state):
        """
        Sets the refund_state of this Refund.
        { \"default\" : \"AwaitingRefund\", \"PUT_description\" : \"<span class=\\\"label label-default\\\">Pending</span> refunds can be set to <span class=\\\"label label-default\\\">AwaitingRefund</span> to initiate the refund or <span class=\\\"label label-default\\\">Cancelled</span> to stop the refund.\", \"description\" : \"Initially a refund is in the <span class=\\\"label label-default\\\">AwaitingRefund</span> state. Once the funds are successfully returned the state is <span class=\\\"label label-default\\\">Refunded</span>. If the refund fails or is rejected is it set as <span class=\\\"label label-default\\\">Failed</span>. Refunds can be set to a <span class=\\\"label label-default\\\">Pending</span> state to support authorization flows, and will leave the refund pending until updated to <span class=\\\"label label-default\\\">AwaitingRefund</span>. <span class=\\\"label label-default\\\">Cancelled</span> is when a refund will not be executed.\", \"verbs\":[\"GET\", \"POST\", \"PUT\"] }

        :param refund_state: The refund_state of this Refund.
        :type: str
        """
        allowed_values = ["Pending", "AwaitingRefund", "Refunded", "Cancelled", "Failed"]
        if refund_state not in allowed_values:
            raise ValueError(
                "Invalid value for `refund_state` ({0}), must be one of {1}"
                .format(refund_state, allowed_values)
            )

        self._refund_state = refund_state

    @property
    def refund_type(self):
        """
        Gets the refund_type of this Refund.
        { \"description\" : \"This is the type of refund. Refunds are associated with either an invoice and payment, a payment or unreferenced.\", \"verbs\":[] }

        :return: The refund_type of this Refund.
        :rtype: str
        """
        return self._refund_type

    @refund_type.setter
    def refund_type(self, refund_type):
        """
        Sets the refund_type of this Refund.
        { \"description\" : \"This is the type of refund. Refunds are associated with either an invoice and payment, a payment or unreferenced.\", \"verbs\":[] }

        :param refund_type: The refund_type of this Refund.
        :type: str
        """
        allowed_values = ["InvoicePayment", "Payment"]
        if refund_type not in allowed_values:
            raise ValueError(
                "Invalid value for `refund_type` ({0}), must be one of {1}"
                .format(refund_type, allowed_values)
            )

        self._refund_type = refund_type

    @property
    def refund_nature(self):
        """
        Gets the refund_nature of this Refund.
        {\"default\":\"<span class=\\\"label label-default\\\">SingleAttempt</span>\",\"description\":The mechanism by which credit is returned to the customer:<br><span class=\\\"label label-default\\\">Void</span> &mdash; The original authorized payment is voided before capture.<br><span class=\\\"label label-default\\\">Refund</span> &mdash; A refund is issued against an already-captured payment.\",\"verbs\":[\"GET\"]}

        :return: The refund_nature of this Refund.
        :rtype: str
        """
        return self._refund_nature

    @refund_nature.setter
    def refund_nature(self, refund_nature):
        """
        Sets the refund_nature of this Refund.
        {\"default\":\"<span class=\\\"label label-default\\\">SingleAttempt</span>\",\"description\":The mechanism by which credit is returned to the customer:<br><span class=\\\"label label-default\\\">Void</span> &mdash; The original authorized payment is voided before capture.<br><span class=\\\"label label-default\\\">Refund</span> &mdash; A refund is issued against an already-captured payment.\",\"verbs\":[\"GET\"]}

        :param refund_nature: The refund_nature of this Refund.
        :type: str
        """
        allowed_values = ["Refund", "Void"]
        if refund_nature not in allowed_values:
            raise ValueError(
                "Invalid value for `refund_nature` ({0}), must be one of {1}"
                .format(refund_nature, allowed_values)
            )

        self._refund_nature = refund_nature

    @property
    def refund_completed(self):
        """
        Gets the refund_completed of this Refund.
        { \"description\" : \"When the refund was completed\", \"verbs\":[\"GET\"] }

        :return: The refund_completed of this Refund.
        :rtype: datetime
        """
        return self._refund_completed

    @refund_completed.setter
    def refund_completed(self, refund_completed):
        """
        Sets the refund_completed of this Refund.
        { \"description\" : \"When the refund was completed\", \"verbs\":[\"GET\"] }

        :param refund_completed: The refund_completed of this Refund.
        :type: datetime
        """

        self._refund_completed = refund_completed

    @property
    def currency(self):
        """
        Gets the currency of this Refund.
        { \"description\" : \"Currency of the refund specified by a three character ISO 4217 currency code.\", \"verbs\":[\"GET\"] }

        :return: The currency of this Refund.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """
        Sets the currency of this Refund.
        { \"description\" : \"Currency of the refund specified by a three character ISO 4217 currency code.\", \"verbs\":[\"GET\"] }

        :param currency: The currency of this Refund.
        :type: str
        """

        self._currency = currency

    @property
    def payment_method_id(self):
        """
        Gets the payment_method_id of this Refund.
        { \"description\" : \"Payment method to refund from\", \"verbs\":[\"GET\"] }

        :return: The payment_method_id of this Refund.
        :rtype: str
        """
        return self._payment_method_id

    @payment_method_id.setter
    def payment_method_id(self, payment_method_id):
        """
        Sets the payment_method_id of this Refund.
        { \"description\" : \"Payment method to refund from\", \"verbs\":[\"GET\"] }

        :param payment_method_id: The payment_method_id of this Refund.
        :type: str
        """

        self._payment_method_id = payment_method_id

    @property
    def invoice_payment_id(self):
        """
        Gets the invoice_payment_id of this Refund.
        { \"description\" : \"Invoice payment to refund\", \"verbs\":[\"POST\", \"GET\"] }

        :return: The invoice_payment_id of this Refund.
        :rtype: str
        """
        return self._invoice_payment_id

    @invoice_payment_id.setter
    def invoice_payment_id(self, invoice_payment_id):
        """
        Sets the invoice_payment_id of this Refund.
        { \"description\" : \"Invoice payment to refund\", \"verbs\":[\"POST\", \"GET\"] }

        :param invoice_payment_id: The invoice_payment_id of this Refund.
        :type: str
        """

        self._invoice_payment_id = invoice_payment_id

    @property
    def refund_invoice_payment_id(self):
        """
        Gets the refund_invoice_payment_id of this Refund.
        { \"description\" : \"\", \"verbs\":[] }

        :return: The refund_invoice_payment_id of this Refund.
        :rtype: str
        """
        return self._refund_invoice_payment_id

    @refund_invoice_payment_id.setter
    def refund_invoice_payment_id(self, refund_invoice_payment_id):
        """
        Sets the refund_invoice_payment_id of this Refund.
        { \"description\" : \"\", \"verbs\":[] }

        :param refund_invoice_payment_id: The refund_invoice_payment_id of this Refund.
        :type: str
        """

        self._refund_invoice_payment_id = refund_invoice_payment_id

    @property
    def original_payment_id(self):
        """
        Gets the original_payment_id of this Refund.
        { \"description\" : \"Original payment being refunded.\", \"verbs\":[\"GET\"] }

        :return: The original_payment_id of this Refund.
        :rtype: str
        """
        return self._original_payment_id

    @original_payment_id.setter
    def original_payment_id(self, original_payment_id):
        """
        Sets the original_payment_id of this Refund.
        { \"description\" : \"Original payment being refunded.\", \"verbs\":[\"GET\"] }

        :param original_payment_id: The original_payment_id of this Refund.
        :type: str
        """

        self._original_payment_id = original_payment_id

    @property
    def original_gateway_payment_reference(self):
        """
        Gets the original_gateway_payment_reference of this Refund.
        { \"description\" : \"Reference in the gateway to the payment being refunded.\", \"verbs\":[\"GET\"] }

        :return: The original_gateway_payment_reference of this Refund.
        :rtype: str
        """
        return self._original_gateway_payment_reference

    @original_gateway_payment_reference.setter
    def original_gateway_payment_reference(self, original_gateway_payment_reference):
        """
        Sets the original_gateway_payment_reference of this Refund.
        { \"description\" : \"Reference in the gateway to the payment being refunded.\", \"verbs\":[\"GET\"] }

        :param original_gateway_payment_reference: The original_gateway_payment_reference of this Refund.
        :type: str
        """

        self._original_gateway_payment_reference = original_gateway_payment_reference

    @property
    def refund_payment_id(self):
        """
        Gets the refund_payment_id of this Refund.
        { \"description\" : \"Identifier for the payment used to refund\", \"verbs\":[\"GET\"] }

        :return: The refund_payment_id of this Refund.
        :rtype: str
        """
        return self._refund_payment_id

    @refund_payment_id.setter
    def refund_payment_id(self, refund_payment_id):
        """
        Sets the refund_payment_id of this Refund.
        { \"description\" : \"Identifier for the payment used to refund\", \"verbs\":[\"GET\"] }

        :param refund_payment_id: The refund_payment_id of this Refund.
        :type: str
        """

        self._refund_payment_id = refund_payment_id

    @property
    def invoice_id(self):
        """
        Gets the invoice_id of this Refund.
        { \"description\" : \"Invoice to refund.\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The invoice_id of this Refund.
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """
        Sets the invoice_id of this Refund.
        { \"description\" : \"Invoice to refund.\", \"verbs\":[\"POST\",\"GET\"] }

        :param invoice_id: The invoice_id of this Refund.
        :type: str
        """

        self._invoice_id = invoice_id

    @property
    def receipt_id(self):
        """
        Gets the receipt_id of this Refund.
        { \"description\" : \"ID of the receipt for this refund.\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The receipt_id of this Refund.
        :rtype: str
        """
        return self._receipt_id

    @receipt_id.setter
    def receipt_id(self, receipt_id):
        """
        Sets the receipt_id of this Refund.
        { \"description\" : \"ID of the receipt for this refund.\", \"verbs\":[\"POST\",\"GET\"] }

        :param receipt_id: The receipt_id of this Refund.
        :type: str
        """

        self._receipt_id = receipt_id

    @property
    def original_receipt_id(self):
        """
        Gets the original_receipt_id of this Refund.
        { \"description\" : \"ID of the receipt for the successful payment that this entity refunds.\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The original_receipt_id of this Refund.
        :rtype: str
        """
        return self._original_receipt_id

    @original_receipt_id.setter
    def original_receipt_id(self, original_receipt_id):
        """
        Sets the original_receipt_id of this Refund.
        { \"description\" : \"ID of the receipt for the successful payment that this entity refunds.\", \"verbs\":[\"POST\",\"GET\"] }

        :param original_receipt_id: The original_receipt_id of this Refund.
        :type: str
        """

        self._original_receipt_id = original_receipt_id

    @property
    def created_by(self):
        """
        Gets the created_by of this Refund.
        { \"description\" : \"Refund requested by this account\", \"verbs\":[\"GET\"] }

        :return: The created_by of this Refund.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """
        Sets the created_by of this Refund.
        { \"description\" : \"Refund requested by this account\", \"verbs\":[\"GET\"] }

        :param created_by: The created_by of this Refund.
        :type: str
        """

        self._created_by = created_by

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
