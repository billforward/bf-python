# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Client(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, changed_by=None, updated=None, client_id=None, client_secret=None, organization_id=None, scope=None, resource_ids=None, authorized_grant_types=None, registered_redirect_uris=None, authorities=None, access_token_validity_seconds=None, refresh_token_validity_seconds=None, deleted=False):
        """
        Client - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'changed_by': 'str',
            'updated': 'datetime',
            'client_id': 'str',
            'client_secret': 'str',
            'organization_id': 'str',
            'scope': 'str',
            'resource_ids': 'str',
            'authorized_grant_types': 'str',
            'registered_redirect_uris': 'str',
            'authorities': 'str',
            'access_token_validity_seconds': 'int',
            'refresh_token_validity_seconds': 'int',
            'deleted': 'bool'
        }

        self.attribute_map = {
            'created': 'created',
            'changed_by': 'changedBy',
            'updated': 'updated',
            'client_id': 'clientId',
            'client_secret': 'clientSecret',
            'organization_id': 'organizationID',
            'scope': 'scope',
            'resource_ids': 'resourceIds',
            'authorized_grant_types': 'authorizedGrantTypes',
            'registered_redirect_uris': 'registeredRedirectUris',
            'authorities': 'authorities',
            'access_token_validity_seconds': 'accessTokenValiditySeconds',
            'refresh_token_validity_seconds': 'refreshTokenValiditySeconds',
            'deleted': 'deleted'
        }

        self._created = created
        self._changed_by = changed_by
        self._updated = updated
        self._client_id = client_id
        self._client_secret = client_secret
        self._organization_id = organization_id
        self._scope = scope
        self._resource_ids = resource_ids
        self._authorized_grant_types = authorized_grant_types
        self._registered_redirect_uris = registered_redirect_uris
        self._authorities = authorities
        self._access_token_validity_seconds = access_token_validity_seconds
        self._refresh_token_validity_seconds = refresh_token_validity_seconds
        self._deleted = deleted

    @property
    def created(self):
        """
        Gets the created of this Client.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this Client.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this Client.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this Client.
        :type: datetime
        """

        self._created = created

    @property
    def changed_by(self):
        """
        Gets the changed_by of this Client.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :return: The changed_by of this Client.
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """
        Sets the changed_by of this Client.
        { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }

        :param changed_by: The changed_by of this Client.
        :type: str
        """

        self._changed_by = changed_by

    @property
    def updated(self):
        """
        Gets the updated of this Client.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :return: The updated of this Client.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this Client.
        { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }

        :param updated: The updated of this Client.
        :type: datetime
        """

        self._updated = updated

    @property
    def client_id(self):
        """
        Gets the client_id of this Client.
        { \"description\" : \"ID of the OAuth2 client.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The client_id of this Client.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """
        Sets the client_id of this Client.
        { \"description\" : \"ID of the OAuth2 client.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param client_id: The client_id of this Client.
        :type: str
        """

        self._client_id = client_id

    @property
    def client_secret(self):
        """
        Gets the client_secret of this Client.
        { \"description\" : \"Unique Client Secret of the client. This is used as the OAuth2 Client secret\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The client_secret of this Client.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """
        Sets the client_secret of this Client.
        { \"description\" : \"Unique Client Secret of the client. This is used as the OAuth2 Client secret\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param client_secret: The client_secret of this Client.
        :type: str
        """

        self._client_secret = client_secret

    @property
    def organization_id(self):
        """
        Gets the organization_id of this Client.
        { \"description\" : \"Organization associated with the client.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The organization_id of this Client.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this Client.
        { \"description\" : \"Organization associated with the client.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param organization_id: The organization_id of this Client.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def scope(self):
        """
        Gets the scope of this Client.
        { \"description\" : \"Scopes associated with the client.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The scope of this Client.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """
        Sets the scope of this Client.
        { \"description\" : \"Scopes associated with the client.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param scope: The scope of this Client.
        :type: str
        """

        self._scope = scope

    @property
    def resource_ids(self):
        """
        Gets the resource_ids of this Client.
        { \"description\" : \"Resources associated with the client.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The resource_ids of this Client.
        :rtype: str
        """
        return self._resource_ids

    @resource_ids.setter
    def resource_ids(self, resource_ids):
        """
        Sets the resource_ids of this Client.
        { \"description\" : \"Resources associated with the client.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param resource_ids: The resource_ids of this Client.
        :type: str
        """

        self._resource_ids = resource_ids

    @property
    def authorized_grant_types(self):
        """
        Gets the authorized_grant_types of this Client.
        { \"description\" : \"Oauth2 Grant Types which may be used when authenticating with the client.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The authorized_grant_types of this Client.
        :rtype: str
        """
        return self._authorized_grant_types

    @authorized_grant_types.setter
    def authorized_grant_types(self, authorized_grant_types):
        """
        Sets the authorized_grant_types of this Client.
        { \"description\" : \"Oauth2 Grant Types which may be used when authenticating with the client.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param authorized_grant_types: The authorized_grant_types of this Client.
        :type: str
        """

        self._authorized_grant_types = authorized_grant_types

    @property
    def registered_redirect_uris(self):
        """
        Gets the registered_redirect_uris of this Client.
        { \"description\" : \"Registered Redirect URIs associated with the client.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The registered_redirect_uris of this Client.
        :rtype: str
        """
        return self._registered_redirect_uris

    @registered_redirect_uris.setter
    def registered_redirect_uris(self, registered_redirect_uris):
        """
        Sets the registered_redirect_uris of this Client.
        { \"description\" : \"Registered Redirect URIs associated with the client.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param registered_redirect_uris: The registered_redirect_uris of this Client.
        :type: str
        """

        self._registered_redirect_uris = registered_redirect_uris

    @property
    def authorities(self):
        """
        Gets the authorities of this Client.
        { \"description\" : \"Authorities associated with the client.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The authorities of this Client.
        :rtype: str
        """
        return self._authorities

    @authorities.setter
    def authorities(self, authorities):
        """
        Sets the authorities of this Client.
        { \"description\" : \"Authorities associated with the client.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param authorities: The authorities of this Client.
        :type: str
        """

        self._authorities = authorities

    @property
    def access_token_validity_seconds(self):
        """
        Gets the access_token_validity_seconds of this Client.
        { \"description\" : \"The amount of time in seconds that an access token for the client is valid.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The access_token_validity_seconds of this Client.
        :rtype: int
        """
        return self._access_token_validity_seconds

    @access_token_validity_seconds.setter
    def access_token_validity_seconds(self, access_token_validity_seconds):
        """
        Sets the access_token_validity_seconds of this Client.
        { \"description\" : \"The amount of time in seconds that an access token for the client is valid.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param access_token_validity_seconds: The access_token_validity_seconds of this Client.
        :type: int
        """

        self._access_token_validity_seconds = access_token_validity_seconds

    @property
    def refresh_token_validity_seconds(self):
        """
        Gets the refresh_token_validity_seconds of this Client.
        { \"description\" : \"The amount of time in seconds that a refresh token for the client is valid.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The refresh_token_validity_seconds of this Client.
        :rtype: int
        """
        return self._refresh_token_validity_seconds

    @refresh_token_validity_seconds.setter
    def refresh_token_validity_seconds(self, refresh_token_validity_seconds):
        """
        Sets the refresh_token_validity_seconds of this Client.
        { \"description\" : \"The amount of time in seconds that a refresh token for the client is valid.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param refresh_token_validity_seconds: The refresh_token_validity_seconds of this Client.
        :type: int
        """

        self._refresh_token_validity_seconds = refresh_token_validity_seconds

    @property
    def deleted(self):
        """
        Gets the deleted of this Client.
        { \"description\" : \"Indicates if a client has been retired. If a client has been retired it can still be retrieved using the appropriate flag on API requests.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :return: The deleted of this Client.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """
        Sets the deleted of this Client.
        { \"description\" : \"Indicates if a client has been retired. If a client has been retired it can still be retrieved using the appropriate flag on API requests.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }

        :param deleted: The deleted of this Client.
        :type: bool
        """

        self._deleted = deleted

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
