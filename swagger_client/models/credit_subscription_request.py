# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CreditSubscriptionRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, organization_id=None, value=None, invoice_id=None, description=None):
        """
        CreditSubscriptionRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'organization_id': 'str',
            'value': 'float',
            'invoice_id': 'str',
            'description': 'str'
        }

        self.attribute_map = {
            'created': 'created',
            'organization_id': 'organizationID',
            'value': 'value',
            'invoice_id': 'invoiceID',
            'description': 'description'
        }

        self._created = created
        self._organization_id = organization_id
        self._value = value
        self._invoice_id = invoice_id
        self._description = description

    @property
    def created(self):
        """
        Gets the created of this CreditSubscriptionRequest.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this CreditSubscriptionRequest.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this CreditSubscriptionRequest.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this CreditSubscriptionRequest.
        :type: datetime
        """

        self._created = created

    @property
    def organization_id(self):
        """
        Gets the organization_id of this CreditSubscriptionRequest.
        { \"description\" : \"\", \"verbs\":[] }

        :return: The organization_id of this CreditSubscriptionRequest.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this CreditSubscriptionRequest.
        { \"description\" : \"\", \"verbs\":[] }

        :param organization_id: The organization_id of this CreditSubscriptionRequest.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def value(self):
        """
        Gets the value of this CreditSubscriptionRequest.
        { \"description\" : \" Monetary value of the credit-note\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The value of this CreditSubscriptionRequest.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this CreditSubscriptionRequest.
        { \"description\" : \" Monetary value of the credit-note\", \"verbs\":[\"POST\",\"GET\"] }

        :param value: The value of this CreditSubscriptionRequest.
        :type: float
        """

        self._value = value

    @property
    def invoice_id(self):
        """
        Gets the invoice_id of this CreditSubscriptionRequest.
        { \"description\" : \"Reference an invoice\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The invoice_id of this CreditSubscriptionRequest.
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """
        Sets the invoice_id of this CreditSubscriptionRequest.
        { \"description\" : \"Reference an invoice\", \"verbs\":[\"POST\",\"GET\"] }

        :param invoice_id: The invoice_id of this CreditSubscriptionRequest.
        :type: str
        """

        self._invoice_id = invoice_id

    @property
    def description(self):
        """
        Gets the description of this CreditSubscriptionRequest.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"GET\"] }

        :return: The description of this CreditSubscriptionRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this CreditSubscriptionRequest.
        { \"description\" : \"\", \"verbs\":[\"POST\",\"GET\"] }

        :param description: The description of this CreditSubscriptionRequest.
        :type: str
        """

        self._description = description

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
