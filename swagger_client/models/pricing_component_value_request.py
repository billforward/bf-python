# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class PricingComponentValueRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created=None, value=None, change_mode=None, invoicing_type=None, no_charge=False):
        """
        PricingComponentValueRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created': 'datetime',
            'value': 'int',
            'change_mode': 'str',
            'invoicing_type': 'str',
            'no_charge': 'bool'
        }

        self.attribute_map = {
            'created': 'created',
            'value': 'value',
            'change_mode': 'changeMode',
            'invoicing_type': 'invoicingType',
            'no_charge': 'noCharge'
        }

        self._created = created
        self._value = value
        self._change_mode = change_mode
        self._invoicing_type = invoicing_type
        self._no_charge = no_charge

    @property
    def created(self):
        """
        Gets the created of this PricingComponentValueRequest.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :return: The created of this PricingComponentValueRequest.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this PricingComponentValueRequest.
        { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }

        :param created: The created of this PricingComponentValueRequest.
        :type: datetime
        """

        self._created = created

    @property
    def value(self):
        """
        Gets the value of this PricingComponentValueRequest.
        {\"default\":\"<span class=\\\"label label-default\\\"></span>\",\"description\":\"Modifies the current value used to calculate the recurring costs of the subscription. This can effectively be thought of as an upsert.Note: altering costs on invoices are made be editing charges.<br><span class=\\\"label label-default\\\">Setup Pricing</span> &mdash; Value changed if initial invoice has not been issued.<br><span class=\\\"label label-default\\\">In-Advance/Subscription Pricing</span> &mdash; Value changed and a charge added. If the change is delayed the current value on the subscription will show the delayed change.<br><span class=\\\"label label-default\\\">Arrears Pricing</span> &mdash; Value updated, and a pro-rated charge added to the subscription if required.<br><span class=\\\"label label-default\\\">Usage Pricing</span> &mdash; Usage created or updated for the current billing cycle.which is generated naturally &mdash; i.e. the invoice raised at the current period's end.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The value of this PricingComponentValueRequest.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this PricingComponentValueRequest.
        {\"default\":\"<span class=\\\"label label-default\\\"></span>\",\"description\":\"Modifies the current value used to calculate the recurring costs of the subscription. This can effectively be thought of as an upsert.Note: altering costs on invoices are made be editing charges.<br><span class=\\\"label label-default\\\">Setup Pricing</span> &mdash; Value changed if initial invoice has not been issued.<br><span class=\\\"label label-default\\\">In-Advance/Subscription Pricing</span> &mdash; Value changed and a charge added. If the change is delayed the current value on the subscription will show the delayed change.<br><span class=\\\"label label-default\\\">Arrears Pricing</span> &mdash; Value updated, and a pro-rated charge added to the subscription if required.<br><span class=\\\"label label-default\\\">Usage Pricing</span> &mdash; Usage created or updated for the current billing cycle.which is generated naturally &mdash; i.e. the invoice raised at the current period's end.\",\"verbs\":[\"POST\",\"GET\"]}

        :param value: The value of this PricingComponentValueRequest.
        :type: int
        """

        self._value = value

    @property
    def change_mode(self):
        """
        Gets the change_mode of this PricingComponentValueRequest.
        {\"default\":\"<span class=\\\"label label-default\\\">as on pricing component</span>\",\"description\":\"Default behaviour when a value is changed by default the change mode from the pricing component is used.<br><span class=\\\"label label-default\\\">immediate</span> &mdash; Change will apply at the time the request is made.<br><span class=\\\"label label-default\\\">delayed</span> &mdash; Change will apply at the end of the current billing cycle.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The change_mode of this PricingComponentValueRequest.
        :rtype: str
        """
        return self._change_mode

    @change_mode.setter
    def change_mode(self, change_mode):
        """
        Sets the change_mode of this PricingComponentValueRequest.
        {\"default\":\"<span class=\\\"label label-default\\\">as on pricing component</span>\",\"description\":\"Default behaviour when a value is changed by default the change mode from the pricing component is used.<br><span class=\\\"label label-default\\\">immediate</span> &mdash; Change will apply at the time the request is made.<br><span class=\\\"label label-default\\\">delayed</span> &mdash; Change will apply at the end of the current billing cycle.\",\"verbs\":[\"POST\",\"GET\"]}

        :param change_mode: The change_mode of this PricingComponentValueRequest.
        :type: str
        """
        allowed_values = ["immediate", "delayed"]
        if change_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `change_mode` ({0}), must be one of {1}"
                .format(change_mode, allowed_values)
            )

        self._change_mode = change_mode

    @property
    def invoicing_type(self):
        """
        Gets the invoicing_type of this PricingComponentValueRequest.
        {\"default\":\"<span class=\\\"label label-default\\\">Aggregated</span>\",\"description\":\"If the change results in a charge should it be invoiced straight away or on the next invoice.<br><span class=\\\"label label-default\\\">Immediate</span> &mdash; If the change has a cost associated with it , for example a pro-rated upgrade charge, an invoice will be raised at the time the request is made. If the invoice fails to be paid the upgrade will fail and the invoice will be voided. No credit or refund is issued for immediate downgrades.<br><span class=\\\"label label-default\\\">Aggregated</span> &mdash; If the change has a cost associated with it , for example a pro-rated upgrade charge, the charge will be added to the next invoice raised for this subscription. As no payment is required when the change is request the change always succeeds.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The invoicing_type of this PricingComponentValueRequest.
        :rtype: str
        """
        return self._invoicing_type

    @invoicing_type.setter
    def invoicing_type(self, invoicing_type):
        """
        Sets the invoicing_type of this PricingComponentValueRequest.
        {\"default\":\"<span class=\\\"label label-default\\\">Aggregated</span>\",\"description\":\"If the change results in a charge should it be invoiced straight away or on the next invoice.<br><span class=\\\"label label-default\\\">Immediate</span> &mdash; If the change has a cost associated with it , for example a pro-rated upgrade charge, an invoice will be raised at the time the request is made. If the invoice fails to be paid the upgrade will fail and the invoice will be voided. No credit or refund is issued for immediate downgrades.<br><span class=\\\"label label-default\\\">Aggregated</span> &mdash; If the change has a cost associated with it , for example a pro-rated upgrade charge, the charge will be added to the next invoice raised for this subscription. As no payment is required when the change is request the change always succeeds.\",\"verbs\":[\"POST\",\"GET\"]}

        :param invoicing_type: The invoicing_type of this PricingComponentValueRequest.
        :type: str
        """
        allowed_values = ["Immediate", "Aggregated"]
        if invoicing_type not in allowed_values:
            raise ValueError(
                "Invalid value for `invoicing_type` ({0}), must be one of {1}"
                .format(invoicing_type, allowed_values)
            )

        self._invoicing_type = invoicing_type

    @property
    def no_charge(self):
        """
        Gets the no_charge of this PricingComponentValueRequest.
        {\"default\":\"<span class=\\\"label label-default\\\">false</span>\",\"description\":\"If specified the change will have no cost associated with it. This is useful for immediately changing a value without creating any upgrade charge.\",\"verbs\":[\"POST\",\"GET\"]}

        :return: The no_charge of this PricingComponentValueRequest.
        :rtype: bool
        """
        return self._no_charge

    @no_charge.setter
    def no_charge(self, no_charge):
        """
        Sets the no_charge of this PricingComponentValueRequest.
        {\"default\":\"<span class=\\\"label label-default\\\">false</span>\",\"description\":\"If specified the change will have no cost associated with it. This is useful for immediately changing a value without creating any upgrade charge.\",\"verbs\":[\"POST\",\"GET\"]}

        :param no_charge: The no_charge of this PricingComponentValueRequest.
        :type: bool
        """

        self._no_charge = no_charge

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
