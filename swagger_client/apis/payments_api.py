# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class PaymentsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_payment(self, payment, **kwargs):
        """
        Create a payment.
        {\"nickname\":\"Create a new payment\",\"request\":\"createPaymentRequest.html\",\"response\":\"createPaymentResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_payment(payment, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Payment payment: The payment object to be updated. (required)
        :return: PaymentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_payment_with_http_info(payment, **kwargs)
        else:
            (data) = self.create_payment_with_http_info(payment, **kwargs)
            return data

    def create_payment_with_http_info(self, payment, **kwargs):
        """
        Create a payment.
        {\"nickname\":\"Create a new payment\",\"request\":\"createPaymentRequest.html\",\"response\":\"createPaymentResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_payment_with_http_info(payment, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Payment payment: The payment object to be updated. (required)
        :return: PaymentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_payment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment' is set
        if ('payment' not in params) or (params['payment'] is None):
            raise ValueError("Missing the required parameter `payment` when calling `create_payment`")

        resource_path = '/payments'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payment' in params:
            body_params = params['payment']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PaymentPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_all_payments(self, **kwargs):
        """
        Returns a collection of all payments. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Get all payments\",\"response\":\"getPaymentAll.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_payments(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first payment to return.
        :param int records: The maximum number of payments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired products should be returned.
        :return: PaymentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_payments_with_http_info(**kwargs)
        else:
            (data) = self.get_all_payments_with_http_info(**kwargs)
            return data

    def get_all_payments_with_http_info(self, **kwargs):
        """
        Returns a collection of all payments. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Get all payments\",\"response\":\"getPaymentAll.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_payments_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first payment to return.
        :param int records: The maximum number of payments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired products should be returned.
        :return: PaymentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'offset', 'records', 'order_by', 'order', 'include_retired']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_payments" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/payments'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'include_retired' in params:
            query_params['include_retired'] = params['include_retired']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PaymentPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_payment_as_csv(self, received_start, received_end, **kwargs):
        """
        Retrieves payments in CSV format.
        { \"nickname\":\"Payments CSV\",\"response\":\"payments.csv\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_payment_as_csv(received_start, received_end, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str received_start: The UTC DateTime specifying the start of the interval within which payments were received. (required)
        :param str received_end: The UTC DateTime specifying the end of the interval within which payments were received. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first payment to return.
        :param int records: The maximum number of payments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: The direction of any ordering, either ASC or DESC.
        :return: PaymentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_payment_as_csv_with_http_info(received_start, received_end, **kwargs)
        else:
            (data) = self.get_payment_as_csv_with_http_info(received_start, received_end, **kwargs)
            return data

    def get_payment_as_csv_with_http_info(self, received_start, received_end, **kwargs):
        """
        Retrieves payments in CSV format.
        { \"nickname\":\"Payments CSV\",\"response\":\"payments.csv\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_payment_as_csv_with_http_info(received_start, received_end, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str received_start: The UTC DateTime specifying the start of the interval within which payments were received. (required)
        :param str received_end: The UTC DateTime specifying the end of the interval within which payments were received. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first payment to return.
        :param int records: The maximum number of payments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: The direction of any ordering, either ASC or DESC.
        :return: PaymentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['received_start', 'received_end', 'organizations', 'offset', 'records', 'order_by', 'order']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payment_as_csv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'received_start' is set
        if ('received_start' not in params) or (params['received_start'] is None):
            raise ValueError("Missing the required parameter `received_start` when calling `get_payment_as_csv`")
        # verify the required parameter 'received_end' is set
        if ('received_end' not in params) or (params['received_end'] is None):
            raise ValueError("Missing the required parameter `received_end` when calling `get_payment_as_csv`")

        resource_path = '/payments/csv'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'received_start' in params:
            query_params['received_start'] = params['received_start']
        if 'received_end' in params:
            query_params['received_end'] = params['received_end']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/csv'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PaymentPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_payment_by_id(self, payment_id, **kwargs):
        """
        Returns a single payment, specified by the payment-ID parameter.
        {\"nickname\":\"Retrieve an existing payment\",\"response\":\"getPaymentByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_payment_by_id(payment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str payment_id: The unique string-ID of the payment. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: PaymentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_payment_by_id_with_http_info(payment_id, **kwargs)
        else:
            (data) = self.get_payment_by_id_with_http_info(payment_id, **kwargs)
            return data

    def get_payment_by_id_with_http_info(self, payment_id, **kwargs):
        """
        Returns a single payment, specified by the payment-ID parameter.
        {\"nickname\":\"Retrieve an existing payment\",\"response\":\"getPaymentByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_payment_by_id_with_http_info(payment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str payment_id: The unique string-ID of the payment. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: PaymentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_id', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payment_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_id' is set
        if ('payment_id' not in params) or (params['payment_id'] is None):
            raise ValueError("Missing the required parameter `payment_id` when calling `get_payment_by_id`")

        resource_path = '/payments/{payment-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'payment_id' in params:
            path_params['payment-ID'] = params['payment_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PaymentPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_payment_by_invoice_id(self, invoice_id, **kwargs):
        """
        Returns a collection of payments, specified by the invoice-ID parameter. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Get for invoice\",\"response\":\"getPaymentByInvoice.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_payment_by_invoice_id(invoice_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str invoice_id: The string ID of the account (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first payment to return.
        :param int records: The maximum number of payments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired products should be returned.
        :return: PaymentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_payment_by_invoice_id_with_http_info(invoice_id, **kwargs)
        else:
            (data) = self.get_payment_by_invoice_id_with_http_info(invoice_id, **kwargs)
            return data

    def get_payment_by_invoice_id_with_http_info(self, invoice_id, **kwargs):
        """
        Returns a collection of payments, specified by the invoice-ID parameter. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Get for invoice\",\"response\":\"getPaymentByInvoice.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_payment_by_invoice_id_with_http_info(invoice_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str invoice_id: The string ID of the account (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first payment to return.
        :param int records: The maximum number of payments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired products should be returned.
        :return: PaymentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'organizations', 'offset', 'records', 'order_by', 'order', 'include_retired']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payment_by_invoice_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params) or (params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `get_payment_by_invoice_id`")

        resource_path = '/payments/invoice/{invoice-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'invoice_id' in params:
            path_params['invoice-ID'] = params['invoice_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'include_retired' in params:
            query_params['include_retired'] = params['include_retired']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PaymentPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_payment_by_payment_gateway(self, gateway, **kwargs):
        """
        Returns a collection of payments, specified by the gateway parameter. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Retrieve by gateway\",\"response\":\"getPaymentByGateway.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_payment_by_payment_gateway(gateway, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str gateway: The payment gateway which generated the payment. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first payment to return.
        :param int records: The maximum number of payments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired products should be returned.
        :return: PaymentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_payment_by_payment_gateway_with_http_info(gateway, **kwargs)
        else:
            (data) = self.get_payment_by_payment_gateway_with_http_info(gateway, **kwargs)
            return data

    def get_payment_by_payment_gateway_with_http_info(self, gateway, **kwargs):
        """
        Returns a collection of payments, specified by the gateway parameter. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Retrieve by gateway\",\"response\":\"getPaymentByGateway.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_payment_by_payment_gateway_with_http_info(gateway, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str gateway: The payment gateway which generated the payment. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first payment to return.
        :param int records: The maximum number of payments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired products should be returned.
        :return: PaymentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['gateway', 'organizations', 'offset', 'records', 'order_by', 'order', 'include_retired']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payment_by_payment_gateway" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'gateway' is set
        if ('gateway' not in params) or (params['gateway'] is None):
            raise ValueError("Missing the required parameter `gateway` when calling `get_payment_by_payment_gateway`")

        resource_path = '/payments/gateway/{gateway}'.replace('{format}', 'json')
        path_params = {}
        if 'gateway' in params:
            path_params['gateway'] = params['gateway']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'include_retired' in params:
            query_params['include_retired'] = params['include_retired']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PaymentPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_payment_by_payment_method_id(self, payment_method_id, **kwargs):
        """
        Returns a collection of payments, specified by the payment-method-ID parameter. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Retrieve by payment method\",\"response\":\"getPaymentByPaymentMethod.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_payment_by_payment_method_id(payment_method_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str payment_method_id: ID of the PaymentMethod (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first payment to return.
        :param int records: The maximum number of payments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired products should be returned.
        :return: PaymentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_payment_by_payment_method_id_with_http_info(payment_method_id, **kwargs)
        else:
            (data) = self.get_payment_by_payment_method_id_with_http_info(payment_method_id, **kwargs)
            return data

    def get_payment_by_payment_method_id_with_http_info(self, payment_method_id, **kwargs):
        """
        Returns a collection of payments, specified by the payment-method-ID parameter. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Retrieve by payment method\",\"response\":\"getPaymentByPaymentMethod.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_payment_by_payment_method_id_with_http_info(payment_method_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str payment_method_id: ID of the PaymentMethod (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first payment to return.
        :param int records: The maximum number of payments to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired products should be returned.
        :return: PaymentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_method_id', 'organizations', 'offset', 'records', 'order_by', 'order', 'include_retired']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payment_by_payment_method_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_method_id' is set
        if ('payment_method_id' not in params) or (params['payment_method_id'] is None):
            raise ValueError("Missing the required parameter `payment_method_id` when calling `get_payment_by_payment_method_id`")

        resource_path = '/payments/payment-method/{payment-method-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'payment_method_id' in params:
            path_params['payment-method-ID'] = params['payment_method_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'include_retired' in params:
            query_params['include_retired'] = params['include_retired']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PaymentPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_payment(self, payment, **kwargs):
        """
        Update a payment.
        {\"nickname\":\"Update a payment\",\"request\":\"updatePaymentRequest.html\",\"response\":\"updatePaymentResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_payment(payment, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Payment payment: The payment object to be updated. (required)
        :return: PaymentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_payment_with_http_info(payment, **kwargs)
        else:
            (data) = self.update_payment_with_http_info(payment, **kwargs)
            return data

    def update_payment_with_http_info(self, payment, **kwargs):
        """
        Update a payment.
        {\"nickname\":\"Update a payment\",\"request\":\"updatePaymentRequest.html\",\"response\":\"updatePaymentResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_payment_with_http_info(payment, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Payment payment: The payment object to be updated. (required)
        :return: PaymentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_payment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment' is set
        if ('payment' not in params) or (params['payment'] is None):
            raise ValueError("Missing the required parameter `payment` when calling `update_payment`")

        resource_path = '/payments'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payment' in params:
            body_params = params['payment']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PaymentPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
