# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class SynchJobsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_sync_job(self, synch_job, **kwargs):
        """
        Create a synch job.
        {\"nickname\":\"Create a new sync job\",\"request\":\"createSynchJobRequest.html\",\"response\":\"createSynchJobResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_sync_job(synch_job, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MutableBillingEntity synch_job: The data synch job object to be created. (required)
        :return: DataSynchronizationJobPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_sync_job_with_http_info(synch_job, **kwargs)
        else:
            (data) = self.create_sync_job_with_http_info(synch_job, **kwargs)
            return data

    def create_sync_job_with_http_info(self, synch_job, **kwargs):
        """
        Create a synch job.
        {\"nickname\":\"Create a new sync job\",\"request\":\"createSynchJobRequest.html\",\"response\":\"createSynchJobResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_sync_job_with_http_info(synch_job, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MutableBillingEntity synch_job: The data synch job object to be created. (required)
        :return: DataSynchronizationJobPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['synch_job']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_sync_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'synch_job' is set
        if ('synch_job' not in params) or (params['synch_job'] is None):
            raise ValueError("Missing the required parameter `synch_job` when calling `create_sync_job`")

        resource_path = '/synchJobs'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'synch_job' in params:
            body_params = params['synch_job']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DataSynchronizationJobPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_all_sync_jobs(self, **kwargs):
        """
        Returns a collection of Users. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Get all synch jobs\",\"response\":\"getSynchJobsAll.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_sync_jobs(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first synch job to return.
        :param int records: The maximum number of synch jobs to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :return: DataSynchronizationJobPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_sync_jobs_with_http_info(**kwargs)
        else:
            (data) = self.get_all_sync_jobs_with_http_info(**kwargs)
            return data

    def get_all_sync_jobs_with_http_info(self, **kwargs):
        """
        Returns a collection of Users. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Get all synch jobs\",\"response\":\"getSynchJobsAll.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_sync_jobs_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first synch job to return.
        :param int records: The maximum number of synch jobs to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :return: DataSynchronizationJobPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'offset', 'records', 'order_by', 'order']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_sync_jobs" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/synchJobs'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DataSynchronizationJobPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_sync_job_by_id(self, synch_job_id, **kwargs):
        """
        Returns a single job, specified by the ID parameter.
        {\"nickname\":\"Retrieve an existing synch job\",\"response\":\"getSyncJobByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sync_job_by_id(synch_job_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str synch_job_id: ID of the Sync Job. (required)
        :param list[str] organizations: A list of organization -IDs used to restrict the scope of API calls.
        :return: DataSynchronizationJobPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_sync_job_by_id_with_http_info(synch_job_id, **kwargs)
        else:
            (data) = self.get_sync_job_by_id_with_http_info(synch_job_id, **kwargs)
            return data

    def get_sync_job_by_id_with_http_info(self, synch_job_id, **kwargs):
        """
        Returns a single job, specified by the ID parameter.
        {\"nickname\":\"Retrieve an existing synch job\",\"response\":\"getSyncJobByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sync_job_by_id_with_http_info(synch_job_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str synch_job_id: ID of the Sync Job. (required)
        :param list[str] organizations: A list of organization -IDs used to restrict the scope of API calls.
        :return: DataSynchronizationJobPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['synch_job_id', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sync_job_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'synch_job_id' is set
        if ('synch_job_id' not in params) or (params['synch_job_id'] is None):
            raise ValueError("Missing the required parameter `synch_job_id` when calling `get_sync_job_by_id`")

        resource_path = '/synchJobs/{synchJob-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'synch_job_id' in params:
            path_params['synchJob-ID'] = params['synch_job_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DataSynchronizationJobPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_sync_job_by_scope(self, scope, **kwargs):
        """
        Returns a collection jobs, specified by the scope parameter.
        {\"nickname\":\"Retrieve by scope\",\"response\":\"getSyncJobByScope.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sync_job_by_scope(scope, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str scope: The scope of the synch job. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: DataSynchronizationJobPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_sync_job_by_scope_with_http_info(scope, **kwargs)
        else:
            (data) = self.get_sync_job_by_scope_with_http_info(scope, **kwargs)
            return data

    def get_sync_job_by_scope_with_http_info(self, scope, **kwargs):
        """
        Returns a collection jobs, specified by the scope parameter.
        {\"nickname\":\"Retrieve by scope\",\"response\":\"getSyncJobByScope.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sync_job_by_scope_with_http_info(scope, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str scope: The scope of the synch job. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: DataSynchronizationJobPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sync_job_by_scope" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scope' is set
        if ('scope' not in params) or (params['scope'] is None):
            raise ValueError("Missing the required parameter `scope` when calling `get_sync_job_by_scope`")

        resource_path = '/synchJobs/scope/{scope}'.replace('{format}', 'json')
        path_params = {}
        if 'scope' in params:
            path_params['scope'] = params['scope']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DataSynchronizationJobPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_sync_job_by_state(self, state, **kwargs):
        """
        Returns a collection jobs, specified by the state parameter.
        {\"nickname\":\"Retrieve by state\",\"response\":\"getSyncJobByState.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sync_job_by_state(state, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str state: The state of the synch job. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: DataSynchronizationJobPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_sync_job_by_state_with_http_info(state, **kwargs)
        else:
            (data) = self.get_sync_job_by_state_with_http_info(state, **kwargs)
            return data

    def get_sync_job_by_state_with_http_info(self, state, **kwargs):
        """
        Returns a collection jobs, specified by the state parameter.
        {\"nickname\":\"Retrieve by state\",\"response\":\"getSyncJobByState.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sync_job_by_state_with_http_info(state, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str state: The state of the synch job. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: DataSynchronizationJobPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['state', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sync_job_by_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'state' is set
        if ('state' not in params) or (params['state'] is None):
            raise ValueError("Missing the required parameter `state` when calling `get_sync_job_by_state`")

        resource_path = '/synchJobs/state/{state}'.replace('{format}', 'json')
        path_params = {}
        if 'state' in params:
            path_params['state'] = params['state']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DataSynchronizationJobPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_sync_job_by_target(self, target, **kwargs):
        """
        Returns a collection jobs, specified by the target parameter.
        {\"nickname\":\"Retrieve by target\",\"response\":\"getSyncJobByTarget.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sync_job_by_target(target, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str target: The target of the synch job. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: DataSynchronizationJobPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_sync_job_by_target_with_http_info(target, **kwargs)
        else:
            (data) = self.get_sync_job_by_target_with_http_info(target, **kwargs)
            return data

    def get_sync_job_by_target_with_http_info(self, target, **kwargs):
        """
        Returns a collection jobs, specified by the target parameter.
        {\"nickname\":\"Retrieve by target\",\"response\":\"getSyncJobByTarget.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sync_job_by_target_with_http_info(target, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str target: The target of the synch job. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: DataSynchronizationJobPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sync_job_by_target" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target' is set
        if ('target' not in params) or (params['target'] is None):
            raise ValueError("Missing the required parameter `target` when calling `get_sync_job_by_target`")

        resource_path = '/synchJobs/target/{target}'.replace('{format}', 'json')
        path_params = {}
        if 'target' in params:
            path_params['target'] = params['target']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DataSynchronizationJobPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_sync_job_by_type(self, type, **kwargs):
        """
        Returns a collection jobs, specified by the type parameter.
        {\"nickname\":\"Retrieve by type\",\"response\":\"getSyncJobByType.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sync_job_by_type(type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str type: The type of the synch job. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: DataSynchronizationJobPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_sync_job_by_type_with_http_info(type, **kwargs)
        else:
            (data) = self.get_sync_job_by_type_with_http_info(type, **kwargs)
            return data

    def get_sync_job_by_type_with_http_info(self, type, **kwargs):
        """
        Returns a collection jobs, specified by the type parameter.
        {\"nickname\":\"Retrieve by type\",\"response\":\"getSyncJobByType.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sync_job_by_type_with_http_info(type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str type: The type of the synch job. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: DataSynchronizationJobPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sync_job_by_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'type' is set
        if ('type' not in params) or (params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_sync_job_by_type`")

        resource_path = '/synchJobs/type/{type}'.replace('{format}', 'json')
        path_params = {}
        if 'type' in params:
            path_params['type'] = params['type']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DataSynchronizationJobPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_sync_job(self, synch_job, **kwargs):
        """
        Update a synch job.
        {\"nickname\":\"Update a synch job\",\"request\":\"updateSyncJobRequest.html\",\"response\":\"updateSyncJobResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_sync_job(synch_job, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MutableBillingEntity synch_job: The synch job object to be updated. (required)
        :return: DataSynchronizationJobPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_sync_job_with_http_info(synch_job, **kwargs)
        else:
            (data) = self.update_sync_job_with_http_info(synch_job, **kwargs)
            return data

    def update_sync_job_with_http_info(self, synch_job, **kwargs):
        """
        Update a synch job.
        {\"nickname\":\"Update a synch job\",\"request\":\"updateSyncJobRequest.html\",\"response\":\"updateSyncJobResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_sync_job_with_http_info(synch_job, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MutableBillingEntity synch_job: The synch job object to be updated. (required)
        :return: DataSynchronizationJobPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['synch_job']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_sync_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'synch_job' is set
        if ('synch_job' not in params) or (params['synch_job'] is None):
            raise ValueError("Missing the required parameter `synch_job` when calling `update_sync_job`")

        resource_path = '/synchJobs'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'synch_job' in params:
            body_params = params['synch_job']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DataSynchronizationJobPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
