# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CybersourcetokensApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_cybersource_token(self, cybersource_token, **kwargs):
        """
        Create a cybersource-token.
        {\"nickname\":\"Create a cybersource-token\",\"request\":\"createCybersourceTokenRequest.html\",\"response\":\"createCybersourceTokenResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_cybersource_token(cybersource_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MutableBillingEntity cybersource_token: The cybersource-token object to be created. (required)
        :return: CybersourceTokenPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_cybersource_token_with_http_info(cybersource_token, **kwargs)
        else:
            (data) = self.create_cybersource_token_with_http_info(cybersource_token, **kwargs)
            return data

    def create_cybersource_token_with_http_info(self, cybersource_token, **kwargs):
        """
        Create a cybersource-token.
        {\"nickname\":\"Create a cybersource-token\",\"request\":\"createCybersourceTokenRequest.html\",\"response\":\"createCybersourceTokenResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_cybersource_token_with_http_info(cybersource_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MutableBillingEntity cybersource_token: The cybersource-token object to be created. (required)
        :return: CybersourceTokenPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cybersource_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_cybersource_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cybersource_token' is set
        if ('cybersource_token' not in params) or (params['cybersource_token'] is None):
            raise ValueError("Missing the required parameter `cybersource_token` when calling `create_cybersource_token`")

        resource_path = '/cybersource-tokens'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'cybersource_token' in params:
            body_params = params['cybersource_token']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CybersourceTokenPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_cybersource_token_by_id(self, token_id, **kwargs):
        """
        Returns a single cybersource-token, specified by the token-ID parameter.
        {\"nickname\":\"NICKNAME\",\"response\":\"getCybersourceTokenByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_cybersource_token_by_id(token_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str token_id: The unique sting ID of the cybersource token. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: CybersourceTokenPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_cybersource_token_by_id_with_http_info(token_id, **kwargs)
        else:
            (data) = self.get_cybersource_token_by_id_with_http_info(token_id, **kwargs)
            return data

    def get_cybersource_token_by_id_with_http_info(self, token_id, **kwargs):
        """
        Returns a single cybersource-token, specified by the token-ID parameter.
        {\"nickname\":\"NICKNAME\",\"response\":\"getCybersourceTokenByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_cybersource_token_by_id_with_http_info(token_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str token_id: The unique sting ID of the cybersource token. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: CybersourceTokenPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token_id', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cybersource_token_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token_id' is set
        if ('token_id' not in params) or (params['token_id'] is None):
            raise ValueError("Missing the required parameter `token_id` when calling `get_cybersource_token_by_id`")

        resource_path = '/cybersource-tokens/{token-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'token_id' in params:
            path_params['token-ID'] = params['token_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CybersourceTokenPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_cybersource_token_by_recurring_subscription_id(self, recurring_subscription_id, **kwargs):
        """
        Returns a single cybersource-token, specified by the recurring-subscription-ID parameter.
        {\"nickname\":\"NICKNAME\",\"response\":\"getCybersourceTokenByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_cybersource_token_by_recurring_subscription_id(recurring_subscription_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str recurring_subscription_id: The recurring-subscription-info-subscription-ID of the cybersource token. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: CybersourceTokenPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_cybersource_token_by_recurring_subscription_id_with_http_info(recurring_subscription_id, **kwargs)
        else:
            (data) = self.get_cybersource_token_by_recurring_subscription_id_with_http_info(recurring_subscription_id, **kwargs)
            return data

    def get_cybersource_token_by_recurring_subscription_id_with_http_info(self, recurring_subscription_id, **kwargs):
        """
        Returns a single cybersource-token, specified by the recurring-subscription-ID parameter.
        {\"nickname\":\"NICKNAME\",\"response\":\"getCybersourceTokenByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_cybersource_token_by_recurring_subscription_id_with_http_info(recurring_subscription_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str recurring_subscription_id: The recurring-subscription-info-subscription-ID of the cybersource token. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: CybersourceTokenPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['recurring_subscription_id', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cybersource_token_by_recurring_subscription_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'recurring_subscription_id' is set
        if ('recurring_subscription_id' not in params) or (params['recurring_subscription_id'] is None):
            raise ValueError("Missing the required parameter `recurring_subscription_id` when calling `get_cybersource_token_by_recurring_subscription_id`")

        resource_path = '/cybersource-tokens/recurring-subscription-info/{recurring-subscription-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'recurring_subscription_id' in params:
            path_params['recurring-subscription-ID'] = params['recurring_subscription_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CybersourceTokenPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def retire_cybersource_token(self, token_id, organizations, **kwargs):
        """
        Retires the cybersource token specified by the token-ID parameter.
        {\"nickname\":\"NICKNAME\",\"response\":\"deleteCybersourceToken.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.retire_cybersource_token(token_id, organizations, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str token_id: ID of the cybersource-token. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls. (required)
        :return: CybersourceTokenPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.retire_cybersource_token_with_http_info(token_id, organizations, **kwargs)
        else:
            (data) = self.retire_cybersource_token_with_http_info(token_id, organizations, **kwargs)
            return data

    def retire_cybersource_token_with_http_info(self, token_id, organizations, **kwargs):
        """
        Retires the cybersource token specified by the token-ID parameter.
        {\"nickname\":\"NICKNAME\",\"response\":\"deleteCybersourceToken.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.retire_cybersource_token_with_http_info(token_id, organizations, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str token_id: ID of the cybersource-token. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls. (required)
        :return: CybersourceTokenPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token_id', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retire_cybersource_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token_id' is set
        if ('token_id' not in params) or (params['token_id'] is None):
            raise ValueError("Missing the required parameter `token_id` when calling `retire_cybersource_token`")
        # verify the required parameter 'organizations' is set
        if ('organizations' not in params) or (params['organizations'] is None):
            raise ValueError("Missing the required parameter `organizations` when calling `retire_cybersource_token`")

        resource_path = '/cybersource-tokens/{token-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'token_id' in params:
            path_params['token-ID'] = params['token_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CybersourceTokenPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_cybersource_token(self, cybersource_token, **kwargs):
        """
        Update a cybersource-token.
        {\"nickname\":\"Update a cybersource-token\",\"request\":\"updateCybersourceTokenRequest.html\",\"response\":\"updateCybersourceTokenResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_cybersource_token(cybersource_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MutableBillingEntity cybersource_token: The cybersource-token object to be updated. (required)
        :return: CybersourceTokenPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_cybersource_token_with_http_info(cybersource_token, **kwargs)
        else:
            (data) = self.update_cybersource_token_with_http_info(cybersource_token, **kwargs)
            return data

    def update_cybersource_token_with_http_info(self, cybersource_token, **kwargs):
        """
        Update a cybersource-token.
        {\"nickname\":\"Update a cybersource-token\",\"request\":\"updateCybersourceTokenRequest.html\",\"response\":\"updateCybersourceTokenResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_cybersource_token_with_http_info(cybersource_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MutableBillingEntity cybersource_token: The cybersource-token object to be updated. (required)
        :return: CybersourceTokenPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cybersource_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_cybersource_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cybersource_token' is set
        if ('cybersource_token' not in params) or (params['cybersource_token'] is None):
            raise ValueError("Missing the required parameter `cybersource_token` when calling `update_cybersource_token`")

        resource_path = '/cybersource-tokens'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'cybersource_token' in params:
            body_params = params['cybersource_token']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CybersourceTokenPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
