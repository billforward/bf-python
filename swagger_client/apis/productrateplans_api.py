# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ProductrateplansApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def add_taxation_strategy_to_rate_plan(self, product_rate_plan_id, taxation_strategy, **kwargs):
        """
        Adds or re-enables the specified taxation-strategy for the given product-rate-plan.
        {\"nickname\":\"Add tax\",\"response\":\"addTaxationStrategy.html\",\"request\":\"addTaxationStrategy.request.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_taxation_strategy_to_rate_plan(product_rate_plan_id, taxation_strategy, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_rate_plan_id:  (required)
        :param AddTaxationStrategyRequest taxation_strategy: The taxation-strategy (required)
        :return: TaxationStrategyPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_taxation_strategy_to_rate_plan_with_http_info(product_rate_plan_id, taxation_strategy, **kwargs)
        else:
            (data) = self.add_taxation_strategy_to_rate_plan_with_http_info(product_rate_plan_id, taxation_strategy, **kwargs)
            return data

    def add_taxation_strategy_to_rate_plan_with_http_info(self, product_rate_plan_id, taxation_strategy, **kwargs):
        """
        Adds or re-enables the specified taxation-strategy for the given product-rate-plan.
        {\"nickname\":\"Add tax\",\"response\":\"addTaxationStrategy.html\",\"request\":\"addTaxationStrategy.request.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_taxation_strategy_to_rate_plan_with_http_info(product_rate_plan_id, taxation_strategy, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_rate_plan_id:  (required)
        :param AddTaxationStrategyRequest taxation_strategy: The taxation-strategy (required)
        :return: TaxationStrategyPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_rate_plan_id', 'taxation_strategy']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_taxation_strategy_to_rate_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_rate_plan_id' is set
        if ('product_rate_plan_id' not in params) or (params['product_rate_plan_id'] is None):
            raise ValueError("Missing the required parameter `product_rate_plan_id` when calling `add_taxation_strategy_to_rate_plan`")
        # verify the required parameter 'taxation_strategy' is set
        if ('taxation_strategy' not in params) or (params['taxation_strategy'] is None):
            raise ValueError("Missing the required parameter `taxation_strategy` when calling `add_taxation_strategy_to_rate_plan`")

        resource_path = '/product-rate-plans/{product-rate-plan-ID}/tax'.replace('{format}', 'json')
        path_params = {}
        if 'product_rate_plan_id' in params:
            path_params['product-rate-plan-ID'] = params['product_rate_plan_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'taxation_strategy' in params:
            body_params = params['taxation_strategy']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TaxationStrategyPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def create_rate_plan(self, product_rate_plan, **kwargs):
        """
        Create a new rate-plan.
        {\"nickname\":\"Create a new rate-plan\",\"request\":\"createPRPRequest.html\",\"response\":\"createPRPResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_rate_plan(product_rate_plan, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ProductRatePlan product_rate_plan: The product-rate-plan object to be created. (required)
        :return: ProductRatePlanPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_rate_plan_with_http_info(product_rate_plan, **kwargs)
        else:
            (data) = self.create_rate_plan_with_http_info(product_rate_plan, **kwargs)
            return data

    def create_rate_plan_with_http_info(self, product_rate_plan, **kwargs):
        """
        Create a new rate-plan.
        {\"nickname\":\"Create a new rate-plan\",\"request\":\"createPRPRequest.html\",\"response\":\"createPRPResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_rate_plan_with_http_info(product_rate_plan, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ProductRatePlan product_rate_plan: The product-rate-plan object to be created. (required)
        :return: ProductRatePlanPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_rate_plan']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_rate_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_rate_plan' is set
        if ('product_rate_plan' not in params) or (params['product_rate_plan'] is None):
            raise ValueError("Missing the required parameter `product_rate_plan` when calling `create_rate_plan`")

        resource_path = '/product-rate-plans'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'product_rate_plan' in params:
            body_params = params['product_rate_plan']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProductRatePlanPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_metadata_for_rate_plan(self, product_rate_plan_id, **kwargs):
        """
        Remove any associated metadata.
        {\"nickname\":\"Clear metadata from rate-plan\",\"request\" :\"deleteRatePlanMetadataRequest.html\",\"response\":\"deleteRatePlanMetadataResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_metadata_for_rate_plan(product_rate_plan_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_rate_plan_id:  (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: DynamicMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_metadata_for_rate_plan_with_http_info(product_rate_plan_id, **kwargs)
        else:
            (data) = self.delete_metadata_for_rate_plan_with_http_info(product_rate_plan_id, **kwargs)
            return data

    def delete_metadata_for_rate_plan_with_http_info(self, product_rate_plan_id, **kwargs):
        """
        Remove any associated metadata.
        {\"nickname\":\"Clear metadata from rate-plan\",\"request\" :\"deleteRatePlanMetadataRequest.html\",\"response\":\"deleteRatePlanMetadataResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_metadata_for_rate_plan_with_http_info(product_rate_plan_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_rate_plan_id:  (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: DynamicMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_rate_plan_id', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_metadata_for_rate_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_rate_plan_id' is set
        if ('product_rate_plan_id' not in params) or (params['product_rate_plan_id'] is None):
            raise ValueError("Missing the required parameter `product_rate_plan_id` when calling `delete_metadata_for_rate_plan`")

        resource_path = '/product-rate-plans/{product-rate-plan-ID}/metadata'.replace('{format}', 'json')
        path_params = {}
        if 'product_rate_plan_id' in params:
            path_params['product-rate-plan-ID'] = params['product_rate_plan_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain', 'application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DynamicMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_all_rate_plans(self, **kwargs):
        """
        Returns a collection of product-rate-plans. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Get all rate-plans\",\"response\":\"getPRPAll.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_rate_plans(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first product-rate-plan to return.
        :param int records: The maximum number of product-rate-plans to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired products should be returned.
        :param str metadata: 
        :return: ProductRatePlanPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_rate_plans_with_http_info(**kwargs)
        else:
            (data) = self.get_all_rate_plans_with_http_info(**kwargs)
            return data

    def get_all_rate_plans_with_http_info(self, **kwargs):
        """
        Returns a collection of product-rate-plans. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Get all rate-plans\",\"response\":\"getPRPAll.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_rate_plans_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first product-rate-plan to return.
        :param int records: The maximum number of product-rate-plans to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired products should be returned.
        :param str metadata: 
        :return: ProductRatePlanPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'offset', 'records', 'order_by', 'order', 'include_retired', 'metadata']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_rate_plans" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/product-rate-plans'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'include_retired' in params:
            query_params['include_retired'] = params['include_retired']
        if 'metadata' in params:
            query_params['metadata'] = params['metadata']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/plain'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProductRatePlanPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_available_taxation_strategies_for_rate_plan(self, product_rate_plan_id, **kwargs):
        """
        Returns all available taxes for the specified product-rate-plan. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"List taxes\",\"response\":\"getAvailableTaxationStrategies.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_available_taxation_strategies_for_rate_plan(product_rate_plan_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_rate_plan_id:  (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first subscription to return.
        :param int records: The maximum number of subscriptions to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :return: TaxationStrategyPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_available_taxation_strategies_for_rate_plan_with_http_info(product_rate_plan_id, **kwargs)
        else:
            (data) = self.get_available_taxation_strategies_for_rate_plan_with_http_info(product_rate_plan_id, **kwargs)
            return data

    def get_available_taxation_strategies_for_rate_plan_with_http_info(self, product_rate_plan_id, **kwargs):
        """
        Returns all available taxes for the specified product-rate-plan. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"List taxes\",\"response\":\"getAvailableTaxationStrategies.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_available_taxation_strategies_for_rate_plan_with_http_info(product_rate_plan_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_rate_plan_id:  (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first subscription to return.
        :param int records: The maximum number of subscriptions to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :return: TaxationStrategyPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_rate_plan_id', 'organizations', 'offset', 'records', 'order_by', 'order']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_available_taxation_strategies_for_rate_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_rate_plan_id' is set
        if ('product_rate_plan_id' not in params) or (params['product_rate_plan_id'] is None):
            raise ValueError("Missing the required parameter `product_rate_plan_id` when calling `get_available_taxation_strategies_for_rate_plan`")

        resource_path = '/product-rate-plans/{product-rate-plan-ID}/tax'.replace('{format}', 'json')
        path_params = {}
        if 'product_rate_plan_id' in params:
            path_params['product-rate-plan-ID'] = params['product_rate_plan_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain', 'application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TaxationStrategyPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_metadata_for_rate_plan(self, product_rate_plan_id, **kwargs):
        """
        Retrieve any associated metadata.
        {\"nickname\":\"Retrieve metadata on rate-plan\",\"request\":\"getRatePlanMetadataRequest.html\",\"response\":\"getRatePlanMetadataResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_metadata_for_rate_plan(product_rate_plan_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_rate_plan_id:  (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: DynamicMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_metadata_for_rate_plan_with_http_info(product_rate_plan_id, **kwargs)
        else:
            (data) = self.get_metadata_for_rate_plan_with_http_info(product_rate_plan_id, **kwargs)
            return data

    def get_metadata_for_rate_plan_with_http_info(self, product_rate_plan_id, **kwargs):
        """
        Retrieve any associated metadata.
        {\"nickname\":\"Retrieve metadata on rate-plan\",\"request\":\"getRatePlanMetadataRequest.html\",\"response\":\"getRatePlanMetadataResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_metadata_for_rate_plan_with_http_info(product_rate_plan_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_rate_plan_id:  (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: DynamicMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_rate_plan_id', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metadata_for_rate_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_rate_plan_id' is set
        if ('product_rate_plan_id' not in params) or (params['product_rate_plan_id'] is None):
            raise ValueError("Missing the required parameter `product_rate_plan_id` when calling `get_metadata_for_rate_plan`")

        resource_path = '/product-rate-plans/{product-rate-plan-ID}/metadata'.replace('{format}', 'json')
        path_params = {}
        if 'product_rate_plan_id' in params:
            path_params['product-rate-plan-ID'] = params['product_rate_plan_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DynamicMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_product_rate_plan_by_id(self, product_rate_plan_id, **kwargs):
        """
        Returns product-rate-plans, specified by the product-rate-plan id or name.
        {\"nickname\":\"Retrieve an existing rate-plan\",\"response\":\"getPRPByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_product_rate_plan_by_id(product_rate_plan_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_rate_plan_id: id or name of the product-rate-plan. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first product-rate-plan to return.
        :param int records: The maximum number of product-rate-plans to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired products should be returned.
        :return: ProductRatePlanPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_product_rate_plan_by_id_with_http_info(product_rate_plan_id, **kwargs)
        else:
            (data) = self.get_product_rate_plan_by_id_with_http_info(product_rate_plan_id, **kwargs)
            return data

    def get_product_rate_plan_by_id_with_http_info(self, product_rate_plan_id, **kwargs):
        """
        Returns product-rate-plans, specified by the product-rate-plan id or name.
        {\"nickname\":\"Retrieve an existing rate-plan\",\"response\":\"getPRPByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_product_rate_plan_by_id_with_http_info(product_rate_plan_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_rate_plan_id: id or name of the product-rate-plan. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first product-rate-plan to return.
        :param int records: The maximum number of product-rate-plans to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired products should be returned.
        :return: ProductRatePlanPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_rate_plan_id', 'organizations', 'offset', 'records', 'order_by', 'order', 'include_retired']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_product_rate_plan_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_rate_plan_id' is set
        if ('product_rate_plan_id' not in params) or (params['product_rate_plan_id'] is None):
            raise ValueError("Missing the required parameter `product_rate_plan_id` when calling `get_product_rate_plan_by_id`")

        resource_path = '/product-rate-plans/{product-rate-plan-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'product_rate_plan_id' in params:
            path_params['product-rate-plan-ID'] = params['product_rate_plan_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'include_retired' in params:
            query_params['include_retired'] = params['include_retired']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain', 'application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProductRatePlanPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_rate_plan_by_product(self, product_id, **kwargs):
        """
        Returns a collection of product-rate-plans, specified by the product-ID parameter. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Retrieve by product\",\"response\":\"getPRPByProductID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_rate_plan_by_product(product_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_id:  (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first product-rate-plan to return.
        :param int records: The maximum number of product-rate-plans to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired products should be returned.
        :return: ProductRatePlanPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_rate_plan_by_product_with_http_info(product_id, **kwargs)
        else:
            (data) = self.get_rate_plan_by_product_with_http_info(product_id, **kwargs)
            return data

    def get_rate_plan_by_product_with_http_info(self, product_id, **kwargs):
        """
        Returns a collection of product-rate-plans, specified by the product-ID parameter. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Retrieve by product\",\"response\":\"getPRPByProductID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_rate_plan_by_product_with_http_info(product_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_id:  (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first product-rate-plan to return.
        :param int records: The maximum number of product-rate-plans to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired products should be returned.
        :return: ProductRatePlanPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'organizations', 'offset', 'records', 'order_by', 'order', 'include_retired']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rate_plan_by_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params) or (params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `get_rate_plan_by_product`")

        resource_path = '/product-rate-plans/product/{product-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'product_id' in params:
            path_params['product-ID'] = params['product_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'include_retired' in params:
            query_params['include_retired'] = params['include_retired']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain', 'application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProductRatePlanPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_rate_plan_by_product_and_rate_plan(self, product_id, rate_plan_id, **kwargs):
        """
        Returns a collection of product-rate-plans, specified by the product-ID parameter. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Retrieve by name\",\"response\":\"getPRPByNameAndProduct.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_rate_plan_by_product_and_rate_plan(product_id, rate_plan_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_id:  (required)
        :param str rate_plan_id:  (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first product-rate-plan to return.
        :param int records: The maximum number of product-rate-plans to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired products should be returned.
        :return: ProductRatePlanPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_rate_plan_by_product_and_rate_plan_with_http_info(product_id, rate_plan_id, **kwargs)
        else:
            (data) = self.get_rate_plan_by_product_and_rate_plan_with_http_info(product_id, rate_plan_id, **kwargs)
            return data

    def get_rate_plan_by_product_and_rate_plan_with_http_info(self, product_id, rate_plan_id, **kwargs):
        """
        Returns a collection of product-rate-plans, specified by the product-ID parameter. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Retrieve by name\",\"response\":\"getPRPByNameAndProduct.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_rate_plan_by_product_and_rate_plan_with_http_info(product_id, rate_plan_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_id:  (required)
        :param str rate_plan_id:  (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first product-rate-plan to return.
        :param int records: The maximum number of product-rate-plans to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired products should be returned.
        :return: ProductRatePlanPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'rate_plan_id', 'organizations', 'offset', 'records', 'order_by', 'order', 'include_retired']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rate_plan_by_product_and_rate_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params) or (params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `get_rate_plan_by_product_and_rate_plan`")
        # verify the required parameter 'rate_plan_id' is set
        if ('rate_plan_id' not in params) or (params['rate_plan_id'] is None):
            raise ValueError("Missing the required parameter `rate_plan_id` when calling `get_rate_plan_by_product_and_rate_plan`")

        resource_path = '/product-rate-plans/product/{product-ID}/rate-plan/{rate-plan-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'product_id' in params:
            path_params['product-ID'] = params['product_id']
        if 'rate_plan_id' in params:
            path_params['rate-plan-ID'] = params['rate_plan_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'include_retired' in params:
            query_params['include_retired'] = params['include_retired']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain', 'application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProductRatePlanPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def remove_taxation_strategy_from_rate_plan(self, product_rate_plan_id, taxation_strategy_id, **kwargs):
        """
        Removes the specified taxation-strategy for the given product-rate-plan.
        {\"nickname\":\"Remove tax\",\"response\":\"removeTaxationStrategy.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_taxation_strategy_from_rate_plan(product_rate_plan_id, taxation_strategy_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_rate_plan_id:  (required)
        :param str taxation_strategy_id:  (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: TaxationStrategyPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.remove_taxation_strategy_from_rate_plan_with_http_info(product_rate_plan_id, taxation_strategy_id, **kwargs)
        else:
            (data) = self.remove_taxation_strategy_from_rate_plan_with_http_info(product_rate_plan_id, taxation_strategy_id, **kwargs)
            return data

    def remove_taxation_strategy_from_rate_plan_with_http_info(self, product_rate_plan_id, taxation_strategy_id, **kwargs):
        """
        Removes the specified taxation-strategy for the given product-rate-plan.
        {\"nickname\":\"Remove tax\",\"response\":\"removeTaxationStrategy.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_taxation_strategy_from_rate_plan_with_http_info(product_rate_plan_id, taxation_strategy_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_rate_plan_id:  (required)
        :param str taxation_strategy_id:  (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: TaxationStrategyPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_rate_plan_id', 'taxation_strategy_id', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_taxation_strategy_from_rate_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_rate_plan_id' is set
        if ('product_rate_plan_id' not in params) or (params['product_rate_plan_id'] is None):
            raise ValueError("Missing the required parameter `product_rate_plan_id` when calling `remove_taxation_strategy_from_rate_plan`")
        # verify the required parameter 'taxation_strategy_id' is set
        if ('taxation_strategy_id' not in params) or (params['taxation_strategy_id'] is None):
            raise ValueError("Missing the required parameter `taxation_strategy_id` when calling `remove_taxation_strategy_from_rate_plan`")

        resource_path = '/product-rate-plans/{product-rate-plan-ID}/tax/{taxation-strategy-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'product_rate_plan_id' in params:
            path_params['product-rate-plan-ID'] = params['product_rate_plan_id']
        if 'taxation_strategy_id' in params:
            path_params['taxation-strategy-ID'] = params['taxation_strategy_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain', 'application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TaxationStrategyPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def retire_rate_plan(self, product_rate_plan_id, **kwargs):
        """
        Retires the product-rate-plan specified product-rate-plan-ID.
        {\"nickname\":\"Delete a rate-plan\",\"response\":\"deletePRP.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.retire_rate_plan(product_rate_plan_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_rate_plan_id:  (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: ProductRatePlanPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.retire_rate_plan_with_http_info(product_rate_plan_id, **kwargs)
        else:
            (data) = self.retire_rate_plan_with_http_info(product_rate_plan_id, **kwargs)
            return data

    def retire_rate_plan_with_http_info(self, product_rate_plan_id, **kwargs):
        """
        Retires the product-rate-plan specified product-rate-plan-ID.
        {\"nickname\":\"Delete a rate-plan\",\"response\":\"deletePRP.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.retire_rate_plan_with_http_info(product_rate_plan_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_rate_plan_id:  (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: ProductRatePlanPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_rate_plan_id', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retire_rate_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_rate_plan_id' is set
        if ('product_rate_plan_id' not in params) or (params['product_rate_plan_id'] is None):
            raise ValueError("Missing the required parameter `product_rate_plan_id` when calling `retire_rate_plan`")

        resource_path = '/product-rate-plans/{product-rate-plan-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'product_rate_plan_id' in params:
            path_params['product-rate-plan-ID'] = params['product_rate_plan_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain', 'application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProductRatePlanPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def set_metadata_for_rate_plan(self, metadata, product_rate_plan_id, **kwargs):
        """
        Remove any existing metadata keys and create the provided data.
        {\"nickname\":\"Set metadata on rate-plan\",\"request\":\"setRatePlanMetadataRequest.html\",\"response\":\"setRatePlanMetadataResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.set_metadata_for_rate_plan(metadata, product_rate_plan_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DynamicMetadata metadata:  (required)
        :param str product_rate_plan_id:  (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: DynamicMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.set_metadata_for_rate_plan_with_http_info(metadata, product_rate_plan_id, **kwargs)
        else:
            (data) = self.set_metadata_for_rate_plan_with_http_info(metadata, product_rate_plan_id, **kwargs)
            return data

    def set_metadata_for_rate_plan_with_http_info(self, metadata, product_rate_plan_id, **kwargs):
        """
        Remove any existing metadata keys and create the provided data.
        {\"nickname\":\"Set metadata on rate-plan\",\"request\":\"setRatePlanMetadataRequest.html\",\"response\":\"setRatePlanMetadataResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.set_metadata_for_rate_plan_with_http_info(metadata, product_rate_plan_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DynamicMetadata metadata:  (required)
        :param str product_rate_plan_id:  (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: DynamicMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['metadata', 'product_rate_plan_id', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_metadata_for_rate_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'metadata' is set
        if ('metadata' not in params) or (params['metadata'] is None):
            raise ValueError("Missing the required parameter `metadata` when calling `set_metadata_for_rate_plan`")
        # verify the required parameter 'product_rate_plan_id' is set
        if ('product_rate_plan_id' not in params) or (params['product_rate_plan_id'] is None):
            raise ValueError("Missing the required parameter `product_rate_plan_id` when calling `set_metadata_for_rate_plan`")

        resource_path = '/product-rate-plans/{product-rate-plan-ID}/metadata'.replace('{format}', 'json')
        path_params = {}
        if 'product_rate_plan_id' in params:
            path_params['product-rate-plan-ID'] = params['product_rate_plan_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'metadata' in params:
            body_params = params['metadata']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DynamicMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_rate_plan(self, product_rate_plan, **kwargs):
        """
        Update a rate-plan.
        {\"nickname\":\"Update a rate-plan\",\"request\":\"updatePRPRequest.html\",\"response\":\"updatePRPResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_rate_plan(product_rate_plan, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ProductRatePlan product_rate_plan: The product-rate-plan object to be updated. (required)
        :return: ProductRatePlanPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_rate_plan_with_http_info(product_rate_plan, **kwargs)
        else:
            (data) = self.update_rate_plan_with_http_info(product_rate_plan, **kwargs)
            return data

    def update_rate_plan_with_http_info(self, product_rate_plan, **kwargs):
        """
        Update a rate-plan.
        {\"nickname\":\"Update a rate-plan\",\"request\":\"updatePRPRequest.html\",\"response\":\"updatePRPResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_rate_plan_with_http_info(product_rate_plan, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ProductRatePlan product_rate_plan: The product-rate-plan object to be updated. (required)
        :return: ProductRatePlanPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_rate_plan']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_rate_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_rate_plan' is set
        if ('product_rate_plan' not in params) or (params['product_rate_plan'] is None):
            raise ValueError("Missing the required parameter `product_rate_plan` when calling `update_rate_plan`")

        resource_path = '/product-rate-plans'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'product_rate_plan' in params:
            body_params = params['product_rate_plan']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProductRatePlanPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def upsert_metadata_for_rate_plan(self, metadata, product_rate_plan_id, **kwargs):
        """
        Update any existing metadata key-values and insert any new key-values, no keys will be removed.
        {\"nickname\":\"Upsert metadata on rate-plan\",\"request\":\"upsertRatePlanMetadataRequest.html\",\"response\":\"upsertRatePlanMetadataResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upsert_metadata_for_rate_plan(metadata, product_rate_plan_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DynamicMetadata metadata:  (required)
        :param str product_rate_plan_id:  (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: DynamicMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.upsert_metadata_for_rate_plan_with_http_info(metadata, product_rate_plan_id, **kwargs)
        else:
            (data) = self.upsert_metadata_for_rate_plan_with_http_info(metadata, product_rate_plan_id, **kwargs)
            return data

    def upsert_metadata_for_rate_plan_with_http_info(self, metadata, product_rate_plan_id, **kwargs):
        """
        Update any existing metadata key-values and insert any new key-values, no keys will be removed.
        {\"nickname\":\"Upsert metadata on rate-plan\",\"request\":\"upsertRatePlanMetadataRequest.html\",\"response\":\"upsertRatePlanMetadataResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upsert_metadata_for_rate_plan_with_http_info(metadata, product_rate_plan_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DynamicMetadata metadata:  (required)
        :param str product_rate_plan_id:  (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: DynamicMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['metadata', 'product_rate_plan_id', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upsert_metadata_for_rate_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'metadata' is set
        if ('metadata' not in params) or (params['metadata'] is None):
            raise ValueError("Missing the required parameter `metadata` when calling `upsert_metadata_for_rate_plan`")
        # verify the required parameter 'product_rate_plan_id' is set
        if ('product_rate_plan_id' not in params) or (params['product_rate_plan_id'] is None):
            raise ValueError("Missing the required parameter `product_rate_plan_id` when calling `upsert_metadata_for_rate_plan`")

        resource_path = '/product-rate-plans/{product-rate-plan-ID}/metadata'.replace('{format}', 'json')
        path_params = {}
        if 'product_rate_plan_id' in params:
            path_params['product-rate-plan-ID'] = params['product_rate_plan_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'metadata' in params:
            body_params = params['metadata']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DynamicMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
