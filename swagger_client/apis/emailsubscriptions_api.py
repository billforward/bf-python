# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class EmailsubscriptionsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_email_subscription(self, request, **kwargs):
        """
        Create an email subscription.
        {\"nickname\":\"Create an email subscription\",\"request\":\"createEmailSubscriptionRequest.html\",\"response\":\"creatEmailSubscriptionResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_email_subscription(request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param BillingEntityBase request: . (required)
        :return: EmailSubscriptionPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_email_subscription_with_http_info(request, **kwargs)
        else:
            (data) = self.create_email_subscription_with_http_info(request, **kwargs)
            return data

    def create_email_subscription_with_http_info(self, request, **kwargs):
        """
        Create an email subscription.
        {\"nickname\":\"Create an email subscription\",\"request\":\"createEmailSubscriptionRequest.html\",\"response\":\"creatEmailSubscriptionResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_email_subscription_with_http_info(request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param BillingEntityBase request: . (required)
        :return: EmailSubscriptionPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_email_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params) or (params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `create_email_subscription`")

        resource_path = '/email-subscriptions'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='EmailSubscriptionPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_email_subscription_by_type(self, type, **kwargs):
        """
        Unsubscribe from the email specified by the type parameter.
        { \"nickname\" : \"Unsubscribe\",\"response\" : \"unsubscribeEmail.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_email_subscription_by_type(type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str type:  (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: EmailSubscriptionPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_email_subscription_by_type_with_http_info(type, **kwargs)
        else:
            (data) = self.delete_email_subscription_by_type_with_http_info(type, **kwargs)
            return data

    def delete_email_subscription_by_type_with_http_info(self, type, **kwargs):
        """
        Unsubscribe from the email specified by the type parameter.
        { \"nickname\" : \"Unsubscribe\",\"response\" : \"unsubscribeEmail.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_email_subscription_by_type_with_http_info(type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str type:  (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: EmailSubscriptionPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_email_subscription_by_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'type' is set
        if ('type' not in params) or (params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_email_subscription_by_type`")

        resource_path = '/email-subscriptions/type&#x3D;{type}'.replace('{format}', 'json')
        path_params = {}
        if 'type' in params:
            path_params['type'] = params['type']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='EmailSubscriptionPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_all_email_subscriptions(self, state, type, **kwargs):
        """
        Returns a collection of all email-subscriptions. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Get all email subscriptions\",\"response\":\"getEmailSubscriptionsAll.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_email_subscriptions(state, type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str state: Constrains search to Email Subscriptions of a specific state. (required)
        :param str type: Constrains search to Email Subscriptions of a specific type (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first email-subscription to return.
        :param int records: The maximum number of email-subscription to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :return: EmailSubscriptionPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_email_subscriptions_with_http_info(state, type, **kwargs)
        else:
            (data) = self.get_all_email_subscriptions_with_http_info(state, type, **kwargs)
            return data

    def get_all_email_subscriptions_with_http_info(self, state, type, **kwargs):
        """
        Returns a collection of all email-subscriptions. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Get all email subscriptions\",\"response\":\"getEmailSubscriptionsAll.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_email_subscriptions_with_http_info(state, type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str state: Constrains search to Email Subscriptions of a specific state. (required)
        :param str type: Constrains search to Email Subscriptions of a specific type (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first email-subscription to return.
        :param int records: The maximum number of email-subscription to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :return: EmailSubscriptionPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['state', 'type', 'organizations', 'offset', 'records', 'order_by', 'order']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_email_subscriptions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'state' is set
        if ('state' not in params) or (params['state'] is None):
            raise ValueError("Missing the required parameter `state` when calling `get_all_email_subscriptions`")
        # verify the required parameter 'type' is set
        if ('type' not in params) or (params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_all_email_subscriptions`")

        resource_path = '/email-subscriptions'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'state' in params:
            query_params['state'] = params['state']
        if 'type' in params:
            query_params['type'] = params['type']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='EmailSubscriptionPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_email_subscription_by_id(self, email_subscription_id, **kwargs):
        """
        Retrieves a single email subscription, specified by ID.
        { \"nickname\" : \"Retrieve by ID\",\"response\" : \"getEmailSubscriptionByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_email_subscription_by_id(email_subscription_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str email_subscription_id:  (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param bool include_retired: Include deleted email-subscriptions
        :return: EmailSubscriptionPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_email_subscription_by_id_with_http_info(email_subscription_id, **kwargs)
        else:
            (data) = self.get_email_subscription_by_id_with_http_info(email_subscription_id, **kwargs)
            return data

    def get_email_subscription_by_id_with_http_info(self, email_subscription_id, **kwargs):
        """
        Retrieves a single email subscription, specified by ID.
        { \"nickname\" : \"Retrieve by ID\",\"response\" : \"getEmailSubscriptionByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_email_subscription_by_id_with_http_info(email_subscription_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str email_subscription_id:  (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param bool include_retired: Include deleted email-subscriptions
        :return: EmailSubscriptionPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email_subscription_id', 'organizations', 'include_retired']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email_subscription_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email_subscription_id' is set
        if ('email_subscription_id' not in params) or (params['email_subscription_id'] is None):
            raise ValueError("Missing the required parameter `email_subscription_id` when calling `get_email_subscription_by_id`")

        resource_path = '/email-subscriptions/{email-subscription-id}'.replace('{format}', 'json')
        path_params = {}
        if 'email_subscription_id' in params:
            path_params['email-subscription-id'] = params['email_subscription_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'include_retired' in params:
            query_params['include_retired'] = params['include_retired']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='EmailSubscriptionPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_email_subscription(self, request, **kwargs):
        """
        Update an email subscription.
        {\"nickname\":\"Update EmailSubscription\",\"request\":\"updateEmailSubscriptionRequest.html\",\"response\":\"updateEmailSubscriptionResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_email_subscription(request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param BillingEntityBase request: . (required)
        :return: EmailSubscriptionPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_email_subscription_with_http_info(request, **kwargs)
        else:
            (data) = self.update_email_subscription_with_http_info(request, **kwargs)
            return data

    def update_email_subscription_with_http_info(self, request, **kwargs):
        """
        Update an email subscription.
        {\"nickname\":\"Update EmailSubscription\",\"request\":\"updateEmailSubscriptionRequest.html\",\"response\":\"updateEmailSubscriptionResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_email_subscription_with_http_info(request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param BillingEntityBase request: . (required)
        :return: EmailSubscriptionPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_email_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params) or (params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `update_email_subscription`")

        resource_path = '/email-subscriptions'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='EmailSubscriptionPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
