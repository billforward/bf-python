# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class PricingcomponentsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_pricing_component(self, pricing_component, **kwargs):
        """
        Create a pricing-component.
        {\"nickname\":\"Create a new pricing-component\",\"request\":\"createPricingComponentRequest.html\",\"response\":\"createPricingComponentResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_pricing_component(pricing_component, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PricingComponent pricing_component: The pricing-component object to be updated. (required)
        :return: PricingComponentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_pricing_component_with_http_info(pricing_component, **kwargs)
        else:
            (data) = self.create_pricing_component_with_http_info(pricing_component, **kwargs)
            return data

    def create_pricing_component_with_http_info(self, pricing_component, **kwargs):
        """
        Create a pricing-component.
        {\"nickname\":\"Create a new pricing-component\",\"request\":\"createPricingComponentRequest.html\",\"response\":\"createPricingComponentResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_pricing_component_with_http_info(pricing_component, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PricingComponent pricing_component: The pricing-component object to be updated. (required)
        :return: PricingComponentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pricing_component']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_pricing_component" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pricing_component' is set
        if ('pricing_component' not in params) or (params['pricing_component'] is None):
            raise ValueError("Missing the required parameter `pricing_component` when calling `create_pricing_component`")

        resource_path = '/pricing-components'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pricing_component' in params:
            body_params = params['pricing_component']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PricingComponentPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_all_pricing_components(self, **kwargs):
        """
        Returns a collection of pricing-components. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Get all pricing-components\",\"response\":\"getPricingComponentsAll.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_pricing_components(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first pricing-component to return.
        :param int records: The maximum number of pricing-components to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired products should be returned.
        :return: PricingComponentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_pricing_components_with_http_info(**kwargs)
        else:
            (data) = self.get_all_pricing_components_with_http_info(**kwargs)
            return data

    def get_all_pricing_components_with_http_info(self, **kwargs):
        """
        Returns a collection of pricing-components. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Get all pricing-components\",\"response\":\"getPricingComponentsAll.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_pricing_components_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first pricing-component to return.
        :param int records: The maximum number of pricing-components to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired products should be returned.
        :return: PricingComponentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'offset', 'records', 'order_by', 'order', 'include_retired']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_pricing_components" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/pricing-components'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'include_retired' in params:
            query_params['include_retired'] = params['include_retired']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PricingComponentPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_pricing_component(self, pricing_component_id, **kwargs):
        """
        Returns a collection of pricing-components, specified by the pricing-component-ID parameter. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Retrieve an existing pricing-component\",\"response\":\"getPricingComponentsByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_pricing_component(pricing_component_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pricing_component_id: The string ID of the pricing-component. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first pricing-component to return.
        :param int records: The maximum number of pricing-components to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired products should be returned.
        :return: PricingComponentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_pricing_component_with_http_info(pricing_component_id, **kwargs)
        else:
            (data) = self.get_pricing_component_with_http_info(pricing_component_id, **kwargs)
            return data

    def get_pricing_component_with_http_info(self, pricing_component_id, **kwargs):
        """
        Returns a collection of pricing-components, specified by the pricing-component-ID parameter. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Retrieve an existing pricing-component\",\"response\":\"getPricingComponentsByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_pricing_component_with_http_info(pricing_component_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pricing_component_id: The string ID of the pricing-component. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first pricing-component to return.
        :param int records: The maximum number of pricing-components to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired products should be returned.
        :return: PricingComponentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pricing_component_id', 'organizations', 'offset', 'records', 'order_by', 'order', 'include_retired']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pricing_component" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pricing_component_id' is set
        if ('pricing_component_id' not in params) or (params['pricing_component_id'] is None):
            raise ValueError("Missing the required parameter `pricing_component_id` when calling `get_pricing_component`")

        resource_path = '/pricing-components/{pricing-component-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'pricing_component_id' in params:
            path_params['pricing-component-ID'] = params['pricing_component_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'include_retired' in params:
            query_params['include_retired'] = params['include_retired']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PricingComponentPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_pricing_component_by_product_rate_plan_id(self, product_rate_plan_id, **kwargs):
        """
        Returns a collection of pricing-components, specified by the product-rate-plan-ID parameter. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Retrieve by rate-plan\",\"response\":\"getPricingComponentsByPRP.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_pricing_component_by_product_rate_plan_id(product_rate_plan_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_rate_plan_id: The string product-rate-plan-ID of the pricing-component. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first pricing-component to return.
        :param int records: The maximum number of pricing-components to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired products should be returned.
        :return: PricingComponentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_pricing_component_by_product_rate_plan_id_with_http_info(product_rate_plan_id, **kwargs)
        else:
            (data) = self.get_pricing_component_by_product_rate_plan_id_with_http_info(product_rate_plan_id, **kwargs)
            return data

    def get_pricing_component_by_product_rate_plan_id_with_http_info(self, product_rate_plan_id, **kwargs):
        """
        Returns a collection of pricing-components, specified by the product-rate-plan-ID parameter. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Retrieve by rate-plan\",\"response\":\"getPricingComponentsByPRP.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_pricing_component_by_product_rate_plan_id_with_http_info(product_rate_plan_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_rate_plan_id: The string product-rate-plan-ID of the pricing-component. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first pricing-component to return.
        :param int records: The maximum number of pricing-components to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired products should be returned.
        :return: PricingComponentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_rate_plan_id', 'organizations', 'offset', 'records', 'order_by', 'order', 'include_retired']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pricing_component_by_product_rate_plan_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_rate_plan_id' is set
        if ('product_rate_plan_id' not in params) or (params['product_rate_plan_id'] is None):
            raise ValueError("Missing the required parameter `product_rate_plan_id` when calling `get_pricing_component_by_product_rate_plan_id`")

        resource_path = '/pricing-components/product-rate-plan/{product-rate-plan-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'product_rate_plan_id' in params:
            path_params['product-rate-plan-ID'] = params['product_rate_plan_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'include_retired' in params:
            query_params['include_retired'] = params['include_retired']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PricingComponentPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def retire_pricing_component(self, pricing_component_id, **kwargs):
        """
        Retires the pricing-component specified by the pricing-component-ID parameter.
        {\"nickname\":\"Delete a pricing-component\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.retire_pricing_component(pricing_component_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pricing_component_id: The string ID of the pricing-component. (required)
        :param list[str] organizations: A list of organization IDs used to restrict the scope of API calls.
        :return: PricingComponentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.retire_pricing_component_with_http_info(pricing_component_id, **kwargs)
        else:
            (data) = self.retire_pricing_component_with_http_info(pricing_component_id, **kwargs)
            return data

    def retire_pricing_component_with_http_info(self, pricing_component_id, **kwargs):
        """
        Retires the pricing-component specified by the pricing-component-ID parameter.
        {\"nickname\":\"Delete a pricing-component\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.retire_pricing_component_with_http_info(pricing_component_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pricing_component_id: The string ID of the pricing-component. (required)
        :param list[str] organizations: A list of organization IDs used to restrict the scope of API calls.
        :return: PricingComponentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pricing_component_id', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retire_pricing_component" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pricing_component_id' is set
        if ('pricing_component_id' not in params) or (params['pricing_component_id'] is None):
            raise ValueError("Missing the required parameter `pricing_component_id` when calling `retire_pricing_component`")

        resource_path = '/pricing-components/{pricing-component-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'pricing_component_id' in params:
            path_params['pricing-component-ID'] = params['pricing_component_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PricingComponentPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_pricing_component(self, pricing_component, **kwargs):
        """
        Update a pricing-component.
        {\"nickname\":\"Update a pricing-component\",\"request\":\"updatePricingComponentRequest.html\",\"response\":\"updatePricingComponentResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_pricing_component(pricing_component, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PricingComponent pricing_component: The pricing-component object to be updated. (required)
        :return: PricingComponentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_pricing_component_with_http_info(pricing_component, **kwargs)
        else:
            (data) = self.update_pricing_component_with_http_info(pricing_component, **kwargs)
            return data

    def update_pricing_component_with_http_info(self, pricing_component, **kwargs):
        """
        Update a pricing-component.
        {\"nickname\":\"Update a pricing-component\",\"request\":\"updatePricingComponentRequest.html\",\"response\":\"updatePricingComponentResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_pricing_component_with_http_info(pricing_component, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PricingComponent pricing_component: The pricing-component object to be updated. (required)
        :return: PricingComponentPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pricing_component']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_pricing_component" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pricing_component' is set
        if ('pricing_component' not in params) or (params['pricing_component'] is None):
            raise ValueError("Missing the required parameter `pricing_component` when calling `update_pricing_component`")

        resource_path = '/pricing-components'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pricing_component' in params:
            body_params = params['pricing_component']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PricingComponentPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
