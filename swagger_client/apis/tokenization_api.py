# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class TokenizationApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def auth_capture(self, auth_capture_request, **kwargs):
        """
        [Note: this API can be invoked more simply by our client-side card capture library, <a href=\"https://github.com/billforward/billforward-js\">BillForward.js</a>; you should not need to interact with this API manually unless you have particularly bespoke requirements] 
        {\"nickname\":\"Authorized card capture\",\"response\":\"BFJSAuthCapture.html\",\"request\":\"BFJSAuthCapture.request.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.auth_capture(auth_capture_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AuthCaptureRequest auth_capture_request: The auth capture request. (required)
        :return: PaymentMethodPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.auth_capture_with_http_info(auth_capture_request, **kwargs)
        else:
            (data) = self.auth_capture_with_http_info(auth_capture_request, **kwargs)
            return data

    def auth_capture_with_http_info(self, auth_capture_request, **kwargs):
        """
        [Note: this API can be invoked more simply by our client-side card capture library, <a href=\"https://github.com/billforward/billforward-js\">BillForward.js</a>; you should not need to interact with this API manually unless you have particularly bespoke requirements] 
        {\"nickname\":\"Authorized card capture\",\"response\":\"BFJSAuthCapture.html\",\"request\":\"BFJSAuthCapture.request.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.auth_capture_with_http_info(auth_capture_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AuthCaptureRequest auth_capture_request: The auth capture request. (required)
        :return: PaymentMethodPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_capture_request']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_capture" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auth_capture_request' is set
        if ('auth_capture_request' not in params) or (params['auth_capture_request'] is None):
            raise ValueError("Missing the required parameter `auth_capture_request` when calling `auth_capture`")

        resource_path = '/tokenization/auth-capture'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'auth_capture_request' in params:
            body_params = params['auth_capture_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PaymentMethodPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def braintree_card_capture(self, **kwargs):
        """
        [Warning: for use only in PCI-compliant environments; for more information, <a href=\"mailto:support@billforward.net\">contact us</a> regarding provisioning of your own on-premise BillForward instance] Captures raw credit card details into Braintree's vault.
        {\"nickname\":\"Braintree Tokenization\",\"response\":\"braintreeDirectTokenization.html\",\"request\":\"braintreeDirectTokenization.request.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.braintree_card_capture(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param BraintreeCaptureRequest body: 
        :return: PaymentMethodPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.braintree_card_capture_with_http_info(**kwargs)
        else:
            (data) = self.braintree_card_capture_with_http_info(**kwargs)
            return data

    def braintree_card_capture_with_http_info(self, **kwargs):
        """
        [Warning: for use only in PCI-compliant environments; for more information, <a href=\"mailto:support@billforward.net\">contact us</a> regarding provisioning of your own on-premise BillForward instance] Captures raw credit card details into Braintree's vault.
        {\"nickname\":\"Braintree Tokenization\",\"response\":\"braintreeDirectTokenization.html\",\"request\":\"braintreeDirectTokenization.request.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.braintree_card_capture_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param BraintreeCaptureRequest body: 
        :return: PaymentMethodPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method braintree_card_capture" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/tokenization/braintree'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PaymentMethodPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def pay_vision_shout_v1(self, **kwargs):
        """
        [Note: this API is intended to be invoked by the PayVision servers -- they are BillForward's way of informing client-side of the result of card-capture from within an iframe] Generates iframe to which customer will be directed upon success or failure. The iframe contains JavaScript which attempts to send a message to BillForward.js on the client-side, which will handle the result.
        {\"nickname\":\"Generate PayVision iframe redirect\",\"response\":\"payVisionShoutV1.html\",\"request\":\"payVisionShoutV1.request.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.pay_vision_shout_v1(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str _resource_path: 
        :param str id: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.pay_vision_shout_v1_with_http_info(**kwargs)
        else:
            (data) = self.pay_vision_shout_v1_with_http_info(**kwargs)
            return data

    def pay_vision_shout_v1_with_http_info(self, **kwargs):
        """
        [Note: this API is intended to be invoked by the PayVision servers -- they are BillForward's way of informing client-side of the result of card-capture from within an iframe] Generates iframe to which customer will be directed upon success or failure. The iframe contains JavaScript which attempts to send a message to BillForward.js on the client-side, which will handle the result.
        {\"nickname\":\"Generate PayVision iframe redirect\",\"response\":\"payVisionShoutV1.html\",\"request\":\"payVisionShoutV1.request.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.pay_vision_shout_v1_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str _resource_path: 
        :param str id: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_resource_path', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pay_vision_shout_v1" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/tokenization/payvision-shout-v1'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if '_resource_path' in params:
            form_params.append(('resourcePath', params['_resource_path']))
        if 'id' in params:
            form_params.append(('id', params['id']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/html'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def pre_auth(self, pre_auth_request, **kwargs):
        """
        [Note: this API can be invoked more simply by our client-side card capture library, <a href=\"https://github.com/billforward/billforward-js\">BillForward.js</a>; you should not need to interact with this API manually unless you have particularly bespoke requirements] 
        {\"nickname\":\"Pre-authorize card capture\",\"response\":\"BFJSPreAuth.html\",\"request\":\"BFJSPreAuth.request.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.pre_auth(pre_auth_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param InsertableBillingEntity pre_auth_request: The auth request. (required)
        :return: TokenizationPreAuthPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.pre_auth_with_http_info(pre_auth_request, **kwargs)
        else:
            (data) = self.pre_auth_with_http_info(pre_auth_request, **kwargs)
            return data

    def pre_auth_with_http_info(self, pre_auth_request, **kwargs):
        """
        [Note: this API can be invoked more simply by our client-side card capture library, <a href=\"https://github.com/billforward/billforward-js\">BillForward.js</a>; you should not need to interact with this API manually unless you have particularly bespoke requirements] 
        {\"nickname\":\"Pre-authorize card capture\",\"response\":\"BFJSPreAuth.html\",\"request\":\"BFJSPreAuth.request.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.pre_auth_with_http_info(pre_auth_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param InsertableBillingEntity pre_auth_request: The auth request. (required)
        :return: TokenizationPreAuthPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pre_auth_request']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pre_auth" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pre_auth_request' is set
        if ('pre_auth_request' not in params) or (params['pre_auth_request'] is None):
            raise ValueError("Missing the required parameter `pre_auth_request` when calling `pre_auth`")

        resource_path = '/tokenization/pre-auth'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pre_auth_request' in params:
            body_params = params['pre_auth_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TokenizationPreAuthPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def sage_pay_notify_v300(self, **kwargs):
        """
        [Note: this API is intended to be invoked by the SagePay servers -- they are BillForward's way of receiving a callback from a SagePay card capture operation, using SagePay's FORM Protocol, v3.0] Handles SagePay Notification.
        {\"nickname\":\"Handle SagePay Notification\",\"response\":\"sagePayNotifyV3_00.html\",\"request\":\"sagePayNotifyV3_00.request.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.sage_pay_notify_v300(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.Multiple organization-IDs may be specified by repeated use of the queryparameter. Example: ...&organizations=org1&organizations=org2
        :param str bill_forward_url_root: The URL through which BFJS connected to BillForward.
        :param str access_token: The public token through which BFJS connected to BillForward.
        :param str vps_protocol: 
        :param str tx_type: 
        :param str vendor_tx_code: 
        :param str status: 
        :param str vps_tx_id: 
        :param str card_type: 
        :param str token: 
        :param str status_detail: 
        :param str last4_digits: 
        :param str vps_signature: 
        :param str expiry_date: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.sage_pay_notify_v300_with_http_info(**kwargs)
        else:
            (data) = self.sage_pay_notify_v300_with_http_info(**kwargs)
            return data

    def sage_pay_notify_v300_with_http_info(self, **kwargs):
        """
        [Note: this API is intended to be invoked by the SagePay servers -- they are BillForward's way of receiving a callback from a SagePay card capture operation, using SagePay's FORM Protocol, v3.0] Handles SagePay Notification.
        {\"nickname\":\"Handle SagePay Notification\",\"response\":\"sagePayNotifyV3_00.html\",\"request\":\"sagePayNotifyV3_00.request.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.sage_pay_notify_v300_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.Multiple organization-IDs may be specified by repeated use of the queryparameter. Example: ...&organizations=org1&organizations=org2
        :param str bill_forward_url_root: The URL through which BFJS connected to BillForward.
        :param str access_token: The public token through which BFJS connected to BillForward.
        :param str vps_protocol: 
        :param str tx_type: 
        :param str vendor_tx_code: 
        :param str status: 
        :param str vps_tx_id: 
        :param str card_type: 
        :param str token: 
        :param str status_detail: 
        :param str last4_digits: 
        :param str vps_signature: 
        :param str expiry_date: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'bill_forward_url_root', 'access_token', 'vps_protocol', 'tx_type', 'vendor_tx_code', 'status', 'vps_tx_id', 'card_type', 'token', 'status_detail', 'last4_digits', 'vps_signature', 'expiry_date']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sage_pay_notify_v300" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/tokenization/sagepay-notify-v3-00'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'bill_forward_url_root' in params:
            query_params['billForwardURLRoot'] = params['bill_forward_url_root']
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'vps_protocol' in params:
            form_params.append(('VPSProtocol', params['vps_protocol']))
        if 'tx_type' in params:
            form_params.append(('TxType', params['tx_type']))
        if 'vendor_tx_code' in params:
            form_params.append(('VendorTxCode', params['vendor_tx_code']))
        if 'status' in params:
            form_params.append(('Status', params['status']))
        if 'vps_tx_id' in params:
            form_params.append(('VPSTxId', params['vps_tx_id']))
        if 'card_type' in params:
            form_params.append(('CardType', params['card_type']))
        if 'token' in params:
            form_params.append(('Token', params['token']))
        if 'status_detail' in params:
            form_params.append(('StatusDetail', params['status_detail']))
        if 'last4_digits' in params:
            form_params.append(('Last4Digits', params['last4_digits']))
        if 'vps_signature' in params:
            form_params.append(('VPSSignature', params['vps_signature']))
        if 'expiry_date' in params:
            form_params.append(('ExpiryDate', params['expiry_date']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/plain'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def sage_pay_shout_v300(self, **kwargs):
        """
        [Note: this API is intended to be invoked by the SagePay servers -- they are BillForward's way of informing client-side of the result of card-capture from within an iframe, using SagePay's FORM Protocol, v3.0] Generates iframe to which customer will be directed upon success or failure. The iframe contains JavaScript which attempts to send a message to BillForward.js on the client-side, which will handle the result.
        {\"nickname\":\"Generate SagePay iframe redirect\",\"response\":\"sagePayShoutV3_00.html\",\"request\":\"sagePayShoutV3_00.request.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.sage_pay_shout_v300(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.Multiple organization-IDs may be specified by repeated use of the queryparameter. Example: ...&organizations=org1&organizations=org2
        :param str s: 
        :param str t: 
        :param str c: 
        :param str e: 
        :param str l: 
        :param str d: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.sage_pay_shout_v300_with_http_info(**kwargs)
        else:
            (data) = self.sage_pay_shout_v300_with_http_info(**kwargs)
            return data

    def sage_pay_shout_v300_with_http_info(self, **kwargs):
        """
        [Note: this API is intended to be invoked by the SagePay servers -- they are BillForward's way of informing client-side of the result of card-capture from within an iframe, using SagePay's FORM Protocol, v3.0] Generates iframe to which customer will be directed upon success or failure. The iframe contains JavaScript which attempts to send a message to BillForward.js on the client-side, which will handle the result.
        {\"nickname\":\"Generate SagePay iframe redirect\",\"response\":\"sagePayShoutV3_00.html\",\"request\":\"sagePayShoutV3_00.request.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.sage_pay_shout_v300_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.Multiple organization-IDs may be specified by repeated use of the queryparameter. Example: ...&organizations=org1&organizations=org2
        :param str s: 
        :param str t: 
        :param str c: 
        :param str e: 
        :param str l: 
        :param str d: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 's', 't', 'c', 'e', 'l', 'd']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sage_pay_shout_v300" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/tokenization/sagepay-shout-v3-00'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 's' in params:
            query_params['s'] = params['s']
        if 't' in params:
            query_params['t'] = params['t']
        if 'c' in params:
            query_params['c'] = params['c']
        if 'e' in params:
            query_params['e'] = params['e']
        if 'l' in params:
            query_params['l'] = params['l']
        if 'd' in params:
            query_params['d'] = params['d']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/html'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
