# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ProductsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_product(self, product, **kwargs):
        """
        Create a product.
        {\"nickname\":\"Create a new product\",\"request\":\"createProductRequest.html\",\"response\":\"createProductResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_product(product, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Product product: The product object to be updated. (required)
        :return: ProductPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_product_with_http_info(product, **kwargs)
        else:
            (data) = self.create_product_with_http_info(product, **kwargs)
            return data

    def create_product_with_http_info(self, product, **kwargs):
        """
        Create a product.
        {\"nickname\":\"Create a new product\",\"request\":\"createProductRequest.html\",\"response\":\"createProductResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_product_with_http_info(product, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Product product: The product object to be updated. (required)
        :return: ProductPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product' is set
        if ('product' not in params) or (params['product'] is None):
            raise ValueError("Missing the required parameter `product` when calling `create_product`")

        resource_path = '/products'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'product' in params:
            body_params = params['product']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProductPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_metadata_for_product(self, product_id, **kwargs):
        """
        Remove any associated metadata.
        {\"nickname\":\"Clear metadata from product\",\"request\" :\"deleteProductMetadataRequest.html\",\"response\":\"deleteProductMetadataResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_metadata_for_product(product_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_id:  (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: DynamicMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_metadata_for_product_with_http_info(product_id, **kwargs)
        else:
            (data) = self.delete_metadata_for_product_with_http_info(product_id, **kwargs)
            return data

    def delete_metadata_for_product_with_http_info(self, product_id, **kwargs):
        """
        Remove any associated metadata.
        {\"nickname\":\"Clear metadata from product\",\"request\" :\"deleteProductMetadataRequest.html\",\"response\":\"deleteProductMetadataResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_metadata_for_product_with_http_info(product_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_id:  (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: DynamicMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_metadata_for_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params) or (params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `delete_metadata_for_product`")

        resource_path = '/products/{product-ID}/metadata'.replace('{format}', 'json')
        path_params = {}
        if 'product_id' in params:
            path_params['product-ID'] = params['product_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain', 'application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DynamicMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_all_products(self, **kwargs):
        """
        Returns a collection of products. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Get all products\",\"response\":\"getProductAll.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_products(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first product to return.
        :param int records: The maximum number of products to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired products should be returned.
        :param str metadata: 
        :return: ProductPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_products_with_http_info(**kwargs)
        else:
            (data) = self.get_all_products_with_http_info(**kwargs)
            return data

    def get_all_products_with_http_info(self, **kwargs):
        """
        Returns a collection of products. By default 10 values are returned. Records are returned in natural order.
        {\"nickname\":\"Get all products\",\"response\":\"getProductAll.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_products_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first product to return.
        :param int records: The maximum number of products to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired products should be returned.
        :param str metadata: 
        :return: ProductPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'offset', 'records', 'order_by', 'order', 'include_retired', 'metadata']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_products" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/products'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'include_retired' in params:
            query_params['include_retired'] = params['include_retired']
        if 'metadata' in params:
            query_params['metadata'] = params['metadata']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/plain'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProductPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_metadata_for_product(self, product_id, **kwargs):
        """
        Retrieve any associated metadata.
        {\"nickname\":\"Retrieve metadata on product\",\"request\":\"getProductMetadataRequest.html\",\"response\":\"getProductMetadataResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_metadata_for_product(product_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_id:  (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: DynamicMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_metadata_for_product_with_http_info(product_id, **kwargs)
        else:
            (data) = self.get_metadata_for_product_with_http_info(product_id, **kwargs)
            return data

    def get_metadata_for_product_with_http_info(self, product_id, **kwargs):
        """
        Retrieve any associated metadata.
        {\"nickname\":\"Retrieve metadata on product\",\"request\":\"getProductMetadataRequest.html\",\"response\":\"getProductMetadataResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_metadata_for_product_with_http_info(product_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_id:  (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: DynamicMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metadata_for_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params) or (params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `get_metadata_for_product`")

        resource_path = '/products/{product-ID}/metadata'.replace('{format}', 'json')
        path_params = {}
        if 'product_id' in params:
            path_params['product-ID'] = params['product_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DynamicMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_product_by_id(self, product_id, **kwargs):
        """
        Returns a single product, specified by the product-ID parameter.
        {\"nickname\":\"Retrieve an existing product\",\"response\":\"getProductByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_product_by_id(product_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_id: ID or name of the product. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first product-rate-plan to return.
        :param int records: The maximum number of product-rate-plans to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired products should be returned.
        :return: ProductPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_product_by_id_with_http_info(product_id, **kwargs)
        else:
            (data) = self.get_product_by_id_with_http_info(product_id, **kwargs)
            return data

    def get_product_by_id_with_http_info(self, product_id, **kwargs):
        """
        Returns a single product, specified by the product-ID parameter.
        {\"nickname\":\"Retrieve an existing product\",\"response\":\"getProductByID.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_product_by_id_with_http_info(product_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_id: ID or name of the product. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first product-rate-plan to return.
        :param int records: The maximum number of product-rate-plans to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired products should be returned.
        :return: ProductPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'organizations', 'offset', 'records', 'order_by', 'order', 'include_retired']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_product_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params) or (params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `get_product_by_id`")

        resource_path = '/products/{product-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'product_id' in params:
            path_params['product-ID'] = params['product_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'include_retired' in params:
            query_params['include_retired'] = params['include_retired']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain', 'application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProductPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def retire_product(self, product_id, **kwargs):
        """
        Deletes the product specified by the product-ID parameter. Any existing subscriptions will continue; it is a soft delete.
        {\"nickname\":\"Delete a product\",\"response\":\"deleteProduct.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.retire_product(product_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_id: ID of the Product. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: ProductPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.retire_product_with_http_info(product_id, **kwargs)
        else:
            (data) = self.retire_product_with_http_info(product_id, **kwargs)
            return data

    def retire_product_with_http_info(self, product_id, **kwargs):
        """
        Deletes the product specified by the product-ID parameter. Any existing subscriptions will continue; it is a soft delete.
        {\"nickname\":\"Delete a product\",\"response\":\"deleteProduct.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.retire_product_with_http_info(product_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_id: ID of the Product. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: ProductPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retire_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params) or (params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `retire_product`")

        resource_path = '/products/{product-ID}'.replace('{format}', 'json')
        path_params = {}
        if 'product_id' in params:
            path_params['product-ID'] = params['product_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain', 'application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProductPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def set_metadata_for_product(self, metadata, product_id, **kwargs):
        """
        Remove any existing metadata keys and create the provided data.
        {\"nickname\":\"Set metadata on product\",\"request\":\"setProductMetadataRequest.html\",\"response\":\"setProductMetadataResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.set_metadata_for_product(metadata, product_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DynamicMetadata metadata:  (required)
        :param str product_id:  (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: DynamicMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.set_metadata_for_product_with_http_info(metadata, product_id, **kwargs)
        else:
            (data) = self.set_metadata_for_product_with_http_info(metadata, product_id, **kwargs)
            return data

    def set_metadata_for_product_with_http_info(self, metadata, product_id, **kwargs):
        """
        Remove any existing metadata keys and create the provided data.
        {\"nickname\":\"Set metadata on product\",\"request\":\"setProductMetadataRequest.html\",\"response\":\"setProductMetadataResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.set_metadata_for_product_with_http_info(metadata, product_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DynamicMetadata metadata:  (required)
        :param str product_id:  (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: DynamicMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['metadata', 'product_id', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_metadata_for_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'metadata' is set
        if ('metadata' not in params) or (params['metadata'] is None):
            raise ValueError("Missing the required parameter `metadata` when calling `set_metadata_for_product`")
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params) or (params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `set_metadata_for_product`")

        resource_path = '/products/{product-ID}/metadata'.replace('{format}', 'json')
        path_params = {}
        if 'product_id' in params:
            path_params['product-ID'] = params['product_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'metadata' in params:
            body_params = params['metadata']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DynamicMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_product(self, product, **kwargs):
        """
        Update a product.
        {\"nickname\":\"Update a product\",\"request\":\"updateProductRequest.html\",\"response\":\"updateProductResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_product(product, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Product product: The product object to be updated. (required)
        :return: ProductPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_product_with_http_info(product, **kwargs)
        else:
            (data) = self.update_product_with_http_info(product, **kwargs)
            return data

    def update_product_with_http_info(self, product, **kwargs):
        """
        Update a product.
        {\"nickname\":\"Update a product\",\"request\":\"updateProductRequest.html\",\"response\":\"updateProductResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_product_with_http_info(product, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Product product: The product object to be updated. (required)
        :return: ProductPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product' is set
        if ('product' not in params) or (params['product'] is None):
            raise ValueError("Missing the required parameter `product` when calling `update_product`")

        resource_path = '/products'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'product' in params:
            body_params = params['product']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/xml', 'application/xml', 'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProductPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def upsert_metadata_for_product(self, metadata, product_id, **kwargs):
        """
        Update any existing metadata key-values and insert any new key-values, no keys will be removed.
        {\"nickname\":\"Upsert metadata on product\",\"request\":\"upsertProductMetadataRequest.html\",\"response\":\"upsertProductMetadataResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upsert_metadata_for_product(metadata, product_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DynamicMetadata metadata:  (required)
        :param str product_id:  (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: DynamicMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.upsert_metadata_for_product_with_http_info(metadata, product_id, **kwargs)
        else:
            (data) = self.upsert_metadata_for_product_with_http_info(metadata, product_id, **kwargs)
            return data

    def upsert_metadata_for_product_with_http_info(self, metadata, product_id, **kwargs):
        """
        Update any existing metadata key-values and insert any new key-values, no keys will be removed.
        {\"nickname\":\"Upsert metadata on product\",\"request\":\"upsertProductMetadataRequest.html\",\"response\":\"upsertProductMetadataResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upsert_metadata_for_product_with_http_info(metadata, product_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DynamicMetadata metadata:  (required)
        :param str product_id:  (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: DynamicMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['metadata', 'product_id', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upsert_metadata_for_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'metadata' is set
        if ('metadata' not in params) or (params['metadata'] is None):
            raise ValueError("Missing the required parameter `metadata` when calling `upsert_metadata_for_product`")
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params) or (params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `upsert_metadata_for_product`")

        resource_path = '/products/{product-ID}/metadata'.replace('{format}', 'json')
        path_params = {}
        if 'product_id' in params:
            path_params['product-ID'] = params['product_id']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'metadata' in params:
            body_params = params['metadata']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DynamicMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
