# coding: utf-8

"""
    BillForward REST API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CouponsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_coupon(self, code, **kwargs):
        """
        Create a coupon.
        {\"nickname\":\"Create a new coupon\",\"request\":\"createCouponRequest.html\",\"response\":\"createCouponResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_coupon(code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Coupon code: The coupon object to be created. (required)
        :return: CouponPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_coupon_with_http_info(code, **kwargs)
        else:
            (data) = self.create_coupon_with_http_info(code, **kwargs)
            return data

    def create_coupon_with_http_info(self, code, **kwargs):
        """
        Create a coupon.
        {\"nickname\":\"Create a new coupon\",\"request\":\"createCouponRequest.html\",\"response\":\"createCouponResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_coupon_with_http_info(code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Coupon code: The coupon object to be created. (required)
        :return: CouponPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_coupon" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'code' is set
        if ('code' not in params) or (params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `create_coupon`")

        resource_path = '/coupons'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'code' in params:
            body_params = params['code']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CouponPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def create_coupon_unique_codes(self, code, **kwargs):
        """
        Create a list of unique coupon codes that can be applied to a subscription.
        { \"nickname\":\"Create unique coupon codes\",\"request\":\"createUniqueCodesRequest.html\",\"response\":\"createUniqueCodesResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_coupon_unique_codes(code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str code: The coupon code to use in the generation of the unique codes. (required)
        :param CouponUniqueCodesRequest request: The request object that specifies the number of codes to be created.
        :return: CouponUniqueCodesResponsePagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_coupon_unique_codes_with_http_info(code, **kwargs)
        else:
            (data) = self.create_coupon_unique_codes_with_http_info(code, **kwargs)
            return data

    def create_coupon_unique_codes_with_http_info(self, code, **kwargs):
        """
        Create a list of unique coupon codes that can be applied to a subscription.
        { \"nickname\":\"Create unique coupon codes\",\"request\":\"createUniqueCodesRequest.html\",\"response\":\"createUniqueCodesResponse.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_coupon_unique_codes_with_http_info(code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str code: The coupon code to use in the generation of the unique codes. (required)
        :param CouponUniqueCodesRequest request: The request object that specifies the number of codes to be created.
        :return: CouponUniqueCodesResponsePagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code', 'request']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_coupon_unique_codes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'code' is set
        if ('code' not in params) or (params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `create_coupon_unique_codes`")

        resource_path = '/coupons/{code}/codes'.replace('{format}', 'json')
        path_params = {}
        if 'code' in params:
            path_params['code'] = params['code']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CouponUniqueCodesResponsePagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_all_coupons(self, **kwargs):
        """
        Returns a collection of all coupons. By default 10 values are returned. Records are returned in natural order.
        { \"nickname\":\"Retrieve all coupons\",\"response\":\"getCouponAll.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_coupons(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first subscription to return.
        :param int records: The maximum number of subscriptions to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired subscriptions should be returned.
        :return: CouponPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_coupons_with_http_info(**kwargs)
        else:
            (data) = self.get_all_coupons_with_http_info(**kwargs)
            return data

    def get_all_coupons_with_http_info(self, **kwargs):
        """
        Returns a collection of all coupons. By default 10 values are returned. Records are returned in natural order.
        { \"nickname\":\"Retrieve all coupons\",\"response\":\"getCouponAll.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_coupons_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first subscription to return.
        :param int records: The maximum number of subscriptions to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired subscriptions should be returned.
        :return: CouponPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizations', 'offset', 'records', 'order_by', 'order', 'include_retired']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_coupons" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/coupons'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'include_retired' in params:
            query_params['include_retired'] = params['include_retired']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CouponPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_applied_coupons(self, code, **kwargs):
        """
        Returns a list of unique coupons which have been applied.
        { \"nickname\":\"Retrieve used unique coupons\",\"response\":\"getAppliedCodesForCode.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_applied_coupons(code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str code: The base code to use in the generation of the unique codes. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first subscription to return.
        :param int records: The maximum number of subscriptions to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired subscriptions should be returned.
        :return: CouponPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_applied_coupons_with_http_info(code, **kwargs)
        else:
            (data) = self.get_applied_coupons_with_http_info(code, **kwargs)
            return data

    def get_applied_coupons_with_http_info(self, code, **kwargs):
        """
        Returns a list of unique coupons which have been applied.
        { \"nickname\":\"Retrieve used unique coupons\",\"response\":\"getAppliedCodesForCode.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_applied_coupons_with_http_info(code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str code: The base code to use in the generation of the unique codes. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first subscription to return.
        :param int records: The maximum number of subscriptions to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired subscriptions should be returned.
        :return: CouponPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code', 'organizations', 'offset', 'records', 'order_by', 'order', 'include_retired']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_applied_coupons" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'code' is set
        if ('code' not in params) or (params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `get_applied_coupons`")

        resource_path = '/coupons/{code}/applied'.replace('{format}', 'json')
        path_params = {}
        if 'code' in params:
            path_params['code'] = params['code']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'include_retired' in params:
            query_params['include_retired'] = params['include_retired']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CouponPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_available_coupon_codes_for_code(self, code, **kwargs):
        """
        Returns a list of available unique coupon codes for the specified parent coupon code that can be applied to a subscription.
        { \"nickname\":\"Retrieve unused unique coupons\",\"response\":\"getAvailableCodesForCode.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_available_coupon_codes_for_code(code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str code: The base code to use in the generation of the unique codes. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first subscription to return.
        :param int records: The maximum number of subscriptions to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired subscriptions should be returned.
        :return: CouponUniqueCodesResponsePagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_available_coupon_codes_for_code_with_http_info(code, **kwargs)
        else:
            (data) = self.get_available_coupon_codes_for_code_with_http_info(code, **kwargs)
            return data

    def get_available_coupon_codes_for_code_with_http_info(self, code, **kwargs):
        """
        Returns a list of available unique coupon codes for the specified parent coupon code that can be applied to a subscription.
        { \"nickname\":\"Retrieve unused unique coupons\",\"response\":\"getAvailableCodesForCode.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_available_coupon_codes_for_code_with_http_info(code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str code: The base code to use in the generation of the unique codes. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first subscription to return.
        :param int records: The maximum number of subscriptions to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired subscriptions should be returned.
        :return: CouponUniqueCodesResponsePagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code', 'organizations', 'offset', 'records', 'order_by', 'order', 'include_retired']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_available_coupon_codes_for_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'code' is set
        if ('code' not in params) or (params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `get_available_coupon_codes_for_code`")

        resource_path = '/coupons/{code}/codes'.replace('{format}', 'json')
        path_params = {}
        if 'code' in params:
            path_params['code'] = params['code']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'include_retired' in params:
            query_params['include_retired'] = params['include_retired']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CouponUniqueCodesResponsePagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_coupon_code(self, code, **kwargs):
        """
        Returns the coupon for the specified code that can be applied to a subscription.
        { \"nickname\":\"Retrieve coupon\",\"response\":\"getCouponByCode.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_coupon_code(code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str code: The parent coupon code to use in the generation of the unique codes. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: CouponUniqueCodesResponsePagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_coupon_code_with_http_info(code, **kwargs)
        else:
            (data) = self.get_coupon_code_with_http_info(code, **kwargs)
            return data

    def get_coupon_code_with_http_info(self, code, **kwargs):
        """
        Returns the coupon for the specified code that can be applied to a subscription.
        { \"nickname\":\"Retrieve coupon\",\"response\":\"getCouponByCode.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_coupon_code_with_http_info(code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str code: The parent coupon code to use in the generation of the unique codes. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :return: CouponUniqueCodesResponsePagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_coupon_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'code' is set
        if ('code' not in params) or (params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `get_coupon_code`")

        resource_path = '/coupons/{code}'.replace('{format}', 'json')
        path_params = {}
        if 'code' in params:
            path_params['code'] = params['code']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CouponUniqueCodesResponsePagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_subscription_applications_of_coupons(self, code, **kwargs):
        """
        Retrieves a collection of the coupons by this coupon code which have been applied.
        { \"nickname\":\"Retrieve subscriptions to which the given coupon code has been applied.\",\"response\":\"getSubscriptionApplications.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_subscription_applications_of_coupons(code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str code: Base code of the coupon. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first subscription to return.
        :param int records: The maximum number of subscriptions to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired subscriptions should be returned.
        :return: SubscriptionPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_subscription_applications_of_coupons_with_http_info(code, **kwargs)
        else:
            (data) = self.get_subscription_applications_of_coupons_with_http_info(code, **kwargs)
            return data

    def get_subscription_applications_of_coupons_with_http_info(self, code, **kwargs):
        """
        Retrieves a collection of the coupons by this coupon code which have been applied.
        { \"nickname\":\"Retrieve subscriptions to which the given coupon code has been applied.\",\"response\":\"getSubscriptionApplications.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_subscription_applications_of_coupons_with_http_info(code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str code: Base code of the coupon. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls.
        :param int offset: The offset from the first subscription to return.
        :param int records: The maximum number of subscriptions to return.
        :param str order_by: Specify a field used to order the result set.
        :param str order: Ihe direction of any ordering, either ASC or DESC.
        :param bool include_retired: Whether retired subscriptions should be returned.
        :return: SubscriptionPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code', 'organizations', 'offset', 'records', 'order_by', 'order', 'include_retired']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subscription_applications_of_coupons" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'code' is set
        if ('code' not in params) or (params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `get_subscription_applications_of_coupons`")

        resource_path = '/coupons/{code}/subscriptions'.replace('{format}', 'json')
        path_params = {}
        if 'code' in params:
            path_params['code'] = params['code']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'records' in params:
            query_params['records'] = params['records']
        if 'order_by' in params:
            query_params['order_by'] = params['order_by']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'include_retired' in params:
            query_params['include_retired'] = params['include_retired']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SubscriptionPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def retire_coupon(self, code, organizations, **kwargs):
        """
        <p>This method has 2 main behaviours depending on what is passed in. If the parent coupon code, for example SUMMER, is given no new coupons can be issued or claimed from this code. Deleting will result in the deleted property being set to true.</p><p>If a unique coupon code, for example SUMMER-AGH8, is given this will stop the coupon from being applied to the subscription from that point onwards. When a coupon is deleted the validUntil property is set which is the date/time it stopped applying to the target.</p>
        { \"nickname\":\"Retire coupon\",\"response\":\"retireCoupon.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.retire_coupon(code, organizations, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str code: ID of the coupon to remove. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls. (required)
        :return: CouponPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.retire_coupon_with_http_info(code, organizations, **kwargs)
        else:
            (data) = self.retire_coupon_with_http_info(code, organizations, **kwargs)
            return data

    def retire_coupon_with_http_info(self, code, organizations, **kwargs):
        """
        <p>This method has 2 main behaviours depending on what is passed in. If the parent coupon code, for example SUMMER, is given no new coupons can be issued or claimed from this code. Deleting will result in the deleted property being set to true.</p><p>If a unique coupon code, for example SUMMER-AGH8, is given this will stop the coupon from being applied to the subscription from that point onwards. When a coupon is deleted the validUntil property is set which is the date/time it stopped applying to the target.</p>
        { \"nickname\":\"Retire coupon\",\"response\":\"retireCoupon.html\"}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.retire_coupon_with_http_info(code, organizations, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str code: ID of the coupon to remove. (required)
        :param list[str] organizations: A list of organization-IDs used to restrict the scope of API calls. (required)
        :return: CouponPagedMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code', 'organizations']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retire_coupon" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'code' is set
        if ('code' not in params) or (params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `retire_coupon`")
        # verify the required parameter 'organizations' is set
        if ('organizations' not in params) or (params['organizations'] is None):
            raise ValueError("Missing the required parameter `organizations` when calling `retire_coupon`")

        resource_path = '/coupons/{code}'.replace('{format}', 'json')
        path_params = {}
        if 'code' in params:
            path_params['code'] = params['code']

        query_params = {}
        if 'organizations' in params:
            query_params['organizations'] = params['organizations']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CouponPagedMetadata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
